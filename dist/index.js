import { createRequire } from "node:module";
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __require = /* @__PURE__ */ createRequire(import.meta.url);

// node_modules/fastify-plugin/lib/getPluginName.js
var require_getPluginName = __commonJS((exports, module) => {
  var fpStackTracePattern = /at\s{1}(?:.*\.)?plugin\s{1}.*\n\s*(.*)/;
  var fileNamePattern = /(\w*(\.\w*)*)\..*/;
  module.exports = function getPluginName(fn) {
    if (fn.name.length > 0)
      return fn.name;
    const stackTraceLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = 10;
    try {
      throw new Error("anonymous function");
    } catch (e) {
      Error.stackTraceLimit = stackTraceLimit;
      return extractPluginName(e.stack);
    }
  };
  function extractPluginName(stack) {
    const m = stack.match(fpStackTracePattern);
    return m ? m[1].split(/[/\\]/).slice(-1)[0].match(fileNamePattern)[1] : "anonymous";
  }
  module.exports.extractPluginName = extractPluginName;
});

// node_modules/fastify-plugin/lib/toCamelCase.js
var require_toCamelCase = __commonJS((exports, module) => {
  module.exports = function toCamelCase(name) {
    if (name[0] === "@") {
      name = name.slice(1).replace("/", "-");
    }
    return name.replace(/-(.)/g, function(match, g1) {
      return g1.toUpperCase();
    });
  };
});

// node_modules/fastify-plugin/plugin.js
var require_plugin = __commonJS((exports, module) => {
  var getPluginName = require_getPluginName();
  var toCamelCase = require_toCamelCase();
  var count = 0;
  function plugin(fn, options = {}) {
    let autoName = false;
    if (fn.default !== undefined) {
      fn = fn.default;
    }
    if (typeof fn !== "function") {
      throw new TypeError(`fastify-plugin expects a function, instead got a '${typeof fn}'`);
    }
    if (typeof options === "string") {
      options = {
        fastify: options
      };
    }
    if (typeof options !== "object" || Array.isArray(options) || options === null) {
      throw new TypeError("The options object should be an object");
    }
    if (options.fastify !== undefined && typeof options.fastify !== "string") {
      throw new TypeError(`fastify-plugin expects a version string, instead got '${typeof options.fastify}'`);
    }
    if (!options.name) {
      autoName = true;
      options.name = getPluginName(fn) + "-auto-" + count++;
    }
    fn[Symbol.for("skip-override")] = options.encapsulate !== true;
    fn[Symbol.for("fastify.display-name")] = options.name;
    fn[Symbol.for("plugin-meta")] = options;
    if (!fn.default) {
      fn.default = fn;
    }
    const camelCase = toCamelCase(options.name);
    if (!autoName && !fn[camelCase]) {
      fn[camelCase] = fn;
    }
    return fn;
  }
  module.exports = plugin;
  module.exports.default = plugin;
  module.exports.fastifyPlugin = plugin;
});

// node_modules/@fastify/bearer-auth/lib/compare.js
var require_compare = __commonJS((exports, module) => {
  var crypto = __require("node:crypto");
  module.exports = function compare(a, b) {
    if (a.length !== b.length) {
      crypto.timingSafeEqual(a, a);
      return false;
    }
    return crypto.timingSafeEqual(a, b);
  };
});

// node_modules/@fastify/bearer-auth/lib/authenticate.js
var require_authenticate = __commonJS((exports, module) => {
  var compare = require_compare();
  module.exports = function authenticate(keys, key) {
    const b = Buffer.from(key);
    return keys.findIndex((a) => compare(a, b)) !== -1;
  };
});

// node_modules/@fastify/error/index.js
var require_error = __commonJS((exports, module) => {
  var { format } = __require("node:util");
  function toString() {
    return `${this.name} [${this.code}]: ${this.message}`;
  }
  function createError(code, message, statusCode = 500, Base = Error, captureStackTrace = createError.captureStackTrace) {
    if (!code)
      throw new Error("Fastify error code must not be empty");
    if (!message)
      throw new Error("Fastify error message must not be empty");
    code = code.toUpperCase();
    !statusCode && (statusCode = undefined);
    function FastifyError(...args) {
      if (!new.target) {
        return new FastifyError(...args);
      }
      this.code = code;
      this.name = "FastifyError";
      this.statusCode = statusCode;
      const lastElement = args.length - 1;
      if (lastElement !== -1 && args[lastElement] && typeof args[lastElement] === "object" && "cause" in args[lastElement]) {
        this.cause = args.pop().cause;
      }
      this.message = format(message, ...args);
      Error.stackTraceLimit && captureStackTrace && Error.captureStackTrace(this, FastifyError);
    }
    FastifyError.prototype = Object.create(Base.prototype, {
      constructor: {
        value: FastifyError,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    FastifyError.prototype[Symbol.toStringTag] = "Error";
    FastifyError.prototype.toString = toString;
    return FastifyError;
  }
  createError.captureStackTrace = true;
  module.exports = createError;
  module.exports.default = createError;
  module.exports.createError = createError;
});

// node_modules/@fastify/bearer-auth/lib/errors.js
var require_errors = __commonJS((exports, module) => {
  var { createError } = require_error();
  var FST_BEARER_AUTH_INVALID_KEYS_OPTION_TYPE = createError("FST_BEARER_AUTH_INVALID_KEYS_OPTION_TYPE", "options.keys has to be an Array or a Set");
  var FST_BEARER_AUTH_INVALID_HOOK = createError("FST_BEARER_AUTH_INVALID_HOOK", 'options.addHook must be either "onRequest" or "preParsing"');
  var FST_BEARER_AUTH_INVALID_LOG_LEVEL = createError("FST_BEARER_AUTH_INVALID_LOG_LEVEL", "fastify.log does not have level '%s'");
  var FST_BEARER_AUTH_KEYS_OPTION_INVALID_KEY_TYPE = createError("FST_BEARER_AUTH_KEYS_OPTION_INVALID_KEY_TYPE", "options.keys has to contain only string entries");
  var FST_BEARER_AUTH_INVALID_SPEC = createError("FST_BEARER_AUTH_INVALID_SPEC", "options.specCompliance has to be set to 'rfc6750' or 'rfc6749'");
  var FST_BEARER_AUTH_MISSING_AUTHORIZATION_HEADER = createError("FST_BEARER_AUTH_MISSING_AUTHORIZATION_HEADER", "missing authorization header", 401);
  var FST_BEARER_AUTH_INVALID_AUTHORIZATION_HEADER = createError("FST_BEARER_AUTH_INVALID_AUTHORIZATION_HEADER", "invalid authorization header", 401);
  module.exports = {
    FST_BEARER_AUTH_INVALID_KEYS_OPTION_TYPE,
    FST_BEARER_AUTH_INVALID_HOOK,
    FST_BEARER_AUTH_INVALID_LOG_LEVEL,
    FST_BEARER_AUTH_KEYS_OPTION_INVALID_KEY_TYPE,
    FST_BEARER_AUTH_INVALID_SPEC,
    FST_BEARER_AUTH_MISSING_AUTHORIZATION_HEADER,
    FST_BEARER_AUTH_INVALID_AUTHORIZATION_HEADER
  };
});

// node_modules/@fastify/bearer-auth/lib/verify-bearer-auth-factory.js
var require_verify_bearer_auth_factory = __commonJS((exports, module) => {
  var authenticate = require_authenticate();
  var {
    FST_BEARER_AUTH_INVALID_KEYS_OPTION_TYPE,
    FST_BEARER_AUTH_KEYS_OPTION_INVALID_KEY_TYPE,
    FST_BEARER_AUTH_INVALID_SPEC,
    FST_BEARER_AUTH_MISSING_AUTHORIZATION_HEADER,
    FST_BEARER_AUTH_INVALID_AUTHORIZATION_HEADER
  } = require_errors();
  var validSpecs = new Set([
    "rfc6749",
    "rfc6750"
  ]);
  var defaultOptions = {
    keys: [],
    auth: undefined,
    errorResponse(err) {
      return { error: err.message };
    },
    contentType: undefined,
    bearerType: "Bearer",
    specCompliance: "rfc6750"
  };
  module.exports = function verifyBearerAuthFactory(options, done) {
    const _options = { ...defaultOptions, ...options };
    if (_options.keys instanceof Set) {
      _options.keys = Array.from(_options.keys);
    } else if (Array.isArray(_options.keys)) {
      _options.keys = Array.from(new Set(_options.keys));
    } else {
      throw new FST_BEARER_AUTH_INVALID_KEYS_OPTION_TYPE;
    }
    const { keys, errorResponse, contentType, bearerType, specCompliance, auth, addHook = true, verifyErrorLogLevel = "error" } = _options;
    if (validSpecs.has(specCompliance) === false) {
      throw new FST_BEARER_AUTH_INVALID_SPEC;
    }
    for (let i = 0, il = keys.length;i < il; ++i) {
      if (typeof keys[i] !== "string") {
        throw new FST_BEARER_AUTH_KEYS_OPTION_INVALID_KEY_TYPE;
      }
      keys[i] = Buffer.from(keys[i]);
    }
    const bearerTypePrefixLength = bearerType.length + 1;
    const bearerTypePrefix = specCompliance === "rfc6750" ? bearerType + " " : bearerType.toLowerCase() + " ";
    const verifyBearerType = specCompliance === "rfc6750" ? function(authorizationHeader) {
      return authorizationHeader.substring(0, bearerTypePrefixLength) !== bearerTypePrefix;
    } : function(authorizationHeader) {
      return authorizationHeader.substring(0, bearerTypePrefixLength).toLowerCase() !== bearerTypePrefix;
    };
    function handleUnauthorized(request, reply, done2, error) {
      if (verifyErrorLogLevel)
        request.log[verifyErrorLogLevel]("unauthorized: %s", error.message);
      if (contentType)
        reply.header("content-type", contentType);
      reply.code(401);
      if (!addHook) {
        done2(error);
        return;
      }
      reply.send(errorResponse(error));
    }
    return function verifyBearerAuth(request, reply, done2) {
      const authorizationHeader = request.raw.headers.authorization;
      if (!authorizationHeader) {
        const error = new FST_BEARER_AUTH_MISSING_AUTHORIZATION_HEADER;
        return handleUnauthorized(request, reply, done2, error);
      }
      if (verifyBearerType(authorizationHeader)) {
        const error = new FST_BEARER_AUTH_INVALID_AUTHORIZATION_HEADER;
        return handleUnauthorized(request, reply, done2, error);
      }
      const key = authorizationHeader.substring(bearerTypePrefixLength).trim();
      let retVal = false;
      if (auth && auth instanceof Function) {
        try {
          retVal = auth(key, request);
        } catch (err) {
          retVal = Promise.reject(err);
        }
      } else {
        retVal = authenticate(keys, key);
      }
      Promise.resolve(retVal).then((val) => {
        if (val === false) {
          const error = new FST_BEARER_AUTH_INVALID_AUTHORIZATION_HEADER;
          handleUnauthorized(request, reply, done2, error);
          return;
        }
        if (val === true) {
          try {
            done2();
          } catch (err) {
            done2(err);
          }
          return;
        }
        const retErr = new Error("internal server error");
        reply.code(500);
        if (!addHook)
          return done2(retErr);
        reply.send(errorResponse(retErr));
      }).catch((err) => {
        const retErr = err instanceof Error ? err : Error(String(err));
        reply.code(500);
        if (!addHook)
          return done2(retErr);
        reply.send(errorResponse(retErr));
      });
    };
  };
});

// node_modules/@fastify/bearer-auth/index.js
var require_bearer_auth = __commonJS((exports, module) => {
  var fp = require_plugin();
  var verifyBearerAuthFactory = require_verify_bearer_auth_factory();
  var { FST_BEARER_AUTH_INVALID_HOOK, FST_BEARER_AUTH_INVALID_LOG_LEVEL } = require_errors();
  var validHooks = new Set(["onRequest", "preParsing"]);
  function fastifyBearerAuth(fastify, options, done) {
    options = { verifyErrorLogLevel: "error", ...options };
    if (options.addHook === true || options.addHook == null) {
      options.addHook = "onRequest";
    }
    if (Object.hasOwn(fastify.log, "error") === false || typeof fastify.log.error !== "function") {
      options.verifyErrorLogLevel = null;
    }
    if (options.verifyErrorLogLevel != null && (typeof options.verifyErrorLogLevel !== "string" || Object.hasOwn(fastify.log, options.verifyErrorLogLevel) === false || typeof fastify.log[options.verifyErrorLogLevel] !== "function")) {
      done(new FST_BEARER_AUTH_INVALID_LOG_LEVEL(options.verifyErrorLogLevel));
    }
    try {
      if (options.addHook) {
        if (!validHooks.has(options.addHook)) {
          done(new FST_BEARER_AUTH_INVALID_HOOK);
        }
        if (options.addHook === "preParsing") {
          const verifyBearerAuth = verifyBearerAuthFactory(options);
          fastify.addHook("preParsing", (request, reply, _payload, done2) => {
            verifyBearerAuth(request, reply, done2);
          });
        } else {
          fastify.addHook(options.addHook, verifyBearerAuthFactory(options));
        }
      } else {
        fastify.decorate("verifyBearerAuthFactory", verifyBearerAuthFactory);
        fastify.decorate("verifyBearerAuth", verifyBearerAuthFactory(options));
      }
      done();
    } catch (err) {
      done(err);
    }
  }
  module.exports = fp(fastifyBearerAuth, {
    fastify: "5.x",
    name: "@fastify/bearer-auth"
  });
  module.exports.default = fastifyBearerAuth;
  module.exports.fastifyBearerAuth = fastifyBearerAuth;
});

// node_modules/@fastify/swagger/lib/util/format-param-url.js
var require_format_param_url = __commonJS((exports, module) => {
  var COLON = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
  function formatParamUrl(str) {
    let i, char;
    let state = "skip";
    let path = "";
    let param = "";
    let level = 0;
    let regexp = 0;
    for (i = 0;i < str.length; i++) {
      char = str[i];
      switch (state) {
        case "colon": {
          if (COLON.indexOf(char) !== -1) {
            param += char;
          } else if (char === "(") {
            state = "regexp";
            level++;
          } else {
            state = "skip";
            path += "{" + param + "}";
            path += char;
            param = "";
          }
          break;
        }
        case "regexp": {
          if (char === "(") {
            level++;
          } else if (char === ")") {
            level--;
          }
          if (level === 0) {
            state = "skip";
            if (param === "") {
              regexp++;
              param = "regexp" + String(regexp);
            }
            path += "{" + param + "}";
            param = "";
          }
          break;
        }
        default: {
          if (char === ":" && str[i + 1] === ":") {
            path += char;
            i++;
          } else if (char === ":") {
            state = "colon";
          } else if (char === "(") {
            state = "regexp";
            level++;
          } else if (char === "*") {
            path += "{*}";
          } else {
            path += char;
          }
        }
      }
    }
    if (state === "colon" && param !== "") {
      path += "{" + param + "}";
    }
    return path;
  }
  module.exports = {
    formatParamUrl
  };
});

// node_modules/yaml/dist/nodes/identity.js
var require_identity = __commonJS((exports) => {
  var ALIAS = Symbol.for("yaml.alias");
  var DOC = Symbol.for("yaml.document");
  var MAP = Symbol.for("yaml.map");
  var PAIR = Symbol.for("yaml.pair");
  var SCALAR = Symbol.for("yaml.scalar");
  var SEQ = Symbol.for("yaml.seq");
  var NODE_TYPE = Symbol.for("yaml.node.type");
  var isAlias = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === ALIAS;
  var isDocument = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === DOC;
  var isMap = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === MAP;
  var isPair = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === PAIR;
  var isScalar = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === SCALAR;
  var isSeq = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === SEQ;
  function isCollection(node) {
    if (node && typeof node === "object")
      switch (node[NODE_TYPE]) {
        case MAP:
        case SEQ:
          return true;
      }
    return false;
  }
  function isNode(node) {
    if (node && typeof node === "object")
      switch (node[NODE_TYPE]) {
        case ALIAS:
        case MAP:
        case SCALAR:
        case SEQ:
          return true;
      }
    return false;
  }
  var hasAnchor = (node) => (isScalar(node) || isCollection(node)) && !!node.anchor;
  exports.ALIAS = ALIAS;
  exports.DOC = DOC;
  exports.MAP = MAP;
  exports.NODE_TYPE = NODE_TYPE;
  exports.PAIR = PAIR;
  exports.SCALAR = SCALAR;
  exports.SEQ = SEQ;
  exports.hasAnchor = hasAnchor;
  exports.isAlias = isAlias;
  exports.isCollection = isCollection;
  exports.isDocument = isDocument;
  exports.isMap = isMap;
  exports.isNode = isNode;
  exports.isPair = isPair;
  exports.isScalar = isScalar;
  exports.isSeq = isSeq;
});

// node_modules/yaml/dist/visit.js
var require_visit = __commonJS((exports) => {
  var identity = require_identity();
  var BREAK = Symbol("break visit");
  var SKIP = Symbol("skip children");
  var REMOVE = Symbol("remove node");
  function visit(node, visitor) {
    const visitor_ = initVisitor(visitor);
    if (identity.isDocument(node)) {
      const cd = visit_(null, node.contents, visitor_, Object.freeze([node]));
      if (cd === REMOVE)
        node.contents = null;
    } else
      visit_(null, node, visitor_, Object.freeze([]));
  }
  visit.BREAK = BREAK;
  visit.SKIP = SKIP;
  visit.REMOVE = REMOVE;
  function visit_(key, node, visitor, path) {
    const ctrl = callVisitor(key, node, visitor, path);
    if (identity.isNode(ctrl) || identity.isPair(ctrl)) {
      replaceNode(key, path, ctrl);
      return visit_(key, ctrl, visitor, path);
    }
    if (typeof ctrl !== "symbol") {
      if (identity.isCollection(node)) {
        path = Object.freeze(path.concat(node));
        for (let i = 0;i < node.items.length; ++i) {
          const ci = visit_(i, node.items[i], visitor, path);
          if (typeof ci === "number")
            i = ci - 1;
          else if (ci === BREAK)
            return BREAK;
          else if (ci === REMOVE) {
            node.items.splice(i, 1);
            i -= 1;
          }
        }
      } else if (identity.isPair(node)) {
        path = Object.freeze(path.concat(node));
        const ck = visit_("key", node.key, visitor, path);
        if (ck === BREAK)
          return BREAK;
        else if (ck === REMOVE)
          node.key = null;
        const cv = visit_("value", node.value, visitor, path);
        if (cv === BREAK)
          return BREAK;
        else if (cv === REMOVE)
          node.value = null;
      }
    }
    return ctrl;
  }
  async function visitAsync(node, visitor) {
    const visitor_ = initVisitor(visitor);
    if (identity.isDocument(node)) {
      const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([node]));
      if (cd === REMOVE)
        node.contents = null;
    } else
      await visitAsync_(null, node, visitor_, Object.freeze([]));
  }
  visitAsync.BREAK = BREAK;
  visitAsync.SKIP = SKIP;
  visitAsync.REMOVE = REMOVE;
  async function visitAsync_(key, node, visitor, path) {
    const ctrl = await callVisitor(key, node, visitor, path);
    if (identity.isNode(ctrl) || identity.isPair(ctrl)) {
      replaceNode(key, path, ctrl);
      return visitAsync_(key, ctrl, visitor, path);
    }
    if (typeof ctrl !== "symbol") {
      if (identity.isCollection(node)) {
        path = Object.freeze(path.concat(node));
        for (let i = 0;i < node.items.length; ++i) {
          const ci = await visitAsync_(i, node.items[i], visitor, path);
          if (typeof ci === "number")
            i = ci - 1;
          else if (ci === BREAK)
            return BREAK;
          else if (ci === REMOVE) {
            node.items.splice(i, 1);
            i -= 1;
          }
        }
      } else if (identity.isPair(node)) {
        path = Object.freeze(path.concat(node));
        const ck = await visitAsync_("key", node.key, visitor, path);
        if (ck === BREAK)
          return BREAK;
        else if (ck === REMOVE)
          node.key = null;
        const cv = await visitAsync_("value", node.value, visitor, path);
        if (cv === BREAK)
          return BREAK;
        else if (cv === REMOVE)
          node.value = null;
      }
    }
    return ctrl;
  }
  function initVisitor(visitor) {
    if (typeof visitor === "object" && (visitor.Collection || visitor.Node || visitor.Value)) {
      return Object.assign({
        Alias: visitor.Node,
        Map: visitor.Node,
        Scalar: visitor.Node,
        Seq: visitor.Node
      }, visitor.Value && {
        Map: visitor.Value,
        Scalar: visitor.Value,
        Seq: visitor.Value
      }, visitor.Collection && {
        Map: visitor.Collection,
        Seq: visitor.Collection
      }, visitor);
    }
    return visitor;
  }
  function callVisitor(key, node, visitor, path) {
    if (typeof visitor === "function")
      return visitor(key, node, path);
    if (identity.isMap(node))
      return visitor.Map?.(key, node, path);
    if (identity.isSeq(node))
      return visitor.Seq?.(key, node, path);
    if (identity.isPair(node))
      return visitor.Pair?.(key, node, path);
    if (identity.isScalar(node))
      return visitor.Scalar?.(key, node, path);
    if (identity.isAlias(node))
      return visitor.Alias?.(key, node, path);
    return;
  }
  function replaceNode(key, path, node) {
    const parent = path[path.length - 1];
    if (identity.isCollection(parent)) {
      parent.items[key] = node;
    } else if (identity.isPair(parent)) {
      if (key === "key")
        parent.key = node;
      else
        parent.value = node;
    } else if (identity.isDocument(parent)) {
      parent.contents = node;
    } else {
      const pt = identity.isAlias(parent) ? "alias" : "scalar";
      throw new Error(`Cannot replace node with ${pt} parent`);
    }
  }
  exports.visit = visit;
  exports.visitAsync = visitAsync;
});

// node_modules/yaml/dist/doc/directives.js
var require_directives = __commonJS((exports) => {
  var identity = require_identity();
  var visit = require_visit();
  var escapeChars = {
    "!": "%21",
    ",": "%2C",
    "[": "%5B",
    "]": "%5D",
    "{": "%7B",
    "}": "%7D"
  };
  var escapeTagName = (tn) => tn.replace(/[!,[\]{}]/g, (ch) => escapeChars[ch]);

  class Directives {
    constructor(yaml, tags) {
      this.docStart = null;
      this.docEnd = false;
      this.yaml = Object.assign({}, Directives.defaultYaml, yaml);
      this.tags = Object.assign({}, Directives.defaultTags, tags);
    }
    clone() {
      const copy = new Directives(this.yaml, this.tags);
      copy.docStart = this.docStart;
      return copy;
    }
    atDocument() {
      const res = new Directives(this.yaml, this.tags);
      switch (this.yaml.version) {
        case "1.1":
          this.atNextDocument = true;
          break;
        case "1.2":
          this.atNextDocument = false;
          this.yaml = {
            explicit: Directives.defaultYaml.explicit,
            version: "1.2"
          };
          this.tags = Object.assign({}, Directives.defaultTags);
          break;
      }
      return res;
    }
    add(line, onError) {
      if (this.atNextDocument) {
        this.yaml = { explicit: Directives.defaultYaml.explicit, version: "1.1" };
        this.tags = Object.assign({}, Directives.defaultTags);
        this.atNextDocument = false;
      }
      const parts = line.trim().split(/[ \t]+/);
      const name = parts.shift();
      switch (name) {
        case "%TAG": {
          if (parts.length !== 2) {
            onError(0, "%TAG directive should contain exactly two parts");
            if (parts.length < 2)
              return false;
          }
          const [handle, prefix] = parts;
          this.tags[handle] = prefix;
          return true;
        }
        case "%YAML": {
          this.yaml.explicit = true;
          if (parts.length !== 1) {
            onError(0, "%YAML directive should contain exactly one part");
            return false;
          }
          const [version] = parts;
          if (version === "1.1" || version === "1.2") {
            this.yaml.version = version;
            return true;
          } else {
            const isValid = /^\d+\.\d+$/.test(version);
            onError(6, `Unsupported YAML version ${version}`, isValid);
            return false;
          }
        }
        default:
          onError(0, `Unknown directive ${name}`, true);
          return false;
      }
    }
    tagName(source, onError) {
      if (source === "!")
        return "!";
      if (source[0] !== "!") {
        onError(`Not a valid tag: ${source}`);
        return null;
      }
      if (source[1] === "<") {
        const verbatim = source.slice(2, -1);
        if (verbatim === "!" || verbatim === "!!") {
          onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
          return null;
        }
        if (source[source.length - 1] !== ">")
          onError("Verbatim tags must end with a >");
        return verbatim;
      }
      const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/s);
      if (!suffix)
        onError(`The ${source} tag has no suffix`);
      const prefix = this.tags[handle];
      if (prefix) {
        try {
          return prefix + decodeURIComponent(suffix);
        } catch (error) {
          onError(String(error));
          return null;
        }
      }
      if (handle === "!")
        return source;
      onError(`Could not resolve tag: ${source}`);
      return null;
    }
    tagString(tag) {
      for (const [handle, prefix] of Object.entries(this.tags)) {
        if (tag.startsWith(prefix))
          return handle + escapeTagName(tag.substring(prefix.length));
      }
      return tag[0] === "!" ? tag : `!<${tag}>`;
    }
    toString(doc) {
      const lines = this.yaml.explicit ? [`%YAML ${this.yaml.version || "1.2"}`] : [];
      const tagEntries = Object.entries(this.tags);
      let tagNames;
      if (doc && tagEntries.length > 0 && identity.isNode(doc.contents)) {
        const tags = {};
        visit.visit(doc.contents, (_key, node) => {
          if (identity.isNode(node) && node.tag)
            tags[node.tag] = true;
        });
        tagNames = Object.keys(tags);
      } else
        tagNames = [];
      for (const [handle, prefix] of tagEntries) {
        if (handle === "!!" && prefix === "tag:yaml.org,2002:")
          continue;
        if (!doc || tagNames.some((tn) => tn.startsWith(prefix)))
          lines.push(`%TAG ${handle} ${prefix}`);
      }
      return lines.join(`
`);
    }
  }
  Directives.defaultYaml = { explicit: false, version: "1.2" };
  Directives.defaultTags = { "!!": "tag:yaml.org,2002:" };
  exports.Directives = Directives;
});

// node_modules/yaml/dist/doc/anchors.js
var require_anchors = __commonJS((exports) => {
  var identity = require_identity();
  var visit = require_visit();
  function anchorIsValid(anchor) {
    if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
      const sa = JSON.stringify(anchor);
      const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
      throw new Error(msg);
    }
    return true;
  }
  function anchorNames(root) {
    const anchors = new Set;
    visit.visit(root, {
      Value(_key, node) {
        if (node.anchor)
          anchors.add(node.anchor);
      }
    });
    return anchors;
  }
  function findNewAnchor(prefix, exclude) {
    for (let i = 1;; ++i) {
      const name = `${prefix}${i}`;
      if (!exclude.has(name))
        return name;
    }
  }
  function createNodeAnchors(doc, prefix) {
    const aliasObjects = [];
    const sourceObjects = new Map;
    let prevAnchors = null;
    return {
      onAnchor: (source) => {
        aliasObjects.push(source);
        if (!prevAnchors)
          prevAnchors = anchorNames(doc);
        const anchor = findNewAnchor(prefix, prevAnchors);
        prevAnchors.add(anchor);
        return anchor;
      },
      setAnchors: () => {
        for (const source of aliasObjects) {
          const ref = sourceObjects.get(source);
          if (typeof ref === "object" && ref.anchor && (identity.isScalar(ref.node) || identity.isCollection(ref.node))) {
            ref.node.anchor = ref.anchor;
          } else {
            const error = new Error("Failed to resolve repeated object (this should not happen)");
            error.source = source;
            throw error;
          }
        }
      },
      sourceObjects
    };
  }
  exports.anchorIsValid = anchorIsValid;
  exports.anchorNames = anchorNames;
  exports.createNodeAnchors = createNodeAnchors;
  exports.findNewAnchor = findNewAnchor;
});

// node_modules/yaml/dist/doc/applyReviver.js
var require_applyReviver = __commonJS((exports) => {
  function applyReviver(reviver, obj, key, val) {
    if (val && typeof val === "object") {
      if (Array.isArray(val)) {
        for (let i = 0, len = val.length;i < len; ++i) {
          const v0 = val[i];
          const v1 = applyReviver(reviver, val, String(i), v0);
          if (v1 === undefined)
            delete val[i];
          else if (v1 !== v0)
            val[i] = v1;
        }
      } else if (val instanceof Map) {
        for (const k of Array.from(val.keys())) {
          const v0 = val.get(k);
          const v1 = applyReviver(reviver, val, k, v0);
          if (v1 === undefined)
            val.delete(k);
          else if (v1 !== v0)
            val.set(k, v1);
        }
      } else if (val instanceof Set) {
        for (const v0 of Array.from(val)) {
          const v1 = applyReviver(reviver, val, v0, v0);
          if (v1 === undefined)
            val.delete(v0);
          else if (v1 !== v0) {
            val.delete(v0);
            val.add(v1);
          }
        }
      } else {
        for (const [k, v0] of Object.entries(val)) {
          const v1 = applyReviver(reviver, val, k, v0);
          if (v1 === undefined)
            delete val[k];
          else if (v1 !== v0)
            val[k] = v1;
        }
      }
    }
    return reviver.call(obj, key, val);
  }
  exports.applyReviver = applyReviver;
});

// node_modules/yaml/dist/nodes/toJS.js
var require_toJS = __commonJS((exports) => {
  var identity = require_identity();
  function toJS(value, arg, ctx) {
    if (Array.isArray(value))
      return value.map((v, i) => toJS(v, String(i), ctx));
    if (value && typeof value.toJSON === "function") {
      if (!ctx || !identity.hasAnchor(value))
        return value.toJSON(arg, ctx);
      const data = { aliasCount: 0, count: 1, res: undefined };
      ctx.anchors.set(value, data);
      ctx.onCreate = (res2) => {
        data.res = res2;
        delete ctx.onCreate;
      };
      const res = value.toJSON(arg, ctx);
      if (ctx.onCreate)
        ctx.onCreate(res);
      return res;
    }
    if (typeof value === "bigint" && !ctx?.keep)
      return Number(value);
    return value;
  }
  exports.toJS = toJS;
});

// node_modules/yaml/dist/nodes/Node.js
var require_Node = __commonJS((exports) => {
  var applyReviver = require_applyReviver();
  var identity = require_identity();
  var toJS = require_toJS();

  class NodeBase {
    constructor(type) {
      Object.defineProperty(this, identity.NODE_TYPE, { value: type });
    }
    clone() {
      const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
      if (this.range)
        copy.range = this.range.slice();
      return copy;
    }
    toJS(doc, { mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
      if (!identity.isDocument(doc))
        throw new TypeError("A document argument is required");
      const ctx = {
        anchors: new Map,
        doc,
        keep: true,
        mapAsMap: mapAsMap === true,
        mapKeyWarned: false,
        maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100
      };
      const res = toJS.toJS(this, "", ctx);
      if (typeof onAnchor === "function")
        for (const { count, res: res2 } of ctx.anchors.values())
          onAnchor(res2, count);
      return typeof reviver === "function" ? applyReviver.applyReviver(reviver, { "": res }, "", res) : res;
    }
  }
  exports.NodeBase = NodeBase;
});

// node_modules/yaml/dist/nodes/Alias.js
var require_Alias = __commonJS((exports) => {
  var anchors = require_anchors();
  var visit = require_visit();
  var identity = require_identity();
  var Node = require_Node();
  var toJS = require_toJS();

  class Alias extends Node.NodeBase {
    constructor(source) {
      super(identity.ALIAS);
      this.source = source;
      Object.defineProperty(this, "tag", {
        set() {
          throw new Error("Alias nodes cannot have tags");
        }
      });
    }
    resolve(doc) {
      let found = undefined;
      visit.visit(doc, {
        Node: (_key, node) => {
          if (node === this)
            return visit.visit.BREAK;
          if (node.anchor === this.source)
            found = node;
        }
      });
      return found;
    }
    toJSON(_arg, ctx) {
      if (!ctx)
        return { source: this.source };
      const { anchors: anchors2, doc, maxAliasCount } = ctx;
      const source = this.resolve(doc);
      if (!source) {
        const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
        throw new ReferenceError(msg);
      }
      let data = anchors2.get(source);
      if (!data) {
        toJS.toJS(source, null, ctx);
        data = anchors2.get(source);
      }
      if (!data || data.res === undefined) {
        const msg = "This should not happen: Alias anchor was not resolved?";
        throw new ReferenceError(msg);
      }
      if (maxAliasCount >= 0) {
        data.count += 1;
        if (data.aliasCount === 0)
          data.aliasCount = getAliasCount(doc, source, anchors2);
        if (data.count * data.aliasCount > maxAliasCount) {
          const msg = "Excessive alias count indicates a resource exhaustion attack";
          throw new ReferenceError(msg);
        }
      }
      return data.res;
    }
    toString(ctx, _onComment, _onChompKeep) {
      const src = `*${this.source}`;
      if (ctx) {
        anchors.anchorIsValid(this.source);
        if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
          const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
          throw new Error(msg);
        }
        if (ctx.implicitKey)
          return `${src} `;
      }
      return src;
    }
  }
  function getAliasCount(doc, node, anchors2) {
    if (identity.isAlias(node)) {
      const source = node.resolve(doc);
      const anchor = anchors2 && source && anchors2.get(source);
      return anchor ? anchor.count * anchor.aliasCount : 0;
    } else if (identity.isCollection(node)) {
      let count = 0;
      for (const item of node.items) {
        const c = getAliasCount(doc, item, anchors2);
        if (c > count)
          count = c;
      }
      return count;
    } else if (identity.isPair(node)) {
      const kc = getAliasCount(doc, node.key, anchors2);
      const vc = getAliasCount(doc, node.value, anchors2);
      return Math.max(kc, vc);
    }
    return 1;
  }
  exports.Alias = Alias;
});

// node_modules/yaml/dist/nodes/Scalar.js
var require_Scalar = __commonJS((exports) => {
  var identity = require_identity();
  var Node = require_Node();
  var toJS = require_toJS();
  var isScalarValue = (value) => !value || typeof value !== "function" && typeof value !== "object";

  class Scalar extends Node.NodeBase {
    constructor(value) {
      super(identity.SCALAR);
      this.value = value;
    }
    toJSON(arg, ctx) {
      return ctx?.keep ? this.value : toJS.toJS(this.value, arg, ctx);
    }
    toString() {
      return String(this.value);
    }
  }
  Scalar.BLOCK_FOLDED = "BLOCK_FOLDED";
  Scalar.BLOCK_LITERAL = "BLOCK_LITERAL";
  Scalar.PLAIN = "PLAIN";
  Scalar.QUOTE_DOUBLE = "QUOTE_DOUBLE";
  Scalar.QUOTE_SINGLE = "QUOTE_SINGLE";
  exports.Scalar = Scalar;
  exports.isScalarValue = isScalarValue;
});

// node_modules/yaml/dist/doc/createNode.js
var require_createNode = __commonJS((exports) => {
  var Alias = require_Alias();
  var identity = require_identity();
  var Scalar = require_Scalar();
  var defaultTagPrefix = "tag:yaml.org,2002:";
  function findTagObject(value, tagName, tags) {
    if (tagName) {
      const match = tags.filter((t) => t.tag === tagName);
      const tagObj = match.find((t) => !t.format) ?? match[0];
      if (!tagObj)
        throw new Error(`Tag ${tagName} not found`);
      return tagObj;
    }
    return tags.find((t) => t.identify?.(value) && !t.format);
  }
  function createNode(value, tagName, ctx) {
    if (identity.isDocument(value))
      value = value.contents;
    if (identity.isNode(value))
      return value;
    if (identity.isPair(value)) {
      const map = ctx.schema[identity.MAP].createNode?.(ctx.schema, null, ctx);
      map.items.push(value);
      return map;
    }
    if (value instanceof String || value instanceof Number || value instanceof Boolean || typeof BigInt !== "undefined" && value instanceof BigInt) {
      value = value.valueOf();
    }
    const { aliasDuplicateObjects, onAnchor, onTagObj, schema, sourceObjects } = ctx;
    let ref = undefined;
    if (aliasDuplicateObjects && value && typeof value === "object") {
      ref = sourceObjects.get(value);
      if (ref) {
        if (!ref.anchor)
          ref.anchor = onAnchor(value);
        return new Alias.Alias(ref.anchor);
      } else {
        ref = { anchor: null, node: null };
        sourceObjects.set(value, ref);
      }
    }
    if (tagName?.startsWith("!!"))
      tagName = defaultTagPrefix + tagName.slice(2);
    let tagObj = findTagObject(value, tagName, schema.tags);
    if (!tagObj) {
      if (value && typeof value.toJSON === "function") {
        value = value.toJSON();
      }
      if (!value || typeof value !== "object") {
        const node2 = new Scalar.Scalar(value);
        if (ref)
          ref.node = node2;
        return node2;
      }
      tagObj = value instanceof Map ? schema[identity.MAP] : (Symbol.iterator in Object(value)) ? schema[identity.SEQ] : schema[identity.MAP];
    }
    if (onTagObj) {
      onTagObj(tagObj);
      delete ctx.onTagObj;
    }
    const node = tagObj?.createNode ? tagObj.createNode(ctx.schema, value, ctx) : typeof tagObj?.nodeClass?.from === "function" ? tagObj.nodeClass.from(ctx.schema, value, ctx) : new Scalar.Scalar(value);
    if (tagName)
      node.tag = tagName;
    else if (!tagObj.default)
      node.tag = tagObj.tag;
    if (ref)
      ref.node = node;
    return node;
  }
  exports.createNode = createNode;
});

// node_modules/yaml/dist/nodes/Collection.js
var require_Collection = __commonJS((exports) => {
  var createNode = require_createNode();
  var identity = require_identity();
  var Node = require_Node();
  function collectionFromPath(schema, path, value) {
    let v = value;
    for (let i = path.length - 1;i >= 0; --i) {
      const k = path[i];
      if (typeof k === "number" && Number.isInteger(k) && k >= 0) {
        const a = [];
        a[k] = v;
        v = a;
      } else {
        v = new Map([[k, v]]);
      }
    }
    return createNode.createNode(v, undefined, {
      aliasDuplicateObjects: false,
      keepUndefined: false,
      onAnchor: () => {
        throw new Error("This should not happen, please report a bug.");
      },
      schema,
      sourceObjects: new Map
    });
  }
  var isEmptyPath = (path) => path == null || typeof path === "object" && !!path[Symbol.iterator]().next().done;

  class Collection extends Node.NodeBase {
    constructor(type, schema) {
      super(type);
      Object.defineProperty(this, "schema", {
        value: schema,
        configurable: true,
        enumerable: false,
        writable: true
      });
    }
    clone(schema) {
      const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
      if (schema)
        copy.schema = schema;
      copy.items = copy.items.map((it) => identity.isNode(it) || identity.isPair(it) ? it.clone(schema) : it);
      if (this.range)
        copy.range = this.range.slice();
      return copy;
    }
    addIn(path, value) {
      if (isEmptyPath(path))
        this.add(value);
      else {
        const [key, ...rest] = path;
        const node = this.get(key, true);
        if (identity.isCollection(node))
          node.addIn(rest, value);
        else if (node === undefined && this.schema)
          this.set(key, collectionFromPath(this.schema, rest, value));
        else
          throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
      }
    }
    deleteIn(path) {
      const [key, ...rest] = path;
      if (rest.length === 0)
        return this.delete(key);
      const node = this.get(key, true);
      if (identity.isCollection(node))
        return node.deleteIn(rest);
      else
        throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
    }
    getIn(path, keepScalar) {
      const [key, ...rest] = path;
      const node = this.get(key, true);
      if (rest.length === 0)
        return !keepScalar && identity.isScalar(node) ? node.value : node;
      else
        return identity.isCollection(node) ? node.getIn(rest, keepScalar) : undefined;
    }
    hasAllNullValues(allowScalar) {
      return this.items.every((node) => {
        if (!identity.isPair(node))
          return false;
        const n = node.value;
        return n == null || allowScalar && identity.isScalar(n) && n.value == null && !n.commentBefore && !n.comment && !n.tag;
      });
    }
    hasIn(path) {
      const [key, ...rest] = path;
      if (rest.length === 0)
        return this.has(key);
      const node = this.get(key, true);
      return identity.isCollection(node) ? node.hasIn(rest) : false;
    }
    setIn(path, value) {
      const [key, ...rest] = path;
      if (rest.length === 0) {
        this.set(key, value);
      } else {
        const node = this.get(key, true);
        if (identity.isCollection(node))
          node.setIn(rest, value);
        else if (node === undefined && this.schema)
          this.set(key, collectionFromPath(this.schema, rest, value));
        else
          throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
      }
    }
  }
  exports.Collection = Collection;
  exports.collectionFromPath = collectionFromPath;
  exports.isEmptyPath = isEmptyPath;
});

// node_modules/yaml/dist/stringify/stringifyComment.js
var require_stringifyComment = __commonJS((exports) => {
  var stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, "#");
  function indentComment(comment, indent) {
    if (/^\n+$/.test(comment))
      return comment.substring(1);
    return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;
  }
  var lineComment = (str, indent, comment) => str.endsWith(`
`) ? indentComment(comment, indent) : comment.includes(`
`) ? `
` + indentComment(comment, indent) : (str.endsWith(" ") ? "" : " ") + comment;
  exports.indentComment = indentComment;
  exports.lineComment = lineComment;
  exports.stringifyComment = stringifyComment;
});

// node_modules/yaml/dist/stringify/foldFlowLines.js
var require_foldFlowLines = __commonJS((exports) => {
  var FOLD_FLOW = "flow";
  var FOLD_BLOCK = "block";
  var FOLD_QUOTED = "quoted";
  function foldFlowLines(text, indent, mode = "flow", { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {
    if (!lineWidth || lineWidth < 0)
      return text;
    if (lineWidth < minContentWidth)
      minContentWidth = 0;
    const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
    if (text.length <= endStep)
      return text;
    const folds = [];
    const escapedFolds = {};
    let end = lineWidth - indent.length;
    if (typeof indentAtStart === "number") {
      if (indentAtStart > lineWidth - Math.max(2, minContentWidth))
        folds.push(0);
      else
        end = lineWidth - indentAtStart;
    }
    let split = undefined;
    let prev = undefined;
    let overflow = false;
    let i = -1;
    let escStart = -1;
    let escEnd = -1;
    if (mode === FOLD_BLOCK) {
      i = consumeMoreIndentedLines(text, i, indent.length);
      if (i !== -1)
        end = i + endStep;
    }
    for (let ch;ch = text[i += 1]; ) {
      if (mode === FOLD_QUOTED && ch === "\\") {
        escStart = i;
        switch (text[i + 1]) {
          case "x":
            i += 3;
            break;
          case "u":
            i += 5;
            break;
          case "U":
            i += 9;
            break;
          default:
            i += 1;
        }
        escEnd = i;
      }
      if (ch === `
`) {
        if (mode === FOLD_BLOCK)
          i = consumeMoreIndentedLines(text, i, indent.length);
        end = i + indent.length + endStep;
        split = undefined;
      } else {
        if (ch === " " && prev && prev !== " " && prev !== `
` && prev !== "\t") {
          const next = text[i + 1];
          if (next && next !== " " && next !== `
` && next !== "\t")
            split = i;
        }
        if (i >= end) {
          if (split) {
            folds.push(split);
            end = split + endStep;
            split = undefined;
          } else if (mode === FOLD_QUOTED) {
            while (prev === " " || prev === "\t") {
              prev = ch;
              ch = text[i += 1];
              overflow = true;
            }
            const j = i > escEnd + 1 ? i - 2 : escStart - 1;
            if (escapedFolds[j])
              return text;
            folds.push(j);
            escapedFolds[j] = true;
            end = j + endStep;
            split = undefined;
          } else {
            overflow = true;
          }
        }
      }
      prev = ch;
    }
    if (overflow && onOverflow)
      onOverflow();
    if (folds.length === 0)
      return text;
    if (onFold)
      onFold();
    let res = text.slice(0, folds[0]);
    for (let i2 = 0;i2 < folds.length; ++i2) {
      const fold = folds[i2];
      const end2 = folds[i2 + 1] || text.length;
      if (fold === 0)
        res = `
${indent}${text.slice(0, end2)}`;
      else {
        if (mode === FOLD_QUOTED && escapedFolds[fold])
          res += `${text[fold]}\\`;
        res += `
${indent}${text.slice(fold + 1, end2)}`;
      }
    }
    return res;
  }
  function consumeMoreIndentedLines(text, i, indent) {
    let end = i;
    let start = i + 1;
    let ch = text[start];
    while (ch === " " || ch === "\t") {
      if (i < start + indent) {
        ch = text[++i];
      } else {
        do {
          ch = text[++i];
        } while (ch && ch !== `
`);
        end = i;
        start = i + 1;
        ch = text[start];
      }
    }
    return end;
  }
  exports.FOLD_BLOCK = FOLD_BLOCK;
  exports.FOLD_FLOW = FOLD_FLOW;
  exports.FOLD_QUOTED = FOLD_QUOTED;
  exports.foldFlowLines = foldFlowLines;
});

// node_modules/yaml/dist/stringify/stringifyString.js
var require_stringifyString = __commonJS((exports) => {
  var Scalar = require_Scalar();
  var foldFlowLines = require_foldFlowLines();
  var getFoldOptions = (ctx, isBlock) => ({
    indentAtStart: isBlock ? ctx.indent.length : ctx.indentAtStart,
    lineWidth: ctx.options.lineWidth,
    minContentWidth: ctx.options.minContentWidth
  });
  var containsDocumentMarker = (str) => /^(%|---|\.\.\.)/m.test(str);
  function lineLengthOverLimit(str, lineWidth, indentLength) {
    if (!lineWidth || lineWidth < 0)
      return false;
    const limit = lineWidth - indentLength;
    const strLen = str.length;
    if (strLen <= limit)
      return false;
    for (let i = 0, start = 0;i < strLen; ++i) {
      if (str[i] === `
`) {
        if (i - start > limit)
          return true;
        start = i + 1;
        if (strLen - start <= limit)
          return false;
      }
    }
    return true;
  }
  function doubleQuotedString(value, ctx) {
    const json = JSON.stringify(value);
    if (ctx.options.doubleQuotedAsJSON)
      return json;
    const { implicitKey } = ctx;
    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
    const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
    let str = "";
    let start = 0;
    for (let i = 0, ch = json[i];ch; ch = json[++i]) {
      if (ch === " " && json[i + 1] === "\\" && json[i + 2] === "n") {
        str += json.slice(start, i) + "\\ ";
        i += 1;
        start = i;
        ch = "\\";
      }
      if (ch === "\\")
        switch (json[i + 1]) {
          case "u":
            {
              str += json.slice(start, i);
              const code = json.substr(i + 2, 4);
              switch (code) {
                case "0000":
                  str += "\\0";
                  break;
                case "0007":
                  str += "\\a";
                  break;
                case "000b":
                  str += "\\v";
                  break;
                case "001b":
                  str += "\\e";
                  break;
                case "0085":
                  str += "\\N";
                  break;
                case "00a0":
                  str += "\\_";
                  break;
                case "2028":
                  str += "\\L";
                  break;
                case "2029":
                  str += "\\P";
                  break;
                default:
                  if (code.substr(0, 2) === "00")
                    str += "\\x" + code.substr(2);
                  else
                    str += json.substr(i, 6);
              }
              i += 5;
              start = i + 1;
            }
            break;
          case "n":
            if (implicitKey || json[i + 2] === '"' || json.length < minMultiLineLength) {
              i += 1;
            } else {
              str += json.slice(start, i) + `

`;
              while (json[i + 2] === "\\" && json[i + 3] === "n" && json[i + 4] !== '"') {
                str += `
`;
                i += 2;
              }
              str += indent;
              if (json[i + 2] === " ")
                str += "\\";
              i += 1;
              start = i + 1;
            }
            break;
          default:
            i += 1;
        }
    }
    str = start ? str + json.slice(start) : json;
    return implicitKey ? str : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_QUOTED, getFoldOptions(ctx, false));
  }
  function singleQuotedString(value, ctx) {
    if (ctx.options.singleQuote === false || ctx.implicitKey && value.includes(`
`) || /[ \t]\n|\n[ \t]/.test(value))
      return doubleQuotedString(value, ctx);
    const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
    const res = "'" + value.replace(/'/g, "''").replace(/\n+/g, `$&
${indent}`) + "'";
    return ctx.implicitKey ? res : foldFlowLines.foldFlowLines(res, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx, false));
  }
  function quotedString(value, ctx) {
    const { singleQuote } = ctx.options;
    let qs;
    if (singleQuote === false)
      qs = doubleQuotedString;
    else {
      const hasDouble = value.includes('"');
      const hasSingle = value.includes("'");
      if (hasDouble && !hasSingle)
        qs = singleQuotedString;
      else if (hasSingle && !hasDouble)
        qs = doubleQuotedString;
      else
        qs = singleQuote ? singleQuotedString : doubleQuotedString;
    }
    return qs(value, ctx);
  }
  var blockEndNewlines;
  try {
    blockEndNewlines = new RegExp(`(^|(?<!
))
+(?!
|$)`, "g");
  } catch {
    blockEndNewlines = /\n+(?!\n|$)/g;
  }
  function blockString({ comment, type, value }, ctx, onComment, onChompKeep) {
    const { blockQuote, commentString, lineWidth } = ctx.options;
    if (!blockQuote || /\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
      return quotedString(value, ctx);
    }
    const indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value) ? "  " : "");
    const literal = blockQuote === "literal" ? true : blockQuote === "folded" || type === Scalar.Scalar.BLOCK_FOLDED ? false : type === Scalar.Scalar.BLOCK_LITERAL ? true : !lineLengthOverLimit(value, lineWidth, indent.length);
    if (!value)
      return literal ? `|
` : `>
`;
    let chomp;
    let endStart;
    for (endStart = value.length;endStart > 0; --endStart) {
      const ch = value[endStart - 1];
      if (ch !== `
` && ch !== "\t" && ch !== " ")
        break;
    }
    let end = value.substring(endStart);
    const endNlPos = end.indexOf(`
`);
    if (endNlPos === -1) {
      chomp = "-";
    } else if (value === end || endNlPos !== end.length - 1) {
      chomp = "+";
      if (onChompKeep)
        onChompKeep();
    } else {
      chomp = "";
    }
    if (end) {
      value = value.slice(0, -end.length);
      if (end[end.length - 1] === `
`)
        end = end.slice(0, -1);
      end = end.replace(blockEndNewlines, `$&${indent}`);
    }
    let startWithSpace = false;
    let startEnd;
    let startNlPos = -1;
    for (startEnd = 0;startEnd < value.length; ++startEnd) {
      const ch = value[startEnd];
      if (ch === " ")
        startWithSpace = true;
      else if (ch === `
`)
        startNlPos = startEnd;
      else
        break;
    }
    let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);
    if (start) {
      value = value.substring(start.length);
      start = start.replace(/\n+/g, `$&${indent}`);
    }
    const indentSize = indent ? "2" : "1";
    let header = (startWithSpace ? indentSize : "") + chomp;
    if (comment) {
      header += " " + commentString(comment.replace(/ ?[\r\n]+/g, " "));
      if (onComment)
        onComment();
    }
    if (!literal) {
      const foldedValue = value.replace(/\n+/g, `
$&`).replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, `$&${indent}`);
      let literalFallback = false;
      const foldOptions = getFoldOptions(ctx, true);
      if (blockQuote !== "folded" && type !== Scalar.Scalar.BLOCK_FOLDED) {
        foldOptions.onOverflow = () => {
          literalFallback = true;
        };
      }
      const body = foldFlowLines.foldFlowLines(`${start}${foldedValue}${end}`, indent, foldFlowLines.FOLD_BLOCK, foldOptions);
      if (!literalFallback)
        return `>${header}
${indent}${body}`;
    }
    value = value.replace(/\n+/g, `$&${indent}`);
    return `|${header}
${indent}${start}${value}${end}`;
  }
  function plainString(item, ctx, onComment, onChompKeep) {
    const { type, value } = item;
    const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;
    if (implicitKey && value.includes(`
`) || inFlow && /[[\]{},]/.test(value)) {
      return quotedString(value, ctx);
    }
    if (!value || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value)) {
      return implicitKey || inFlow || !value.includes(`
`) ? quotedString(value, ctx) : blockString(item, ctx, onComment, onChompKeep);
    }
    if (!implicitKey && !inFlow && type !== Scalar.Scalar.PLAIN && value.includes(`
`)) {
      return blockString(item, ctx, onComment, onChompKeep);
    }
    if (containsDocumentMarker(value)) {
      if (indent === "") {
        ctx.forceBlockIndent = true;
        return blockString(item, ctx, onComment, onChompKeep);
      } else if (implicitKey && indent === indentStep) {
        return quotedString(value, ctx);
      }
    }
    const str = value.replace(/\n+/g, `$&
${indent}`);
    if (actualString) {
      const test = (tag) => tag.default && tag.tag !== "tag:yaml.org,2002:str" && tag.test?.test(str);
      const { compat, tags } = ctx.doc.schema;
      if (tags.some(test) || compat?.some(test))
        return quotedString(value, ctx);
    }
    return implicitKey ? str : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx, false));
  }
  function stringifyString(item, ctx, onComment, onChompKeep) {
    const { implicitKey, inFlow } = ctx;
    const ss = typeof item.value === "string" ? item : Object.assign({}, item, { value: String(item.value) });
    let { type } = item;
    if (type !== Scalar.Scalar.QUOTE_DOUBLE) {
      if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(ss.value))
        type = Scalar.Scalar.QUOTE_DOUBLE;
    }
    const _stringify = (_type) => {
      switch (_type) {
        case Scalar.Scalar.BLOCK_FOLDED:
        case Scalar.Scalar.BLOCK_LITERAL:
          return implicitKey || inFlow ? quotedString(ss.value, ctx) : blockString(ss, ctx, onComment, onChompKeep);
        case Scalar.Scalar.QUOTE_DOUBLE:
          return doubleQuotedString(ss.value, ctx);
        case Scalar.Scalar.QUOTE_SINGLE:
          return singleQuotedString(ss.value, ctx);
        case Scalar.Scalar.PLAIN:
          return plainString(ss, ctx, onComment, onChompKeep);
        default:
          return null;
      }
    };
    let res = _stringify(type);
    if (res === null) {
      const { defaultKeyType, defaultStringType } = ctx.options;
      const t = implicitKey && defaultKeyType || defaultStringType;
      res = _stringify(t);
      if (res === null)
        throw new Error(`Unsupported default string type ${t}`);
    }
    return res;
  }
  exports.stringifyString = stringifyString;
});

// node_modules/yaml/dist/stringify/stringify.js
var require_stringify = __commonJS((exports) => {
  var anchors = require_anchors();
  var identity = require_identity();
  var stringifyComment = require_stringifyComment();
  var stringifyString = require_stringifyString();
  function createStringifyContext(doc, options) {
    const opt = Object.assign({
      blockQuote: true,
      commentString: stringifyComment.stringifyComment,
      defaultKeyType: null,
      defaultStringType: "PLAIN",
      directives: null,
      doubleQuotedAsJSON: false,
      doubleQuotedMinMultiLineLength: 40,
      falseStr: "false",
      flowCollectionPadding: true,
      indentSeq: true,
      lineWidth: 80,
      minContentWidth: 20,
      nullStr: "null",
      simpleKeys: false,
      singleQuote: null,
      trueStr: "true",
      verifyAliasOrder: true
    }, doc.schema.toStringOptions, options);
    let inFlow;
    switch (opt.collectionStyle) {
      case "block":
        inFlow = false;
        break;
      case "flow":
        inFlow = true;
        break;
      default:
        inFlow = null;
    }
    return {
      anchors: new Set,
      doc,
      flowCollectionPadding: opt.flowCollectionPadding ? " " : "",
      indent: "",
      indentStep: typeof opt.indent === "number" ? " ".repeat(opt.indent) : "  ",
      inFlow,
      options: opt
    };
  }
  function getTagObject(tags, item) {
    if (item.tag) {
      const match = tags.filter((t) => t.tag === item.tag);
      if (match.length > 0)
        return match.find((t) => t.format === item.format) ?? match[0];
    }
    let tagObj = undefined;
    let obj;
    if (identity.isScalar(item)) {
      obj = item.value;
      let match = tags.filter((t) => t.identify?.(obj));
      if (match.length > 1) {
        const testMatch = match.filter((t) => t.test);
        if (testMatch.length > 0)
          match = testMatch;
      }
      tagObj = match.find((t) => t.format === item.format) ?? match.find((t) => !t.format);
    } else {
      obj = item;
      tagObj = tags.find((t) => t.nodeClass && obj instanceof t.nodeClass);
    }
    if (!tagObj) {
      const name = obj?.constructor?.name ?? typeof obj;
      throw new Error(`Tag not resolved for ${name} value`);
    }
    return tagObj;
  }
  function stringifyProps(node, tagObj, { anchors: anchors$1, doc }) {
    if (!doc.directives)
      return "";
    const props = [];
    const anchor = (identity.isScalar(node) || identity.isCollection(node)) && node.anchor;
    if (anchor && anchors.anchorIsValid(anchor)) {
      anchors$1.add(anchor);
      props.push(`&${anchor}`);
    }
    const tag = node.tag ? node.tag : tagObj.default ? null : tagObj.tag;
    if (tag)
      props.push(doc.directives.tagString(tag));
    return props.join(" ");
  }
  function stringify(item, ctx, onComment, onChompKeep) {
    if (identity.isPair(item))
      return item.toString(ctx, onComment, onChompKeep);
    if (identity.isAlias(item)) {
      if (ctx.doc.directives)
        return item.toString(ctx);
      if (ctx.resolvedAliases?.has(item)) {
        throw new TypeError(`Cannot stringify circular structure without alias nodes`);
      } else {
        if (ctx.resolvedAliases)
          ctx.resolvedAliases.add(item);
        else
          ctx.resolvedAliases = new Set([item]);
        item = item.resolve(ctx.doc);
      }
    }
    let tagObj = undefined;
    const node = identity.isNode(item) ? item : ctx.doc.createNode(item, { onTagObj: (o) => tagObj = o });
    if (!tagObj)
      tagObj = getTagObject(ctx.doc.schema.tags, node);
    const props = stringifyProps(node, tagObj, ctx);
    if (props.length > 0)
      ctx.indentAtStart = (ctx.indentAtStart ?? 0) + props.length + 1;
    const str = typeof tagObj.stringify === "function" ? tagObj.stringify(node, ctx, onComment, onChompKeep) : identity.isScalar(node) ? stringifyString.stringifyString(node, ctx, onComment, onChompKeep) : node.toString(ctx, onComment, onChompKeep);
    if (!props)
      return str;
    return identity.isScalar(node) || str[0] === "{" || str[0] === "[" ? `${props} ${str}` : `${props}
${ctx.indent}${str}`;
  }
  exports.createStringifyContext = createStringifyContext;
  exports.stringify = stringify;
});

// node_modules/yaml/dist/stringify/stringifyPair.js
var require_stringifyPair = __commonJS((exports) => {
  var identity = require_identity();
  var Scalar = require_Scalar();
  var stringify = require_stringify();
  var stringifyComment = require_stringifyComment();
  function stringifyPair({ key, value }, ctx, onComment, onChompKeep) {
    const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;
    let keyComment = identity.isNode(key) && key.comment || null;
    if (simpleKeys) {
      if (keyComment) {
        throw new Error("With simple keys, key nodes cannot have comments");
      }
      if (identity.isCollection(key) || !identity.isNode(key) && typeof key === "object") {
        const msg = "With simple keys, collection cannot be used as a key value";
        throw new Error(msg);
      }
    }
    let explicitKey = !simpleKeys && (!key || keyComment && value == null && !ctx.inFlow || identity.isCollection(key) || (identity.isScalar(key) ? key.type === Scalar.Scalar.BLOCK_FOLDED || key.type === Scalar.Scalar.BLOCK_LITERAL : typeof key === "object"));
    ctx = Object.assign({}, ctx, {
      allNullValues: false,
      implicitKey: !explicitKey && (simpleKeys || !allNullValues),
      indent: indent + indentStep
    });
    let keyCommentDone = false;
    let chompKeep = false;
    let str = stringify.stringify(key, ctx, () => keyCommentDone = true, () => chompKeep = true);
    if (!explicitKey && !ctx.inFlow && str.length > 1024) {
      if (simpleKeys)
        throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
      explicitKey = true;
    }
    if (ctx.inFlow) {
      if (allNullValues || value == null) {
        if (keyCommentDone && onComment)
          onComment();
        return str === "" ? "?" : explicitKey ? `? ${str}` : str;
      }
    } else if (allNullValues && !simpleKeys || value == null && explicitKey) {
      str = `? ${str}`;
      if (keyComment && !keyCommentDone) {
        str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
      } else if (chompKeep && onChompKeep)
        onChompKeep();
      return str;
    }
    if (keyCommentDone)
      keyComment = null;
    if (explicitKey) {
      if (keyComment)
        str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
      str = `? ${str}
${indent}:`;
    } else {
      str = `${str}:`;
      if (keyComment)
        str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
    }
    let vsb, vcb, valueComment;
    if (identity.isNode(value)) {
      vsb = !!value.spaceBefore;
      vcb = value.commentBefore;
      valueComment = value.comment;
    } else {
      vsb = false;
      vcb = null;
      valueComment = null;
      if (value && typeof value === "object")
        value = doc.createNode(value);
    }
    ctx.implicitKey = false;
    if (!explicitKey && !keyComment && identity.isScalar(value))
      ctx.indentAtStart = str.length + 1;
    chompKeep = false;
    if (!indentSeq && indentStep.length >= 2 && !ctx.inFlow && !explicitKey && identity.isSeq(value) && !value.flow && !value.tag && !value.anchor) {
      ctx.indent = ctx.indent.substring(2);
    }
    let valueCommentDone = false;
    const valueStr = stringify.stringify(value, ctx, () => valueCommentDone = true, () => chompKeep = true);
    let ws = " ";
    if (keyComment || vsb || vcb) {
      ws = vsb ? `
` : "";
      if (vcb) {
        const cs = commentString(vcb);
        ws += `
${stringifyComment.indentComment(cs, ctx.indent)}`;
      }
      if (valueStr === "" && !ctx.inFlow) {
        if (ws === `
`)
          ws = `

`;
      } else {
        ws += `
${ctx.indent}`;
      }
    } else if (!explicitKey && identity.isCollection(value)) {
      const vs0 = valueStr[0];
      const nl0 = valueStr.indexOf(`
`);
      const hasNewline = nl0 !== -1;
      const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;
      if (hasNewline || !flow) {
        let hasPropsLine = false;
        if (hasNewline && (vs0 === "&" || vs0 === "!")) {
          let sp0 = valueStr.indexOf(" ");
          if (vs0 === "&" && sp0 !== -1 && sp0 < nl0 && valueStr[sp0 + 1] === "!") {
            sp0 = valueStr.indexOf(" ", sp0 + 1);
          }
          if (sp0 === -1 || nl0 < sp0)
            hasPropsLine = true;
        }
        if (!hasPropsLine)
          ws = `
${ctx.indent}`;
      }
    } else if (valueStr === "" || valueStr[0] === `
`) {
      ws = "";
    }
    str += ws + valueStr;
    if (ctx.inFlow) {
      if (valueCommentDone && onComment)
        onComment();
    } else if (valueComment && !valueCommentDone) {
      str += stringifyComment.lineComment(str, ctx.indent, commentString(valueComment));
    } else if (chompKeep && onChompKeep) {
      onChompKeep();
    }
    return str;
  }
  exports.stringifyPair = stringifyPair;
});

// node_modules/yaml/dist/log.js
var require_log = __commonJS((exports) => {
  var node_process = __require("node:process");
  function debug(logLevel, ...messages) {
    if (logLevel === "debug")
      console.log(...messages);
  }
  function warn(logLevel, warning) {
    if (logLevel === "debug" || logLevel === "warn") {
      if (typeof node_process.emitWarning === "function")
        node_process.emitWarning(warning);
      else
        console.warn(warning);
    }
  }
  exports.debug = debug;
  exports.warn = warn;
});

// node_modules/yaml/dist/schema/yaml-1.1/merge.js
var require_merge = __commonJS((exports) => {
  var identity = require_identity();
  var Scalar = require_Scalar();
  var MERGE_KEY = "<<";
  var merge = {
    identify: (value) => value === MERGE_KEY || typeof value === "symbol" && value.description === MERGE_KEY,
    default: "key",
    tag: "tag:yaml.org,2002:merge",
    test: /^<<$/,
    resolve: () => Object.assign(new Scalar.Scalar(Symbol(MERGE_KEY)), {
      addToJSMap: addMergeToJSMap
    }),
    stringify: () => MERGE_KEY
  };
  var isMergeKey = (ctx, key) => (merge.identify(key) || identity.isScalar(key) && (!key.type || key.type === Scalar.Scalar.PLAIN) && merge.identify(key.value)) && ctx?.doc.schema.tags.some((tag) => tag.tag === merge.tag && tag.default);
  function addMergeToJSMap(ctx, map, value) {
    value = ctx && identity.isAlias(value) ? value.resolve(ctx.doc) : value;
    if (identity.isSeq(value))
      for (const it of value.items)
        mergeValue(ctx, map, it);
    else if (Array.isArray(value))
      for (const it of value)
        mergeValue(ctx, map, it);
    else
      mergeValue(ctx, map, value);
  }
  function mergeValue(ctx, map, value) {
    const source = ctx && identity.isAlias(value) ? value.resolve(ctx.doc) : value;
    if (!identity.isMap(source))
      throw new Error("Merge sources must be maps or map aliases");
    const srcMap = source.toJSON(null, ctx, Map);
    for (const [key, value2] of srcMap) {
      if (map instanceof Map) {
        if (!map.has(key))
          map.set(key, value2);
      } else if (map instanceof Set) {
        map.add(key);
      } else if (!Object.prototype.hasOwnProperty.call(map, key)) {
        Object.defineProperty(map, key, {
          value: value2,
          writable: true,
          enumerable: true,
          configurable: true
        });
      }
    }
    return map;
  }
  exports.addMergeToJSMap = addMergeToJSMap;
  exports.isMergeKey = isMergeKey;
  exports.merge = merge;
});

// node_modules/yaml/dist/nodes/addPairToJSMap.js
var require_addPairToJSMap = __commonJS((exports) => {
  var log = require_log();
  var merge = require_merge();
  var stringify = require_stringify();
  var identity = require_identity();
  var toJS = require_toJS();
  function addPairToJSMap(ctx, map, { key, value }) {
    if (identity.isNode(key) && key.addToJSMap)
      key.addToJSMap(ctx, map, value);
    else if (merge.isMergeKey(ctx, key))
      merge.addMergeToJSMap(ctx, map, value);
    else {
      const jsKey = toJS.toJS(key, "", ctx);
      if (map instanceof Map) {
        map.set(jsKey, toJS.toJS(value, jsKey, ctx));
      } else if (map instanceof Set) {
        map.add(jsKey);
      } else {
        const stringKey = stringifyKey(key, jsKey, ctx);
        const jsValue = toJS.toJS(value, stringKey, ctx);
        if (stringKey in map)
          Object.defineProperty(map, stringKey, {
            value: jsValue,
            writable: true,
            enumerable: true,
            configurable: true
          });
        else
          map[stringKey] = jsValue;
      }
    }
    return map;
  }
  function stringifyKey(key, jsKey, ctx) {
    if (jsKey === null)
      return "";
    if (typeof jsKey !== "object")
      return String(jsKey);
    if (identity.isNode(key) && ctx?.doc) {
      const strCtx = stringify.createStringifyContext(ctx.doc, {});
      strCtx.anchors = new Set;
      for (const node of ctx.anchors.keys())
        strCtx.anchors.add(node.anchor);
      strCtx.inFlow = true;
      strCtx.inStringifyKey = true;
      const strKey = key.toString(strCtx);
      if (!ctx.mapKeyWarned) {
        let jsonStr = JSON.stringify(strKey);
        if (jsonStr.length > 40)
          jsonStr = jsonStr.substring(0, 36) + '..."';
        log.warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);
        ctx.mapKeyWarned = true;
      }
      return strKey;
    }
    return JSON.stringify(jsKey);
  }
  exports.addPairToJSMap = addPairToJSMap;
});

// node_modules/yaml/dist/nodes/Pair.js
var require_Pair = __commonJS((exports) => {
  var createNode = require_createNode();
  var stringifyPair = require_stringifyPair();
  var addPairToJSMap = require_addPairToJSMap();
  var identity = require_identity();
  function createPair(key, value, ctx) {
    const k = createNode.createNode(key, undefined, ctx);
    const v = createNode.createNode(value, undefined, ctx);
    return new Pair(k, v);
  }

  class Pair {
    constructor(key, value = null) {
      Object.defineProperty(this, identity.NODE_TYPE, { value: identity.PAIR });
      this.key = key;
      this.value = value;
    }
    clone(schema) {
      let { key, value } = this;
      if (identity.isNode(key))
        key = key.clone(schema);
      if (identity.isNode(value))
        value = value.clone(schema);
      return new Pair(key, value);
    }
    toJSON(_, ctx) {
      const pair = ctx?.mapAsMap ? new Map : {};
      return addPairToJSMap.addPairToJSMap(ctx, pair, this);
    }
    toString(ctx, onComment, onChompKeep) {
      return ctx?.doc ? stringifyPair.stringifyPair(this, ctx, onComment, onChompKeep) : JSON.stringify(this);
    }
  }
  exports.Pair = Pair;
  exports.createPair = createPair;
});

// node_modules/yaml/dist/stringify/stringifyCollection.js
var require_stringifyCollection = __commonJS((exports) => {
  var identity = require_identity();
  var stringify = require_stringify();
  var stringifyComment = require_stringifyComment();
  function stringifyCollection(collection, ctx, options) {
    const flow = ctx.inFlow ?? collection.flow;
    const stringify2 = flow ? stringifyFlowCollection : stringifyBlockCollection;
    return stringify2(collection, ctx, options);
  }
  function stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {
    const { indent, options: { commentString } } = ctx;
    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });
    let chompKeep = false;
    const lines = [];
    for (let i = 0;i < items.length; ++i) {
      const item = items[i];
      let comment2 = null;
      if (identity.isNode(item)) {
        if (!chompKeep && item.spaceBefore)
          lines.push("");
        addCommentBefore(ctx, lines, item.commentBefore, chompKeep);
        if (item.comment)
          comment2 = item.comment;
      } else if (identity.isPair(item)) {
        const ik = identity.isNode(item.key) ? item.key : null;
        if (ik) {
          if (!chompKeep && ik.spaceBefore)
            lines.push("");
          addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);
        }
      }
      chompKeep = false;
      let str2 = stringify.stringify(item, itemCtx, () => comment2 = null, () => chompKeep = true);
      if (comment2)
        str2 += stringifyComment.lineComment(str2, itemIndent, commentString(comment2));
      if (chompKeep && comment2)
        chompKeep = false;
      lines.push(blockItemPrefix + str2);
    }
    let str;
    if (lines.length === 0) {
      str = flowChars.start + flowChars.end;
    } else {
      str = lines[0];
      for (let i = 1;i < lines.length; ++i) {
        const line = lines[i];
        str += line ? `
${indent}${line}` : `
`;
      }
    }
    if (comment) {
      str += `
` + stringifyComment.indentComment(commentString(comment), indent);
      if (onComment)
        onComment();
    } else if (chompKeep && onChompKeep)
      onChompKeep();
    return str;
  }
  function stringifyFlowCollection({ items }, ctx, { flowChars, itemIndent }) {
    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;
    itemIndent += indentStep;
    const itemCtx = Object.assign({}, ctx, {
      indent: itemIndent,
      inFlow: true,
      type: null
    });
    let reqNewline = false;
    let linesAtValue = 0;
    const lines = [];
    for (let i = 0;i < items.length; ++i) {
      const item = items[i];
      let comment = null;
      if (identity.isNode(item)) {
        if (item.spaceBefore)
          lines.push("");
        addCommentBefore(ctx, lines, item.commentBefore, false);
        if (item.comment)
          comment = item.comment;
      } else if (identity.isPair(item)) {
        const ik = identity.isNode(item.key) ? item.key : null;
        if (ik) {
          if (ik.spaceBefore)
            lines.push("");
          addCommentBefore(ctx, lines, ik.commentBefore, false);
          if (ik.comment)
            reqNewline = true;
        }
        const iv = identity.isNode(item.value) ? item.value : null;
        if (iv) {
          if (iv.comment)
            comment = iv.comment;
          if (iv.commentBefore)
            reqNewline = true;
        } else if (item.value == null && ik?.comment) {
          comment = ik.comment;
        }
      }
      if (comment)
        reqNewline = true;
      let str = stringify.stringify(item, itemCtx, () => comment = null);
      if (i < items.length - 1)
        str += ",";
      if (comment)
        str += stringifyComment.lineComment(str, itemIndent, commentString(comment));
      if (!reqNewline && (lines.length > linesAtValue || str.includes(`
`)))
        reqNewline = true;
      lines.push(str);
      linesAtValue = lines.length;
    }
    const { start, end } = flowChars;
    if (lines.length === 0) {
      return start + end;
    } else {
      if (!reqNewline) {
        const len = lines.reduce((sum, line) => sum + line.length + 2, 2);
        reqNewline = ctx.options.lineWidth > 0 && len > ctx.options.lineWidth;
      }
      if (reqNewline) {
        let str = start;
        for (const line of lines)
          str += line ? `
${indentStep}${indent}${line}` : `
`;
        return `${str}
${indent}${end}`;
      } else {
        return `${start}${fcPadding}${lines.join(" ")}${fcPadding}${end}`;
      }
    }
  }
  function addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {
    if (comment && chompKeep)
      comment = comment.replace(/^\n+/, "");
    if (comment) {
      const ic = stringifyComment.indentComment(commentString(comment), indent);
      lines.push(ic.trimStart());
    }
  }
  exports.stringifyCollection = stringifyCollection;
});

// node_modules/yaml/dist/nodes/YAMLMap.js
var require_YAMLMap = __commonJS((exports) => {
  var stringifyCollection = require_stringifyCollection();
  var addPairToJSMap = require_addPairToJSMap();
  var Collection = require_Collection();
  var identity = require_identity();
  var Pair = require_Pair();
  var Scalar = require_Scalar();
  function findPair(items, key) {
    const k = identity.isScalar(key) ? key.value : key;
    for (const it of items) {
      if (identity.isPair(it)) {
        if (it.key === key || it.key === k)
          return it;
        if (identity.isScalar(it.key) && it.key.value === k)
          return it;
      }
    }
    return;
  }

  class YAMLMap extends Collection.Collection {
    static get tagName() {
      return "tag:yaml.org,2002:map";
    }
    constructor(schema) {
      super(identity.MAP, schema);
      this.items = [];
    }
    static from(schema, obj, ctx) {
      const { keepUndefined, replacer } = ctx;
      const map = new this(schema);
      const add = (key, value) => {
        if (typeof replacer === "function")
          value = replacer.call(obj, key, value);
        else if (Array.isArray(replacer) && !replacer.includes(key))
          return;
        if (value !== undefined || keepUndefined)
          map.items.push(Pair.createPair(key, value, ctx));
      };
      if (obj instanceof Map) {
        for (const [key, value] of obj)
          add(key, value);
      } else if (obj && typeof obj === "object") {
        for (const key of Object.keys(obj))
          add(key, obj[key]);
      }
      if (typeof schema.sortMapEntries === "function") {
        map.items.sort(schema.sortMapEntries);
      }
      return map;
    }
    add(pair, overwrite) {
      let _pair;
      if (identity.isPair(pair))
        _pair = pair;
      else if (!pair || typeof pair !== "object" || !("key" in pair)) {
        _pair = new Pair.Pair(pair, pair?.value);
      } else
        _pair = new Pair.Pair(pair.key, pair.value);
      const prev = findPair(this.items, _pair.key);
      const sortEntries = this.schema?.sortMapEntries;
      if (prev) {
        if (!overwrite)
          throw new Error(`Key ${_pair.key} already set`);
        if (identity.isScalar(prev.value) && Scalar.isScalarValue(_pair.value))
          prev.value.value = _pair.value;
        else
          prev.value = _pair.value;
      } else if (sortEntries) {
        const i = this.items.findIndex((item) => sortEntries(_pair, item) < 0);
        if (i === -1)
          this.items.push(_pair);
        else
          this.items.splice(i, 0, _pair);
      } else {
        this.items.push(_pair);
      }
    }
    delete(key) {
      const it = findPair(this.items, key);
      if (!it)
        return false;
      const del = this.items.splice(this.items.indexOf(it), 1);
      return del.length > 0;
    }
    get(key, keepScalar) {
      const it = findPair(this.items, key);
      const node = it?.value;
      return (!keepScalar && identity.isScalar(node) ? node.value : node) ?? undefined;
    }
    has(key) {
      return !!findPair(this.items, key);
    }
    set(key, value) {
      this.add(new Pair.Pair(key, value), true);
    }
    toJSON(_, ctx, Type) {
      const map = Type ? new Type : ctx?.mapAsMap ? new Map : {};
      if (ctx?.onCreate)
        ctx.onCreate(map);
      for (const item of this.items)
        addPairToJSMap.addPairToJSMap(ctx, map, item);
      return map;
    }
    toString(ctx, onComment, onChompKeep) {
      if (!ctx)
        return JSON.stringify(this);
      for (const item of this.items) {
        if (!identity.isPair(item))
          throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
      }
      if (!ctx.allNullValues && this.hasAllNullValues(false))
        ctx = Object.assign({}, ctx, { allNullValues: true });
      return stringifyCollection.stringifyCollection(this, ctx, {
        blockItemPrefix: "",
        flowChars: { start: "{", end: "}" },
        itemIndent: ctx.indent || "",
        onChompKeep,
        onComment
      });
    }
  }
  exports.YAMLMap = YAMLMap;
  exports.findPair = findPair;
});

// node_modules/yaml/dist/schema/common/map.js
var require_map = __commonJS((exports) => {
  var identity = require_identity();
  var YAMLMap = require_YAMLMap();
  var map = {
    collection: "map",
    default: true,
    nodeClass: YAMLMap.YAMLMap,
    tag: "tag:yaml.org,2002:map",
    resolve(map2, onError) {
      if (!identity.isMap(map2))
        onError("Expected a mapping for this tag");
      return map2;
    },
    createNode: (schema, obj, ctx) => YAMLMap.YAMLMap.from(schema, obj, ctx)
  };
  exports.map = map;
});

// node_modules/yaml/dist/nodes/YAMLSeq.js
var require_YAMLSeq = __commonJS((exports) => {
  var createNode = require_createNode();
  var stringifyCollection = require_stringifyCollection();
  var Collection = require_Collection();
  var identity = require_identity();
  var Scalar = require_Scalar();
  var toJS = require_toJS();

  class YAMLSeq extends Collection.Collection {
    static get tagName() {
      return "tag:yaml.org,2002:seq";
    }
    constructor(schema) {
      super(identity.SEQ, schema);
      this.items = [];
    }
    add(value) {
      this.items.push(value);
    }
    delete(key) {
      const idx = asItemIndex(key);
      if (typeof idx !== "number")
        return false;
      const del = this.items.splice(idx, 1);
      return del.length > 0;
    }
    get(key, keepScalar) {
      const idx = asItemIndex(key);
      if (typeof idx !== "number")
        return;
      const it = this.items[idx];
      return !keepScalar && identity.isScalar(it) ? it.value : it;
    }
    has(key) {
      const idx = asItemIndex(key);
      return typeof idx === "number" && idx < this.items.length;
    }
    set(key, value) {
      const idx = asItemIndex(key);
      if (typeof idx !== "number")
        throw new Error(`Expected a valid index, not ${key}.`);
      const prev = this.items[idx];
      if (identity.isScalar(prev) && Scalar.isScalarValue(value))
        prev.value = value;
      else
        this.items[idx] = value;
    }
    toJSON(_, ctx) {
      const seq = [];
      if (ctx?.onCreate)
        ctx.onCreate(seq);
      let i = 0;
      for (const item of this.items)
        seq.push(toJS.toJS(item, String(i++), ctx));
      return seq;
    }
    toString(ctx, onComment, onChompKeep) {
      if (!ctx)
        return JSON.stringify(this);
      return stringifyCollection.stringifyCollection(this, ctx, {
        blockItemPrefix: "- ",
        flowChars: { start: "[", end: "]" },
        itemIndent: (ctx.indent || "") + "  ",
        onChompKeep,
        onComment
      });
    }
    static from(schema, obj, ctx) {
      const { replacer } = ctx;
      const seq = new this(schema);
      if (obj && Symbol.iterator in Object(obj)) {
        let i = 0;
        for (let it of obj) {
          if (typeof replacer === "function") {
            const key = obj instanceof Set ? it : String(i++);
            it = replacer.call(obj, key, it);
          }
          seq.items.push(createNode.createNode(it, undefined, ctx));
        }
      }
      return seq;
    }
  }
  function asItemIndex(key) {
    let idx = identity.isScalar(key) ? key.value : key;
    if (idx && typeof idx === "string")
      idx = Number(idx);
    return typeof idx === "number" && Number.isInteger(idx) && idx >= 0 ? idx : null;
  }
  exports.YAMLSeq = YAMLSeq;
});

// node_modules/yaml/dist/schema/common/seq.js
var require_seq = __commonJS((exports) => {
  var identity = require_identity();
  var YAMLSeq = require_YAMLSeq();
  var seq = {
    collection: "seq",
    default: true,
    nodeClass: YAMLSeq.YAMLSeq,
    tag: "tag:yaml.org,2002:seq",
    resolve(seq2, onError) {
      if (!identity.isSeq(seq2))
        onError("Expected a sequence for this tag");
      return seq2;
    },
    createNode: (schema, obj, ctx) => YAMLSeq.YAMLSeq.from(schema, obj, ctx)
  };
  exports.seq = seq;
});

// node_modules/yaml/dist/schema/common/string.js
var require_string = __commonJS((exports) => {
  var stringifyString = require_stringifyString();
  var string = {
    identify: (value) => typeof value === "string",
    default: true,
    tag: "tag:yaml.org,2002:str",
    resolve: (str) => str,
    stringify(item, ctx, onComment, onChompKeep) {
      ctx = Object.assign({ actualString: true }, ctx);
      return stringifyString.stringifyString(item, ctx, onComment, onChompKeep);
    }
  };
  exports.string = string;
});

// node_modules/yaml/dist/schema/common/null.js
var require_null = __commonJS((exports) => {
  var Scalar = require_Scalar();
  var nullTag = {
    identify: (value) => value == null,
    createNode: () => new Scalar.Scalar(null),
    default: true,
    tag: "tag:yaml.org,2002:null",
    test: /^(?:~|[Nn]ull|NULL)?$/,
    resolve: () => new Scalar.Scalar(null),
    stringify: ({ source }, ctx) => typeof source === "string" && nullTag.test.test(source) ? source : ctx.options.nullStr
  };
  exports.nullTag = nullTag;
});

// node_modules/yaml/dist/schema/core/bool.js
var require_bool = __commonJS((exports) => {
  var Scalar = require_Scalar();
  var boolTag = {
    identify: (value) => typeof value === "boolean",
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
    resolve: (str) => new Scalar.Scalar(str[0] === "t" || str[0] === "T"),
    stringify({ source, value }, ctx) {
      if (source && boolTag.test.test(source)) {
        const sv = source[0] === "t" || source[0] === "T";
        if (value === sv)
          return source;
      }
      return value ? ctx.options.trueStr : ctx.options.falseStr;
    }
  };
  exports.boolTag = boolTag;
});

// node_modules/yaml/dist/stringify/stringifyNumber.js
var require_stringifyNumber = __commonJS((exports) => {
  function stringifyNumber({ format, minFractionDigits, tag, value }) {
    if (typeof value === "bigint")
      return String(value);
    const num = typeof value === "number" ? value : Number(value);
    if (!isFinite(num))
      return isNaN(num) ? ".nan" : num < 0 ? "-.inf" : ".inf";
    let n = JSON.stringify(value);
    if (!format && minFractionDigits && (!tag || tag === "tag:yaml.org,2002:float") && /^\d/.test(n)) {
      let i = n.indexOf(".");
      if (i < 0) {
        i = n.length;
        n += ".";
      }
      let d = minFractionDigits - (n.length - i - 1);
      while (d-- > 0)
        n += "0";
    }
    return n;
  }
  exports.stringifyNumber = stringifyNumber;
});

// node_modules/yaml/dist/schema/core/float.js
var require_float = __commonJS((exports) => {
  var Scalar = require_Scalar();
  var stringifyNumber = require_stringifyNumber();
  var floatNaN = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,
    resolve: (str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber.stringifyNumber
  };
  var floatExp = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "EXP",
    test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
    resolve: (str) => parseFloat(str),
    stringify(node) {
      const num = Number(node.value);
      return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);
    }
  };
  var float = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
    resolve(str) {
      const node = new Scalar.Scalar(parseFloat(str));
      const dot = str.indexOf(".");
      if (dot !== -1 && str[str.length - 1] === "0")
        node.minFractionDigits = str.length - dot - 1;
      return node;
    },
    stringify: stringifyNumber.stringifyNumber
  };
  exports.float = float;
  exports.floatExp = floatExp;
  exports.floatNaN = floatNaN;
});

// node_modules/yaml/dist/schema/core/int.js
var require_int = __commonJS((exports) => {
  var stringifyNumber = require_stringifyNumber();
  var intIdentify = (value) => typeof value === "bigint" || Number.isInteger(value);
  var intResolve = (str, offset, radix, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix);
  function intStringify(node, radix, prefix) {
    const { value } = node;
    if (intIdentify(value) && value >= 0)
      return prefix + value.toString(radix);
    return stringifyNumber.stringifyNumber(node);
  }
  var intOct = {
    identify: (value) => intIdentify(value) && value >= 0,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "OCT",
    test: /^0o[0-7]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),
    stringify: (node) => intStringify(node, 8, "0o")
  };
  var int = {
    identify: intIdentify,
    default: true,
    tag: "tag:yaml.org,2002:int",
    test: /^[-+]?[0-9]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
    stringify: stringifyNumber.stringifyNumber
  };
  var intHex = {
    identify: (value) => intIdentify(value) && value >= 0,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "HEX",
    test: /^0x[0-9a-fA-F]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
    stringify: (node) => intStringify(node, 16, "0x")
  };
  exports.int = int;
  exports.intHex = intHex;
  exports.intOct = intOct;
});

// node_modules/yaml/dist/schema/core/schema.js
var require_schema = __commonJS((exports) => {
  var map = require_map();
  var _null = require_null();
  var seq = require_seq();
  var string = require_string();
  var bool = require_bool();
  var float = require_float();
  var int = require_int();
  var schema = [
    map.map,
    seq.seq,
    string.string,
    _null.nullTag,
    bool.boolTag,
    int.intOct,
    int.int,
    int.intHex,
    float.floatNaN,
    float.floatExp,
    float.float
  ];
  exports.schema = schema;
});

// node_modules/yaml/dist/schema/json/schema.js
var require_schema2 = __commonJS((exports) => {
  var Scalar = require_Scalar();
  var map = require_map();
  var seq = require_seq();
  function intIdentify(value) {
    return typeof value === "bigint" || Number.isInteger(value);
  }
  var stringifyJSON = ({ value }) => JSON.stringify(value);
  var jsonScalars = [
    {
      identify: (value) => typeof value === "string",
      default: true,
      tag: "tag:yaml.org,2002:str",
      resolve: (str) => str,
      stringify: stringifyJSON
    },
    {
      identify: (value) => value == null,
      createNode: () => new Scalar.Scalar(null),
      default: true,
      tag: "tag:yaml.org,2002:null",
      test: /^null$/,
      resolve: () => null,
      stringify: stringifyJSON
    },
    {
      identify: (value) => typeof value === "boolean",
      default: true,
      tag: "tag:yaml.org,2002:bool",
      test: /^true$|^false$/,
      resolve: (str) => str === "true",
      stringify: stringifyJSON
    },
    {
      identify: intIdentify,
      default: true,
      tag: "tag:yaml.org,2002:int",
      test: /^-?(?:0|[1-9][0-9]*)$/,
      resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),
      stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)
    },
    {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
      resolve: (str) => parseFloat(str),
      stringify: stringifyJSON
    }
  ];
  var jsonError = {
    default: true,
    tag: "",
    test: /^/,
    resolve(str, onError) {
      onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
      return str;
    }
  };
  var schema = [map.map, seq.seq].concat(jsonScalars, jsonError);
  exports.schema = schema;
});

// node_modules/yaml/dist/schema/yaml-1.1/binary.js
var require_binary = __commonJS((exports) => {
  var node_buffer = __require("node:buffer");
  var Scalar = require_Scalar();
  var stringifyString = require_stringifyString();
  var binary = {
    identify: (value) => value instanceof Uint8Array,
    default: false,
    tag: "tag:yaml.org,2002:binary",
    resolve(src, onError) {
      if (typeof node_buffer.Buffer === "function") {
        return node_buffer.Buffer.from(src, "base64");
      } else if (typeof atob === "function") {
        const str = atob(src.replace(/[\n\r]/g, ""));
        const buffer = new Uint8Array(str.length);
        for (let i = 0;i < str.length; ++i)
          buffer[i] = str.charCodeAt(i);
        return buffer;
      } else {
        onError("This environment does not support reading binary tags; either Buffer or atob is required");
        return src;
      }
    },
    stringify({ comment, type, value }, ctx, onComment, onChompKeep) {
      if (!value)
        return "";
      const buf = value;
      let str;
      if (typeof node_buffer.Buffer === "function") {
        str = buf instanceof node_buffer.Buffer ? buf.toString("base64") : node_buffer.Buffer.from(buf.buffer).toString("base64");
      } else if (typeof btoa === "function") {
        let s = "";
        for (let i = 0;i < buf.length; ++i)
          s += String.fromCharCode(buf[i]);
        str = btoa(s);
      } else {
        throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
      }
      if (!type)
        type = Scalar.Scalar.BLOCK_LITERAL;
      if (type !== Scalar.Scalar.QUOTE_DOUBLE) {
        const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
        const n = Math.ceil(str.length / lineWidth);
        const lines = new Array(n);
        for (let i = 0, o = 0;i < n; ++i, o += lineWidth) {
          lines[i] = str.substr(o, lineWidth);
        }
        str = lines.join(type === Scalar.Scalar.BLOCK_LITERAL ? `
` : " ");
      }
      return stringifyString.stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);
    }
  };
  exports.binary = binary;
});

// node_modules/yaml/dist/schema/yaml-1.1/pairs.js
var require_pairs = __commonJS((exports) => {
  var identity = require_identity();
  var Pair = require_Pair();
  var Scalar = require_Scalar();
  var YAMLSeq = require_YAMLSeq();
  function resolvePairs(seq, onError) {
    if (identity.isSeq(seq)) {
      for (let i = 0;i < seq.items.length; ++i) {
        let item = seq.items[i];
        if (identity.isPair(item))
          continue;
        else if (identity.isMap(item)) {
          if (item.items.length > 1)
            onError("Each pair must have its own sequence indicator");
          const pair = item.items[0] || new Pair.Pair(new Scalar.Scalar(null));
          if (item.commentBefore)
            pair.key.commentBefore = pair.key.commentBefore ? `${item.commentBefore}
${pair.key.commentBefore}` : item.commentBefore;
          if (item.comment) {
            const cn = pair.value ?? pair.key;
            cn.comment = cn.comment ? `${item.comment}
${cn.comment}` : item.comment;
          }
          item = pair;
        }
        seq.items[i] = identity.isPair(item) ? item : new Pair.Pair(item);
      }
    } else
      onError("Expected a sequence for this tag");
    return seq;
  }
  function createPairs(schema, iterable, ctx) {
    const { replacer } = ctx;
    const pairs2 = new YAMLSeq.YAMLSeq(schema);
    pairs2.tag = "tag:yaml.org,2002:pairs";
    let i = 0;
    if (iterable && Symbol.iterator in Object(iterable))
      for (let it of iterable) {
        if (typeof replacer === "function")
          it = replacer.call(iterable, String(i++), it);
        let key, value;
        if (Array.isArray(it)) {
          if (it.length === 2) {
            key = it[0];
            value = it[1];
          } else
            throw new TypeError(`Expected [key, value] tuple: ${it}`);
        } else if (it && it instanceof Object) {
          const keys = Object.keys(it);
          if (keys.length === 1) {
            key = keys[0];
            value = it[key];
          } else {
            throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);
          }
        } else {
          key = it;
        }
        pairs2.items.push(Pair.createPair(key, value, ctx));
      }
    return pairs2;
  }
  var pairs = {
    collection: "seq",
    default: false,
    tag: "tag:yaml.org,2002:pairs",
    resolve: resolvePairs,
    createNode: createPairs
  };
  exports.createPairs = createPairs;
  exports.pairs = pairs;
  exports.resolvePairs = resolvePairs;
});

// node_modules/yaml/dist/schema/yaml-1.1/omap.js
var require_omap = __commonJS((exports) => {
  var identity = require_identity();
  var toJS = require_toJS();
  var YAMLMap = require_YAMLMap();
  var YAMLSeq = require_YAMLSeq();
  var pairs = require_pairs();

  class YAMLOMap extends YAMLSeq.YAMLSeq {
    constructor() {
      super();
      this.add = YAMLMap.YAMLMap.prototype.add.bind(this);
      this.delete = YAMLMap.YAMLMap.prototype.delete.bind(this);
      this.get = YAMLMap.YAMLMap.prototype.get.bind(this);
      this.has = YAMLMap.YAMLMap.prototype.has.bind(this);
      this.set = YAMLMap.YAMLMap.prototype.set.bind(this);
      this.tag = YAMLOMap.tag;
    }
    toJSON(_, ctx) {
      if (!ctx)
        return super.toJSON(_);
      const map = new Map;
      if (ctx?.onCreate)
        ctx.onCreate(map);
      for (const pair of this.items) {
        let key, value;
        if (identity.isPair(pair)) {
          key = toJS.toJS(pair.key, "", ctx);
          value = toJS.toJS(pair.value, key, ctx);
        } else {
          key = toJS.toJS(pair, "", ctx);
        }
        if (map.has(key))
          throw new Error("Ordered maps must not include duplicate keys");
        map.set(key, value);
      }
      return map;
    }
    static from(schema, iterable, ctx) {
      const pairs$1 = pairs.createPairs(schema, iterable, ctx);
      const omap2 = new this;
      omap2.items = pairs$1.items;
      return omap2;
    }
  }
  YAMLOMap.tag = "tag:yaml.org,2002:omap";
  var omap = {
    collection: "seq",
    identify: (value) => value instanceof Map,
    nodeClass: YAMLOMap,
    default: false,
    tag: "tag:yaml.org,2002:omap",
    resolve(seq, onError) {
      const pairs$1 = pairs.resolvePairs(seq, onError);
      const seenKeys = [];
      for (const { key } of pairs$1.items) {
        if (identity.isScalar(key)) {
          if (seenKeys.includes(key.value)) {
            onError(`Ordered maps must not include duplicate keys: ${key.value}`);
          } else {
            seenKeys.push(key.value);
          }
        }
      }
      return Object.assign(new YAMLOMap, pairs$1);
    },
    createNode: (schema, iterable, ctx) => YAMLOMap.from(schema, iterable, ctx)
  };
  exports.YAMLOMap = YAMLOMap;
  exports.omap = omap;
});

// node_modules/yaml/dist/schema/yaml-1.1/bool.js
var require_bool2 = __commonJS((exports) => {
  var Scalar = require_Scalar();
  function boolStringify({ value, source }, ctx) {
    const boolObj = value ? trueTag : falseTag;
    if (source && boolObj.test.test(source))
      return source;
    return value ? ctx.options.trueStr : ctx.options.falseStr;
  }
  var trueTag = {
    identify: (value) => value === true,
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
    resolve: () => new Scalar.Scalar(true),
    stringify: boolStringify
  };
  var falseTag = {
    identify: (value) => value === false,
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,
    resolve: () => new Scalar.Scalar(false),
    stringify: boolStringify
  };
  exports.falseTag = falseTag;
  exports.trueTag = trueTag;
});

// node_modules/yaml/dist/schema/yaml-1.1/float.js
var require_float2 = __commonJS((exports) => {
  var Scalar = require_Scalar();
  var stringifyNumber = require_stringifyNumber();
  var floatNaN = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,
    resolve: (str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber.stringifyNumber
  };
  var floatExp = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "EXP",
    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
    resolve: (str) => parseFloat(str.replace(/_/g, "")),
    stringify(node) {
      const num = Number(node.value);
      return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);
    }
  };
  var float = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,
    resolve(str) {
      const node = new Scalar.Scalar(parseFloat(str.replace(/_/g, "")));
      const dot = str.indexOf(".");
      if (dot !== -1) {
        const f = str.substring(dot + 1).replace(/_/g, "");
        if (f[f.length - 1] === "0")
          node.minFractionDigits = f.length;
      }
      return node;
    },
    stringify: stringifyNumber.stringifyNumber
  };
  exports.float = float;
  exports.floatExp = floatExp;
  exports.floatNaN = floatNaN;
});

// node_modules/yaml/dist/schema/yaml-1.1/int.js
var require_int2 = __commonJS((exports) => {
  var stringifyNumber = require_stringifyNumber();
  var intIdentify = (value) => typeof value === "bigint" || Number.isInteger(value);
  function intResolve(str, offset, radix, { intAsBigInt }) {
    const sign = str[0];
    if (sign === "-" || sign === "+")
      offset += 1;
    str = str.substring(offset).replace(/_/g, "");
    if (intAsBigInt) {
      switch (radix) {
        case 2:
          str = `0b${str}`;
          break;
        case 8:
          str = `0o${str}`;
          break;
        case 16:
          str = `0x${str}`;
          break;
      }
      const n2 = BigInt(str);
      return sign === "-" ? BigInt(-1) * n2 : n2;
    }
    const n = parseInt(str, radix);
    return sign === "-" ? -1 * n : n;
  }
  function intStringify(node, radix, prefix) {
    const { value } = node;
    if (intIdentify(value)) {
      const str = value.toString(radix);
      return value < 0 ? "-" + prefix + str.substr(1) : prefix + str;
    }
    return stringifyNumber.stringifyNumber(node);
  }
  var intBin = {
    identify: intIdentify,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "BIN",
    test: /^[-+]?0b[0-1_]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),
    stringify: (node) => intStringify(node, 2, "0b")
  };
  var intOct = {
    identify: intIdentify,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "OCT",
    test: /^[-+]?0[0-7_]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),
    stringify: (node) => intStringify(node, 8, "0")
  };
  var int = {
    identify: intIdentify,
    default: true,
    tag: "tag:yaml.org,2002:int",
    test: /^[-+]?[0-9][0-9_]*$/,
    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
    stringify: stringifyNumber.stringifyNumber
  };
  var intHex = {
    identify: intIdentify,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "HEX",
    test: /^[-+]?0x[0-9a-fA-F_]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
    stringify: (node) => intStringify(node, 16, "0x")
  };
  exports.int = int;
  exports.intBin = intBin;
  exports.intHex = intHex;
  exports.intOct = intOct;
});

// node_modules/yaml/dist/schema/yaml-1.1/set.js
var require_set = __commonJS((exports) => {
  var identity = require_identity();
  var Pair = require_Pair();
  var YAMLMap = require_YAMLMap();

  class YAMLSet extends YAMLMap.YAMLMap {
    constructor(schema) {
      super(schema);
      this.tag = YAMLSet.tag;
    }
    add(key) {
      let pair;
      if (identity.isPair(key))
        pair = key;
      else if (key && typeof key === "object" && "key" in key && "value" in key && key.value === null)
        pair = new Pair.Pair(key.key, null);
      else
        pair = new Pair.Pair(key, null);
      const prev = YAMLMap.findPair(this.items, pair.key);
      if (!prev)
        this.items.push(pair);
    }
    get(key, keepPair) {
      const pair = YAMLMap.findPair(this.items, key);
      return !keepPair && identity.isPair(pair) ? identity.isScalar(pair.key) ? pair.key.value : pair.key : pair;
    }
    set(key, value) {
      if (typeof value !== "boolean")
        throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);
      const prev = YAMLMap.findPair(this.items, key);
      if (prev && !value) {
        this.items.splice(this.items.indexOf(prev), 1);
      } else if (!prev && value) {
        this.items.push(new Pair.Pair(key));
      }
    }
    toJSON(_, ctx) {
      return super.toJSON(_, ctx, Set);
    }
    toString(ctx, onComment, onChompKeep) {
      if (!ctx)
        return JSON.stringify(this);
      if (this.hasAllNullValues(true))
        return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);
      else
        throw new Error("Set items must all have null values");
    }
    static from(schema, iterable, ctx) {
      const { replacer } = ctx;
      const set2 = new this(schema);
      if (iterable && Symbol.iterator in Object(iterable))
        for (let value of iterable) {
          if (typeof replacer === "function")
            value = replacer.call(iterable, value, value);
          set2.items.push(Pair.createPair(value, null, ctx));
        }
      return set2;
    }
  }
  YAMLSet.tag = "tag:yaml.org,2002:set";
  var set = {
    collection: "map",
    identify: (value) => value instanceof Set,
    nodeClass: YAMLSet,
    default: false,
    tag: "tag:yaml.org,2002:set",
    createNode: (schema, iterable, ctx) => YAMLSet.from(schema, iterable, ctx),
    resolve(map, onError) {
      if (identity.isMap(map)) {
        if (map.hasAllNullValues(true))
          return Object.assign(new YAMLSet, map);
        else
          onError("Set items must all have null values");
      } else
        onError("Expected a mapping for this tag");
      return map;
    }
  };
  exports.YAMLSet = YAMLSet;
  exports.set = set;
});

// node_modules/yaml/dist/schema/yaml-1.1/timestamp.js
var require_timestamp = __commonJS((exports) => {
  var stringifyNumber = require_stringifyNumber();
  function parseSexagesimal(str, asBigInt) {
    const sign = str[0];
    const parts = sign === "-" || sign === "+" ? str.substring(1) : str;
    const num = (n) => asBigInt ? BigInt(n) : Number(n);
    const res = parts.replace(/_/g, "").split(":").reduce((res2, p) => res2 * num(60) + num(p), num(0));
    return sign === "-" ? num(-1) * res : res;
  }
  function stringifySexagesimal(node) {
    let { value } = node;
    let num = (n) => n;
    if (typeof value === "bigint")
      num = (n) => BigInt(n);
    else if (isNaN(value) || !isFinite(value))
      return stringifyNumber.stringifyNumber(node);
    let sign = "";
    if (value < 0) {
      sign = "-";
      value *= num(-1);
    }
    const _60 = num(60);
    const parts = [value % _60];
    if (value < 60) {
      parts.unshift(0);
    } else {
      value = (value - parts[0]) / _60;
      parts.unshift(value % _60);
      if (value >= 60) {
        value = (value - parts[0]) / _60;
        parts.unshift(value);
      }
    }
    return sign + parts.map((n) => String(n).padStart(2, "0")).join(":").replace(/000000\d*$/, "");
  }
  var intTime = {
    identify: (value) => typeof value === "bigint" || Number.isInteger(value),
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "TIME",
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
    resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),
    stringify: stringifySexagesimal
  };
  var floatTime = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "TIME",
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
    resolve: (str) => parseSexagesimal(str, false),
    stringify: stringifySexagesimal
  };
  var timestamp = {
    identify: (value) => value instanceof Date,
    default: true,
    tag: "tag:yaml.org,2002:timestamp",
    test: RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})" + "(?:" + "(?:t|T|[ \\t]+)" + "([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)" + "(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?" + ")?$"),
    resolve(str) {
      const match = str.match(timestamp.test);
      if (!match)
        throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");
      const [, year, month, day, hour, minute, second] = match.map(Number);
      const millisec = match[7] ? Number((match[7] + "00").substr(1, 3)) : 0;
      let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
      const tz = match[8];
      if (tz && tz !== "Z") {
        let d = parseSexagesimal(tz, false);
        if (Math.abs(d) < 30)
          d *= 60;
        date -= 60000 * d;
      }
      return new Date(date);
    },
    stringify: ({ value }) => value?.toISOString().replace(/(T00:00:00)?\.000Z$/, "") ?? ""
  };
  exports.floatTime = floatTime;
  exports.intTime = intTime;
  exports.timestamp = timestamp;
});

// node_modules/yaml/dist/schema/yaml-1.1/schema.js
var require_schema3 = __commonJS((exports) => {
  var map = require_map();
  var _null = require_null();
  var seq = require_seq();
  var string = require_string();
  var binary = require_binary();
  var bool = require_bool2();
  var float = require_float2();
  var int = require_int2();
  var merge = require_merge();
  var omap = require_omap();
  var pairs = require_pairs();
  var set = require_set();
  var timestamp = require_timestamp();
  var schema = [
    map.map,
    seq.seq,
    string.string,
    _null.nullTag,
    bool.trueTag,
    bool.falseTag,
    int.intBin,
    int.intOct,
    int.int,
    int.intHex,
    float.floatNaN,
    float.floatExp,
    float.float,
    binary.binary,
    merge.merge,
    omap.omap,
    pairs.pairs,
    set.set,
    timestamp.intTime,
    timestamp.floatTime,
    timestamp.timestamp
  ];
  exports.schema = schema;
});

// node_modules/yaml/dist/schema/tags.js
var require_tags = __commonJS((exports) => {
  var map = require_map();
  var _null = require_null();
  var seq = require_seq();
  var string = require_string();
  var bool = require_bool();
  var float = require_float();
  var int = require_int();
  var schema = require_schema();
  var schema$1 = require_schema2();
  var binary = require_binary();
  var merge = require_merge();
  var omap = require_omap();
  var pairs = require_pairs();
  var schema$2 = require_schema3();
  var set = require_set();
  var timestamp = require_timestamp();
  var schemas = new Map([
    ["core", schema.schema],
    ["failsafe", [map.map, seq.seq, string.string]],
    ["json", schema$1.schema],
    ["yaml11", schema$2.schema],
    ["yaml-1.1", schema$2.schema]
  ]);
  var tagsByName = {
    binary: binary.binary,
    bool: bool.boolTag,
    float: float.float,
    floatExp: float.floatExp,
    floatNaN: float.floatNaN,
    floatTime: timestamp.floatTime,
    int: int.int,
    intHex: int.intHex,
    intOct: int.intOct,
    intTime: timestamp.intTime,
    map: map.map,
    merge: merge.merge,
    null: _null.nullTag,
    omap: omap.omap,
    pairs: pairs.pairs,
    seq: seq.seq,
    set: set.set,
    timestamp: timestamp.timestamp
  };
  var coreKnownTags = {
    "tag:yaml.org,2002:binary": binary.binary,
    "tag:yaml.org,2002:merge": merge.merge,
    "tag:yaml.org,2002:omap": omap.omap,
    "tag:yaml.org,2002:pairs": pairs.pairs,
    "tag:yaml.org,2002:set": set.set,
    "tag:yaml.org,2002:timestamp": timestamp.timestamp
  };
  function getTags(customTags, schemaName, addMergeTag) {
    const schemaTags = schemas.get(schemaName);
    if (schemaTags && !customTags) {
      return addMergeTag && !schemaTags.includes(merge.merge) ? schemaTags.concat(merge.merge) : schemaTags.slice();
    }
    let tags = schemaTags;
    if (!tags) {
      if (Array.isArray(customTags))
        tags = [];
      else {
        const keys = Array.from(schemas.keys()).filter((key) => key !== "yaml11").map((key) => JSON.stringify(key)).join(", ");
        throw new Error(`Unknown schema "${schemaName}"; use one of ${keys} or define customTags array`);
      }
    }
    if (Array.isArray(customTags)) {
      for (const tag of customTags)
        tags = tags.concat(tag);
    } else if (typeof customTags === "function") {
      tags = customTags(tags.slice());
    }
    if (addMergeTag)
      tags = tags.concat(merge.merge);
    return tags.reduce((tags2, tag) => {
      const tagObj = typeof tag === "string" ? tagsByName[tag] : tag;
      if (!tagObj) {
        const tagName = JSON.stringify(tag);
        const keys = Object.keys(tagsByName).map((key) => JSON.stringify(key)).join(", ");
        throw new Error(`Unknown custom tag ${tagName}; use one of ${keys}`);
      }
      if (!tags2.includes(tagObj))
        tags2.push(tagObj);
      return tags2;
    }, []);
  }
  exports.coreKnownTags = coreKnownTags;
  exports.getTags = getTags;
});

// node_modules/yaml/dist/schema/Schema.js
var require_Schema = __commonJS((exports) => {
  var identity = require_identity();
  var map = require_map();
  var seq = require_seq();
  var string = require_string();
  var tags = require_tags();
  var sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;

  class Schema {
    constructor({ compat, customTags, merge, resolveKnownTags, schema, sortMapEntries, toStringDefaults }) {
      this.compat = Array.isArray(compat) ? tags.getTags(compat, "compat") : compat ? tags.getTags(null, compat) : null;
      this.name = typeof schema === "string" && schema || "core";
      this.knownTags = resolveKnownTags ? tags.coreKnownTags : {};
      this.tags = tags.getTags(customTags, this.name, merge);
      this.toStringOptions = toStringDefaults ?? null;
      Object.defineProperty(this, identity.MAP, { value: map.map });
      Object.defineProperty(this, identity.SCALAR, { value: string.string });
      Object.defineProperty(this, identity.SEQ, { value: seq.seq });
      this.sortMapEntries = typeof sortMapEntries === "function" ? sortMapEntries : sortMapEntries === true ? sortMapEntriesByKey : null;
    }
    clone() {
      const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));
      copy.tags = this.tags.slice();
      return copy;
    }
  }
  exports.Schema = Schema;
});

// node_modules/yaml/dist/stringify/stringifyDocument.js
var require_stringifyDocument = __commonJS((exports) => {
  var identity = require_identity();
  var stringify = require_stringify();
  var stringifyComment = require_stringifyComment();
  function stringifyDocument(doc, options) {
    const lines = [];
    let hasDirectives = options.directives === true;
    if (options.directives !== false && doc.directives) {
      const dir = doc.directives.toString(doc);
      if (dir) {
        lines.push(dir);
        hasDirectives = true;
      } else if (doc.directives.docStart)
        hasDirectives = true;
    }
    if (hasDirectives)
      lines.push("---");
    const ctx = stringify.createStringifyContext(doc, options);
    const { commentString } = ctx.options;
    if (doc.commentBefore) {
      if (lines.length !== 1)
        lines.unshift("");
      const cs = commentString(doc.commentBefore);
      lines.unshift(stringifyComment.indentComment(cs, ""));
    }
    let chompKeep = false;
    let contentComment = null;
    if (doc.contents) {
      if (identity.isNode(doc.contents)) {
        if (doc.contents.spaceBefore && hasDirectives)
          lines.push("");
        if (doc.contents.commentBefore) {
          const cs = commentString(doc.contents.commentBefore);
          lines.push(stringifyComment.indentComment(cs, ""));
        }
        ctx.forceBlockIndent = !!doc.comment;
        contentComment = doc.contents.comment;
      }
      const onChompKeep = contentComment ? undefined : () => chompKeep = true;
      let body = stringify.stringify(doc.contents, ctx, () => contentComment = null, onChompKeep);
      if (contentComment)
        body += stringifyComment.lineComment(body, "", commentString(contentComment));
      if ((body[0] === "|" || body[0] === ">") && lines[lines.length - 1] === "---") {
        lines[lines.length - 1] = `--- ${body}`;
      } else
        lines.push(body);
    } else {
      lines.push(stringify.stringify(doc.contents, ctx));
    }
    if (doc.directives?.docEnd) {
      if (doc.comment) {
        const cs = commentString(doc.comment);
        if (cs.includes(`
`)) {
          lines.push("...");
          lines.push(stringifyComment.indentComment(cs, ""));
        } else {
          lines.push(`... ${cs}`);
        }
      } else {
        lines.push("...");
      }
    } else {
      let dc = doc.comment;
      if (dc && chompKeep)
        dc = dc.replace(/^\n+/, "");
      if (dc) {
        if ((!chompKeep || contentComment) && lines[lines.length - 1] !== "")
          lines.push("");
        lines.push(stringifyComment.indentComment(commentString(dc), ""));
      }
    }
    return lines.join(`
`) + `
`;
  }
  exports.stringifyDocument = stringifyDocument;
});

// node_modules/yaml/dist/doc/Document.js
var require_Document = __commonJS((exports) => {
  var Alias = require_Alias();
  var Collection = require_Collection();
  var identity = require_identity();
  var Pair = require_Pair();
  var toJS = require_toJS();
  var Schema = require_Schema();
  var stringifyDocument = require_stringifyDocument();
  var anchors = require_anchors();
  var applyReviver = require_applyReviver();
  var createNode = require_createNode();
  var directives = require_directives();

  class Document {
    constructor(value, replacer, options) {
      this.commentBefore = null;
      this.comment = null;
      this.errors = [];
      this.warnings = [];
      Object.defineProperty(this, identity.NODE_TYPE, { value: identity.DOC });
      let _replacer = null;
      if (typeof replacer === "function" || Array.isArray(replacer)) {
        _replacer = replacer;
      } else if (options === undefined && replacer) {
        options = replacer;
        replacer = undefined;
      }
      const opt = Object.assign({
        intAsBigInt: false,
        keepSourceTokens: false,
        logLevel: "warn",
        prettyErrors: true,
        strict: true,
        stringKeys: false,
        uniqueKeys: true,
        version: "1.2"
      }, options);
      this.options = opt;
      let { version } = opt;
      if (options?._directives) {
        this.directives = options._directives.atDocument();
        if (this.directives.yaml.explicit)
          version = this.directives.yaml.version;
      } else
        this.directives = new directives.Directives({ version });
      this.setSchema(version, options);
      this.contents = value === undefined ? null : this.createNode(value, _replacer, options);
    }
    clone() {
      const copy = Object.create(Document.prototype, {
        [identity.NODE_TYPE]: { value: identity.DOC }
      });
      copy.commentBefore = this.commentBefore;
      copy.comment = this.comment;
      copy.errors = this.errors.slice();
      copy.warnings = this.warnings.slice();
      copy.options = Object.assign({}, this.options);
      if (this.directives)
        copy.directives = this.directives.clone();
      copy.schema = this.schema.clone();
      copy.contents = identity.isNode(this.contents) ? this.contents.clone(copy.schema) : this.contents;
      if (this.range)
        copy.range = this.range.slice();
      return copy;
    }
    add(value) {
      if (assertCollection(this.contents))
        this.contents.add(value);
    }
    addIn(path, value) {
      if (assertCollection(this.contents))
        this.contents.addIn(path, value);
    }
    createAlias(node, name) {
      if (!node.anchor) {
        const prev = anchors.anchorNames(this);
        node.anchor = !name || prev.has(name) ? anchors.findNewAnchor(name || "a", prev) : name;
      }
      return new Alias.Alias(node.anchor);
    }
    createNode(value, replacer, options) {
      let _replacer = undefined;
      if (typeof replacer === "function") {
        value = replacer.call({ "": value }, "", value);
        _replacer = replacer;
      } else if (Array.isArray(replacer)) {
        const keyToStr = (v) => typeof v === "number" || v instanceof String || v instanceof Number;
        const asStr = replacer.filter(keyToStr).map(String);
        if (asStr.length > 0)
          replacer = replacer.concat(asStr);
        _replacer = replacer;
      } else if (options === undefined && replacer) {
        options = replacer;
        replacer = undefined;
      }
      const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options ?? {};
      const { onAnchor, setAnchors, sourceObjects } = anchors.createNodeAnchors(this, anchorPrefix || "a");
      const ctx = {
        aliasDuplicateObjects: aliasDuplicateObjects ?? true,
        keepUndefined: keepUndefined ?? false,
        onAnchor,
        onTagObj,
        replacer: _replacer,
        schema: this.schema,
        sourceObjects
      };
      const node = createNode.createNode(value, tag, ctx);
      if (flow && identity.isCollection(node))
        node.flow = true;
      setAnchors();
      return node;
    }
    createPair(key, value, options = {}) {
      const k = this.createNode(key, null, options);
      const v = this.createNode(value, null, options);
      return new Pair.Pair(k, v);
    }
    delete(key) {
      return assertCollection(this.contents) ? this.contents.delete(key) : false;
    }
    deleteIn(path) {
      if (Collection.isEmptyPath(path)) {
        if (this.contents == null)
          return false;
        this.contents = null;
        return true;
      }
      return assertCollection(this.contents) ? this.contents.deleteIn(path) : false;
    }
    get(key, keepScalar) {
      return identity.isCollection(this.contents) ? this.contents.get(key, keepScalar) : undefined;
    }
    getIn(path, keepScalar) {
      if (Collection.isEmptyPath(path))
        return !keepScalar && identity.isScalar(this.contents) ? this.contents.value : this.contents;
      return identity.isCollection(this.contents) ? this.contents.getIn(path, keepScalar) : undefined;
    }
    has(key) {
      return identity.isCollection(this.contents) ? this.contents.has(key) : false;
    }
    hasIn(path) {
      if (Collection.isEmptyPath(path))
        return this.contents !== undefined;
      return identity.isCollection(this.contents) ? this.contents.hasIn(path) : false;
    }
    set(key, value) {
      if (this.contents == null) {
        this.contents = Collection.collectionFromPath(this.schema, [key], value);
      } else if (assertCollection(this.contents)) {
        this.contents.set(key, value);
      }
    }
    setIn(path, value) {
      if (Collection.isEmptyPath(path)) {
        this.contents = value;
      } else if (this.contents == null) {
        this.contents = Collection.collectionFromPath(this.schema, Array.from(path), value);
      } else if (assertCollection(this.contents)) {
        this.contents.setIn(path, value);
      }
    }
    setSchema(version, options = {}) {
      if (typeof version === "number")
        version = String(version);
      let opt;
      switch (version) {
        case "1.1":
          if (this.directives)
            this.directives.yaml.version = "1.1";
          else
            this.directives = new directives.Directives({ version: "1.1" });
          opt = { resolveKnownTags: false, schema: "yaml-1.1" };
          break;
        case "1.2":
        case "next":
          if (this.directives)
            this.directives.yaml.version = version;
          else
            this.directives = new directives.Directives({ version });
          opt = { resolveKnownTags: true, schema: "core" };
          break;
        case null:
          if (this.directives)
            delete this.directives;
          opt = null;
          break;
        default: {
          const sv = JSON.stringify(version);
          throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);
        }
      }
      if (options.schema instanceof Object)
        this.schema = options.schema;
      else if (opt)
        this.schema = new Schema.Schema(Object.assign(opt, options));
      else
        throw new Error(`With a null YAML version, the { schema: Schema } option is required`);
    }
    toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
      const ctx = {
        anchors: new Map,
        doc: this,
        keep: !json,
        mapAsMap: mapAsMap === true,
        mapKeyWarned: false,
        maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100
      };
      const res = toJS.toJS(this.contents, jsonArg ?? "", ctx);
      if (typeof onAnchor === "function")
        for (const { count, res: res2 } of ctx.anchors.values())
          onAnchor(res2, count);
      return typeof reviver === "function" ? applyReviver.applyReviver(reviver, { "": res }, "", res) : res;
    }
    toJSON(jsonArg, onAnchor) {
      return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });
    }
    toString(options = {}) {
      if (this.errors.length > 0)
        throw new Error("Document with errors cannot be stringified");
      if ("indent" in options && (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {
        const s = JSON.stringify(options.indent);
        throw new Error(`"indent" option must be a positive integer, not ${s}`);
      }
      return stringifyDocument.stringifyDocument(this, options);
    }
  }
  function assertCollection(contents) {
    if (identity.isCollection(contents))
      return true;
    throw new Error("Expected a YAML collection as document contents");
  }
  exports.Document = Document;
});

// node_modules/yaml/dist/errors.js
var require_errors2 = __commonJS((exports) => {
  class YAMLError extends Error {
    constructor(name, pos, code, message) {
      super();
      this.name = name;
      this.code = code;
      this.message = message;
      this.pos = pos;
    }
  }

  class YAMLParseError extends YAMLError {
    constructor(pos, code, message) {
      super("YAMLParseError", pos, code, message);
    }
  }

  class YAMLWarning extends YAMLError {
    constructor(pos, code, message) {
      super("YAMLWarning", pos, code, message);
    }
  }
  var prettifyError = (src, lc) => (error) => {
    if (error.pos[0] === -1)
      return;
    error.linePos = error.pos.map((pos) => lc.linePos(pos));
    const { line, col } = error.linePos[0];
    error.message += ` at line ${line}, column ${col}`;
    let ci = col - 1;
    let lineStr = src.substring(lc.lineStarts[line - 1], lc.lineStarts[line]).replace(/[\n\r]+$/, "");
    if (ci >= 60 && lineStr.length > 80) {
      const trimStart = Math.min(ci - 39, lineStr.length - 79);
      lineStr = "…" + lineStr.substring(trimStart);
      ci -= trimStart - 1;
    }
    if (lineStr.length > 80)
      lineStr = lineStr.substring(0, 79) + "…";
    if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {
      let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
      if (prev.length > 80)
        prev = prev.substring(0, 79) + `…
`;
      lineStr = prev + lineStr;
    }
    if (/[^ ]/.test(lineStr)) {
      let count = 1;
      const end = error.linePos[1];
      if (end && end.line === line && end.col > col) {
        count = Math.max(1, Math.min(end.col - col, 80 - ci));
      }
      const pointer = " ".repeat(ci) + "^".repeat(count);
      error.message += `:

${lineStr}
${pointer}
`;
    }
  };
  exports.YAMLError = YAMLError;
  exports.YAMLParseError = YAMLParseError;
  exports.YAMLWarning = YAMLWarning;
  exports.prettifyError = prettifyError;
});

// node_modules/yaml/dist/compose/resolve-props.js
var require_resolve_props = __commonJS((exports) => {
  function resolveProps(tokens, { flow, indicator, next, offset, onError, parentIndent, startOnNewline }) {
    let spaceBefore = false;
    let atNewline = startOnNewline;
    let hasSpace = startOnNewline;
    let comment = "";
    let commentSep = "";
    let hasNewline = false;
    let reqSpace = false;
    let tab = null;
    let anchor = null;
    let tag = null;
    let newlineAfterProp = null;
    let comma = null;
    let found = null;
    let start = null;
    for (const token of tokens) {
      if (reqSpace) {
        if (token.type !== "space" && token.type !== "newline" && token.type !== "comma")
          onError(token.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
        reqSpace = false;
      }
      if (tab) {
        if (atNewline && token.type !== "comment" && token.type !== "newline") {
          onError(tab, "TAB_AS_INDENT", "Tabs are not allowed as indentation");
        }
        tab = null;
      }
      switch (token.type) {
        case "space":
          if (!flow && (indicator !== "doc-start" || next?.type !== "flow-collection") && token.source.includes("\t")) {
            tab = token;
          }
          hasSpace = true;
          break;
        case "comment": {
          if (!hasSpace)
            onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
          const cb = token.source.substring(1) || " ";
          if (!comment)
            comment = cb;
          else
            comment += commentSep + cb;
          commentSep = "";
          atNewline = false;
          break;
        }
        case "newline":
          if (atNewline) {
            if (comment)
              comment += token.source;
            else if (!found || indicator !== "seq-item-ind")
              spaceBefore = true;
          } else
            commentSep += token.source;
          atNewline = true;
          hasNewline = true;
          if (anchor || tag)
            newlineAfterProp = token;
          hasSpace = true;
          break;
        case "anchor":
          if (anchor)
            onError(token, "MULTIPLE_ANCHORS", "A node can have at most one anchor");
          if (token.source.endsWith(":"))
            onError(token.offset + token.source.length - 1, "BAD_ALIAS", "Anchor ending in : is ambiguous", true);
          anchor = token;
          if (start === null)
            start = token.offset;
          atNewline = false;
          hasSpace = false;
          reqSpace = true;
          break;
        case "tag": {
          if (tag)
            onError(token, "MULTIPLE_TAGS", "A node can have at most one tag");
          tag = token;
          if (start === null)
            start = token.offset;
          atNewline = false;
          hasSpace = false;
          reqSpace = true;
          break;
        }
        case indicator:
          if (anchor || tag)
            onError(token, "BAD_PROP_ORDER", `Anchors and tags must be after the ${token.source} indicator`);
          if (found)
            onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.source} in ${flow ?? "collection"}`);
          found = token;
          atNewline = indicator === "seq-item-ind" || indicator === "explicit-key-ind";
          hasSpace = false;
          break;
        case "comma":
          if (flow) {
            if (comma)
              onError(token, "UNEXPECTED_TOKEN", `Unexpected , in ${flow}`);
            comma = token;
            atNewline = false;
            hasSpace = false;
            break;
          }
        default:
          onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.type} token`);
          atNewline = false;
          hasSpace = false;
      }
    }
    const last = tokens[tokens.length - 1];
    const end = last ? last.offset + last.source.length : offset;
    if (reqSpace && next && next.type !== "space" && next.type !== "newline" && next.type !== "comma" && (next.type !== "scalar" || next.source !== "")) {
      onError(next.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
    }
    if (tab && (atNewline && tab.indent <= parentIndent || next?.type === "block-map" || next?.type === "block-seq"))
      onError(tab, "TAB_AS_INDENT", "Tabs are not allowed as indentation");
    return {
      comma,
      found,
      spaceBefore,
      comment,
      hasNewline,
      anchor,
      tag,
      newlineAfterProp,
      end,
      start: start ?? end
    };
  }
  exports.resolveProps = resolveProps;
});

// node_modules/yaml/dist/compose/util-contains-newline.js
var require_util_contains_newline = __commonJS((exports) => {
  function containsNewline(key) {
    if (!key)
      return null;
    switch (key.type) {
      case "alias":
      case "scalar":
      case "double-quoted-scalar":
      case "single-quoted-scalar":
        if (key.source.includes(`
`))
          return true;
        if (key.end) {
          for (const st of key.end)
            if (st.type === "newline")
              return true;
        }
        return false;
      case "flow-collection":
        for (const it of key.items) {
          for (const st of it.start)
            if (st.type === "newline")
              return true;
          if (it.sep) {
            for (const st of it.sep)
              if (st.type === "newline")
                return true;
          }
          if (containsNewline(it.key) || containsNewline(it.value))
            return true;
        }
        return false;
      default:
        return true;
    }
  }
  exports.containsNewline = containsNewline;
});

// node_modules/yaml/dist/compose/util-flow-indent-check.js
var require_util_flow_indent_check = __commonJS((exports) => {
  var utilContainsNewline = require_util_contains_newline();
  function flowIndentCheck(indent, fc, onError) {
    if (fc?.type === "flow-collection") {
      const end = fc.end[0];
      if (end.indent === indent && (end.source === "]" || end.source === "}") && utilContainsNewline.containsNewline(fc)) {
        const msg = "Flow end indicator should be more indented than parent";
        onError(end, "BAD_INDENT", msg, true);
      }
    }
  }
  exports.flowIndentCheck = flowIndentCheck;
});

// node_modules/yaml/dist/compose/util-map-includes.js
var require_util_map_includes = __commonJS((exports) => {
  var identity = require_identity();
  function mapIncludes(ctx, items, search) {
    const { uniqueKeys } = ctx.options;
    if (uniqueKeys === false)
      return false;
    const isEqual = typeof uniqueKeys === "function" ? uniqueKeys : (a, b) => a === b || identity.isScalar(a) && identity.isScalar(b) && a.value === b.value;
    return items.some((pair) => isEqual(pair.key, search));
  }
  exports.mapIncludes = mapIncludes;
});

// node_modules/yaml/dist/compose/resolve-block-map.js
var require_resolve_block_map = __commonJS((exports) => {
  var Pair = require_Pair();
  var YAMLMap = require_YAMLMap();
  var resolveProps = require_resolve_props();
  var utilContainsNewline = require_util_contains_newline();
  var utilFlowIndentCheck = require_util_flow_indent_check();
  var utilMapIncludes = require_util_map_includes();
  var startColMsg = "All mapping items must start at the same column";
  function resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {
    const NodeClass = tag?.nodeClass ?? YAMLMap.YAMLMap;
    const map = new NodeClass(ctx.schema);
    if (ctx.atRoot)
      ctx.atRoot = false;
    let offset = bm.offset;
    let commentEnd = null;
    for (const collItem of bm.items) {
      const { start, key, sep, value } = collItem;
      const keyProps = resolveProps.resolveProps(start, {
        indicator: "explicit-key-ind",
        next: key ?? sep?.[0],
        offset,
        onError,
        parentIndent: bm.indent,
        startOnNewline: true
      });
      const implicitKey = !keyProps.found;
      if (implicitKey) {
        if (key) {
          if (key.type === "block-seq")
            onError(offset, "BLOCK_AS_IMPLICIT_KEY", "A block sequence may not be used as an implicit map key");
          else if ("indent" in key && key.indent !== bm.indent)
            onError(offset, "BAD_INDENT", startColMsg);
        }
        if (!keyProps.anchor && !keyProps.tag && !sep) {
          commentEnd = keyProps.end;
          if (keyProps.comment) {
            if (map.comment)
              map.comment += `
` + keyProps.comment;
            else
              map.comment = keyProps.comment;
          }
          continue;
        }
        if (keyProps.newlineAfterProp || utilContainsNewline.containsNewline(key)) {
          onError(key ?? start[start.length - 1], "MULTILINE_IMPLICIT_KEY", "Implicit keys need to be on a single line");
        }
      } else if (keyProps.found?.indent !== bm.indent) {
        onError(offset, "BAD_INDENT", startColMsg);
      }
      ctx.atKey = true;
      const keyStart = keyProps.end;
      const keyNode = key ? composeNode(ctx, key, keyProps, onError) : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);
      if (ctx.schema.compat)
        utilFlowIndentCheck.flowIndentCheck(bm.indent, key, onError);
      ctx.atKey = false;
      if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))
        onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
      const valueProps = resolveProps.resolveProps(sep ?? [], {
        indicator: "map-value-ind",
        next: value,
        offset: keyNode.range[2],
        onError,
        parentIndent: bm.indent,
        startOnNewline: !key || key.type === "block-scalar"
      });
      offset = valueProps.end;
      if (valueProps.found) {
        if (implicitKey) {
          if (value?.type === "block-map" && !valueProps.hasNewline)
            onError(offset, "BLOCK_AS_IMPLICIT_KEY", "Nested mappings are not allowed in compact mappings");
          if (ctx.options.strict && keyProps.start < valueProps.found.offset - 1024)
            onError(keyNode.range, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit block mapping key");
        }
        const valueNode = value ? composeNode(ctx, value, valueProps, onError) : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);
        if (ctx.schema.compat)
          utilFlowIndentCheck.flowIndentCheck(bm.indent, value, onError);
        offset = valueNode.range[2];
        const pair = new Pair.Pair(keyNode, valueNode);
        if (ctx.options.keepSourceTokens)
          pair.srcToken = collItem;
        map.items.push(pair);
      } else {
        if (implicitKey)
          onError(keyNode.range, "MISSING_CHAR", "Implicit map keys need to be followed by map values");
        if (valueProps.comment) {
          if (keyNode.comment)
            keyNode.comment += `
` + valueProps.comment;
          else
            keyNode.comment = valueProps.comment;
        }
        const pair = new Pair.Pair(keyNode);
        if (ctx.options.keepSourceTokens)
          pair.srcToken = collItem;
        map.items.push(pair);
      }
    }
    if (commentEnd && commentEnd < offset)
      onError(commentEnd, "IMPOSSIBLE", "Map comment with trailing content");
    map.range = [bm.offset, offset, commentEnd ?? offset];
    return map;
  }
  exports.resolveBlockMap = resolveBlockMap;
});

// node_modules/yaml/dist/compose/resolve-block-seq.js
var require_resolve_block_seq = __commonJS((exports) => {
  var YAMLSeq = require_YAMLSeq();
  var resolveProps = require_resolve_props();
  var utilFlowIndentCheck = require_util_flow_indent_check();
  function resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError, tag) {
    const NodeClass = tag?.nodeClass ?? YAMLSeq.YAMLSeq;
    const seq = new NodeClass(ctx.schema);
    if (ctx.atRoot)
      ctx.atRoot = false;
    if (ctx.atKey)
      ctx.atKey = false;
    let offset = bs.offset;
    let commentEnd = null;
    for (const { start, value } of bs.items) {
      const props = resolveProps.resolveProps(start, {
        indicator: "seq-item-ind",
        next: value,
        offset,
        onError,
        parentIndent: bs.indent,
        startOnNewline: true
      });
      if (!props.found) {
        if (props.anchor || props.tag || value) {
          if (value && value.type === "block-seq")
            onError(props.end, "BAD_INDENT", "All sequence items must start at the same column");
          else
            onError(offset, "MISSING_CHAR", "Sequence item without - indicator");
        } else {
          commentEnd = props.end;
          if (props.comment)
            seq.comment = props.comment;
          continue;
        }
      }
      const node = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, start, null, props, onError);
      if (ctx.schema.compat)
        utilFlowIndentCheck.flowIndentCheck(bs.indent, value, onError);
      offset = node.range[2];
      seq.items.push(node);
    }
    seq.range = [bs.offset, offset, commentEnd ?? offset];
    return seq;
  }
  exports.resolveBlockSeq = resolveBlockSeq;
});

// node_modules/yaml/dist/compose/resolve-end.js
var require_resolve_end = __commonJS((exports) => {
  function resolveEnd(end, offset, reqSpace, onError) {
    let comment = "";
    if (end) {
      let hasSpace = false;
      let sep = "";
      for (const token of end) {
        const { source, type } = token;
        switch (type) {
          case "space":
            hasSpace = true;
            break;
          case "comment": {
            if (reqSpace && !hasSpace)
              onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
            const cb = source.substring(1) || " ";
            if (!comment)
              comment = cb;
            else
              comment += sep + cb;
            sep = "";
            break;
          }
          case "newline":
            if (comment)
              sep += source;
            hasSpace = true;
            break;
          default:
            onError(token, "UNEXPECTED_TOKEN", `Unexpected ${type} at node end`);
        }
        offset += source.length;
      }
    }
    return { comment, offset };
  }
  exports.resolveEnd = resolveEnd;
});

// node_modules/yaml/dist/compose/resolve-flow-collection.js
var require_resolve_flow_collection = __commonJS((exports) => {
  var identity = require_identity();
  var Pair = require_Pair();
  var YAMLMap = require_YAMLMap();
  var YAMLSeq = require_YAMLSeq();
  var resolveEnd = require_resolve_end();
  var resolveProps = require_resolve_props();
  var utilContainsNewline = require_util_contains_newline();
  var utilMapIncludes = require_util_map_includes();
  var blockMsg = "Block collections are not allowed within flow collections";
  var isBlock = (token) => token && (token.type === "block-map" || token.type === "block-seq");
  function resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError, tag) {
    const isMap = fc.start.source === "{";
    const fcName = isMap ? "flow map" : "flow sequence";
    const NodeClass = tag?.nodeClass ?? (isMap ? YAMLMap.YAMLMap : YAMLSeq.YAMLSeq);
    const coll = new NodeClass(ctx.schema);
    coll.flow = true;
    const atRoot = ctx.atRoot;
    if (atRoot)
      ctx.atRoot = false;
    if (ctx.atKey)
      ctx.atKey = false;
    let offset = fc.offset + fc.start.source.length;
    for (let i = 0;i < fc.items.length; ++i) {
      const collItem = fc.items[i];
      const { start, key, sep, value } = collItem;
      const props = resolveProps.resolveProps(start, {
        flow: fcName,
        indicator: "explicit-key-ind",
        next: key ?? sep?.[0],
        offset,
        onError,
        parentIndent: fc.indent,
        startOnNewline: false
      });
      if (!props.found) {
        if (!props.anchor && !props.tag && !sep && !value) {
          if (i === 0 && props.comma)
            onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
          else if (i < fc.items.length - 1)
            onError(props.start, "UNEXPECTED_TOKEN", `Unexpected empty item in ${fcName}`);
          if (props.comment) {
            if (coll.comment)
              coll.comment += `
` + props.comment;
            else
              coll.comment = props.comment;
          }
          offset = props.end;
          continue;
        }
        if (!isMap && ctx.options.strict && utilContainsNewline.containsNewline(key))
          onError(key, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
      }
      if (i === 0) {
        if (props.comma)
          onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
      } else {
        if (!props.comma)
          onError(props.start, "MISSING_CHAR", `Missing , between ${fcName} items`);
        if (props.comment) {
          let prevItemComment = "";
          loop:
            for (const st of start) {
              switch (st.type) {
                case "comma":
                case "space":
                  break;
                case "comment":
                  prevItemComment = st.source.substring(1);
                  break loop;
                default:
                  break loop;
              }
            }
          if (prevItemComment) {
            let prev = coll.items[coll.items.length - 1];
            if (identity.isPair(prev))
              prev = prev.value ?? prev.key;
            if (prev.comment)
              prev.comment += `
` + prevItemComment;
            else
              prev.comment = prevItemComment;
            props.comment = props.comment.substring(prevItemComment.length + 1);
          }
        }
      }
      if (!isMap && !sep && !props.found) {
        const valueNode = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, sep, null, props, onError);
        coll.items.push(valueNode);
        offset = valueNode.range[2];
        if (isBlock(value))
          onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
      } else {
        ctx.atKey = true;
        const keyStart = props.end;
        const keyNode = key ? composeNode(ctx, key, props, onError) : composeEmptyNode(ctx, keyStart, start, null, props, onError);
        if (isBlock(key))
          onError(keyNode.range, "BLOCK_IN_FLOW", blockMsg);
        ctx.atKey = false;
        const valueProps = resolveProps.resolveProps(sep ?? [], {
          flow: fcName,
          indicator: "map-value-ind",
          next: value,
          offset: keyNode.range[2],
          onError,
          parentIndent: fc.indent,
          startOnNewline: false
        });
        if (valueProps.found) {
          if (!isMap && !props.found && ctx.options.strict) {
            if (sep)
              for (const st of sep) {
                if (st === valueProps.found)
                  break;
                if (st.type === "newline") {
                  onError(st, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
                  break;
                }
              }
            if (props.start < valueProps.found.offset - 1024)
              onError(valueProps.found, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit flow sequence key");
          }
        } else if (value) {
          if ("source" in value && value.source && value.source[0] === ":")
            onError(value, "MISSING_CHAR", `Missing space after : in ${fcName}`);
          else
            onError(valueProps.start, "MISSING_CHAR", `Missing , or : between ${fcName} items`);
        }
        const valueNode = value ? composeNode(ctx, value, valueProps, onError) : valueProps.found ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError) : null;
        if (valueNode) {
          if (isBlock(value))
            onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
        } else if (valueProps.comment) {
          if (keyNode.comment)
            keyNode.comment += `
` + valueProps.comment;
          else
            keyNode.comment = valueProps.comment;
        }
        const pair = new Pair.Pair(keyNode, valueNode);
        if (ctx.options.keepSourceTokens)
          pair.srcToken = collItem;
        if (isMap) {
          const map = coll;
          if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))
            onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
          map.items.push(pair);
        } else {
          const map = new YAMLMap.YAMLMap(ctx.schema);
          map.flow = true;
          map.items.push(pair);
          const endRange = (valueNode ?? keyNode).range;
          map.range = [keyNode.range[0], endRange[1], endRange[2]];
          coll.items.push(map);
        }
        offset = valueNode ? valueNode.range[2] : valueProps.end;
      }
    }
    const expectedEnd = isMap ? "}" : "]";
    const [ce, ...ee] = fc.end;
    let cePos = offset;
    if (ce && ce.source === expectedEnd)
      cePos = ce.offset + ce.source.length;
    else {
      const name = fcName[0].toUpperCase() + fcName.substring(1);
      const msg = atRoot ? `${name} must end with a ${expectedEnd}` : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;
      onError(offset, atRoot ? "MISSING_CHAR" : "BAD_INDENT", msg);
      if (ce && ce.source.length !== 1)
        ee.unshift(ce);
    }
    if (ee.length > 0) {
      const end = resolveEnd.resolveEnd(ee, cePos, ctx.options.strict, onError);
      if (end.comment) {
        if (coll.comment)
          coll.comment += `
` + end.comment;
        else
          coll.comment = end.comment;
      }
      coll.range = [fc.offset, cePos, end.offset];
    } else {
      coll.range = [fc.offset, cePos, cePos];
    }
    return coll;
  }
  exports.resolveFlowCollection = resolveFlowCollection;
});

// node_modules/yaml/dist/compose/compose-collection.js
var require_compose_collection = __commonJS((exports) => {
  var identity = require_identity();
  var Scalar = require_Scalar();
  var YAMLMap = require_YAMLMap();
  var YAMLSeq = require_YAMLSeq();
  var resolveBlockMap = require_resolve_block_map();
  var resolveBlockSeq = require_resolve_block_seq();
  var resolveFlowCollection = require_resolve_flow_collection();
  function resolveCollection(CN, ctx, token, onError, tagName, tag) {
    const coll = token.type === "block-map" ? resolveBlockMap.resolveBlockMap(CN, ctx, token, onError, tag) : token.type === "block-seq" ? resolveBlockSeq.resolveBlockSeq(CN, ctx, token, onError, tag) : resolveFlowCollection.resolveFlowCollection(CN, ctx, token, onError, tag);
    const Coll = coll.constructor;
    if (tagName === "!" || tagName === Coll.tagName) {
      coll.tag = Coll.tagName;
      return coll;
    }
    if (tagName)
      coll.tag = tagName;
    return coll;
  }
  function composeCollection(CN, ctx, token, props, onError) {
    const tagToken = props.tag;
    const tagName = !tagToken ? null : ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg));
    if (token.type === "block-seq") {
      const { anchor, newlineAfterProp: nl } = props;
      const lastProp = anchor && tagToken ? anchor.offset > tagToken.offset ? anchor : tagToken : anchor ?? tagToken;
      if (lastProp && (!nl || nl.offset < lastProp.offset)) {
        const message = "Missing newline after block sequence props";
        onError(lastProp, "MISSING_CHAR", message);
      }
    }
    const expType = token.type === "block-map" ? "map" : token.type === "block-seq" ? "seq" : token.start.source === "{" ? "map" : "seq";
    if (!tagToken || !tagName || tagName === "!" || tagName === YAMLMap.YAMLMap.tagName && expType === "map" || tagName === YAMLSeq.YAMLSeq.tagName && expType === "seq") {
      return resolveCollection(CN, ctx, token, onError, tagName);
    }
    let tag = ctx.schema.tags.find((t) => t.tag === tagName && t.collection === expType);
    if (!tag) {
      const kt = ctx.schema.knownTags[tagName];
      if (kt && kt.collection === expType) {
        ctx.schema.tags.push(Object.assign({}, kt, { default: false }));
        tag = kt;
      } else {
        if (kt) {
          onError(tagToken, "BAD_COLLECTION_TYPE", `${kt.tag} used for ${expType} collection, but expects ${kt.collection ?? "scalar"}`, true);
        } else {
          onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, true);
        }
        return resolveCollection(CN, ctx, token, onError, tagName);
      }
    }
    const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);
    const res = tag.resolve?.(coll, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg), ctx.options) ?? coll;
    const node = identity.isNode(res) ? res : new Scalar.Scalar(res);
    node.range = coll.range;
    node.tag = tagName;
    if (tag?.format)
      node.format = tag.format;
    return node;
  }
  exports.composeCollection = composeCollection;
});

// node_modules/yaml/dist/compose/resolve-block-scalar.js
var require_resolve_block_scalar = __commonJS((exports) => {
  var Scalar = require_Scalar();
  function resolveBlockScalar(ctx, scalar, onError) {
    const start = scalar.offset;
    const header = parseBlockScalarHeader(scalar, ctx.options.strict, onError);
    if (!header)
      return { value: "", type: null, comment: "", range: [start, start, start] };
    const type = header.mode === ">" ? Scalar.Scalar.BLOCK_FOLDED : Scalar.Scalar.BLOCK_LITERAL;
    const lines = scalar.source ? splitLines(scalar.source) : [];
    let chompStart = lines.length;
    for (let i = lines.length - 1;i >= 0; --i) {
      const content = lines[i][1];
      if (content === "" || content === "\r")
        chompStart = i;
      else
        break;
    }
    if (chompStart === 0) {
      const value2 = header.chomp === "+" && lines.length > 0 ? `
`.repeat(Math.max(1, lines.length - 1)) : "";
      let end2 = start + header.length;
      if (scalar.source)
        end2 += scalar.source.length;
      return { value: value2, type, comment: header.comment, range: [start, end2, end2] };
    }
    let trimIndent = scalar.indent + header.indent;
    let offset = scalar.offset + header.length;
    let contentStart = 0;
    for (let i = 0;i < chompStart; ++i) {
      const [indent, content] = lines[i];
      if (content === "" || content === "\r") {
        if (header.indent === 0 && indent.length > trimIndent)
          trimIndent = indent.length;
      } else {
        if (indent.length < trimIndent) {
          const message = "Block scalars with more-indented leading empty lines must use an explicit indentation indicator";
          onError(offset + indent.length, "MISSING_CHAR", message);
        }
        if (header.indent === 0)
          trimIndent = indent.length;
        contentStart = i;
        if (trimIndent === 0 && !ctx.atRoot) {
          const message = "Block scalar values in collections must be indented";
          onError(offset, "BAD_INDENT", message);
        }
        break;
      }
      offset += indent.length + content.length + 1;
    }
    for (let i = lines.length - 1;i >= chompStart; --i) {
      if (lines[i][0].length > trimIndent)
        chompStart = i + 1;
    }
    let value = "";
    let sep = "";
    let prevMoreIndented = false;
    for (let i = 0;i < contentStart; ++i)
      value += lines[i][0].slice(trimIndent) + `
`;
    for (let i = contentStart;i < chompStart; ++i) {
      let [indent, content] = lines[i];
      offset += indent.length + content.length + 1;
      const crlf = content[content.length - 1] === "\r";
      if (crlf)
        content = content.slice(0, -1);
      if (content && indent.length < trimIndent) {
        const src = header.indent ? "explicit indentation indicator" : "first line";
        const message = `Block scalar lines must not be less indented than their ${src}`;
        onError(offset - content.length - (crlf ? 2 : 1), "BAD_INDENT", message);
        indent = "";
      }
      if (type === Scalar.Scalar.BLOCK_LITERAL) {
        value += sep + indent.slice(trimIndent) + content;
        sep = `
`;
      } else if (indent.length > trimIndent || content[0] === "\t") {
        if (sep === " ")
          sep = `
`;
        else if (!prevMoreIndented && sep === `
`)
          sep = `

`;
        value += sep + indent.slice(trimIndent) + content;
        sep = `
`;
        prevMoreIndented = true;
      } else if (content === "") {
        if (sep === `
`)
          value += `
`;
        else
          sep = `
`;
      } else {
        value += sep + content;
        sep = " ";
        prevMoreIndented = false;
      }
    }
    switch (header.chomp) {
      case "-":
        break;
      case "+":
        for (let i = chompStart;i < lines.length; ++i)
          value += `
` + lines[i][0].slice(trimIndent);
        if (value[value.length - 1] !== `
`)
          value += `
`;
        break;
      default:
        value += `
`;
    }
    const end = start + header.length + scalar.source.length;
    return { value, type, comment: header.comment, range: [start, end, end] };
  }
  function parseBlockScalarHeader({ offset, props }, strict, onError) {
    if (props[0].type !== "block-scalar-header") {
      onError(props[0], "IMPOSSIBLE", "Block scalar header not found");
      return null;
    }
    const { source } = props[0];
    const mode = source[0];
    let indent = 0;
    let chomp = "";
    let error = -1;
    for (let i = 1;i < source.length; ++i) {
      const ch = source[i];
      if (!chomp && (ch === "-" || ch === "+"))
        chomp = ch;
      else {
        const n = Number(ch);
        if (!indent && n)
          indent = n;
        else if (error === -1)
          error = offset + i;
      }
    }
    if (error !== -1)
      onError(error, "UNEXPECTED_TOKEN", `Block scalar header includes extra characters: ${source}`);
    let hasSpace = false;
    let comment = "";
    let length = source.length;
    for (let i = 1;i < props.length; ++i) {
      const token = props[i];
      switch (token.type) {
        case "space":
          hasSpace = true;
        case "newline":
          length += token.source.length;
          break;
        case "comment":
          if (strict && !hasSpace) {
            const message = "Comments must be separated from other tokens by white space characters";
            onError(token, "MISSING_CHAR", message);
          }
          length += token.source.length;
          comment = token.source.substring(1);
          break;
        case "error":
          onError(token, "UNEXPECTED_TOKEN", token.message);
          length += token.source.length;
          break;
        default: {
          const message = `Unexpected token in block scalar header: ${token.type}`;
          onError(token, "UNEXPECTED_TOKEN", message);
          const ts = token.source;
          if (ts && typeof ts === "string")
            length += ts.length;
        }
      }
    }
    return { mode, indent, chomp, comment, length };
  }
  function splitLines(source) {
    const split = source.split(/\n( *)/);
    const first = split[0];
    const m = first.match(/^( *)/);
    const line0 = m?.[1] ? [m[1], first.slice(m[1].length)] : ["", first];
    const lines = [line0];
    for (let i = 1;i < split.length; i += 2)
      lines.push([split[i], split[i + 1]]);
    return lines;
  }
  exports.resolveBlockScalar = resolveBlockScalar;
});

// node_modules/yaml/dist/compose/resolve-flow-scalar.js
var require_resolve_flow_scalar = __commonJS((exports) => {
  var Scalar = require_Scalar();
  var resolveEnd = require_resolve_end();
  function resolveFlowScalar(scalar, strict, onError) {
    const { offset, type, source, end } = scalar;
    let _type;
    let value;
    const _onError = (rel, code, msg) => onError(offset + rel, code, msg);
    switch (type) {
      case "scalar":
        _type = Scalar.Scalar.PLAIN;
        value = plainValue(source, _onError);
        break;
      case "single-quoted-scalar":
        _type = Scalar.Scalar.QUOTE_SINGLE;
        value = singleQuotedValue(source, _onError);
        break;
      case "double-quoted-scalar":
        _type = Scalar.Scalar.QUOTE_DOUBLE;
        value = doubleQuotedValue(source, _onError);
        break;
      default:
        onError(scalar, "UNEXPECTED_TOKEN", `Expected a flow scalar value, but found: ${type}`);
        return {
          value: "",
          type: null,
          comment: "",
          range: [offset, offset + source.length, offset + source.length]
        };
    }
    const valueEnd = offset + source.length;
    const re = resolveEnd.resolveEnd(end, valueEnd, strict, onError);
    return {
      value,
      type: _type,
      comment: re.comment,
      range: [offset, valueEnd, re.offset]
    };
  }
  function plainValue(source, onError) {
    let badChar = "";
    switch (source[0]) {
      case "\t":
        badChar = "a tab character";
        break;
      case ",":
        badChar = "flow indicator character ,";
        break;
      case "%":
        badChar = "directive indicator character %";
        break;
      case "|":
      case ">": {
        badChar = `block scalar indicator ${source[0]}`;
        break;
      }
      case "@":
      case "`": {
        badChar = `reserved character ${source[0]}`;
        break;
      }
    }
    if (badChar)
      onError(0, "BAD_SCALAR_START", `Plain value cannot start with ${badChar}`);
    return foldLines(source);
  }
  function singleQuotedValue(source, onError) {
    if (source[source.length - 1] !== "'" || source.length === 1)
      onError(source.length, "MISSING_CHAR", "Missing closing 'quote");
    return foldLines(source.slice(1, -1)).replace(/''/g, "'");
  }
  function foldLines(source) {
    let first, line;
    try {
      first = new RegExp(`(.*?)(?<![ 	])[ 	]*\r?
`, "sy");
      line = new RegExp(`[ 	]*(.*?)(?:(?<![ 	])[ 	]*)?\r?
`, "sy");
    } catch {
      first = /(.*?)[ \t]*\r?\n/sy;
      line = /[ \t]*(.*?)[ \t]*\r?\n/sy;
    }
    let match = first.exec(source);
    if (!match)
      return source;
    let res = match[1];
    let sep = " ";
    let pos = first.lastIndex;
    line.lastIndex = pos;
    while (match = line.exec(source)) {
      if (match[1] === "") {
        if (sep === `
`)
          res += sep;
        else
          sep = `
`;
      } else {
        res += sep + match[1];
        sep = " ";
      }
      pos = line.lastIndex;
    }
    const last = /[ \t]*(.*)/sy;
    last.lastIndex = pos;
    match = last.exec(source);
    return res + sep + (match?.[1] ?? "");
  }
  function doubleQuotedValue(source, onError) {
    let res = "";
    for (let i = 1;i < source.length - 1; ++i) {
      const ch = source[i];
      if (ch === "\r" && source[i + 1] === `
`)
        continue;
      if (ch === `
`) {
        const { fold, offset } = foldNewline(source, i);
        res += fold;
        i = offset;
      } else if (ch === "\\") {
        let next = source[++i];
        const cc = escapeCodes[next];
        if (cc)
          res += cc;
        else if (next === `
`) {
          next = source[i + 1];
          while (next === " " || next === "\t")
            next = source[++i + 1];
        } else if (next === "\r" && source[i + 1] === `
`) {
          next = source[++i + 1];
          while (next === " " || next === "\t")
            next = source[++i + 1];
        } else if (next === "x" || next === "u" || next === "U") {
          const length = { x: 2, u: 4, U: 8 }[next];
          res += parseCharCode(source, i + 1, length, onError);
          i += length;
        } else {
          const raw = source.substr(i - 1, 2);
          onError(i - 1, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
          res += raw;
        }
      } else if (ch === " " || ch === "\t") {
        const wsStart = i;
        let next = source[i + 1];
        while (next === " " || next === "\t")
          next = source[++i + 1];
        if (next !== `
` && !(next === "\r" && source[i + 2] === `
`))
          res += i > wsStart ? source.slice(wsStart, i + 1) : ch;
      } else {
        res += ch;
      }
    }
    if (source[source.length - 1] !== '"' || source.length === 1)
      onError(source.length, "MISSING_CHAR", 'Missing closing "quote');
    return res;
  }
  function foldNewline(source, offset) {
    let fold = "";
    let ch = source[offset + 1];
    while (ch === " " || ch === "\t" || ch === `
` || ch === "\r") {
      if (ch === "\r" && source[offset + 2] !== `
`)
        break;
      if (ch === `
`)
        fold += `
`;
      offset += 1;
      ch = source[offset + 1];
    }
    if (!fold)
      fold = " ";
    return { fold, offset };
  }
  var escapeCodes = {
    "0": "\x00",
    a: "\x07",
    b: "\b",
    e: "\x1B",
    f: "\f",
    n: `
`,
    r: "\r",
    t: "\t",
    v: "\v",
    N: "",
    _: " ",
    L: "\u2028",
    P: "\u2029",
    " ": " ",
    '"': '"',
    "/": "/",
    "\\": "\\",
    "\t": "\t"
  };
  function parseCharCode(source, offset, length, onError) {
    const cc = source.substr(offset, length);
    const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
    const code = ok ? parseInt(cc, 16) : NaN;
    if (isNaN(code)) {
      const raw = source.substr(offset - 2, length + 2);
      onError(offset - 2, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
      return raw;
    }
    return String.fromCodePoint(code);
  }
  exports.resolveFlowScalar = resolveFlowScalar;
});

// node_modules/yaml/dist/compose/compose-scalar.js
var require_compose_scalar = __commonJS((exports) => {
  var identity = require_identity();
  var Scalar = require_Scalar();
  var resolveBlockScalar = require_resolve_block_scalar();
  var resolveFlowScalar = require_resolve_flow_scalar();
  function composeScalar(ctx, token, tagToken, onError) {
    const { value, type, comment, range } = token.type === "block-scalar" ? resolveBlockScalar.resolveBlockScalar(ctx, token, onError) : resolveFlowScalar.resolveFlowScalar(token, ctx.options.strict, onError);
    const tagName = tagToken ? ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg)) : null;
    let tag;
    if (ctx.options.stringKeys && ctx.atKey) {
      tag = ctx.schema[identity.SCALAR];
    } else if (tagName)
      tag = findScalarTagByName(ctx.schema, value, tagName, tagToken, onError);
    else if (token.type === "scalar")
      tag = findScalarTagByTest(ctx, value, token, onError);
    else
      tag = ctx.schema[identity.SCALAR];
    let scalar;
    try {
      const res = tag.resolve(value, (msg) => onError(tagToken ?? token, "TAG_RESOLVE_FAILED", msg), ctx.options);
      scalar = identity.isScalar(res) ? res : new Scalar.Scalar(res);
    } catch (error) {
      const msg = error instanceof Error ? error.message : String(error);
      onError(tagToken ?? token, "TAG_RESOLVE_FAILED", msg);
      scalar = new Scalar.Scalar(value);
    }
    scalar.range = range;
    scalar.source = value;
    if (type)
      scalar.type = type;
    if (tagName)
      scalar.tag = tagName;
    if (tag.format)
      scalar.format = tag.format;
    if (comment)
      scalar.comment = comment;
    return scalar;
  }
  function findScalarTagByName(schema, value, tagName, tagToken, onError) {
    if (tagName === "!")
      return schema[identity.SCALAR];
    const matchWithTest = [];
    for (const tag of schema.tags) {
      if (!tag.collection && tag.tag === tagName) {
        if (tag.default && tag.test)
          matchWithTest.push(tag);
        else
          return tag;
      }
    }
    for (const tag of matchWithTest)
      if (tag.test?.test(value))
        return tag;
    const kt = schema.knownTags[tagName];
    if (kt && !kt.collection) {
      schema.tags.push(Object.assign({}, kt, { default: false, test: undefined }));
      return kt;
    }
    onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, tagName !== "tag:yaml.org,2002:str");
    return schema[identity.SCALAR];
  }
  function findScalarTagByTest({ atKey, directives, schema }, value, token, onError) {
    const tag = schema.tags.find((tag2) => (tag2.default === true || atKey && tag2.default === "key") && tag2.test?.test(value)) || schema[identity.SCALAR];
    if (schema.compat) {
      const compat = schema.compat.find((tag2) => tag2.default && tag2.test?.test(value)) ?? schema[identity.SCALAR];
      if (tag.tag !== compat.tag) {
        const ts = directives.tagString(tag.tag);
        const cs = directives.tagString(compat.tag);
        const msg = `Value may be parsed as either ${ts} or ${cs}`;
        onError(token, "TAG_RESOLVE_FAILED", msg, true);
      }
    }
    return tag;
  }
  exports.composeScalar = composeScalar;
});

// node_modules/yaml/dist/compose/util-empty-scalar-position.js
var require_util_empty_scalar_position = __commonJS((exports) => {
  function emptyScalarPosition(offset, before, pos) {
    if (before) {
      if (pos === null)
        pos = before.length;
      for (let i = pos - 1;i >= 0; --i) {
        let st = before[i];
        switch (st.type) {
          case "space":
          case "comment":
          case "newline":
            offset -= st.source.length;
            continue;
        }
        st = before[++i];
        while (st?.type === "space") {
          offset += st.source.length;
          st = before[++i];
        }
        break;
      }
    }
    return offset;
  }
  exports.emptyScalarPosition = emptyScalarPosition;
});

// node_modules/yaml/dist/compose/compose-node.js
var require_compose_node = __commonJS((exports) => {
  var Alias = require_Alias();
  var identity = require_identity();
  var composeCollection = require_compose_collection();
  var composeScalar = require_compose_scalar();
  var resolveEnd = require_resolve_end();
  var utilEmptyScalarPosition = require_util_empty_scalar_position();
  var CN = { composeNode, composeEmptyNode };
  function composeNode(ctx, token, props, onError) {
    const atKey = ctx.atKey;
    const { spaceBefore, comment, anchor, tag } = props;
    let node;
    let isSrcToken = true;
    switch (token.type) {
      case "alias":
        node = composeAlias(ctx, token, onError);
        if (anchor || tag)
          onError(token, "ALIAS_PROPS", "An alias node must not specify any properties");
        break;
      case "scalar":
      case "single-quoted-scalar":
      case "double-quoted-scalar":
      case "block-scalar":
        node = composeScalar.composeScalar(ctx, token, tag, onError);
        if (anchor)
          node.anchor = anchor.source.substring(1);
        break;
      case "block-map":
      case "block-seq":
      case "flow-collection":
        node = composeCollection.composeCollection(CN, ctx, token, props, onError);
        if (anchor)
          node.anchor = anchor.source.substring(1);
        break;
      default: {
        const message = token.type === "error" ? token.message : `Unsupported token (type: ${token.type})`;
        onError(token, "UNEXPECTED_TOKEN", message);
        node = composeEmptyNode(ctx, token.offset, undefined, null, props, onError);
        isSrcToken = false;
      }
    }
    if (anchor && node.anchor === "")
      onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
    if (atKey && ctx.options.stringKeys && (!identity.isScalar(node) || typeof node.value !== "string" || node.tag && node.tag !== "tag:yaml.org,2002:str")) {
      const msg = "With stringKeys, all keys must be strings";
      onError(tag ?? token, "NON_STRING_KEY", msg);
    }
    if (spaceBefore)
      node.spaceBefore = true;
    if (comment) {
      if (token.type === "scalar" && token.source === "")
        node.comment = comment;
      else
        node.commentBefore = comment;
    }
    if (ctx.options.keepSourceTokens && isSrcToken)
      node.srcToken = token;
    return node;
  }
  function composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {
    const token = {
      type: "scalar",
      offset: utilEmptyScalarPosition.emptyScalarPosition(offset, before, pos),
      indent: -1,
      source: ""
    };
    const node = composeScalar.composeScalar(ctx, token, tag, onError);
    if (anchor) {
      node.anchor = anchor.source.substring(1);
      if (node.anchor === "")
        onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
    }
    if (spaceBefore)
      node.spaceBefore = true;
    if (comment) {
      node.comment = comment;
      node.range[2] = end;
    }
    return node;
  }
  function composeAlias({ options }, { offset, source, end }, onError) {
    const alias = new Alias.Alias(source.substring(1));
    if (alias.source === "")
      onError(offset, "BAD_ALIAS", "Alias cannot be an empty string");
    if (alias.source.endsWith(":"))
      onError(offset + source.length - 1, "BAD_ALIAS", "Alias ending in : is ambiguous", true);
    const valueEnd = offset + source.length;
    const re = resolveEnd.resolveEnd(end, valueEnd, options.strict, onError);
    alias.range = [offset, valueEnd, re.offset];
    if (re.comment)
      alias.comment = re.comment;
    return alias;
  }
  exports.composeEmptyNode = composeEmptyNode;
  exports.composeNode = composeNode;
});

// node_modules/yaml/dist/compose/compose-doc.js
var require_compose_doc = __commonJS((exports) => {
  var Document = require_Document();
  var composeNode = require_compose_node();
  var resolveEnd = require_resolve_end();
  var resolveProps = require_resolve_props();
  function composeDoc(options, directives, { offset, start, value, end }, onError) {
    const opts = Object.assign({ _directives: directives }, options);
    const doc = new Document.Document(undefined, opts);
    const ctx = {
      atKey: false,
      atRoot: true,
      directives: doc.directives,
      options: doc.options,
      schema: doc.schema
    };
    const props = resolveProps.resolveProps(start, {
      indicator: "doc-start",
      next: value ?? end?.[0],
      offset,
      onError,
      parentIndent: 0,
      startOnNewline: true
    });
    if (props.found) {
      doc.directives.docStart = true;
      if (value && (value.type === "block-map" || value.type === "block-seq") && !props.hasNewline)
        onError(props.end, "MISSING_CHAR", "Block collection cannot start on same line with directives-end marker");
    }
    doc.contents = value ? composeNode.composeNode(ctx, value, props, onError) : composeNode.composeEmptyNode(ctx, props.end, start, null, props, onError);
    const contentEnd = doc.contents.range[2];
    const re = resolveEnd.resolveEnd(end, contentEnd, false, onError);
    if (re.comment)
      doc.comment = re.comment;
    doc.range = [offset, contentEnd, re.offset];
    return doc;
  }
  exports.composeDoc = composeDoc;
});

// node_modules/yaml/dist/compose/composer.js
var require_composer = __commonJS((exports) => {
  var node_process = __require("node:process");
  var directives = require_directives();
  var Document = require_Document();
  var errors = require_errors2();
  var identity = require_identity();
  var composeDoc = require_compose_doc();
  var resolveEnd = require_resolve_end();
  function getErrorPos(src) {
    if (typeof src === "number")
      return [src, src + 1];
    if (Array.isArray(src))
      return src.length === 2 ? src : [src[0], src[1]];
    const { offset, source } = src;
    return [offset, offset + (typeof source === "string" ? source.length : 1)];
  }
  function parsePrelude(prelude) {
    let comment = "";
    let atComment = false;
    let afterEmptyLine = false;
    for (let i = 0;i < prelude.length; ++i) {
      const source = prelude[i];
      switch (source[0]) {
        case "#":
          comment += (comment === "" ? "" : afterEmptyLine ? `

` : `
`) + (source.substring(1) || " ");
          atComment = true;
          afterEmptyLine = false;
          break;
        case "%":
          if (prelude[i + 1]?.[0] !== "#")
            i += 1;
          atComment = false;
          break;
        default:
          if (!atComment)
            afterEmptyLine = true;
          atComment = false;
      }
    }
    return { comment, afterEmptyLine };
  }

  class Composer {
    constructor(options = {}) {
      this.doc = null;
      this.atDirectives = false;
      this.prelude = [];
      this.errors = [];
      this.warnings = [];
      this.onError = (source, code, message, warning) => {
        const pos = getErrorPos(source);
        if (warning)
          this.warnings.push(new errors.YAMLWarning(pos, code, message));
        else
          this.errors.push(new errors.YAMLParseError(pos, code, message));
      };
      this.directives = new directives.Directives({ version: options.version || "1.2" });
      this.options = options;
    }
    decorate(doc, afterDoc) {
      const { comment, afterEmptyLine } = parsePrelude(this.prelude);
      if (comment) {
        const dc = doc.contents;
        if (afterDoc) {
          doc.comment = doc.comment ? `${doc.comment}
${comment}` : comment;
        } else if (afterEmptyLine || doc.directives.docStart || !dc) {
          doc.commentBefore = comment;
        } else if (identity.isCollection(dc) && !dc.flow && dc.items.length > 0) {
          let it = dc.items[0];
          if (identity.isPair(it))
            it = it.key;
          const cb = it.commentBefore;
          it.commentBefore = cb ? `${comment}
${cb}` : comment;
        } else {
          const cb = dc.commentBefore;
          dc.commentBefore = cb ? `${comment}
${cb}` : comment;
        }
      }
      if (afterDoc) {
        Array.prototype.push.apply(doc.errors, this.errors);
        Array.prototype.push.apply(doc.warnings, this.warnings);
      } else {
        doc.errors = this.errors;
        doc.warnings = this.warnings;
      }
      this.prelude = [];
      this.errors = [];
      this.warnings = [];
    }
    streamInfo() {
      return {
        comment: parsePrelude(this.prelude).comment,
        directives: this.directives,
        errors: this.errors,
        warnings: this.warnings
      };
    }
    *compose(tokens, forceDoc = false, endOffset = -1) {
      for (const token of tokens)
        yield* this.next(token);
      yield* this.end(forceDoc, endOffset);
    }
    *next(token) {
      if (node_process.env.LOG_STREAM)
        console.dir(token, { depth: null });
      switch (token.type) {
        case "directive":
          this.directives.add(token.source, (offset, message, warning) => {
            const pos = getErrorPos(token);
            pos[0] += offset;
            this.onError(pos, "BAD_DIRECTIVE", message, warning);
          });
          this.prelude.push(token.source);
          this.atDirectives = true;
          break;
        case "document": {
          const doc = composeDoc.composeDoc(this.options, this.directives, token, this.onError);
          if (this.atDirectives && !doc.directives.docStart)
            this.onError(token, "MISSING_CHAR", "Missing directives-end/doc-start indicator line");
          this.decorate(doc, false);
          if (this.doc)
            yield this.doc;
          this.doc = doc;
          this.atDirectives = false;
          break;
        }
        case "byte-order-mark":
        case "space":
          break;
        case "comment":
        case "newline":
          this.prelude.push(token.source);
          break;
        case "error": {
          const msg = token.source ? `${token.message}: ${JSON.stringify(token.source)}` : token.message;
          const error = new errors.YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg);
          if (this.atDirectives || !this.doc)
            this.errors.push(error);
          else
            this.doc.errors.push(error);
          break;
        }
        case "doc-end": {
          if (!this.doc) {
            const msg = "Unexpected doc-end without preceding document";
            this.errors.push(new errors.YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg));
            break;
          }
          this.doc.directives.docEnd = true;
          const end = resolveEnd.resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
          this.decorate(this.doc, true);
          if (end.comment) {
            const dc = this.doc.comment;
            this.doc.comment = dc ? `${dc}
${end.comment}` : end.comment;
          }
          this.doc.range[2] = end.offset;
          break;
        }
        default:
          this.errors.push(new errors.YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", `Unsupported token ${token.type}`));
      }
    }
    *end(forceDoc = false, endOffset = -1) {
      if (this.doc) {
        this.decorate(this.doc, true);
        yield this.doc;
        this.doc = null;
      } else if (forceDoc) {
        const opts = Object.assign({ _directives: this.directives }, this.options);
        const doc = new Document.Document(undefined, opts);
        if (this.atDirectives)
          this.onError(endOffset, "MISSING_CHAR", "Missing directives-end indicator line");
        doc.range = [0, endOffset, endOffset];
        this.decorate(doc, false);
        yield doc;
      }
    }
  }
  exports.Composer = Composer;
});

// node_modules/yaml/dist/parse/cst-scalar.js
var require_cst_scalar = __commonJS((exports) => {
  var resolveBlockScalar = require_resolve_block_scalar();
  var resolveFlowScalar = require_resolve_flow_scalar();
  var errors = require_errors2();
  var stringifyString = require_stringifyString();
  function resolveAsScalar(token, strict = true, onError) {
    if (token) {
      const _onError = (pos, code, message) => {
        const offset = typeof pos === "number" ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
        if (onError)
          onError(offset, code, message);
        else
          throw new errors.YAMLParseError([offset, offset + 1], code, message);
      };
      switch (token.type) {
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
          return resolveFlowScalar.resolveFlowScalar(token, strict, _onError);
        case "block-scalar":
          return resolveBlockScalar.resolveBlockScalar({ options: { strict } }, token, _onError);
      }
    }
    return null;
  }
  function createScalarToken(value, context) {
    const { implicitKey = false, indent, inFlow = false, offset = -1, type = "PLAIN" } = context;
    const source = stringifyString.stringifyString({ type, value }, {
      implicitKey,
      indent: indent > 0 ? " ".repeat(indent) : "",
      inFlow,
      options: { blockQuote: true, lineWidth: -1 }
    });
    const end = context.end ?? [
      { type: "newline", offset: -1, indent, source: `
` }
    ];
    switch (source[0]) {
      case "|":
      case ">": {
        const he = source.indexOf(`
`);
        const head = source.substring(0, he);
        const body = source.substring(he + 1) + `
`;
        const props = [
          { type: "block-scalar-header", offset, indent, source: head }
        ];
        if (!addEndtoBlockProps(props, end))
          props.push({ type: "newline", offset: -1, indent, source: `
` });
        return { type: "block-scalar", offset, indent, props, source: body };
      }
      case '"':
        return { type: "double-quoted-scalar", offset, indent, source, end };
      case "'":
        return { type: "single-quoted-scalar", offset, indent, source, end };
      default:
        return { type: "scalar", offset, indent, source, end };
    }
  }
  function setScalarValue(token, value, context = {}) {
    let { afterKey = false, implicitKey = false, inFlow = false, type } = context;
    let indent = "indent" in token ? token.indent : null;
    if (afterKey && typeof indent === "number")
      indent += 2;
    if (!type)
      switch (token.type) {
        case "single-quoted-scalar":
          type = "QUOTE_SINGLE";
          break;
        case "double-quoted-scalar":
          type = "QUOTE_DOUBLE";
          break;
        case "block-scalar": {
          const header = token.props[0];
          if (header.type !== "block-scalar-header")
            throw new Error("Invalid block scalar header");
          type = header.source[0] === ">" ? "BLOCK_FOLDED" : "BLOCK_LITERAL";
          break;
        }
        default:
          type = "PLAIN";
      }
    const source = stringifyString.stringifyString({ type, value }, {
      implicitKey: implicitKey || indent === null,
      indent: indent !== null && indent > 0 ? " ".repeat(indent) : "",
      inFlow,
      options: { blockQuote: true, lineWidth: -1 }
    });
    switch (source[0]) {
      case "|":
      case ">":
        setBlockScalarValue(token, source);
        break;
      case '"':
        setFlowScalarValue(token, source, "double-quoted-scalar");
        break;
      case "'":
        setFlowScalarValue(token, source, "single-quoted-scalar");
        break;
      default:
        setFlowScalarValue(token, source, "scalar");
    }
  }
  function setBlockScalarValue(token, source) {
    const he = source.indexOf(`
`);
    const head = source.substring(0, he);
    const body = source.substring(he + 1) + `
`;
    if (token.type === "block-scalar") {
      const header = token.props[0];
      if (header.type !== "block-scalar-header")
        throw new Error("Invalid block scalar header");
      header.source = head;
      token.source = body;
    } else {
      const { offset } = token;
      const indent = "indent" in token ? token.indent : -1;
      const props = [
        { type: "block-scalar-header", offset, indent, source: head }
      ];
      if (!addEndtoBlockProps(props, "end" in token ? token.end : undefined))
        props.push({ type: "newline", offset: -1, indent, source: `
` });
      for (const key of Object.keys(token))
        if (key !== "type" && key !== "offset")
          delete token[key];
      Object.assign(token, { type: "block-scalar", indent, props, source: body });
    }
  }
  function addEndtoBlockProps(props, end) {
    if (end)
      for (const st of end)
        switch (st.type) {
          case "space":
          case "comment":
            props.push(st);
            break;
          case "newline":
            props.push(st);
            return true;
        }
    return false;
  }
  function setFlowScalarValue(token, source, type) {
    switch (token.type) {
      case "scalar":
      case "double-quoted-scalar":
      case "single-quoted-scalar":
        token.type = type;
        token.source = source;
        break;
      case "block-scalar": {
        const end = token.props.slice(1);
        let oa = source.length;
        if (token.props[0].type === "block-scalar-header")
          oa -= token.props[0].source.length;
        for (const tok of end)
          tok.offset += oa;
        delete token.props;
        Object.assign(token, { type, source, end });
        break;
      }
      case "block-map":
      case "block-seq": {
        const offset = token.offset + source.length;
        const nl = { type: "newline", offset, indent: token.indent, source: `
` };
        delete token.items;
        Object.assign(token, { type, source, end: [nl] });
        break;
      }
      default: {
        const indent = "indent" in token ? token.indent : -1;
        const end = "end" in token && Array.isArray(token.end) ? token.end.filter((st) => st.type === "space" || st.type === "comment" || st.type === "newline") : [];
        for (const key of Object.keys(token))
          if (key !== "type" && key !== "offset")
            delete token[key];
        Object.assign(token, { type, indent, source, end });
      }
    }
  }
  exports.createScalarToken = createScalarToken;
  exports.resolveAsScalar = resolveAsScalar;
  exports.setScalarValue = setScalarValue;
});

// node_modules/yaml/dist/parse/cst-stringify.js
var require_cst_stringify = __commonJS((exports) => {
  var stringify = (cst) => ("type" in cst) ? stringifyToken(cst) : stringifyItem(cst);
  function stringifyToken(token) {
    switch (token.type) {
      case "block-scalar": {
        let res = "";
        for (const tok of token.props)
          res += stringifyToken(tok);
        return res + token.source;
      }
      case "block-map":
      case "block-seq": {
        let res = "";
        for (const item of token.items)
          res += stringifyItem(item);
        return res;
      }
      case "flow-collection": {
        let res = token.start.source;
        for (const item of token.items)
          res += stringifyItem(item);
        for (const st of token.end)
          res += st.source;
        return res;
      }
      case "document": {
        let res = stringifyItem(token);
        if (token.end)
          for (const st of token.end)
            res += st.source;
        return res;
      }
      default: {
        let res = token.source;
        if ("end" in token && token.end)
          for (const st of token.end)
            res += st.source;
        return res;
      }
    }
  }
  function stringifyItem({ start, key, sep, value }) {
    let res = "";
    for (const st of start)
      res += st.source;
    if (key)
      res += stringifyToken(key);
    if (sep)
      for (const st of sep)
        res += st.source;
    if (value)
      res += stringifyToken(value);
    return res;
  }
  exports.stringify = stringify;
});

// node_modules/yaml/dist/parse/cst-visit.js
var require_cst_visit = __commonJS((exports) => {
  var BREAK = Symbol("break visit");
  var SKIP = Symbol("skip children");
  var REMOVE = Symbol("remove item");
  function visit(cst, visitor) {
    if ("type" in cst && cst.type === "document")
      cst = { start: cst.start, value: cst.value };
    _visit(Object.freeze([]), cst, visitor);
  }
  visit.BREAK = BREAK;
  visit.SKIP = SKIP;
  visit.REMOVE = REMOVE;
  visit.itemAtPath = (cst, path) => {
    let item = cst;
    for (const [field, index] of path) {
      const tok = item?.[field];
      if (tok && "items" in tok) {
        item = tok.items[index];
      } else
        return;
    }
    return item;
  };
  visit.parentCollection = (cst, path) => {
    const parent = visit.itemAtPath(cst, path.slice(0, -1));
    const field = path[path.length - 1][0];
    const coll = parent?.[field];
    if (coll && "items" in coll)
      return coll;
    throw new Error("Parent collection not found");
  };
  function _visit(path, item, visitor) {
    let ctrl = visitor(item, path);
    if (typeof ctrl === "symbol")
      return ctrl;
    for (const field of ["key", "value"]) {
      const token = item[field];
      if (token && "items" in token) {
        for (let i = 0;i < token.items.length; ++i) {
          const ci = _visit(Object.freeze(path.concat([[field, i]])), token.items[i], visitor);
          if (typeof ci === "number")
            i = ci - 1;
          else if (ci === BREAK)
            return BREAK;
          else if (ci === REMOVE) {
            token.items.splice(i, 1);
            i -= 1;
          }
        }
        if (typeof ctrl === "function" && field === "key")
          ctrl = ctrl(item, path);
      }
    }
    return typeof ctrl === "function" ? ctrl(item, path) : ctrl;
  }
  exports.visit = visit;
});

// node_modules/yaml/dist/parse/cst.js
var require_cst = __commonJS((exports) => {
  var cstScalar = require_cst_scalar();
  var cstStringify = require_cst_stringify();
  var cstVisit = require_cst_visit();
  var BOM = "\uFEFF";
  var DOCUMENT = "\x02";
  var FLOW_END = "\x18";
  var SCALAR = "\x1F";
  var isCollection = (token) => !!token && ("items" in token);
  var isScalar = (token) => !!token && (token.type === "scalar" || token.type === "single-quoted-scalar" || token.type === "double-quoted-scalar" || token.type === "block-scalar");
  function prettyToken(token) {
    switch (token) {
      case BOM:
        return "<BOM>";
      case DOCUMENT:
        return "<DOC>";
      case FLOW_END:
        return "<FLOW_END>";
      case SCALAR:
        return "<SCALAR>";
      default:
        return JSON.stringify(token);
    }
  }
  function tokenType(source) {
    switch (source) {
      case BOM:
        return "byte-order-mark";
      case DOCUMENT:
        return "doc-mode";
      case FLOW_END:
        return "flow-error-end";
      case SCALAR:
        return "scalar";
      case "---":
        return "doc-start";
      case "...":
        return "doc-end";
      case "":
      case `
`:
      case `\r
`:
        return "newline";
      case "-":
        return "seq-item-ind";
      case "?":
        return "explicit-key-ind";
      case ":":
        return "map-value-ind";
      case "{":
        return "flow-map-start";
      case "}":
        return "flow-map-end";
      case "[":
        return "flow-seq-start";
      case "]":
        return "flow-seq-end";
      case ",":
        return "comma";
    }
    switch (source[0]) {
      case " ":
      case "\t":
        return "space";
      case "#":
        return "comment";
      case "%":
        return "directive-line";
      case "*":
        return "alias";
      case "&":
        return "anchor";
      case "!":
        return "tag";
      case "'":
        return "single-quoted-scalar";
      case '"':
        return "double-quoted-scalar";
      case "|":
      case ">":
        return "block-scalar-header";
    }
    return null;
  }
  exports.createScalarToken = cstScalar.createScalarToken;
  exports.resolveAsScalar = cstScalar.resolveAsScalar;
  exports.setScalarValue = cstScalar.setScalarValue;
  exports.stringify = cstStringify.stringify;
  exports.visit = cstVisit.visit;
  exports.BOM = BOM;
  exports.DOCUMENT = DOCUMENT;
  exports.FLOW_END = FLOW_END;
  exports.SCALAR = SCALAR;
  exports.isCollection = isCollection;
  exports.isScalar = isScalar;
  exports.prettyToken = prettyToken;
  exports.tokenType = tokenType;
});

// node_modules/yaml/dist/parse/lexer.js
var require_lexer = __commonJS((exports) => {
  var cst = require_cst();
  function isEmpty(ch) {
    switch (ch) {
      case undefined:
      case " ":
      case `
`:
      case "\r":
      case "\t":
        return true;
      default:
        return false;
    }
  }
  var hexDigits = new Set("0123456789ABCDEFabcdef");
  var tagChars = new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()");
  var flowIndicatorChars = new Set(",[]{}");
  var invalidAnchorChars = new Set(` ,[]{}
\r	`);
  var isNotAnchorChar = (ch) => !ch || invalidAnchorChars.has(ch);

  class Lexer {
    constructor() {
      this.atEnd = false;
      this.blockScalarIndent = -1;
      this.blockScalarKeep = false;
      this.buffer = "";
      this.flowKey = false;
      this.flowLevel = 0;
      this.indentNext = 0;
      this.indentValue = 0;
      this.lineEndPos = null;
      this.next = null;
      this.pos = 0;
    }
    *lex(source, incomplete = false) {
      if (source) {
        if (typeof source !== "string")
          throw TypeError("source is not a string");
        this.buffer = this.buffer ? this.buffer + source : source;
        this.lineEndPos = null;
      }
      this.atEnd = !incomplete;
      let next = this.next ?? "stream";
      while (next && (incomplete || this.hasChars(1)))
        next = yield* this.parseNext(next);
    }
    atLineEnd() {
      let i = this.pos;
      let ch = this.buffer[i];
      while (ch === " " || ch === "\t")
        ch = this.buffer[++i];
      if (!ch || ch === "#" || ch === `
`)
        return true;
      if (ch === "\r")
        return this.buffer[i + 1] === `
`;
      return false;
    }
    charAt(n) {
      return this.buffer[this.pos + n];
    }
    continueScalar(offset) {
      let ch = this.buffer[offset];
      if (this.indentNext > 0) {
        let indent = 0;
        while (ch === " ")
          ch = this.buffer[++indent + offset];
        if (ch === "\r") {
          const next = this.buffer[indent + offset + 1];
          if (next === `
` || !next && !this.atEnd)
            return offset + indent + 1;
        }
        return ch === `
` || indent >= this.indentNext || !ch && !this.atEnd ? offset + indent : -1;
      }
      if (ch === "-" || ch === ".") {
        const dt = this.buffer.substr(offset, 3);
        if ((dt === "---" || dt === "...") && isEmpty(this.buffer[offset + 3]))
          return -1;
      }
      return offset;
    }
    getLine() {
      let end = this.lineEndPos;
      if (typeof end !== "number" || end !== -1 && end < this.pos) {
        end = this.buffer.indexOf(`
`, this.pos);
        this.lineEndPos = end;
      }
      if (end === -1)
        return this.atEnd ? this.buffer.substring(this.pos) : null;
      if (this.buffer[end - 1] === "\r")
        end -= 1;
      return this.buffer.substring(this.pos, end);
    }
    hasChars(n) {
      return this.pos + n <= this.buffer.length;
    }
    setNext(state) {
      this.buffer = this.buffer.substring(this.pos);
      this.pos = 0;
      this.lineEndPos = null;
      this.next = state;
      return null;
    }
    peek(n) {
      return this.buffer.substr(this.pos, n);
    }
    *parseNext(next) {
      switch (next) {
        case "stream":
          return yield* this.parseStream();
        case "line-start":
          return yield* this.parseLineStart();
        case "block-start":
          return yield* this.parseBlockStart();
        case "doc":
          return yield* this.parseDocument();
        case "flow":
          return yield* this.parseFlowCollection();
        case "quoted-scalar":
          return yield* this.parseQuotedScalar();
        case "block-scalar":
          return yield* this.parseBlockScalar();
        case "plain-scalar":
          return yield* this.parsePlainScalar();
      }
    }
    *parseStream() {
      let line = this.getLine();
      if (line === null)
        return this.setNext("stream");
      if (line[0] === cst.BOM) {
        yield* this.pushCount(1);
        line = line.substring(1);
      }
      if (line[0] === "%") {
        let dirEnd = line.length;
        let cs = line.indexOf("#");
        while (cs !== -1) {
          const ch = line[cs - 1];
          if (ch === " " || ch === "\t") {
            dirEnd = cs - 1;
            break;
          } else {
            cs = line.indexOf("#", cs + 1);
          }
        }
        while (true) {
          const ch = line[dirEnd - 1];
          if (ch === " " || ch === "\t")
            dirEnd -= 1;
          else
            break;
        }
        const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));
        yield* this.pushCount(line.length - n);
        this.pushNewline();
        return "stream";
      }
      if (this.atLineEnd()) {
        const sp = yield* this.pushSpaces(true);
        yield* this.pushCount(line.length - sp);
        yield* this.pushNewline();
        return "stream";
      }
      yield cst.DOCUMENT;
      return yield* this.parseLineStart();
    }
    *parseLineStart() {
      const ch = this.charAt(0);
      if (!ch && !this.atEnd)
        return this.setNext("line-start");
      if (ch === "-" || ch === ".") {
        if (!this.atEnd && !this.hasChars(4))
          return this.setNext("line-start");
        const s = this.peek(3);
        if ((s === "---" || s === "...") && isEmpty(this.charAt(3))) {
          yield* this.pushCount(3);
          this.indentValue = 0;
          this.indentNext = 0;
          return s === "---" ? "doc" : "stream";
        }
      }
      this.indentValue = yield* this.pushSpaces(false);
      if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))
        this.indentNext = this.indentValue;
      return yield* this.parseBlockStart();
    }
    *parseBlockStart() {
      const [ch0, ch1] = this.peek(2);
      if (!ch1 && !this.atEnd)
        return this.setNext("block-start");
      if ((ch0 === "-" || ch0 === "?" || ch0 === ":") && isEmpty(ch1)) {
        const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
        this.indentNext = this.indentValue + 1;
        this.indentValue += n;
        return yield* this.parseBlockStart();
      }
      return "doc";
    }
    *parseDocument() {
      yield* this.pushSpaces(true);
      const line = this.getLine();
      if (line === null)
        return this.setNext("doc");
      let n = yield* this.pushIndicators();
      switch (line[n]) {
        case "#":
          yield* this.pushCount(line.length - n);
        case undefined:
          yield* this.pushNewline();
          return yield* this.parseLineStart();
        case "{":
        case "[":
          yield* this.pushCount(1);
          this.flowKey = false;
          this.flowLevel = 1;
          return "flow";
        case "}":
        case "]":
          yield* this.pushCount(1);
          return "doc";
        case "*":
          yield* this.pushUntil(isNotAnchorChar);
          return "doc";
        case '"':
        case "'":
          return yield* this.parseQuotedScalar();
        case "|":
        case ">":
          n += yield* this.parseBlockScalarHeader();
          n += yield* this.pushSpaces(true);
          yield* this.pushCount(line.length - n);
          yield* this.pushNewline();
          return yield* this.parseBlockScalar();
        default:
          return yield* this.parsePlainScalar();
      }
    }
    *parseFlowCollection() {
      let nl, sp;
      let indent = -1;
      do {
        nl = yield* this.pushNewline();
        if (nl > 0) {
          sp = yield* this.pushSpaces(false);
          this.indentValue = indent = sp;
        } else {
          sp = 0;
        }
        sp += yield* this.pushSpaces(true);
      } while (nl + sp > 0);
      const line = this.getLine();
      if (line === null)
        return this.setNext("flow");
      if (indent !== -1 && indent < this.indentNext && line[0] !== "#" || indent === 0 && (line.startsWith("---") || line.startsWith("...")) && isEmpty(line[3])) {
        const atFlowEndMarker = indent === this.indentNext - 1 && this.flowLevel === 1 && (line[0] === "]" || line[0] === "}");
        if (!atFlowEndMarker) {
          this.flowLevel = 0;
          yield cst.FLOW_END;
          return yield* this.parseLineStart();
        }
      }
      let n = 0;
      while (line[n] === ",") {
        n += yield* this.pushCount(1);
        n += yield* this.pushSpaces(true);
        this.flowKey = false;
      }
      n += yield* this.pushIndicators();
      switch (line[n]) {
        case undefined:
          return "flow";
        case "#":
          yield* this.pushCount(line.length - n);
          return "flow";
        case "{":
        case "[":
          yield* this.pushCount(1);
          this.flowKey = false;
          this.flowLevel += 1;
          return "flow";
        case "}":
        case "]":
          yield* this.pushCount(1);
          this.flowKey = true;
          this.flowLevel -= 1;
          return this.flowLevel ? "flow" : "doc";
        case "*":
          yield* this.pushUntil(isNotAnchorChar);
          return "flow";
        case '"':
        case "'":
          this.flowKey = true;
          return yield* this.parseQuotedScalar();
        case ":": {
          const next = this.charAt(1);
          if (this.flowKey || isEmpty(next) || next === ",") {
            this.flowKey = false;
            yield* this.pushCount(1);
            yield* this.pushSpaces(true);
            return "flow";
          }
        }
        default:
          this.flowKey = false;
          return yield* this.parsePlainScalar();
      }
    }
    *parseQuotedScalar() {
      const quote = this.charAt(0);
      let end = this.buffer.indexOf(quote, this.pos + 1);
      if (quote === "'") {
        while (end !== -1 && this.buffer[end + 1] === "'")
          end = this.buffer.indexOf("'", end + 2);
      } else {
        while (end !== -1) {
          let n = 0;
          while (this.buffer[end - 1 - n] === "\\")
            n += 1;
          if (n % 2 === 0)
            break;
          end = this.buffer.indexOf('"', end + 1);
        }
      }
      const qb = this.buffer.substring(0, end);
      let nl = qb.indexOf(`
`, this.pos);
      if (nl !== -1) {
        while (nl !== -1) {
          const cs = this.continueScalar(nl + 1);
          if (cs === -1)
            break;
          nl = qb.indexOf(`
`, cs);
        }
        if (nl !== -1) {
          end = nl - (qb[nl - 1] === "\r" ? 2 : 1);
        }
      }
      if (end === -1) {
        if (!this.atEnd)
          return this.setNext("quoted-scalar");
        end = this.buffer.length;
      }
      yield* this.pushToIndex(end + 1, false);
      return this.flowLevel ? "flow" : "doc";
    }
    *parseBlockScalarHeader() {
      this.blockScalarIndent = -1;
      this.blockScalarKeep = false;
      let i = this.pos;
      while (true) {
        const ch = this.buffer[++i];
        if (ch === "+")
          this.blockScalarKeep = true;
        else if (ch > "0" && ch <= "9")
          this.blockScalarIndent = Number(ch) - 1;
        else if (ch !== "-")
          break;
      }
      return yield* this.pushUntil((ch) => isEmpty(ch) || ch === "#");
    }
    *parseBlockScalar() {
      let nl = this.pos - 1;
      let indent = 0;
      let ch;
      loop:
        for (let i2 = this.pos;ch = this.buffer[i2]; ++i2) {
          switch (ch) {
            case " ":
              indent += 1;
              break;
            case `
`:
              nl = i2;
              indent = 0;
              break;
            case "\r": {
              const next = this.buffer[i2 + 1];
              if (!next && !this.atEnd)
                return this.setNext("block-scalar");
              if (next === `
`)
                break;
            }
            default:
              break loop;
          }
        }
      if (!ch && !this.atEnd)
        return this.setNext("block-scalar");
      if (indent >= this.indentNext) {
        if (this.blockScalarIndent === -1)
          this.indentNext = indent;
        else {
          this.indentNext = this.blockScalarIndent + (this.indentNext === 0 ? 1 : this.indentNext);
        }
        do {
          const cs = this.continueScalar(nl + 1);
          if (cs === -1)
            break;
          nl = this.buffer.indexOf(`
`, cs);
        } while (nl !== -1);
        if (nl === -1) {
          if (!this.atEnd)
            return this.setNext("block-scalar");
          nl = this.buffer.length;
        }
      }
      let i = nl + 1;
      ch = this.buffer[i];
      while (ch === " ")
        ch = this.buffer[++i];
      if (ch === "\t") {
        while (ch === "\t" || ch === " " || ch === "\r" || ch === `
`)
          ch = this.buffer[++i];
        nl = i - 1;
      } else if (!this.blockScalarKeep) {
        do {
          let i2 = nl - 1;
          let ch2 = this.buffer[i2];
          if (ch2 === "\r")
            ch2 = this.buffer[--i2];
          const lastChar = i2;
          while (ch2 === " ")
            ch2 = this.buffer[--i2];
          if (ch2 === `
` && i2 >= this.pos && i2 + 1 + indent > lastChar)
            nl = i2;
          else
            break;
        } while (true);
      }
      yield cst.SCALAR;
      yield* this.pushToIndex(nl + 1, true);
      return yield* this.parseLineStart();
    }
    *parsePlainScalar() {
      const inFlow = this.flowLevel > 0;
      let end = this.pos - 1;
      let i = this.pos - 1;
      let ch;
      while (ch = this.buffer[++i]) {
        if (ch === ":") {
          const next = this.buffer[i + 1];
          if (isEmpty(next) || inFlow && flowIndicatorChars.has(next))
            break;
          end = i;
        } else if (isEmpty(ch)) {
          let next = this.buffer[i + 1];
          if (ch === "\r") {
            if (next === `
`) {
              i += 1;
              ch = `
`;
              next = this.buffer[i + 1];
            } else
              end = i;
          }
          if (next === "#" || inFlow && flowIndicatorChars.has(next))
            break;
          if (ch === `
`) {
            const cs = this.continueScalar(i + 1);
            if (cs === -1)
              break;
            i = Math.max(i, cs - 2);
          }
        } else {
          if (inFlow && flowIndicatorChars.has(ch))
            break;
          end = i;
        }
      }
      if (!ch && !this.atEnd)
        return this.setNext("plain-scalar");
      yield cst.SCALAR;
      yield* this.pushToIndex(end + 1, true);
      return inFlow ? "flow" : "doc";
    }
    *pushCount(n) {
      if (n > 0) {
        yield this.buffer.substr(this.pos, n);
        this.pos += n;
        return n;
      }
      return 0;
    }
    *pushToIndex(i, allowEmpty) {
      const s = this.buffer.slice(this.pos, i);
      if (s) {
        yield s;
        this.pos += s.length;
        return s.length;
      } else if (allowEmpty)
        yield "";
      return 0;
    }
    *pushIndicators() {
      switch (this.charAt(0)) {
        case "!":
          return (yield* this.pushTag()) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
        case "&":
          return (yield* this.pushUntil(isNotAnchorChar)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
        case "-":
        case "?":
        case ":": {
          const inFlow = this.flowLevel > 0;
          const ch1 = this.charAt(1);
          if (isEmpty(ch1) || inFlow && flowIndicatorChars.has(ch1)) {
            if (!inFlow)
              this.indentNext = this.indentValue + 1;
            else if (this.flowKey)
              this.flowKey = false;
            return (yield* this.pushCount(1)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
          }
        }
      }
      return 0;
    }
    *pushTag() {
      if (this.charAt(1) === "<") {
        let i = this.pos + 2;
        let ch = this.buffer[i];
        while (!isEmpty(ch) && ch !== ">")
          ch = this.buffer[++i];
        return yield* this.pushToIndex(ch === ">" ? i + 1 : i, false);
      } else {
        let i = this.pos + 1;
        let ch = this.buffer[i];
        while (ch) {
          if (tagChars.has(ch))
            ch = this.buffer[++i];
          else if (ch === "%" && hexDigits.has(this.buffer[i + 1]) && hexDigits.has(this.buffer[i + 2])) {
            ch = this.buffer[i += 3];
          } else
            break;
        }
        return yield* this.pushToIndex(i, false);
      }
    }
    *pushNewline() {
      const ch = this.buffer[this.pos];
      if (ch === `
`)
        return yield* this.pushCount(1);
      else if (ch === "\r" && this.charAt(1) === `
`)
        return yield* this.pushCount(2);
      else
        return 0;
    }
    *pushSpaces(allowTabs) {
      let i = this.pos - 1;
      let ch;
      do {
        ch = this.buffer[++i];
      } while (ch === " " || allowTabs && ch === "\t");
      const n = i - this.pos;
      if (n > 0) {
        yield this.buffer.substr(this.pos, n);
        this.pos = i;
      }
      return n;
    }
    *pushUntil(test) {
      let i = this.pos;
      let ch = this.buffer[i];
      while (!test(ch))
        ch = this.buffer[++i];
      return yield* this.pushToIndex(i, false);
    }
  }
  exports.Lexer = Lexer;
});

// node_modules/yaml/dist/parse/line-counter.js
var require_line_counter = __commonJS((exports) => {
  class LineCounter {
    constructor() {
      this.lineStarts = [];
      this.addNewLine = (offset) => this.lineStarts.push(offset);
      this.linePos = (offset) => {
        let low = 0;
        let high = this.lineStarts.length;
        while (low < high) {
          const mid = low + high >> 1;
          if (this.lineStarts[mid] < offset)
            low = mid + 1;
          else
            high = mid;
        }
        if (this.lineStarts[low] === offset)
          return { line: low + 1, col: 1 };
        if (low === 0)
          return { line: 0, col: offset };
        const start = this.lineStarts[low - 1];
        return { line: low, col: offset - start + 1 };
      };
    }
  }
  exports.LineCounter = LineCounter;
});

// node_modules/yaml/dist/parse/parser.js
var require_parser = __commonJS((exports) => {
  var node_process = __require("node:process");
  var cst = require_cst();
  var lexer = require_lexer();
  function includesToken(list, type) {
    for (let i = 0;i < list.length; ++i)
      if (list[i].type === type)
        return true;
    return false;
  }
  function findNonEmptyIndex(list) {
    for (let i = 0;i < list.length; ++i) {
      switch (list[i].type) {
        case "space":
        case "comment":
        case "newline":
          break;
        default:
          return i;
      }
    }
    return -1;
  }
  function isFlowToken(token) {
    switch (token?.type) {
      case "alias":
      case "scalar":
      case "single-quoted-scalar":
      case "double-quoted-scalar":
      case "flow-collection":
        return true;
      default:
        return false;
    }
  }
  function getPrevProps(parent) {
    switch (parent.type) {
      case "document":
        return parent.start;
      case "block-map": {
        const it = parent.items[parent.items.length - 1];
        return it.sep ?? it.start;
      }
      case "block-seq":
        return parent.items[parent.items.length - 1].start;
      default:
        return [];
    }
  }
  function getFirstKeyStartProps(prev) {
    if (prev.length === 0)
      return [];
    let i = prev.length;
    loop:
      while (--i >= 0) {
        switch (prev[i].type) {
          case "doc-start":
          case "explicit-key-ind":
          case "map-value-ind":
          case "seq-item-ind":
          case "newline":
            break loop;
        }
      }
    while (prev[++i]?.type === "space") {
    }
    return prev.splice(i, prev.length);
  }
  function fixFlowSeqItems(fc) {
    if (fc.start.type === "flow-seq-start") {
      for (const it of fc.items) {
        if (it.sep && !it.value && !includesToken(it.start, "explicit-key-ind") && !includesToken(it.sep, "map-value-ind")) {
          if (it.key)
            it.value = it.key;
          delete it.key;
          if (isFlowToken(it.value)) {
            if (it.value.end)
              Array.prototype.push.apply(it.value.end, it.sep);
            else
              it.value.end = it.sep;
          } else
            Array.prototype.push.apply(it.start, it.sep);
          delete it.sep;
        }
      }
    }
  }

  class Parser {
    constructor(onNewLine) {
      this.atNewLine = true;
      this.atScalar = false;
      this.indent = 0;
      this.offset = 0;
      this.onKeyLine = false;
      this.stack = [];
      this.source = "";
      this.type = "";
      this.lexer = new lexer.Lexer;
      this.onNewLine = onNewLine;
    }
    *parse(source, incomplete = false) {
      if (this.onNewLine && this.offset === 0)
        this.onNewLine(0);
      for (const lexeme of this.lexer.lex(source, incomplete))
        yield* this.next(lexeme);
      if (!incomplete)
        yield* this.end();
    }
    *next(source) {
      this.source = source;
      if (node_process.env.LOG_TOKENS)
        console.log("|", cst.prettyToken(source));
      if (this.atScalar) {
        this.atScalar = false;
        yield* this.step();
        this.offset += source.length;
        return;
      }
      const type = cst.tokenType(source);
      if (!type) {
        const message = `Not a YAML token: ${source}`;
        yield* this.pop({ type: "error", offset: this.offset, message, source });
        this.offset += source.length;
      } else if (type === "scalar") {
        this.atNewLine = false;
        this.atScalar = true;
        this.type = "scalar";
      } else {
        this.type = type;
        yield* this.step();
        switch (type) {
          case "newline":
            this.atNewLine = true;
            this.indent = 0;
            if (this.onNewLine)
              this.onNewLine(this.offset + source.length);
            break;
          case "space":
            if (this.atNewLine && source[0] === " ")
              this.indent += source.length;
            break;
          case "explicit-key-ind":
          case "map-value-ind":
          case "seq-item-ind":
            if (this.atNewLine)
              this.indent += source.length;
            break;
          case "doc-mode":
          case "flow-error-end":
            return;
          default:
            this.atNewLine = false;
        }
        this.offset += source.length;
      }
    }
    *end() {
      while (this.stack.length > 0)
        yield* this.pop();
    }
    get sourceToken() {
      const st = {
        type: this.type,
        offset: this.offset,
        indent: this.indent,
        source: this.source
      };
      return st;
    }
    *step() {
      const top = this.peek(1);
      if (this.type === "doc-end" && (!top || top.type !== "doc-end")) {
        while (this.stack.length > 0)
          yield* this.pop();
        this.stack.push({
          type: "doc-end",
          offset: this.offset,
          source: this.source
        });
        return;
      }
      if (!top)
        return yield* this.stream();
      switch (top.type) {
        case "document":
          return yield* this.document(top);
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
          return yield* this.scalar(top);
        case "block-scalar":
          return yield* this.blockScalar(top);
        case "block-map":
          return yield* this.blockMap(top);
        case "block-seq":
          return yield* this.blockSequence(top);
        case "flow-collection":
          return yield* this.flowCollection(top);
        case "doc-end":
          return yield* this.documentEnd(top);
      }
      yield* this.pop();
    }
    peek(n) {
      return this.stack[this.stack.length - n];
    }
    *pop(error) {
      const token = error ?? this.stack.pop();
      if (!token) {
        const message = "Tried to pop an empty stack";
        yield { type: "error", offset: this.offset, source: "", message };
      } else if (this.stack.length === 0) {
        yield token;
      } else {
        const top = this.peek(1);
        if (token.type === "block-scalar") {
          token.indent = "indent" in top ? top.indent : 0;
        } else if (token.type === "flow-collection" && top.type === "document") {
          token.indent = 0;
        }
        if (token.type === "flow-collection")
          fixFlowSeqItems(token);
        switch (top.type) {
          case "document":
            top.value = token;
            break;
          case "block-scalar":
            top.props.push(token);
            break;
          case "block-map": {
            const it = top.items[top.items.length - 1];
            if (it.value) {
              top.items.push({ start: [], key: token, sep: [] });
              this.onKeyLine = true;
              return;
            } else if (it.sep) {
              it.value = token;
            } else {
              Object.assign(it, { key: token, sep: [] });
              this.onKeyLine = !it.explicitKey;
              return;
            }
            break;
          }
          case "block-seq": {
            const it = top.items[top.items.length - 1];
            if (it.value)
              top.items.push({ start: [], value: token });
            else
              it.value = token;
            break;
          }
          case "flow-collection": {
            const it = top.items[top.items.length - 1];
            if (!it || it.value)
              top.items.push({ start: [], key: token, sep: [] });
            else if (it.sep)
              it.value = token;
            else
              Object.assign(it, { key: token, sep: [] });
            return;
          }
          default:
            yield* this.pop();
            yield* this.pop(token);
        }
        if ((top.type === "document" || top.type === "block-map" || top.type === "block-seq") && (token.type === "block-map" || token.type === "block-seq")) {
          const last = token.items[token.items.length - 1];
          if (last && !last.sep && !last.value && last.start.length > 0 && findNonEmptyIndex(last.start) === -1 && (token.indent === 0 || last.start.every((st) => st.type !== "comment" || st.indent < token.indent))) {
            if (top.type === "document")
              top.end = last.start;
            else
              top.items.push({ start: last.start });
            token.items.splice(-1, 1);
          }
        }
      }
    }
    *stream() {
      switch (this.type) {
        case "directive-line":
          yield { type: "directive", offset: this.offset, source: this.source };
          return;
        case "byte-order-mark":
        case "space":
        case "comment":
        case "newline":
          yield this.sourceToken;
          return;
        case "doc-mode":
        case "doc-start": {
          const doc = {
            type: "document",
            offset: this.offset,
            start: []
          };
          if (this.type === "doc-start")
            doc.start.push(this.sourceToken);
          this.stack.push(doc);
          return;
        }
      }
      yield {
        type: "error",
        offset: this.offset,
        message: `Unexpected ${this.type} token in YAML stream`,
        source: this.source
      };
    }
    *document(doc) {
      if (doc.value)
        return yield* this.lineEnd(doc);
      switch (this.type) {
        case "doc-start": {
          if (findNonEmptyIndex(doc.start) !== -1) {
            yield* this.pop();
            yield* this.step();
          } else
            doc.start.push(this.sourceToken);
          return;
        }
        case "anchor":
        case "tag":
        case "space":
        case "comment":
        case "newline":
          doc.start.push(this.sourceToken);
          return;
      }
      const bv = this.startBlockValue(doc);
      if (bv)
        this.stack.push(bv);
      else {
        yield {
          type: "error",
          offset: this.offset,
          message: `Unexpected ${this.type} token in YAML document`,
          source: this.source
        };
      }
    }
    *scalar(scalar) {
      if (this.type === "map-value-ind") {
        const prev = getPrevProps(this.peek(2));
        const start = getFirstKeyStartProps(prev);
        let sep;
        if (scalar.end) {
          sep = scalar.end;
          sep.push(this.sourceToken);
          delete scalar.end;
        } else
          sep = [this.sourceToken];
        const map = {
          type: "block-map",
          offset: scalar.offset,
          indent: scalar.indent,
          items: [{ start, key: scalar, sep }]
        };
        this.onKeyLine = true;
        this.stack[this.stack.length - 1] = map;
      } else
        yield* this.lineEnd(scalar);
    }
    *blockScalar(scalar) {
      switch (this.type) {
        case "space":
        case "comment":
        case "newline":
          scalar.props.push(this.sourceToken);
          return;
        case "scalar":
          scalar.source = this.source;
          this.atNewLine = true;
          this.indent = 0;
          if (this.onNewLine) {
            let nl = this.source.indexOf(`
`) + 1;
            while (nl !== 0) {
              this.onNewLine(this.offset + nl);
              nl = this.source.indexOf(`
`, nl) + 1;
            }
          }
          yield* this.pop();
          break;
        default:
          yield* this.pop();
          yield* this.step();
      }
    }
    *blockMap(map) {
      const it = map.items[map.items.length - 1];
      switch (this.type) {
        case "newline":
          this.onKeyLine = false;
          if (it.value) {
            const end = "end" in it.value ? it.value.end : undefined;
            const last = Array.isArray(end) ? end[end.length - 1] : undefined;
            if (last?.type === "comment")
              end?.push(this.sourceToken);
            else
              map.items.push({ start: [this.sourceToken] });
          } else if (it.sep) {
            it.sep.push(this.sourceToken);
          } else {
            it.start.push(this.sourceToken);
          }
          return;
        case "space":
        case "comment":
          if (it.value) {
            map.items.push({ start: [this.sourceToken] });
          } else if (it.sep) {
            it.sep.push(this.sourceToken);
          } else {
            if (this.atIndentedComment(it.start, map.indent)) {
              const prev = map.items[map.items.length - 2];
              const end = prev?.value?.end;
              if (Array.isArray(end)) {
                Array.prototype.push.apply(end, it.start);
                end.push(this.sourceToken);
                map.items.pop();
                return;
              }
            }
            it.start.push(this.sourceToken);
          }
          return;
      }
      if (this.indent >= map.indent) {
        const atMapIndent = !this.onKeyLine && this.indent === map.indent;
        const atNextItem = atMapIndent && (it.sep || it.explicitKey) && this.type !== "seq-item-ind";
        let start = [];
        if (atNextItem && it.sep && !it.value) {
          const nl = [];
          for (let i = 0;i < it.sep.length; ++i) {
            const st = it.sep[i];
            switch (st.type) {
              case "newline":
                nl.push(i);
                break;
              case "space":
                break;
              case "comment":
                if (st.indent > map.indent)
                  nl.length = 0;
                break;
              default:
                nl.length = 0;
            }
          }
          if (nl.length >= 2)
            start = it.sep.splice(nl[1]);
        }
        switch (this.type) {
          case "anchor":
          case "tag":
            if (atNextItem || it.value) {
              start.push(this.sourceToken);
              map.items.push({ start });
              this.onKeyLine = true;
            } else if (it.sep) {
              it.sep.push(this.sourceToken);
            } else {
              it.start.push(this.sourceToken);
            }
            return;
          case "explicit-key-ind":
            if (!it.sep && !it.explicitKey) {
              it.start.push(this.sourceToken);
              it.explicitKey = true;
            } else if (atNextItem || it.value) {
              start.push(this.sourceToken);
              map.items.push({ start, explicitKey: true });
            } else {
              this.stack.push({
                type: "block-map",
                offset: this.offset,
                indent: this.indent,
                items: [{ start: [this.sourceToken], explicitKey: true }]
              });
            }
            this.onKeyLine = true;
            return;
          case "map-value-ind":
            if (it.explicitKey) {
              if (!it.sep) {
                if (includesToken(it.start, "newline")) {
                  Object.assign(it, { key: null, sep: [this.sourceToken] });
                } else {
                  const start2 = getFirstKeyStartProps(it.start);
                  this.stack.push({
                    type: "block-map",
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start: start2, key: null, sep: [this.sourceToken] }]
                  });
                }
              } else if (it.value) {
                map.items.push({ start: [], key: null, sep: [this.sourceToken] });
              } else if (includesToken(it.sep, "map-value-ind")) {
                this.stack.push({
                  type: "block-map",
                  offset: this.offset,
                  indent: this.indent,
                  items: [{ start, key: null, sep: [this.sourceToken] }]
                });
              } else if (isFlowToken(it.key) && !includesToken(it.sep, "newline")) {
                const start2 = getFirstKeyStartProps(it.start);
                const key = it.key;
                const sep = it.sep;
                sep.push(this.sourceToken);
                delete it.key;
                delete it.sep;
                this.stack.push({
                  type: "block-map",
                  offset: this.offset,
                  indent: this.indent,
                  items: [{ start: start2, key, sep }]
                });
              } else if (start.length > 0) {
                it.sep = it.sep.concat(start, this.sourceToken);
              } else {
                it.sep.push(this.sourceToken);
              }
            } else {
              if (!it.sep) {
                Object.assign(it, { key: null, sep: [this.sourceToken] });
              } else if (it.value || atNextItem) {
                map.items.push({ start, key: null, sep: [this.sourceToken] });
              } else if (includesToken(it.sep, "map-value-ind")) {
                this.stack.push({
                  type: "block-map",
                  offset: this.offset,
                  indent: this.indent,
                  items: [{ start: [], key: null, sep: [this.sourceToken] }]
                });
              } else {
                it.sep.push(this.sourceToken);
              }
            }
            this.onKeyLine = true;
            return;
          case "alias":
          case "scalar":
          case "single-quoted-scalar":
          case "double-quoted-scalar": {
            const fs = this.flowScalar(this.type);
            if (atNextItem || it.value) {
              map.items.push({ start, key: fs, sep: [] });
              this.onKeyLine = true;
            } else if (it.sep) {
              this.stack.push(fs);
            } else {
              Object.assign(it, { key: fs, sep: [] });
              this.onKeyLine = true;
            }
            return;
          }
          default: {
            const bv = this.startBlockValue(map);
            if (bv) {
              if (bv.type === "block-seq") {
                if (!it.explicitKey && it.sep && !includesToken(it.sep, "newline")) {
                  yield* this.pop({
                    type: "error",
                    offset: this.offset,
                    message: "Unexpected block-seq-ind on same line with key",
                    source: this.source
                  });
                  return;
                }
              } else if (atMapIndent) {
                map.items.push({ start });
              }
              this.stack.push(bv);
              return;
            }
          }
        }
      }
      yield* this.pop();
      yield* this.step();
    }
    *blockSequence(seq) {
      const it = seq.items[seq.items.length - 1];
      switch (this.type) {
        case "newline":
          if (it.value) {
            const end = "end" in it.value ? it.value.end : undefined;
            const last = Array.isArray(end) ? end[end.length - 1] : undefined;
            if (last?.type === "comment")
              end?.push(this.sourceToken);
            else
              seq.items.push({ start: [this.sourceToken] });
          } else
            it.start.push(this.sourceToken);
          return;
        case "space":
        case "comment":
          if (it.value)
            seq.items.push({ start: [this.sourceToken] });
          else {
            if (this.atIndentedComment(it.start, seq.indent)) {
              const prev = seq.items[seq.items.length - 2];
              const end = prev?.value?.end;
              if (Array.isArray(end)) {
                Array.prototype.push.apply(end, it.start);
                end.push(this.sourceToken);
                seq.items.pop();
                return;
              }
            }
            it.start.push(this.sourceToken);
          }
          return;
        case "anchor":
        case "tag":
          if (it.value || this.indent <= seq.indent)
            break;
          it.start.push(this.sourceToken);
          return;
        case "seq-item-ind":
          if (this.indent !== seq.indent)
            break;
          if (it.value || includesToken(it.start, "seq-item-ind"))
            seq.items.push({ start: [this.sourceToken] });
          else
            it.start.push(this.sourceToken);
          return;
      }
      if (this.indent > seq.indent) {
        const bv = this.startBlockValue(seq);
        if (bv) {
          this.stack.push(bv);
          return;
        }
      }
      yield* this.pop();
      yield* this.step();
    }
    *flowCollection(fc) {
      const it = fc.items[fc.items.length - 1];
      if (this.type === "flow-error-end") {
        let top;
        do {
          yield* this.pop();
          top = this.peek(1);
        } while (top && top.type === "flow-collection");
      } else if (fc.end.length === 0) {
        switch (this.type) {
          case "comma":
          case "explicit-key-ind":
            if (!it || it.sep)
              fc.items.push({ start: [this.sourceToken] });
            else
              it.start.push(this.sourceToken);
            return;
          case "map-value-ind":
            if (!it || it.value)
              fc.items.push({ start: [], key: null, sep: [this.sourceToken] });
            else if (it.sep)
              it.sep.push(this.sourceToken);
            else
              Object.assign(it, { key: null, sep: [this.sourceToken] });
            return;
          case "space":
          case "comment":
          case "newline":
          case "anchor":
          case "tag":
            if (!it || it.value)
              fc.items.push({ start: [this.sourceToken] });
            else if (it.sep)
              it.sep.push(this.sourceToken);
            else
              it.start.push(this.sourceToken);
            return;
          case "alias":
          case "scalar":
          case "single-quoted-scalar":
          case "double-quoted-scalar": {
            const fs = this.flowScalar(this.type);
            if (!it || it.value)
              fc.items.push({ start: [], key: fs, sep: [] });
            else if (it.sep)
              this.stack.push(fs);
            else
              Object.assign(it, { key: fs, sep: [] });
            return;
          }
          case "flow-map-end":
          case "flow-seq-end":
            fc.end.push(this.sourceToken);
            return;
        }
        const bv = this.startBlockValue(fc);
        if (bv)
          this.stack.push(bv);
        else {
          yield* this.pop();
          yield* this.step();
        }
      } else {
        const parent = this.peek(2);
        if (parent.type === "block-map" && (this.type === "map-value-ind" && parent.indent === fc.indent || this.type === "newline" && !parent.items[parent.items.length - 1].sep)) {
          yield* this.pop();
          yield* this.step();
        } else if (this.type === "map-value-ind" && parent.type !== "flow-collection") {
          const prev = getPrevProps(parent);
          const start = getFirstKeyStartProps(prev);
          fixFlowSeqItems(fc);
          const sep = fc.end.splice(1, fc.end.length);
          sep.push(this.sourceToken);
          const map = {
            type: "block-map",
            offset: fc.offset,
            indent: fc.indent,
            items: [{ start, key: fc, sep }]
          };
          this.onKeyLine = true;
          this.stack[this.stack.length - 1] = map;
        } else {
          yield* this.lineEnd(fc);
        }
      }
    }
    flowScalar(type) {
      if (this.onNewLine) {
        let nl = this.source.indexOf(`
`) + 1;
        while (nl !== 0) {
          this.onNewLine(this.offset + nl);
          nl = this.source.indexOf(`
`, nl) + 1;
        }
      }
      return {
        type,
        offset: this.offset,
        indent: this.indent,
        source: this.source
      };
    }
    startBlockValue(parent) {
      switch (this.type) {
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
          return this.flowScalar(this.type);
        case "block-scalar-header":
          return {
            type: "block-scalar",
            offset: this.offset,
            indent: this.indent,
            props: [this.sourceToken],
            source: ""
          };
        case "flow-map-start":
        case "flow-seq-start":
          return {
            type: "flow-collection",
            offset: this.offset,
            indent: this.indent,
            start: this.sourceToken,
            items: [],
            end: []
          };
        case "seq-item-ind":
          return {
            type: "block-seq",
            offset: this.offset,
            indent: this.indent,
            items: [{ start: [this.sourceToken] }]
          };
        case "explicit-key-ind": {
          this.onKeyLine = true;
          const prev = getPrevProps(parent);
          const start = getFirstKeyStartProps(prev);
          start.push(this.sourceToken);
          return {
            type: "block-map",
            offset: this.offset,
            indent: this.indent,
            items: [{ start, explicitKey: true }]
          };
        }
        case "map-value-ind": {
          this.onKeyLine = true;
          const prev = getPrevProps(parent);
          const start = getFirstKeyStartProps(prev);
          return {
            type: "block-map",
            offset: this.offset,
            indent: this.indent,
            items: [{ start, key: null, sep: [this.sourceToken] }]
          };
        }
      }
      return null;
    }
    atIndentedComment(start, indent) {
      if (this.type !== "comment")
        return false;
      if (this.indent <= indent)
        return false;
      return start.every((st) => st.type === "newline" || st.type === "space");
    }
    *documentEnd(docEnd) {
      if (this.type !== "doc-mode") {
        if (docEnd.end)
          docEnd.end.push(this.sourceToken);
        else
          docEnd.end = [this.sourceToken];
        if (this.type === "newline")
          yield* this.pop();
      }
    }
    *lineEnd(token) {
      switch (this.type) {
        case "comma":
        case "doc-start":
        case "doc-end":
        case "flow-seq-end":
        case "flow-map-end":
        case "map-value-ind":
          yield* this.pop();
          yield* this.step();
          break;
        case "newline":
          this.onKeyLine = false;
        case "space":
        case "comment":
        default:
          if (token.end)
            token.end.push(this.sourceToken);
          else
            token.end = [this.sourceToken];
          if (this.type === "newline")
            yield* this.pop();
      }
    }
  }
  exports.Parser = Parser;
});

// node_modules/yaml/dist/public-api.js
var require_public_api = __commonJS((exports) => {
  var composer = require_composer();
  var Document = require_Document();
  var errors = require_errors2();
  var log = require_log();
  var identity = require_identity();
  var lineCounter = require_line_counter();
  var parser = require_parser();
  function parseOptions(options) {
    const prettyErrors = options.prettyErrors !== false;
    const lineCounter$1 = options.lineCounter || prettyErrors && new lineCounter.LineCounter || null;
    return { lineCounter: lineCounter$1, prettyErrors };
  }
  function parseAllDocuments(source, options = {}) {
    const { lineCounter: lineCounter2, prettyErrors } = parseOptions(options);
    const parser$1 = new parser.Parser(lineCounter2?.addNewLine);
    const composer$1 = new composer.Composer(options);
    const docs = Array.from(composer$1.compose(parser$1.parse(source)));
    if (prettyErrors && lineCounter2)
      for (const doc of docs) {
        doc.errors.forEach(errors.prettifyError(source, lineCounter2));
        doc.warnings.forEach(errors.prettifyError(source, lineCounter2));
      }
    if (docs.length > 0)
      return docs;
    return Object.assign([], { empty: true }, composer$1.streamInfo());
  }
  function parseDocument(source, options = {}) {
    const { lineCounter: lineCounter2, prettyErrors } = parseOptions(options);
    const parser$1 = new parser.Parser(lineCounter2?.addNewLine);
    const composer$1 = new composer.Composer(options);
    let doc = null;
    for (const _doc of composer$1.compose(parser$1.parse(source), true, source.length)) {
      if (!doc)
        doc = _doc;
      else if (doc.options.logLevel !== "silent") {
        doc.errors.push(new errors.YAMLParseError(_doc.range.slice(0, 2), "MULTIPLE_DOCS", "Source contains multiple documents; please use YAML.parseAllDocuments()"));
        break;
      }
    }
    if (prettyErrors && lineCounter2) {
      doc.errors.forEach(errors.prettifyError(source, lineCounter2));
      doc.warnings.forEach(errors.prettifyError(source, lineCounter2));
    }
    return doc;
  }
  function parse(src, reviver, options) {
    let _reviver = undefined;
    if (typeof reviver === "function") {
      _reviver = reviver;
    } else if (options === undefined && reviver && typeof reviver === "object") {
      options = reviver;
    }
    const doc = parseDocument(src, options);
    if (!doc)
      return null;
    doc.warnings.forEach((warning) => log.warn(doc.options.logLevel, warning));
    if (doc.errors.length > 0) {
      if (doc.options.logLevel !== "silent")
        throw doc.errors[0];
      else
        doc.errors = [];
    }
    return doc.toJS(Object.assign({ reviver: _reviver }, options));
  }
  function stringify(value, replacer, options) {
    let _replacer = null;
    if (typeof replacer === "function" || Array.isArray(replacer)) {
      _replacer = replacer;
    } else if (options === undefined && replacer) {
      options = replacer;
    }
    if (typeof options === "string")
      options = options.length;
    if (typeof options === "number") {
      const indent = Math.round(options);
      options = indent < 1 ? undefined : indent > 8 ? { indent: 8 } : { indent };
    }
    if (value === undefined) {
      const { keepUndefined } = options ?? replacer ?? {};
      if (!keepUndefined)
        return;
    }
    if (identity.isDocument(value) && !_replacer)
      return value.toString(options);
    return new Document.Document(value, _replacer, options).toString(options);
  }
  exports.parse = parse;
  exports.parseAllDocuments = parseAllDocuments;
  exports.parseDocument = parseDocument;
  exports.stringify = stringify;
});

// node_modules/yaml/dist/index.js
var require_dist = __commonJS((exports) => {
  var composer = require_composer();
  var Document = require_Document();
  var Schema = require_Schema();
  var errors = require_errors2();
  var Alias = require_Alias();
  var identity = require_identity();
  var Pair = require_Pair();
  var Scalar = require_Scalar();
  var YAMLMap = require_YAMLMap();
  var YAMLSeq = require_YAMLSeq();
  var cst = require_cst();
  var lexer = require_lexer();
  var lineCounter = require_line_counter();
  var parser = require_parser();
  var publicApi = require_public_api();
  var visit = require_visit();
  exports.Composer = composer.Composer;
  exports.Document = Document.Document;
  exports.Schema = Schema.Schema;
  exports.YAMLError = errors.YAMLError;
  exports.YAMLParseError = errors.YAMLParseError;
  exports.YAMLWarning = errors.YAMLWarning;
  exports.Alias = Alias.Alias;
  exports.isAlias = identity.isAlias;
  exports.isCollection = identity.isCollection;
  exports.isDocument = identity.isDocument;
  exports.isMap = identity.isMap;
  exports.isNode = identity.isNode;
  exports.isPair = identity.isPair;
  exports.isScalar = identity.isScalar;
  exports.isSeq = identity.isSeq;
  exports.Pair = Pair.Pair;
  exports.Scalar = Scalar.Scalar;
  exports.YAMLMap = YAMLMap.YAMLMap;
  exports.YAMLSeq = YAMLSeq.YAMLSeq;
  exports.CST = cst;
  exports.Lexer = lexer.Lexer;
  exports.LineCounter = lineCounter.LineCounter;
  exports.Parser = parser.Parser;
  exports.parse = publicApi.parse;
  exports.parseAllDocuments = publicApi.parseAllDocuments;
  exports.parseDocument = publicApi.parseDocument;
  exports.stringify = publicApi.stringify;
  exports.visit = visit.visit;
  exports.visitAsync = visit.visitAsync;
});

// node_modules/@fastify/swagger/lib/mode/static.js
var require_static = __commonJS((exports, module) => {
  var path = __require("node:path");
  var fs = __require("node:fs");
  var yaml = require_dist();
  module.exports = function(fastify, opts, done) {
    if (!opts.specification)
      return done(new Error("specification is missing in the module options"));
    if (typeof opts.specification !== "object")
      return done(new Error("specification is not an object"));
    let swaggerObject = {};
    if (!opts.specification.path && !opts.specification.document) {
      return done(new Error("both specification.path and specification.document are missing, should be path to the file or swagger document spec"));
    } else if (opts.specification.path) {
      if (typeof opts.specification.path !== "string")
        return done(new Error("specification.path is not a string"));
      if (!fs.existsSync(path.resolve(opts.specification.path)))
        return done(new Error(`${opts.specification.path} does not exist`));
      const extName = path.extname(opts.specification.path).toLowerCase();
      if ([".yaml", ".json"].indexOf(extName) === -1)
        return done(new Error("specification.path extension name is not supported, should be one from ['.yaml', '.json']"));
      if (opts.specification.postProcessor && typeof opts.specification.postProcessor !== "function")
        return done(new Error("specification.postProcessor should be a function"));
      if (opts.specification.baseDir && typeof opts.specification.baseDir !== "string")
        return done(new Error("specification.baseDir should be string"));
      if (!opts.specification.baseDir) {
        opts.specification.baseDir = path.resolve(path.dirname(opts.specification.path));
      } else {
        while (opts.specification.baseDir.endsWith("/")) {
          opts.specification.baseDir = opts.specification.baseDir.slice(0, -1);
        }
      }
      const source = fs.readFileSync(path.resolve(opts.specification.path), "utf8");
      switch (extName) {
        case ".yaml":
          swaggerObject = yaml.parse(source);
          break;
        case ".json":
          swaggerObject = JSON.parse(source);
          break;
      }
      if (opts.specification.postProcessor) {
        swaggerObject = opts.specification.postProcessor(swaggerObject);
      }
    } else {
      if (typeof opts.specification.document !== "object")
        return done(new Error("specification.document is not an object"));
      swaggerObject = opts.specification.document;
    }
    fastify.decorate(opts.decorator || "swagger", swagger);
    const cache = {
      swaggerObject: null,
      swaggerString: null
    };
    function swagger(opts2) {
      if (opts2?.yaml) {
        if (cache.swaggerString)
          return cache.swaggerString;
      } else {
        if (cache.swaggerObject)
          return cache.swaggerObject;
      }
      if (opts2?.yaml) {
        const swaggerString = yaml.stringify(swaggerObject, { strict: false });
        cache.swaggerString = swaggerString;
        return swaggerString;
      }
      cache.swaggerObject = swaggerObject;
      return swaggerObject;
    }
    done();
  };
});

// node_modules/fast-uri/lib/scopedChars.js
var require_scopedChars = __commonJS((exports, module) => {
  var HEX = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    a: 10,
    A: 10,
    b: 11,
    B: 11,
    c: 12,
    C: 12,
    d: 13,
    D: 13,
    e: 14,
    E: 14,
    f: 15,
    F: 15
  };
  module.exports = {
    HEX
  };
});

// node_modules/fast-uri/lib/utils.js
var require_utils = __commonJS((exports, module) => {
  var { HEX } = require_scopedChars();
  var IPV4_REG = /^(?:(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)$/u;
  function normalizeIPv4(host) {
    if (findToken(host, ".") < 3) {
      return { host, isIPV4: false };
    }
    const matches = host.match(IPV4_REG) || [];
    const [address] = matches;
    if (address) {
      return { host: stripLeadingZeros(address, "."), isIPV4: true };
    } else {
      return { host, isIPV4: false };
    }
  }
  function stringArrayToHexStripped(input, keepZero = false) {
    let acc = "";
    let strip = true;
    for (const c of input) {
      if (HEX[c] === undefined)
        return;
      if (c !== "0" && strip === true)
        strip = false;
      if (!strip)
        acc += c;
    }
    if (keepZero && acc.length === 0)
      acc = "0";
    return acc;
  }
  function getIPV6(input) {
    let tokenCount = 0;
    const output = { error: false, address: "", zone: "" };
    const address = [];
    const buffer = [];
    let isZone = false;
    let endipv6Encountered = false;
    let endIpv6 = false;
    function consume() {
      if (buffer.length) {
        if (isZone === false) {
          const hex = stringArrayToHexStripped(buffer);
          if (hex !== undefined) {
            address.push(hex);
          } else {
            output.error = true;
            return false;
          }
        }
        buffer.length = 0;
      }
      return true;
    }
    for (let i = 0;i < input.length; i++) {
      const cursor = input[i];
      if (cursor === "[" || cursor === "]") {
        continue;
      }
      if (cursor === ":") {
        if (endipv6Encountered === true) {
          endIpv6 = true;
        }
        if (!consume()) {
          break;
        }
        tokenCount++;
        address.push(":");
        if (tokenCount > 7) {
          output.error = true;
          break;
        }
        if (i - 1 >= 0 && input[i - 1] === ":") {
          endipv6Encountered = true;
        }
        continue;
      } else if (cursor === "%") {
        if (!consume()) {
          break;
        }
        isZone = true;
      } else {
        buffer.push(cursor);
        continue;
      }
    }
    if (buffer.length) {
      if (isZone) {
        output.zone = buffer.join("");
      } else if (endIpv6) {
        address.push(buffer.join(""));
      } else {
        address.push(stringArrayToHexStripped(buffer));
      }
    }
    output.address = address.join("");
    return output;
  }
  function normalizeIPv6(host) {
    if (findToken(host, ":") < 2) {
      return { host, isIPV6: false };
    }
    const ipv6 = getIPV6(host);
    if (!ipv6.error) {
      let newHost = ipv6.address;
      let escapedHost = ipv6.address;
      if (ipv6.zone) {
        newHost += "%" + ipv6.zone;
        escapedHost += "%25" + ipv6.zone;
      }
      return { host: newHost, escapedHost, isIPV6: true };
    } else {
      return { host, isIPV6: false };
    }
  }
  function stripLeadingZeros(str, token) {
    let out = "";
    let skip = true;
    const l = str.length;
    for (let i = 0;i < l; i++) {
      const c = str[i];
      if (c === "0" && skip) {
        if (i + 1 <= l && str[i + 1] === token || i + 1 === l) {
          out += c;
          skip = false;
        }
      } else {
        if (c === token) {
          skip = true;
        } else {
          skip = false;
        }
        out += c;
      }
    }
    return out;
  }
  function findToken(str, token) {
    let ind = 0;
    for (let i = 0;i < str.length; i++) {
      if (str[i] === token)
        ind++;
    }
    return ind;
  }
  var RDS1 = /^\.\.?\//u;
  var RDS2 = /^\/\.(?:\/|$)/u;
  var RDS3 = /^\/\.\.(?:\/|$)/u;
  var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/u;
  function removeDotSegments(input) {
    const output = [];
    while (input.length) {
      if (input.match(RDS1)) {
        input = input.replace(RDS1, "");
      } else if (input.match(RDS2)) {
        input = input.replace(RDS2, "/");
      } else if (input.match(RDS3)) {
        input = input.replace(RDS3, "/");
        output.pop();
      } else if (input === "." || input === "..") {
        input = "";
      } else {
        const im = input.match(RDS5);
        if (im) {
          const s = im[0];
          input = input.slice(s.length);
          output.push(s);
        } else {
          throw new Error("Unexpected dot segment condition");
        }
      }
    }
    return output.join("");
  }
  function normalizeComponentEncoding(components, esc) {
    const func = esc !== true ? escape : unescape;
    if (components.scheme !== undefined) {
      components.scheme = func(components.scheme);
    }
    if (components.userinfo !== undefined) {
      components.userinfo = func(components.userinfo);
    }
    if (components.host !== undefined) {
      components.host = func(components.host);
    }
    if (components.path !== undefined) {
      components.path = func(components.path);
    }
    if (components.query !== undefined) {
      components.query = func(components.query);
    }
    if (components.fragment !== undefined) {
      components.fragment = func(components.fragment);
    }
    return components;
  }
  function recomposeAuthority(components) {
    const uriTokens = [];
    if (components.userinfo !== undefined) {
      uriTokens.push(components.userinfo);
      uriTokens.push("@");
    }
    if (components.host !== undefined) {
      let host = unescape(components.host);
      const ipV4res = normalizeIPv4(host);
      if (ipV4res.isIPV4) {
        host = ipV4res.host;
      } else {
        const ipV6res = normalizeIPv6(ipV4res.host);
        if (ipV6res.isIPV6 === true) {
          host = `[${ipV6res.escapedHost}]`;
        } else {
          host = components.host;
        }
      }
      uriTokens.push(host);
    }
    if (typeof components.port === "number" || typeof components.port === "string") {
      uriTokens.push(":");
      uriTokens.push(String(components.port));
    }
    return uriTokens.length ? uriTokens.join("") : undefined;
  }
  module.exports = {
    recomposeAuthority,
    normalizeComponentEncoding,
    removeDotSegments,
    normalizeIPv4,
    normalizeIPv6,
    stringArrayToHexStripped
  };
});

// node_modules/fast-uri/lib/schemes.js
var require_schemes = __commonJS((exports, module) => {
  var UUID_REG = /^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}$/iu;
  var URN_REG = /([\da-z][\d\-a-z]{0,31}):((?:[\w!$'()*+,\-.:;=@]|%[\da-f]{2})+)/iu;
  function isSecure(wsComponents) {
    return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
  }
  function httpParse(components) {
    if (!components.host) {
      components.error = components.error || "HTTP URIs must have a host.";
    }
    return components;
  }
  function httpSerialize(components) {
    const secure = String(components.scheme).toLowerCase() === "https";
    if (components.port === (secure ? 443 : 80) || components.port === "") {
      components.port = undefined;
    }
    if (!components.path) {
      components.path = "/";
    }
    return components;
  }
  function wsParse(wsComponents) {
    wsComponents.secure = isSecure(wsComponents);
    wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
    wsComponents.path = undefined;
    wsComponents.query = undefined;
    return wsComponents;
  }
  function wsSerialize(wsComponents) {
    if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
      wsComponents.port = undefined;
    }
    if (typeof wsComponents.secure === "boolean") {
      wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
      wsComponents.secure = undefined;
    }
    if (wsComponents.resourceName) {
      const [path, query] = wsComponents.resourceName.split("?");
      wsComponents.path = path && path !== "/" ? path : undefined;
      wsComponents.query = query;
      wsComponents.resourceName = undefined;
    }
    wsComponents.fragment = undefined;
    return wsComponents;
  }
  function urnParse(urnComponents, options) {
    if (!urnComponents.path) {
      urnComponents.error = "URN can not be parsed";
      return urnComponents;
    }
    const matches = urnComponents.path.match(URN_REG);
    if (matches) {
      const scheme = options.scheme || urnComponents.scheme || "urn";
      urnComponents.nid = matches[1].toLowerCase();
      urnComponents.nss = matches[2];
      const urnScheme = `${scheme}:${options.nid || urnComponents.nid}`;
      const schemeHandler = SCHEMES[urnScheme];
      urnComponents.path = undefined;
      if (schemeHandler) {
        urnComponents = schemeHandler.parse(urnComponents, options);
      }
    } else {
      urnComponents.error = urnComponents.error || "URN can not be parsed.";
    }
    return urnComponents;
  }
  function urnSerialize(urnComponents, options) {
    const scheme = options.scheme || urnComponents.scheme || "urn";
    const nid = urnComponents.nid.toLowerCase();
    const urnScheme = `${scheme}:${options.nid || nid}`;
    const schemeHandler = SCHEMES[urnScheme];
    if (schemeHandler) {
      urnComponents = schemeHandler.serialize(urnComponents, options);
    }
    const uriComponents = urnComponents;
    const nss = urnComponents.nss;
    uriComponents.path = `${nid || options.nid}:${nss}`;
    options.skipEscape = true;
    return uriComponents;
  }
  function urnuuidParse(urnComponents, options) {
    const uuidComponents = urnComponents;
    uuidComponents.uuid = uuidComponents.nss;
    uuidComponents.nss = undefined;
    if (!options.tolerant && (!uuidComponents.uuid || !UUID_REG.test(uuidComponents.uuid))) {
      uuidComponents.error = uuidComponents.error || "UUID is not valid.";
    }
    return uuidComponents;
  }
  function urnuuidSerialize(uuidComponents) {
    const urnComponents = uuidComponents;
    urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
    return urnComponents;
  }
  var http = {
    scheme: "http",
    domainHost: true,
    parse: httpParse,
    serialize: httpSerialize
  };
  var https = {
    scheme: "https",
    domainHost: http.domainHost,
    parse: httpParse,
    serialize: httpSerialize
  };
  var ws = {
    scheme: "ws",
    domainHost: true,
    parse: wsParse,
    serialize: wsSerialize
  };
  var wss = {
    scheme: "wss",
    domainHost: ws.domainHost,
    parse: ws.parse,
    serialize: ws.serialize
  };
  var urn = {
    scheme: "urn",
    parse: urnParse,
    serialize: urnSerialize,
    skipNormalize: true
  };
  var urnuuid = {
    scheme: "urn:uuid",
    parse: urnuuidParse,
    serialize: urnuuidSerialize,
    skipNormalize: true
  };
  var SCHEMES = {
    http,
    https,
    ws,
    wss,
    urn,
    "urn:uuid": urnuuid
  };
  module.exports = SCHEMES;
});

// node_modules/fast-uri/index.js
var require_fast_uri = __commonJS((exports, module) => {
  var { normalizeIPv6, normalizeIPv4, removeDotSegments, recomposeAuthority, normalizeComponentEncoding } = require_utils();
  var SCHEMES = require_schemes();
  function normalize(uri, options) {
    if (typeof uri === "string") {
      uri = serialize(parse(uri, options), options);
    } else if (typeof uri === "object") {
      uri = parse(serialize(uri, options), options);
    }
    return uri;
  }
  function resolve(baseURI, relativeURI, options) {
    const schemelessOptions = Object.assign({ scheme: "null" }, options);
    const resolved = resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true);
    return serialize(resolved, { ...schemelessOptions, skipEscape: true });
  }
  function resolveComponents(base, relative, options, skipNormalization) {
    const target = {};
    if (!skipNormalization) {
      base = parse(serialize(base, options), options);
      relative = parse(serialize(relative, options), options);
    }
    options = options || {};
    if (!options.tolerant && relative.scheme) {
      target.scheme = relative.scheme;
      target.userinfo = relative.userinfo;
      target.host = relative.host;
      target.port = relative.port;
      target.path = removeDotSegments(relative.path || "");
      target.query = relative.query;
    } else {
      if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
        target.userinfo = relative.userinfo;
        target.host = relative.host;
        target.port = relative.port;
        target.path = removeDotSegments(relative.path || "");
        target.query = relative.query;
      } else {
        if (!relative.path) {
          target.path = base.path;
          if (relative.query !== undefined) {
            target.query = relative.query;
          } else {
            target.query = base.query;
          }
        } else {
          if (relative.path.charAt(0) === "/") {
            target.path = removeDotSegments(relative.path);
          } else {
            if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
              target.path = "/" + relative.path;
            } else if (!base.path) {
              target.path = relative.path;
            } else {
              target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
            }
            target.path = removeDotSegments(target.path);
          }
          target.query = relative.query;
        }
        target.userinfo = base.userinfo;
        target.host = base.host;
        target.port = base.port;
      }
      target.scheme = base.scheme;
    }
    target.fragment = relative.fragment;
    return target;
  }
  function equal(uriA, uriB, options) {
    if (typeof uriA === "string") {
      uriA = unescape(uriA);
      uriA = serialize(normalizeComponentEncoding(parse(uriA, options), true), { ...options, skipEscape: true });
    } else if (typeof uriA === "object") {
      uriA = serialize(normalizeComponentEncoding(uriA, true), { ...options, skipEscape: true });
    }
    if (typeof uriB === "string") {
      uriB = unescape(uriB);
      uriB = serialize(normalizeComponentEncoding(parse(uriB, options), true), { ...options, skipEscape: true });
    } else if (typeof uriB === "object") {
      uriB = serialize(normalizeComponentEncoding(uriB, true), { ...options, skipEscape: true });
    }
    return uriA.toLowerCase() === uriB.toLowerCase();
  }
  function serialize(cmpts, opts) {
    const components = {
      host: cmpts.host,
      scheme: cmpts.scheme,
      userinfo: cmpts.userinfo,
      port: cmpts.port,
      path: cmpts.path,
      query: cmpts.query,
      nid: cmpts.nid,
      nss: cmpts.nss,
      uuid: cmpts.uuid,
      fragment: cmpts.fragment,
      reference: cmpts.reference,
      resourceName: cmpts.resourceName,
      secure: cmpts.secure,
      error: ""
    };
    const options = Object.assign({}, opts);
    const uriTokens = [];
    const schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
    if (schemeHandler && schemeHandler.serialize)
      schemeHandler.serialize(components, options);
    if (components.path !== undefined) {
      if (!options.skipEscape) {
        components.path = escape(components.path);
        if (components.scheme !== undefined) {
          components.path = components.path.split("%3A").join(":");
        }
      } else {
        components.path = unescape(components.path);
      }
    }
    if (options.reference !== "suffix" && components.scheme) {
      uriTokens.push(components.scheme, ":");
    }
    const authority = recomposeAuthority(components);
    if (authority !== undefined) {
      if (options.reference !== "suffix") {
        uriTokens.push("//");
      }
      uriTokens.push(authority);
      if (components.path && components.path.charAt(0) !== "/") {
        uriTokens.push("/");
      }
    }
    if (components.path !== undefined) {
      let s = components.path;
      if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
        s = removeDotSegments(s);
      }
      if (authority === undefined) {
        s = s.replace(/^\/\//u, "/%2F");
      }
      uriTokens.push(s);
    }
    if (components.query !== undefined) {
      uriTokens.push("?", components.query);
    }
    if (components.fragment !== undefined) {
      uriTokens.push("#", components.fragment);
    }
    return uriTokens.join("");
  }
  var hexLookUp = Array.from({ length: 127 }, (_v, k) => /[^!"$&'()*+,\-.;=_`a-z{}~]/u.test(String.fromCharCode(k)));
  function nonSimpleDomain(value) {
    let code = 0;
    for (let i = 0, len = value.length;i < len; ++i) {
      code = value.charCodeAt(i);
      if (code > 126 || hexLookUp[code]) {
        return true;
      }
    }
    return false;
  }
  var URI_PARSE = /^(?:([^#/:?]+):)?(?:\/\/((?:([^#/?@]*)@)?(\[[^#/?\]]+\]|[^#/:?]*)(?::(\d*))?))?([^#?]*)(?:\?([^#]*))?(?:#((?:.|[\n\r])*))?/u;
  function parse(uri, opts) {
    const options = Object.assign({}, opts);
    const parsed = {
      scheme: undefined,
      userinfo: undefined,
      host: "",
      port: undefined,
      path: "",
      query: undefined,
      fragment: undefined
    };
    const gotEncoding = uri.indexOf("%") !== -1;
    let isIP = false;
    if (options.reference === "suffix")
      uri = (options.scheme ? options.scheme + ":" : "") + "//" + uri;
    const matches = uri.match(URI_PARSE);
    if (matches) {
      parsed.scheme = matches[1];
      parsed.userinfo = matches[3];
      parsed.host = matches[4];
      parsed.port = parseInt(matches[5], 10);
      parsed.path = matches[6] || "";
      parsed.query = matches[7];
      parsed.fragment = matches[8];
      if (isNaN(parsed.port)) {
        parsed.port = matches[5];
      }
      if (parsed.host) {
        const ipv4result = normalizeIPv4(parsed.host);
        if (ipv4result.isIPV4 === false) {
          const ipv6result = normalizeIPv6(ipv4result.host);
          parsed.host = ipv6result.host.toLowerCase();
          isIP = ipv6result.isIPV6;
        } else {
          parsed.host = ipv4result.host;
          isIP = true;
        }
      }
      if (parsed.scheme === undefined && parsed.userinfo === undefined && parsed.host === undefined && parsed.port === undefined && parsed.query === undefined && !parsed.path) {
        parsed.reference = "same-document";
      } else if (parsed.scheme === undefined) {
        parsed.reference = "relative";
      } else if (parsed.fragment === undefined) {
        parsed.reference = "absolute";
      } else {
        parsed.reference = "uri";
      }
      if (options.reference && options.reference !== "suffix" && options.reference !== parsed.reference) {
        parsed.error = parsed.error || "URI is not a " + options.reference + " reference.";
      }
      const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || "").toLowerCase()];
      if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
        if (parsed.host && (options.domainHost || schemeHandler && schemeHandler.domainHost) && isIP === false && nonSimpleDomain(parsed.host)) {
          try {
            parsed.host = URL.domainToASCII(parsed.host.toLowerCase());
          } catch (e) {
            parsed.error = parsed.error || "Host's domain name can not be converted to ASCII: " + e;
          }
        }
      }
      if (!schemeHandler || schemeHandler && !schemeHandler.skipNormalize) {
        if (gotEncoding && parsed.scheme !== undefined) {
          parsed.scheme = unescape(parsed.scheme);
        }
        if (gotEncoding && parsed.host !== undefined) {
          parsed.host = unescape(parsed.host);
        }
        if (parsed.path) {
          parsed.path = escape(unescape(parsed.path));
        }
        if (parsed.fragment) {
          parsed.fragment = encodeURI(decodeURIComponent(parsed.fragment));
        }
      }
      if (schemeHandler && schemeHandler.parse) {
        schemeHandler.parse(parsed, options);
      }
    } else {
      parsed.error = parsed.error || "URI can not be parsed.";
    }
    return parsed;
  }
  var fastUri = {
    SCHEMES,
    normalize,
    resolve,
    resolveComponents,
    equal,
    serialize,
    parse
  };
  module.exports = fastUri;
  module.exports.default = fastUri;
  module.exports.fastUri = fastUri;
});

// node_modules/rfdc/index.js
var require_rfdc = __commonJS((exports, module) => {
  module.exports = rfdc;
  function copyBuffer(cur) {
    if (cur instanceof Buffer) {
      return Buffer.from(cur);
    }
    return new cur.constructor(cur.buffer.slice(), cur.byteOffset, cur.length);
  }
  function rfdc(opts) {
    opts = opts || {};
    if (opts.circles)
      return rfdcCircles(opts);
    const constructorHandlers = new Map;
    constructorHandlers.set(Date, (o) => new Date(o));
    constructorHandlers.set(Map, (o, fn) => new Map(cloneArray(Array.from(o), fn)));
    constructorHandlers.set(Set, (o, fn) => new Set(cloneArray(Array.from(o), fn)));
    if (opts.constructorHandlers) {
      for (const handler2 of opts.constructorHandlers) {
        constructorHandlers.set(handler2[0], handler2[1]);
      }
    }
    let handler = null;
    return opts.proto ? cloneProto : clone;
    function cloneArray(a, fn) {
      const keys = Object.keys(a);
      const a2 = new Array(keys.length);
      for (let i = 0;i < keys.length; i++) {
        const k = keys[i];
        const cur = a[k];
        if (typeof cur !== "object" || cur === null) {
          a2[k] = cur;
        } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
          a2[k] = handler(cur, fn);
        } else if (ArrayBuffer.isView(cur)) {
          a2[k] = copyBuffer(cur);
        } else {
          a2[k] = fn(cur);
        }
      }
      return a2;
    }
    function clone(o) {
      if (typeof o !== "object" || o === null)
        return o;
      if (Array.isArray(o))
        return cloneArray(o, clone);
      if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {
        return handler(o, clone);
      }
      const o2 = {};
      for (const k in o) {
        if (Object.hasOwnProperty.call(o, k) === false)
          continue;
        const cur = o[k];
        if (typeof cur !== "object" || cur === null) {
          o2[k] = cur;
        } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
          o2[k] = handler(cur, clone);
        } else if (ArrayBuffer.isView(cur)) {
          o2[k] = copyBuffer(cur);
        } else {
          o2[k] = clone(cur);
        }
      }
      return o2;
    }
    function cloneProto(o) {
      if (typeof o !== "object" || o === null)
        return o;
      if (Array.isArray(o))
        return cloneArray(o, cloneProto);
      if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {
        return handler(o, cloneProto);
      }
      const o2 = {};
      for (const k in o) {
        const cur = o[k];
        if (typeof cur !== "object" || cur === null) {
          o2[k] = cur;
        } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
          o2[k] = handler(cur, cloneProto);
        } else if (ArrayBuffer.isView(cur)) {
          o2[k] = copyBuffer(cur);
        } else {
          o2[k] = cloneProto(cur);
        }
      }
      return o2;
    }
  }
  function rfdcCircles(opts) {
    const refs = [];
    const refsNew = [];
    const constructorHandlers = new Map;
    constructorHandlers.set(Date, (o) => new Date(o));
    constructorHandlers.set(Map, (o, fn) => new Map(cloneArray(Array.from(o), fn)));
    constructorHandlers.set(Set, (o, fn) => new Set(cloneArray(Array.from(o), fn)));
    if (opts.constructorHandlers) {
      for (const handler2 of opts.constructorHandlers) {
        constructorHandlers.set(handler2[0], handler2[1]);
      }
    }
    let handler = null;
    return opts.proto ? cloneProto : clone;
    function cloneArray(a, fn) {
      const keys = Object.keys(a);
      const a2 = new Array(keys.length);
      for (let i = 0;i < keys.length; i++) {
        const k = keys[i];
        const cur = a[k];
        if (typeof cur !== "object" || cur === null) {
          a2[k] = cur;
        } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
          a2[k] = handler(cur, fn);
        } else if (ArrayBuffer.isView(cur)) {
          a2[k] = copyBuffer(cur);
        } else {
          const index = refs.indexOf(cur);
          if (index !== -1) {
            a2[k] = refsNew[index];
          } else {
            a2[k] = fn(cur);
          }
        }
      }
      return a2;
    }
    function clone(o) {
      if (typeof o !== "object" || o === null)
        return o;
      if (Array.isArray(o))
        return cloneArray(o, clone);
      if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {
        return handler(o, clone);
      }
      const o2 = {};
      refs.push(o);
      refsNew.push(o2);
      for (const k in o) {
        if (Object.hasOwnProperty.call(o, k) === false)
          continue;
        const cur = o[k];
        if (typeof cur !== "object" || cur === null) {
          o2[k] = cur;
        } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
          o2[k] = handler(cur, clone);
        } else if (ArrayBuffer.isView(cur)) {
          o2[k] = copyBuffer(cur);
        } else {
          const i = refs.indexOf(cur);
          if (i !== -1) {
            o2[k] = refsNew[i];
          } else {
            o2[k] = clone(cur);
          }
        }
      }
      refs.pop();
      refsNew.pop();
      return o2;
    }
    function cloneProto(o) {
      if (typeof o !== "object" || o === null)
        return o;
      if (Array.isArray(o))
        return cloneArray(o, cloneProto);
      if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {
        return handler(o, cloneProto);
      }
      const o2 = {};
      refs.push(o);
      refsNew.push(o2);
      for (const k in o) {
        const cur = o[k];
        if (typeof cur !== "object" || cur === null) {
          o2[k] = cur;
        } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
          o2[k] = handler(cur, cloneProto);
        } else if (ArrayBuffer.isView(cur)) {
          o2[k] = copyBuffer(cur);
        } else {
          const i = refs.indexOf(cur);
          if (i !== -1) {
            o2[k] = refsNew[i];
          } else {
            o2[k] = cloneProto(cur);
          }
        }
      }
      refs.pop();
      refsNew.pop();
      return o2;
    }
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS((exports, module) => {
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "weeks":
      case "week":
      case "w":
        return n * w;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return;
    }
  }
  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  }
  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, "second");
    }
    return ms + " ms";
  }
  function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS((exports, module) => {
  function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = require_ms();
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key) => {
      createDebug[key] = env[key];
    });
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(namespace) {
      let hash = 0;
      for (let i = 0;i < namespace.length; i++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0;
      }
      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug(...args) {
        if (!debug.enabled) {
          return;
        }
        const self = debug;
        const curr = Number(new Date);
        const ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== "string") {
          args.unshift("%O");
        }
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
          if (match === "%%") {
            return "%";
          }
          index++;
          const formatter = createDebug.formatters[format];
          if (typeof formatter === "function") {
            const val = args[index];
            match = formatter.call(self, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug.formatArgs.call(self, args);
        const logFn = self.log || createDebug.log;
        logFn.apply(self, args);
      }
      debug.namespace = namespace;
      debug.useColors = createDebug.useColors();
      debug.color = createDebug.selectColor(namespace);
      debug.extend = extend;
      debug.destroy = createDebug.destroy;
      Object.defineProperty(debug, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: (v) => {
          enableOverride = v;
        }
      });
      if (typeof createDebug.init === "function") {
        createDebug.init(debug);
      }
      return debug;
    }
    function extend(namespace, delimiter) {
      const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
      for (const ns of split) {
        if (ns[0] === "-") {
          createDebug.skips.push(ns.slice(1));
        } else {
          createDebug.names.push(ns);
        }
      }
    }
    function matchesTemplate(search, template) {
      let searchIndex = 0;
      let templateIndex = 0;
      let starIndex = -1;
      let matchIndex = 0;
      while (searchIndex < search.length) {
        if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
          if (template[templateIndex] === "*") {
            starIndex = templateIndex;
            matchIndex = searchIndex;
            templateIndex++;
          } else {
            searchIndex++;
            templateIndex++;
          }
        } else if (starIndex !== -1) {
          templateIndex = starIndex + 1;
          matchIndex++;
          searchIndex = matchIndex;
        } else {
          return false;
        }
      }
      while (templateIndex < template.length && template[templateIndex] === "*") {
        templateIndex++;
      }
      return templateIndex === template.length;
    }
    function disable() {
      const namespaces = [
        ...createDebug.names,
        ...createDebug.skips.map((namespace) => "-" + namespace)
      ].join(",");
      createDebug.enable("");
      return namespaces;
    }
    function enabled(name) {
      for (const skip of createDebug.skips) {
        if (matchesTemplate(name, skip)) {
          return false;
        }
      }
      for (const ns of createDebug.names) {
        if (matchesTemplate(name, ns)) {
          return true;
        }
      }
      return false;
    }
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    function destroy() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  module.exports = setup;
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS((exports, module) => {
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = localstorage();
  exports.destroy = (() => {
    let warned = false;
    return () => {
      if (!warned) {
        warned = true;
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
    };
  })();
  exports.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function useColors() {
    if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
      return true;
    }
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }
    let m;
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  function formatArgs(args) {
    args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
    if (!this.useColors) {
      return;
    }
    const c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match) => {
      if (match === "%%") {
        return;
      }
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }
  exports.log = console.debug || console.log || (() => {
  });
  function save(namespaces) {
    try {
      if (namespaces) {
        exports.storage.setItem("debug", namespaces);
      } else {
        exports.storage.removeItem("debug");
      }
    } catch (error) {
    }
  }
  function load() {
    let r;
    try {
      r = exports.storage.getItem("debug");
    } catch (error) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  }
  function localstorage() {
    try {
      return localStorage;
    } catch (error) {
    }
  }
  module.exports = require_common()(exports);
  var { formatters } = module.exports;
  formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (error) {
      return "[UnexpectedJSONParseError]: " + error.message;
    }
  };
});

// node_modules/debug/src/node.js
var require_node = __commonJS((exports, module) => {
  var tty = __require("tty");
  var util = __require("util");
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.destroy = util.deprecate(() => {
  }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
  exports.colors = [6, 2, 3, 4, 5, 1];
  try {
    const supportsColor = (()=>{throw new Error("Cannot require module "+"supports-color");})();
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
      exports.colors = [
        20,
        21,
        26,
        27,
        32,
        33,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        56,
        57,
        62,
        63,
        68,
        69,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        92,
        93,
        98,
        99,
        112,
        113,
        128,
        129,
        134,
        135,
        148,
        149,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        178,
        179,
        184,
        185,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        214,
        215,
        220,
        221
      ];
    }
  } catch (error) {
  }
  exports.inspectOpts = Object.keys(process.env).filter((key) => {
    return /^debug_/i.test(key);
  }).reduce((obj, key) => {
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
      return k.toUpperCase();
    });
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
      val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
      val = false;
    } else if (val === "null") {
      val = null;
    } else {
      val = Number(val);
    }
    obj[prop] = val;
    return obj;
  }, {});
  function useColors() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
  }
  function formatArgs(args) {
    const { namespace: name, useColors: useColors2 } = this;
    if (useColors2) {
      const c = this.color;
      const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
      const prefix = `  ${colorCode};1m${name} \x1B[0m`;
      args[0] = prefix + args[0].split(`
`).join(`
` + prefix);
      args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = getDate() + name + " " + args[0];
    }
  }
  function getDate() {
    if (exports.inspectOpts.hideDate) {
      return "";
    }
    return new Date().toISOString() + " ";
  }
  function log(...args) {
    return process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + `
`);
  }
  function save(namespaces) {
    if (namespaces) {
      process.env.DEBUG = namespaces;
    } else {
      delete process.env.DEBUG;
    }
  }
  function load() {
    return process.env.DEBUG;
  }
  function init(debug) {
    debug.inspectOpts = {};
    const keys = Object.keys(exports.inspectOpts);
    for (let i = 0;i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }
  module.exports = require_common()(exports);
  var { formatters } = module.exports;
  formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split(`
`).map((str) => str.trim()).join(" ");
  };
  formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };
});

// node_modules/debug/src/index.js
var require_src = __commonJS((exports, module) => {
  if (typeof process === "undefined" || process.type === "renderer" || false || process.__nwjs) {
    module.exports = require_browser();
  } else {
    module.exports = require_node();
  }
});

// node_modules/json-schema-resolver/ref-resolver.js
var require_ref_resolver = __commonJS((exports, module) => {
  var URI = require_fast_uri();
  var cloner = require_rfdc()({ proto: true, circles: false });
  var { EventEmitter } = __require("events");
  var debug = require_src()("json-schema-resolver");
  var kIgnore = Symbol("json-schema-resolver.ignore");
  var kRefToDef = Symbol("json-schema-resolver.refToDef");
  var kConsumed = Symbol("json-schema-resolver.consumed");
  var defaultOpts = {
    target: "draft-07",
    clone: false,
    buildLocalReference(json, baseUri, fragment, i) {
      return `def-${i}`;
    }
  };
  var targetSupported = ["draft-07"];
  var targetCfg = {
    "draft-07": {
      def: "definitions"
    },
    "draft-08": {
      def: "$defs"
    }
  };
  function jsonSchemaResolver(options) {
    const ee = new EventEmitter;
    const {
      clone,
      target,
      applicationUri,
      externalSchemas: rootExternalSchemas,
      buildLocalReference
    } = Object.assign({}, defaultOpts, options);
    const allIds = new Map;
    let rolling = 0;
    ee.on("$id", collectIds);
    const allRefs = [];
    ee.on("$ref", collectRefs);
    if (!targetSupported.includes(target)) {
      throw new Error(`Unsupported JSON schema version ${target}`);
    }
    let defaultUri;
    if (applicationUri) {
      defaultUri = getRootUri(applicationUri);
      if (rootExternalSchemas) {
        for (const es of rootExternalSchemas) {
          mapIds(ee, defaultUri, es);
        }
        debug("Processed root external schemas");
      }
    } else if (rootExternalSchemas) {
      throw new Error("If you set root externalSchema, the applicationUri option is needed");
    }
    return {
      resolve,
      definitions() {
        const defKey = targetCfg[target].def;
        const x = { [defKey]: {} };
        allIds.forEach((json, baseUri) => {
          x[defKey][json[kRefToDef]] = json;
        });
        return x;
      }
    };
    function resolve(rootSchema, opts) {
      const { externalSchemas } = opts || {};
      if (!rootExternalSchemas) {
        allIds.clear();
      }
      allRefs.length = 0;
      if (clone) {
        rootSchema = cloner(rootSchema);
      }
      const appUri = defaultUri || getRootUri(rootSchema.$id);
      debug("Found app URI %o", appUri);
      if (externalSchemas) {
        for (const es of externalSchemas) {
          mapIds(ee, appUri, es);
        }
        debug("Processed external schemas");
      }
      const baseUri = URI.serialize(appUri);
      if (rootSchema.$id) {
        rootSchema.$id = baseUri;
      }
      Object.defineProperty(rootSchema, kIgnore, { value: true, enumerable: false });
      mapIds(ee, appUri, rootSchema);
      debug("Processed root schema");
      debug("Generating %d refs", allRefs.length);
      allRefs.forEach(({ baseUri: baseUri2, ref, refUri, json }) => {
        debug("Evaluating $ref %s", ref);
        if (ref[0] === "#") {
          return;
        }
        const evaluatedJson = allIds.get(baseUri2);
        if (!evaluatedJson) {
          debug("External $ref %s not provided with baseUri %s", ref, baseUri2);
          return;
        }
        Object.defineProperty(evaluatedJson, kConsumed, { value: true, enumerable: false });
        json.$ref = `#/definitions/${evaluatedJson[kRefToDef]}${refUri.fragment || ""}`;
      });
      if (externalSchemas) {
        const defKey = targetCfg[target].def;
        allIds.forEach((json, baseUri2) => {
          if (json[kConsumed] === true) {
            if (!rootSchema[defKey]) {
              rootSchema[defKey] = {};
            }
            rootSchema[defKey][json[kRefToDef]] = json;
          }
        });
      }
      return rootSchema;
    }
    function collectIds(json, baseUri, fragment) {
      if (json[kIgnore]) {
        return;
      }
      const rel = fragment && URI.serialize(fragment) || "";
      const id = URI.serialize(baseUri) + rel;
      if (!allIds.has(id)) {
        debug("Collected $id %s", id);
        const value = buildLocalReference(json, baseUri, fragment, rolling++);
        Object.defineProperty(json, kRefToDef, { value, enumerable: false });
        allIds.set(id, json);
      } else {
        debug("WARN duplicated id %s .. IGNORED - ", id);
      }
    }
    function collectRefs(json, baseUri, refVal) {
      const refUri = URI.parse(refVal);
      debug("Pre enqueue $ref %o", refUri);
      if (refUri.reference === "relative") {
        refUri.scheme = baseUri.scheme;
        refUri.userinfo = baseUri.userinfo;
        refUri.host = baseUri.host;
        refUri.port = baseUri.port;
        const newBaseUri = Object.assign({}, baseUri);
        newBaseUri.path = refUri.path;
        baseUri = newBaseUri;
      } else if (refUri.reference === "uri" || refUri.reference === "absolute") {
        baseUri = { ...refUri, fragment: undefined };
      }
      const ref = URI.serialize(refUri);
      allRefs.push({
        baseUri: URI.serialize(baseUri),
        refUri,
        ref,
        json
      });
      debug("Enqueue $ref %s", ref);
    }
  }
  function mapIds(ee, baseUri, json) {
    if (!(json instanceof Object))
      return;
    if (json.$id) {
      const $idUri = URI.parse(json.$id);
      let fragment = null;
      if ($idUri.reference === "absolute") {
        baseUri = $idUri;
      } else if ($idUri.reference === "relative") {
        const newBaseUri = Object.assign({}, baseUri);
        newBaseUri.path = $idUri.path;
        newBaseUri.fragment = $idUri.fragment;
        baseUri = newBaseUri;
      } else {
        fragment = $idUri;
      }
      ee.emit("$id", json, baseUri, fragment);
    }
    const fields = Object.keys(json);
    for (const prop of fields) {
      if (prop === "$ref") {
        ee.emit("$ref", json, baseUri, json[prop]);
      }
      mapIds(ee, baseUri, json[prop]);
    }
  }
  function getRootUri(strUri = "application.uri") {
    const uri = URI.parse(strUri);
    uri.fragment = undefined;
    return uri;
  }
  module.exports = jsonSchemaResolver;
});

// node_modules/@fastify/swagger/lib/util/add-hook.js
var require_add_hook = __commonJS((exports, module) => {
  var Ref = require_ref_resolver();
  var cloner = require_rfdc()({ proto: true, circles: false });
  function addHook(fastify, pluginOptions) {
    const routes = [];
    const sharedSchemasMap = new Map;
    let hookRun = false;
    fastify.addHook("onRoute", (routeOptions) => {
      const routeConfig = routeOptions.config || {};
      const swaggerConfig = routeConfig.swagger || {};
      if (routeOptions.method === "HEAD" && pluginOptions.exposeHeadRoutes !== true && swaggerConfig.exposeHeadRoute !== true) {
        return;
      }
      if (routeOptions.method === "HEAD" && routeOptions.schema !== undefined && routeOptions.schema.operationId !== undefined) {
        routes.push(Object.assign({}, routeOptions, {
          schema: Object.assign({}, routeOptions.schema, {
            operationId: `${routeOptions.schema.operationId}-head`
          })
        }));
        return;
      }
      routes.push(routeOptions);
    });
    fastify.addHook("onRegister", async (instance) => {
      instance.addHook("onReady", (done) => {
        const allSchemas = instance.getSchemas();
        for (const schemaId of Object.keys(allSchemas)) {
          sharedSchemasMap.set(schemaId, allSchemas[schemaId]);
        }
        done();
      });
    });
    fastify.addHook("onReady", (done) => {
      hookRun = true;
      const allSchemas = fastify.getSchemas();
      for (const schemaId of Object.keys(allSchemas)) {
        sharedSchemasMap.set(schemaId, allSchemas[schemaId]);
      }
      done();
    });
    return {
      routes,
      Ref() {
        if (hookRun === false) {
          throw new Error(".swagger() must be called after .ready()");
        }
        const externalSchemas = cloner(Array.from(sharedSchemasMap.values()));
        return Ref(Object.assign({ applicationUri: "todo.com" }, pluginOptions.refResolver, { clone: true, externalSchemas }));
      }
    };
  }
  module.exports = {
    addHook
  };
});

// node_modules/@fastify/swagger/lib/util/should-route-hide.js
var require_should_route_hide = __commonJS((exports, module) => {
  function shouldRouteHide(schema, opts) {
    const { hiddenTag, hideUntagged } = opts;
    if (schema?.hide) {
      return true;
    }
    const tags = schema?.tags || [];
    if (tags.length === 0 && hideUntagged) {
      return true;
    }
    if (tags.includes(hiddenTag)) {
      return schema.tags.includes(hiddenTag);
    }
    return false;
  }
  module.exports = {
    shouldRouteHide
  };
});

// node_modules/@fastify/swagger/lib/util/read-package-json.js
var require_read_package_json = __commonJS((exports, module) => {
  var __dirname = "/Users/tabaza/Desktop/opencx/eval-mock-servers/node_modules/@fastify/swagger/lib/util";
  var fs = __require("node:fs");
  var path = __require("node:path");
  function readPackageJson() {
    try {
      return JSON.parse(fs.readFileSync(path.join(__dirname, "..", "..", "package.json")));
    } catch {
      return {};
    }
  }
  module.exports = {
    readPackageJson
  };
});

// node_modules/@fastify/swagger/lib/symbols.js
var require_symbols = __commonJS((exports, module) => {
  var rawRequired = Symbol("@fastify/swagger.rawRequired");
  module.exports = {
    rawRequired
  };
});

// node_modules/@fastify/swagger/lib/constants.js
var require_constants = __commonJS((exports, module) => {
  var xConsume = "x-consume";
  var xResponseDescription = "x-response-description";
  var xExamples = "x-examples";
  module.exports = {
    xConsume,
    xResponseDescription,
    xExamples
  };
});

// node_modules/@fastify/swagger/lib/util/resolve-local-ref.js
var require_resolve_local_ref = __commonJS((exports, module) => {
  var { rawRequired } = require_symbols();
  var { xConsume } = require_constants();
  function resolveLocalRef(jsonSchema, externalSchemas) {
    if (jsonSchema.type !== undefined && jsonSchema.properties !== undefined) {
      const propertiesMap = Object.keys(jsonSchema.properties).reduce((acc, headers) => {
        const rewriteProps = {};
        rewriteProps.required = Array.isArray(jsonSchema.required) && jsonSchema.required.indexOf(headers) >= 0 || false;
        if (jsonSchema.properties[headers][xConsume]) {
          rewriteProps[rawRequired] = jsonSchema.properties[headers].required;
        }
        const newProps = Object.assign({}, jsonSchema.properties[headers], rewriteProps);
        return Object.assign({}, acc, { [headers]: newProps });
      }, {});
      return propertiesMap;
    }
    if (jsonSchema.oneOf || jsonSchema.anyOf || jsonSchema.allOf) {
      const schemas = jsonSchema.oneOf || jsonSchema.anyOf || jsonSchema.allOf;
      return schemas.reduce((acc, schema) => Object.assign(acc, resolveLocalRef(schema, externalSchemas)), {});
    }
    if (jsonSchema.$ref) {
      const localRef = jsonSchema.$ref.split("/", 3)[2];
      if (externalSchemas[localRef])
        return resolveLocalRef(externalSchemas[localRef], externalSchemas);
      return resolveLocalRef(externalSchemas[jsonSchema.$ref.split("/", 4)[3]], externalSchemas);
    }
    return jsonSchema;
  }
  module.exports = {
    resolveLocalRef
  };
});

// node_modules/@fastify/swagger/lib/util/resolve-schema-reference.js
var require_resolve_schema_reference = __commonJS((exports, module) => {
  function resolveSchemaReference(rawSchema, ref) {
    const resolvedReference = ref.resolve(rawSchema, { externalSchemas: [ref.definitions().definitions] });
    const schemaId = resolvedReference?.$ref?.split("/", 3)[2];
    if (schemaId === undefined) {
      return;
    }
    return resolvedReference.definitions?.[schemaId];
  }
  module.exports = {
    resolveSchemaReference
  };
});

// node_modules/@fastify/swagger/lib/util/match-params.js
var require_match_params = __commonJS((exports, module) => {
  var paramPattern = /\{[^{}]+\}/gu;
  function hasParams(url) {
    if (!url)
      return false;
    return paramPattern.test(url);
  }
  function matchParams(url) {
    if (!url)
      return [];
    return url.match(paramPattern) || [];
  }
  module.exports = {
    hasParams,
    matchParams
  };
});

// node_modules/@fastify/swagger/lib/util/generate-params-schema.js
var require_generate_params_schema = __commonJS((exports, module) => {
  var { matchParams } = require_match_params();
  var namePattern = /\{([^{}]+)\}/u;
  function paramName(param) {
    return param.replace(namePattern, (_, captured) => captured);
  }
  function generateParamsSchema(url) {
    const params = matchParams(url);
    const schema = {
      params: {
        type: "object",
        properties: {}
      }
    };
    schema.params.properties = params.reduce((acc, param) => {
      const name = paramName(param);
      acc[name] = {
        type: "string"
      };
      return acc;
    }, {});
    return schema;
  }
  module.exports = {
    generateParamsSchema,
    paramName
  };
});

// node_modules/@fastify/swagger/lib/spec/swagger/utils.js
var require_utils2 = __commonJS((exports, module) => {
  var { readPackageJson } = require_read_package_json();
  var { formatParamUrl } = require_format_param_url();
  var { resolveLocalRef } = require_resolve_local_ref();
  var { resolveSchemaReference } = require_resolve_schema_reference();
  var { xResponseDescription, xConsume } = require_constants();
  var { generateParamsSchema } = require_generate_params_schema();
  var { hasParams } = require_match_params();
  function prepareDefaultOptions(opts) {
    const swagger = opts.swagger;
    const info = swagger.info || null;
    const host = swagger.host || null;
    const schemes = swagger.schemes || null;
    const consumes = swagger.consumes || null;
    const produces = swagger.produces || null;
    const definitions = swagger.definitions || null;
    const paths = swagger.paths || null;
    const basePath = swagger.basePath || null;
    const securityDefinitions = swagger.securityDefinitions || null;
    const security = swagger.security || null;
    const tags = swagger.tags || null;
    const externalDocs = swagger.externalDocs || null;
    const stripBasePath = opts.stripBasePath;
    const transform = opts.transform;
    const transformObject = opts.transformObject;
    const hiddenTag = opts.hiddenTag;
    const hideUntagged = opts.hideUntagged;
    const extensions = [];
    for (const [key, value] of Object.entries(opts.swagger)) {
      if (key.startsWith("x-")) {
        extensions.push([key, value]);
      }
    }
    return {
      info,
      host,
      schemes,
      consumes,
      produces,
      definitions,
      paths,
      basePath,
      securityDefinitions,
      security,
      tags,
      externalDocs,
      stripBasePath,
      transform,
      transformObject,
      hiddenTag,
      extensions,
      hideUntagged
    };
  }
  function prepareSwaggerObject(opts) {
    const pkg = readPackageJson();
    const swaggerObject = {
      swagger: "2.0",
      info: {
        version: pkg.version || "1.0.0",
        title: pkg.name || ""
      },
      definitions: {},
      paths: {}
    };
    if (opts.info)
      swaggerObject.info = opts.info;
    if (opts.host)
      swaggerObject.host = opts.host;
    if (opts.schemes)
      swaggerObject.schemes = opts.schemes;
    if (opts.basePath)
      swaggerObject.basePath = opts.basePath;
    if (opts.consumes)
      swaggerObject.consumes = opts.consumes;
    if (opts.produces)
      swaggerObject.produces = opts.produces;
    if (opts.definitions)
      swaggerObject.definitions = opts.definitions;
    if (opts.paths)
      swaggerObject.paths = opts.paths;
    if (opts.securityDefinitions)
      swaggerObject.securityDefinitions = opts.securityDefinitions;
    if (opts.security)
      swaggerObject.security = opts.security;
    if (opts.tags)
      swaggerObject.tags = opts.tags;
    if (opts.externalDocs)
      swaggerObject.externalDocs = opts.externalDocs;
    for (const [key, value] of opts.extensions) {
      swaggerObject[key] = value;
    }
    return swaggerObject;
  }
  function normalizeUrl(url, basePath, stripBasePath) {
    let path;
    if (stripBasePath && url.startsWith(basePath)) {
      path = url.replace(basePath, "");
    } else {
      path = url;
    }
    if (!path.startsWith("/")) {
      path = "/" + String(path);
    }
    return formatParamUrl(path);
  }
  function plainJsonObjectToSwagger2(container, jsonSchema, externalSchemas, securityIgnores = []) {
    const obj = resolveLocalRef(jsonSchema, externalSchemas);
    let toSwaggerProp;
    switch (container) {
      case "header":
      case "query":
        toSwaggerProp = function(propertyName, jsonSchemaElement) {
          if (jsonSchemaElement[xConsume]) {
            throw new Error("Complex serialization is not supported by Swagger. " + 'Remove "' + xConsume + '" for "' + propertyName + '" querystring/header schema or ' + "change specification to OpenAPI");
          }
          jsonSchemaElement.in = container;
          jsonSchemaElement.name = propertyName;
          return jsonSchemaElement;
        };
        break;
      case "formData":
        toSwaggerProp = function(propertyName, jsonSchemaElement) {
          delete jsonSchemaElement.$id;
          jsonSchemaElement.in = container;
          jsonSchemaElement.name = propertyName;
          if (jsonSchemaElement.contentEncoding === "binary") {
            delete jsonSchemaElement.contentEncoding;
            jsonSchemaElement.type = "file";
          }
          return jsonSchemaElement;
        };
        break;
      case "path":
        toSwaggerProp = function(propertyName, jsonSchemaElement) {
          jsonSchemaElement.in = container;
          jsonSchemaElement.name = propertyName;
          jsonSchemaElement.required = true;
          return jsonSchemaElement;
        };
        break;
    }
    return Object.keys(obj).filter((propKey) => !securityIgnores.includes(propKey)).map((propKey) => {
      return toSwaggerProp(propKey, obj[propKey]);
    });
  }
  function replaceUnsupported(jsonSchema) {
    if (typeof jsonSchema === "object" && jsonSchema !== null) {
      if (jsonSchema.patternProperties) {
        jsonSchema.additionalProperties = { type: "string" };
        delete jsonSchema.patternProperties;
      } else if (jsonSchema.const !== undefined) {
        jsonSchema.enum = [jsonSchema.const];
        delete jsonSchema.const;
      }
      Object.keys(jsonSchema).forEach(function(key) {
        jsonSchema[key] = replaceUnsupported(jsonSchema[key]);
      });
    }
    return jsonSchema;
  }
  function isConsumesFormOnly(schema) {
    const consumes = schema.consumes;
    return consumes && consumes.length === 1 && (consumes[0] === "application/x-www-form-urlencoded" || consumes[0] === "multipart/form-data");
  }
  function resolveBodyParams(parameters, schema, ref) {
    const resolved = ref.resolve(schema);
    replaceUnsupported(resolved);
    parameters.push({
      name: "body",
      in: "body",
      description: resolved?.description,
      schema: resolved
    });
  }
  function resolveCommonParams(container, parameters, schema, ref, sharedSchemas, securityIgnores) {
    const resolved = ref.resolve(schema);
    const arr = plainJsonObjectToSwagger2(container, resolved, sharedSchemas, securityIgnores);
    arr.forEach((swaggerSchema) => parameters.push(swaggerSchema));
  }
  function findReferenceDescription(rawSchema, ref) {
    const resolved = resolveSchemaReference(rawSchema, ref);
    return resolved?.description;
  }
  function resolveResponse(fastifyResponseJson, ref) {
    if (!fastifyResponseJson) {
      return { 200: { description: "Default Response" } };
    }
    const responsesContainer = {};
    const statusCodes = Object.keys(fastifyResponseJson);
    statusCodes.forEach((statusCode) => {
      const rawJsonSchema = fastifyResponseJson[statusCode];
      const resolved = ref.resolve(rawJsonSchema);
      delete resolved.$schema;
      const deXXStatusCode = statusCode.toUpperCase().replace("XX", "00");
      if (statusCode.toUpperCase().includes("XX") && statusCodes.includes(deXXStatusCode)) {
        return;
      }
      if (statusCode !== "default") {
        statusCode = deXXStatusCode;
      }
      const response = {
        description: rawJsonSchema[xResponseDescription] || rawJsonSchema.description || findReferenceDescription(rawJsonSchema, ref) || "Default Response"
      };
      if (rawJsonSchema.headers) {
        response.headers = rawJsonSchema.headers;
        delete resolved.headers;
      }
      if (rawJsonSchema.type !== "null") {
        const schema = { ...resolved };
        replaceUnsupported(schema);
        delete schema[xResponseDescription];
        response.schema = schema;
      }
      responsesContainer[statusCode] = response;
    });
    return responsesContainer;
  }
  function prepareSwaggerMethod(schema, ref, swaggerObject, url) {
    const swaggerMethod = {};
    const parameters = [];
    const securityIgnores = [
      ...swaggerObject?.security || [],
      ...schema?.security || []
    ].reduce((acc, securitySchemeGroup) => {
      Object.keys(securitySchemeGroup).forEach((securitySchemeLabel) => {
        const { name, in: category } = swaggerObject.securityDefinitions[securitySchemeLabel];
        if (!acc[category]) {
          acc[category] = [];
        }
        acc[category].push(name);
      });
      return acc;
    }, {});
    if (schema) {
      if (schema.operationId)
        swaggerMethod.operationId = schema.operationId;
      if (schema.summary)
        swaggerMethod.summary = schema.summary;
      if (schema.description)
        swaggerMethod.description = schema.description;
      if (schema.externalDocs)
        swaggerMethod.externalDocs = schema.externalDocs;
      if (schema.tags)
        swaggerMethod.tags = schema.tags;
      if (schema.produces)
        swaggerMethod.produces = schema.produces;
      if (schema.consumes)
        swaggerMethod.consumes = schema.consumes;
      if (schema.querystring)
        resolveCommonParams("query", parameters, schema.querystring, ref, swaggerObject.definitions, securityIgnores.query);
      if (schema.body) {
        const isConsumesAllFormOnly = isConsumesFormOnly(schema) || isConsumesFormOnly(swaggerObject);
        isConsumesAllFormOnly ? resolveCommonParams("formData", parameters, schema.body, ref, swaggerObject.definitions) : resolveBodyParams(parameters, schema.body, ref);
      }
      if (schema.params)
        resolveCommonParams("path", parameters, schema.params, ref, swaggerObject.definitions);
      if (schema.headers)
        resolveCommonParams("header", parameters, schema.headers, ref, swaggerObject.definitions, securityIgnores.header);
      if (parameters.length > 0)
        swaggerMethod.parameters = parameters;
      if (schema.deprecated)
        swaggerMethod.deprecated = schema.deprecated;
      if (schema.security)
        swaggerMethod.security = schema.security;
      for (const key of Object.keys(schema)) {
        if (key.startsWith("x-")) {
          swaggerMethod[key] = schema[key];
        }
      }
    }
    if ((!schema || !schema.params) && hasParams(url)) {
      const schemaGenerated = generateParamsSchema(url);
      resolveCommonParams("path", parameters, schemaGenerated.params, ref, swaggerObject.definitions);
      swaggerMethod.parameters = parameters;
    }
    swaggerMethod.responses = resolveResponse(schema ? schema.response : null, ref);
    return swaggerMethod;
  }
  function prepareSwaggerDefinitions(definitions, ref) {
    return Object.entries(definitions).reduce((res, [name, definition]) => {
      const _ = { ...definition };
      const resolved = ref.resolve(_, { externalSchemas: [definitions] });
      delete resolved.$id;
      delete resolved.definitions;
      res[name] = resolved;
      return res;
    }, {});
  }
  module.exports = {
    prepareDefaultOptions,
    prepareSwaggerObject,
    prepareSwaggerMethod,
    normalizeUrl,
    prepareSwaggerDefinitions
  };
});

// node_modules/@fastify/swagger/lib/spec/swagger/index.js
var require_swagger = __commonJS((exports, module) => {
  var yaml = require_dist();
  var { shouldRouteHide } = require_should_route_hide();
  var { prepareDefaultOptions, prepareSwaggerObject, prepareSwaggerMethod, normalizeUrl, prepareSwaggerDefinitions } = require_utils2();
  module.exports = function(opts, cache, routes, Ref, done) {
    let ref;
    const defOpts = prepareDefaultOptions(opts);
    return function(opts2) {
      if (opts2?.yaml) {
        if (cache.string)
          return cache.string;
      } else {
        if (cache.object)
          return cache.object;
      }
      const swaggerObject = prepareSwaggerObject(defOpts, done);
      ref = Ref();
      swaggerObject.definitions = prepareSwaggerDefinitions({
        ...swaggerObject.definitions,
        ...ref.definitions().definitions
      }, ref);
      for (const route of routes) {
        const transformResult = route.config?.swaggerTransform !== undefined ? route.config.swaggerTransform ? route.config.swaggerTransform({ schema: route.schema, url: route.url, route, swaggerObject }) : {} : defOpts.transform ? defOpts.transform({ schema: route.schema, url: route.url, route, swaggerObject }) : {};
        const schema = transformResult.schema || route.schema;
        const shouldRouteHideOpts = {
          hiddenTag: defOpts.hiddenTag,
          hideUntagged: defOpts.hideUntagged
        };
        if (shouldRouteHide(schema, shouldRouteHideOpts))
          continue;
        let url = transformResult.url || route.url;
        url = normalizeUrl(url, defOpts.basePath, defOpts.stripBasePath);
        const swaggerRoute = Object.assign({}, swaggerObject.paths[url]);
        const swaggerMethod = prepareSwaggerMethod(schema, ref, swaggerObject, url);
        if (route.links) {
          throw new Error("Swagger (Open API v2) does not support Links. Upgrade to OpenAPI v3 (see @fastify/swagger readme)");
        }
        const methods = typeof route.method === "string" ? [route.method] : route.method;
        for (const method of methods) {
          swaggerRoute[method.toLowerCase()] = swaggerMethod;
        }
        swaggerObject.paths[url] = swaggerRoute;
      }
      const transformObjectResult = defOpts.transformObject ? defOpts.transformObject({ swaggerObject }) : swaggerObject;
      if (opts2?.yaml) {
        cache.string = yaml.stringify(transformObjectResult, { strict: false });
        return cache.string;
      }
      cache.object = transformObjectResult;
      return cache.object;
    };
  };
});

// node_modules/@fastify/swagger/lib/spec/openapi/utils.js
var require_utils3 = __commonJS((exports, module) => {
  var { readPackageJson } = require_read_package_json();
  var { formatParamUrl } = require_format_param_url();
  var { resolveLocalRef } = require_resolve_local_ref();
  var { resolveSchemaReference } = require_resolve_schema_reference();
  var { xResponseDescription, xConsume, xExamples } = require_constants();
  var { rawRequired } = require_symbols();
  var { generateParamsSchema } = require_generate_params_schema();
  var { hasParams } = require_match_params();
  function prepareDefaultOptions(opts) {
    const openapi = opts.openapi;
    const info = openapi.info || null;
    const servers = openapi.servers || null;
    const components = openapi.components || null;
    const security = openapi.security || null;
    const tags = openapi.tags || null;
    const externalDocs = openapi.externalDocs || null;
    const stripBasePath = opts.stripBasePath;
    const transform = opts.transform;
    const transformObject = opts.transformObject;
    const hiddenTag = opts.hiddenTag;
    const hideUntagged = opts.hideUntagged;
    const extensions = [];
    for (const [key, value] of Object.entries(opts.openapi)) {
      if (key.startsWith("x-")) {
        extensions.push([key, value]);
      }
    }
    return {
      ...openapi,
      info,
      servers,
      components,
      security,
      tags,
      externalDocs,
      stripBasePath,
      transform,
      transformObject,
      hiddenTag,
      extensions,
      hideUntagged
    };
  }
  function prepareOpenapiObject(opts) {
    const pkg = readPackageJson();
    const openapiObject = {
      openapi: "3.0.3",
      info: {
        version: pkg.version || "1.0.0",
        title: pkg.name || ""
      },
      components: { schemas: {} },
      paths: {}
    };
    if (opts.openapi)
      openapiObject.openapi = opts.openapi;
    if (opts.info)
      openapiObject.info = opts.info;
    if (opts.servers)
      openapiObject.servers = opts.servers;
    if (opts.components)
      openapiObject.components = Object.assign({}, opts.components, { schemas: Object.assign({}, opts.components.schemas) });
    if (opts.paths)
      openapiObject.paths = opts.paths;
    if (opts.webhooks)
      openapiObject.webhooks = opts.webhooks;
    if (opts.security)
      openapiObject.security = opts.security;
    if (opts.tags)
      openapiObject.tags = opts.tags;
    if (opts.externalDocs)
      openapiObject.externalDocs = opts.externalDocs;
    for (const [key, value] of opts.extensions) {
      openapiObject[key] = value;
    }
    return openapiObject;
  }
  function normalizeUrl(url, serverUrls, stripBasePath) {
    if (!stripBasePath)
      return formatParamUrl(url);
    serverUrls.forEach(function(serverUrl) {
      const basePath = serverUrl.startsWith("/") ? serverUrl : new URL(serverUrl).pathname;
      if (url.startsWith(basePath) && basePath !== "/") {
        url = url.replace(basePath, "");
      }
    });
    return formatParamUrl(url);
  }
  function resolveServerUrls(servers) {
    const resolvedUrls = [];
    const findVariablesRegex = /\{([^{}]+)\}/gu;
    servers = Array.isArray(servers) ? servers : [];
    for (const server of servers) {
      const originalUrl = server.url;
      const variables = server.variables;
      let url = originalUrl;
      const matches = url.matchAll(findVariablesRegex);
      for (const [nameInBrackets, name] of matches) {
        const value = variables?.[name]?.default;
        if (value === undefined) {
          throw new Error(`Server URL ${originalUrl} could not be resolved. Make sure to provide a default value for each URL variable.`);
        }
        url = url.replace(nameInBrackets, value);
      }
      resolvedUrls.push(url);
    }
    return resolvedUrls;
  }
  function convertExamplesArrayToObject(examples) {
    return examples.reduce((examplesObject, example, index) => {
      if (typeof example === "object") {
        examplesObject["example" + (index + 1)] = { value: example };
      } else {
        examplesObject[example] = { value: example };
      }
      return examplesObject;
    }, {});
  }
  function plainJsonObjectToOpenapi3(container, jsonSchema, externalSchemas, securityIgnores = []) {
    const obj = convertJsonSchemaToOpenapi3(resolveLocalRef(jsonSchema, externalSchemas));
    let toOpenapiProp;
    switch (container) {
      case "cookie":
      case "header":
      case "query":
        toOpenapiProp = function(propertyName, jsonSchemaElement) {
          let result = {
            in: container,
            name: propertyName,
            required: jsonSchemaElement.required
          };
          const media = schemaToMedia(jsonSchemaElement);
          if (jsonSchemaElement[xConsume]) {
            media.schema.required = jsonSchemaElement[rawRequired];
            result.content = {
              [jsonSchemaElement[xConsume]]: media
            };
            delete result.content[jsonSchemaElement[xConsume]].schema[xConsume];
          } else {
            result = { ...media, ...result };
          }
          if (jsonSchemaElement.description)
            result.description = jsonSchemaElement.description;
          if (jsonSchema.style)
            result.style = jsonSchema.style;
          if (jsonSchema.explode != null)
            result.explode = jsonSchema.explode;
          if (jsonSchema.allowReserved === true && container === "query") {
            result.allowReserved = jsonSchema.allowReserved;
          }
          return result;
        };
        break;
      case "path":
        toOpenapiProp = function(propertyName, jsonSchemaElement) {
          const media = schemaToMedia(jsonSchemaElement);
          const result = {
            ...media,
            in: container,
            name: propertyName,
            required: true
          };
          if (jsonSchemaElement.description)
            result.description = jsonSchemaElement.description;
          return result;
        };
        break;
    }
    return Object.keys(obj).filter((propKey) => !securityIgnores.includes(propKey)).map((propKey) => {
      const jsonSchema2 = toOpenapiProp(propKey, obj[propKey]);
      if (jsonSchema2.schema) {
        if (jsonSchema2.schema.required !== undefined)
          delete jsonSchema2.schema.required;
        if (jsonSchema2.schema.description !== undefined)
          delete jsonSchema2.schema.description;
      }
      return jsonSchema2;
    });
  }
  var schemaTypeToNestedSchemas = {
    object: (schema) => {
      return [
        ...Object.values(schema.properties || {}),
        ...Object.values(schema.patternProperties || {}),
        ...Object.values(schema.additionalProperties || {})
      ];
    },
    array: (schema) => {
      return [
        ...schema.items ? [schema.items] : [],
        ...schema.contains ? [schema.contains] : []
      ];
    }
  };
  function resolveSchemaExamples(schema) {
    const example = schema[xExamples] ?? schema.examples?.[0];
    if (typeof example !== "undefined") {
      schema.example = example;
    }
    delete schema[xExamples];
    delete schema.examples;
  }
  function resolveSchemaExamplesRecursive(schema) {
    resolveSchemaExamples(schema);
    const getNestedSchemas = schemaTypeToNestedSchemas[schema.type];
    const nestedSchemas = getNestedSchemas?.(schema) ?? [];
    for (const nestedSchema of nestedSchemas) {
      resolveSchemaExamplesRecursive(nestedSchema);
    }
  }
  function schemaToMedia(schema) {
    const media = { schema };
    if (schema.examples?.length === 1) {
      media.example = schema.examples[0];
      delete schema.examples;
    } else if (schema.examples?.length > 1) {
      media.examples = convertExamplesArrayToObject(schema.examples);
      delete schema.examples;
    }
    if (schema[xExamples]) {
      media.examples = schema[xExamples];
      delete schema[xExamples];
    }
    return media;
  }
  function schemaToMediaRecursive(schema) {
    const media = schemaToMedia(schema);
    resolveSchemaExamplesRecursive(schema);
    return media;
  }
  function resolveBodyParams(body, schema, consumes, ref) {
    const resolved = convertJsonSchemaToOpenapi3(ref.resolve(schema));
    if (resolved.content?.[Object.keys(resolved.content)[0]].schema) {
      for (const contentType in schema.content) {
        body.content[contentType] = schemaToMediaRecursive(resolved.content[contentType].schema);
      }
    } else {
      if (Array.isArray(consumes) && consumes.length === 0 || consumes === undefined) {
        consumes = ["application/json"];
      }
      const media = schemaToMediaRecursive(resolved);
      consumes.forEach((consume) => {
        body.content[consume] = media;
      });
      if (resolved?.required?.length) {
        body.required = true;
      }
      if (resolved?.description) {
        body.description = resolved.description;
      }
    }
  }
  function resolveCommonParams(container, parameters, schema, ref, sharedSchemas, securityIgnores) {
    const schemasPath = "#/components/schemas/";
    let resolved = convertJsonSchemaToOpenapi3(ref.resolve(schema));
    if (resolved.$ref?.startsWith(schemasPath)) {
      const parts = resolved.$ref.split(schemasPath);
      const pathParts = parts[1].split("/");
      resolved = pathParts.reduce((resolved2, pathPart) => resolved2[pathPart], ref.definitions().definitions);
    }
    const arr = plainJsonObjectToOpenapi3(container, resolved, { ...sharedSchemas, ...ref.definitions().definitions }, securityIgnores);
    arr.forEach((swaggerSchema) => parameters.push(swaggerSchema));
  }
  function findReferenceDescription(rawSchema, ref) {
    const resolved = resolveSchemaReference(rawSchema, ref);
    return resolved?.description;
  }
  function resolveResponse(fastifyResponseJson, produces, ref) {
    if (!fastifyResponseJson) {
      return { 200: { description: "Default Response" } };
    }
    const responsesContainer = {};
    const statusCodes = Object.keys(fastifyResponseJson);
    statusCodes.forEach((statusCode) => {
      const rawJsonSchema = fastifyResponseJson[statusCode];
      const resolved = convertJsonSchemaToOpenapi3(ref.resolve(rawJsonSchema));
      if (statusCode !== "default") {
        statusCode = statusCode.toUpperCase();
      }
      const response = {
        description: resolved[xResponseDescription] || rawJsonSchema.description || findReferenceDescription(rawJsonSchema, ref) || "Default Response"
      };
      if (rawJsonSchema.headers) {
        response.headers = {};
        Object.keys(rawJsonSchema.headers).forEach(function(key) {
          const header = {
            schema: rawJsonSchema.headers[key]
          };
          if (rawJsonSchema.headers[key].description) {
            header.description = rawJsonSchema.headers[key].description;
            delete header.schema.description;
          }
          response.headers[key] = header;
        });
        delete resolved.headers;
      }
      if (rawJsonSchema.type !== "null") {
        if (resolved.content?.[Object.keys(resolved.content)[0]].schema) {
          response.content = resolved.content;
        } else {
          const content = {};
          if (Array.isArray(produces) && produces.length === 0 || produces === undefined) {
            produces = ["application/json"];
          }
          delete resolved[xResponseDescription];
          const media = schemaToMediaRecursive(resolved);
          for (const produce of produces) {
            content[produce] = media;
          }
          response.content = content;
        }
      }
      responsesContainer[statusCode] = response;
    });
    return responsesContainer;
  }
  function resolveCallbacks(schema, ref) {
    const callbacksContainer = {};
    for (const eventName in schema) {
      if (!schema[eventName]) {
        continue;
      }
      callbacksContainer[eventName] = {};
      const eventSchema = schema[eventName];
      for (const callbackUrl in eventSchema) {
        if (!callbackUrl || !eventSchema[callbackUrl]) {
          continue;
        }
        callbacksContainer[eventName][callbackUrl] = {};
        const callbackSchema = eventSchema[callbackUrl];
        for (const httpMethodName in callbackSchema) {
          if (!httpMethodName || !callbackSchema[httpMethodName]) {
            continue;
          }
          const httpMethodSchema = callbackSchema[httpMethodName];
          const httpMethodContainer = {};
          if (httpMethodSchema.requestBody) {
            httpMethodContainer.requestBody = convertJsonSchemaToOpenapi3(ref.resolve(httpMethodSchema.requestBody));
          }
          httpMethodContainer.responses = httpMethodSchema.responses ? convertJsonSchemaToOpenapi3(ref.resolve(httpMethodSchema.responses)) : { "2XX": { description: "Default Response" } };
          callbacksContainer[eventName][callbackUrl][httpMethodName] = httpMethodContainer;
        }
      }
    }
    return callbacksContainer;
  }
  function prepareOpenapiMethod(schema, ref, openapiObject, url) {
    const openapiMethod = {};
    const parameters = [];
    const securityIgnores = [
      ...openapiObject?.security || [],
      ...schema?.security || []
    ].reduce((acc, securitySchemeGroup) => {
      Object.keys(securitySchemeGroup).forEach((securitySchemeLabel) => {
        const scheme = openapiObject.components.securitySchemes[securitySchemeLabel];
        const isBearer = scheme.type === "http" && scheme.scheme === "bearer";
        const category = isBearer ? "header" : scheme.in;
        const name = isBearer ? "authorization" : scheme.name;
        if (!acc[category]) {
          acc[category] = [];
        }
        acc[category].push(name);
      });
      return acc;
    }, {});
    if (schema) {
      if (schema.operationId)
        openapiMethod.operationId = schema.operationId;
      if (schema.summary)
        openapiMethod.summary = schema.summary;
      if (schema.tags)
        openapiMethod.tags = schema.tags;
      if (schema.description)
        openapiMethod.description = schema.description;
      if (schema.externalDocs)
        openapiMethod.externalDocs = schema.externalDocs;
      if (schema.querystring)
        resolveCommonParams("query", parameters, schema.querystring, ref, openapiObject.definitions, securityIgnores.query);
      if (schema.body) {
        openapiMethod.requestBody = { content: {} };
        resolveBodyParams(openapiMethod.requestBody, schema.body, schema.consumes, ref);
      }
      if (schema.params)
        resolveCommonParams("path", parameters, schema.params, ref, openapiObject.definitions);
      if (schema.headers)
        resolveCommonParams("header", parameters, schema.headers, ref, openapiObject.definitions, securityIgnores.header);
      if (schema.cookies)
        resolveCommonParams("cookie", parameters, schema.cookies, ref, openapiObject.definitions, securityIgnores.cookie);
      if (parameters.length > 0)
        openapiMethod.parameters = parameters;
      if (schema.deprecated)
        openapiMethod.deprecated = schema.deprecated;
      if (schema.security)
        openapiMethod.security = schema.security;
      if (schema.servers)
        openapiMethod.servers = schema.servers;
      if (schema.callbacks)
        openapiMethod.callbacks = resolveCallbacks(schema.callbacks, ref);
      for (const key of Object.keys(schema)) {
        if (key.startsWith("x-")) {
          openapiMethod[key] = schema[key];
        }
      }
    }
    if ((!schema || !schema.params) && hasParams(url)) {
      const schemaGenerated = generateParamsSchema(url);
      resolveCommonParams("path", parameters, schemaGenerated.params, ref, openapiObject.definitions);
      openapiMethod.parameters = parameters;
    }
    openapiMethod.responses = resolveResponse(schema ? schema.response : null, schema ? schema.produces : null, ref);
    return openapiMethod;
  }
  function convertJsonSchemaToOpenapi3(jsonSchema) {
    if (typeof jsonSchema !== "object" || jsonSchema === null) {
      return jsonSchema;
    }
    if (Array.isArray(jsonSchema)) {
      return jsonSchema.map(convertJsonSchemaToOpenapi3);
    }
    const openapiSchema = { ...jsonSchema };
    for (const key of Object.keys(openapiSchema)) {
      const value = openapiSchema[key];
      if (key === "$id" || key === "$schema" || key === "definitions") {
        delete openapiSchema[key];
        continue;
      }
      if (key === "$ref") {
        openapiSchema.$ref = value.replace("definitions", "components/schemas");
        continue;
      }
      if (key === "const") {
        openapiSchema.enum = [openapiSchema.const];
        delete openapiSchema.const;
        continue;
      }
      if (key === "patternProperties") {
        const propertyJsonSchema = Object.values(openapiSchema.patternProperties)[0];
        const propertyOpenapiSchema = convertJsonSchemaToOpenapi3(propertyJsonSchema);
        openapiSchema.additionalProperties = propertyOpenapiSchema;
        delete openapiSchema.patternProperties;
        continue;
      }
      if (key === "properties") {
        openapiSchema[key] = {};
        for (const propertyName of Object.keys(value)) {
          const propertyJsonSchema = value[propertyName];
          const propertyOpenapiSchema = convertJsonSchemaToOpenapi3(propertyJsonSchema);
          openapiSchema[key][propertyName] = propertyOpenapiSchema;
        }
        continue;
      }
      openapiSchema[key] = convertJsonSchemaToOpenapi3(value);
    }
    return openapiSchema;
  }
  function prepareOpenapiSchemas(jsonSchemas, ref) {
    const openapiSchemas = {};
    for (const schemaName of Object.keys(jsonSchemas)) {
      const jsonSchema = { ...jsonSchemas[schemaName] };
      const resolvedJsonSchema = ref.resolve(jsonSchema, { externalSchemas: [jsonSchemas] });
      const openapiSchema = convertJsonSchemaToOpenapi3(resolvedJsonSchema);
      resolveSchemaExamplesRecursive(openapiSchema);
      openapiSchemas[schemaName] = openapiSchema;
    }
    return openapiSchemas;
  }
  module.exports = {
    prepareDefaultOptions,
    prepareOpenapiObject,
    prepareOpenapiMethod,
    prepareOpenapiSchemas,
    resolveServerUrls,
    normalizeUrl
  };
});

// node_modules/@fastify/swagger/lib/spec/openapi/index.js
var require_openapi = __commonJS((exports, module) => {
  var yaml = require_dist();
  var { shouldRouteHide } = require_should_route_hide();
  var { prepareDefaultOptions, prepareOpenapiObject, prepareOpenapiMethod, prepareOpenapiSchemas, normalizeUrl, resolveServerUrls } = require_utils3();
  module.exports = function(opts, cache, routes, Ref, done) {
    let ref;
    const defOpts = prepareDefaultOptions(opts);
    return function(opts2) {
      if (opts2?.yaml) {
        if (cache.string)
          return cache.string;
      } else {
        if (cache.object)
          return cache.object;
      }
      const openapiObject = prepareOpenapiObject(defOpts, done);
      ref = Ref();
      openapiObject.components.schemas = prepareOpenapiSchemas({
        ...openapiObject.components.schemas,
        ...ref.definitions().definitions
      }, ref);
      const serverUrls = resolveServerUrls(defOpts.servers);
      for (const route of routes) {
        const transformResult = route.config?.swaggerTransform !== undefined ? route.config.swaggerTransform ? route.config.swaggerTransform({ schema: route.schema, url: route.url, route, openapiObject }) : {} : defOpts.transform ? defOpts.transform({ schema: route.schema, url: route.url, route, openapiObject }) : {};
        const schema = transformResult.schema || route.schema;
        const shouldRouteHideOpts = {
          hiddenTag: defOpts.hiddenTag,
          hideUntagged: defOpts.hideUntagged
        };
        if (shouldRouteHide(schema, shouldRouteHideOpts))
          continue;
        let url = transformResult.url || route.url;
        url = normalizeUrl(url, serverUrls, defOpts.stripBasePath);
        const openapiRoute = Object.assign({}, openapiObject.paths[url]);
        const openapiMethod = prepareOpenapiMethod(schema, ref, openapiObject, url);
        if (route.links) {
          for (const statusCode of Object.keys(route.links)) {
            if (!openapiMethod.responses[statusCode]) {
              throw new Error(`missing status code ${statusCode} in route ${route.path}`);
            }
            openapiMethod.responses[statusCode].links = route.links[statusCode];
          }
        }
        const methods = typeof route.method === "string" ? [route.method] : route.method;
        for (const method of methods) {
          openapiRoute[method.toLowerCase()] = openapiMethod;
        }
        openapiObject.paths[url] = openapiRoute;
      }
      const transformObjectResult = defOpts.transformObject ? defOpts.transformObject({ openapiObject }) : openapiObject;
      if (opts2?.yaml) {
        cache.string = yaml.stringify(transformObjectResult, { strict: false });
        return cache.string;
      }
      cache.object = transformObjectResult;
      return cache.object;
    };
  };
});

// node_modules/@fastify/swagger/lib/util/resolve-swagger-function.js
var require_resolve_swagger_function = __commonJS((exports, module) => {
  function resolveSwaggerFunction(opts, cache, routes, Ref, done) {
    if (opts.openapi === undefined || opts.openapi === null) {
      return require_swagger()(opts, cache, routes, Ref, done);
    } else {
      return require_openapi()(opts, cache, routes, Ref, done);
    }
  }
  module.exports = {
    resolveSwaggerFunction
  };
});

// node_modules/@fastify/swagger/lib/mode/dynamic.js
var require_dynamic = __commonJS((exports, module) => {
  var { addHook } = require_add_hook();
  var { resolveSwaggerFunction } = require_resolve_swagger_function();
  module.exports = function(fastify, opts, done) {
    opts = Object.assign({}, {
      exposeRoute: false,
      hiddenTag: "X-HIDDEN",
      hideUntagged: false,
      stripBasePath: true,
      openapi: null,
      swagger: {},
      transform: null,
      transformObject: null,
      decorator: "swagger",
      refResolver: {
        buildLocalReference(json, _baseUri, _fragment, i) {
          if (!json.title && json.$id) {
            json.title = json.$id;
          }
          return `def-${i}`;
        }
      }
    }, opts);
    const { routes, Ref } = addHook(fastify, opts);
    const cache = {
      object: null,
      string: null
    };
    const swagger = resolveSwaggerFunction(opts, cache, routes, Ref, done);
    fastify.decorate(opts.decorator, swagger);
    done();
  };
});

// node_modules/@fastify/swagger/index.js
var require_swagger2 = __commonJS((exports, module) => {
  var fp = require_plugin();
  var { formatParamUrl } = require_format_param_url();
  function fastifySwagger(fastify, opts, next) {
    opts.mode = opts.mode || "dynamic";
    switch (opts.mode) {
      case "static": {
        const setup = require_static();
        setup(fastify, opts, next);
        break;
      }
      case "dynamic": {
        const setup = require_dynamic();
        setup(fastify, opts, next);
        break;
      }
      default: {
        return next(new Error("unsupported mode, should be one of ['static', 'dynamic']"));
      }
    }
  }
  module.exports = fp(fastifySwagger, {
    fastify: "5.x",
    name: "@fastify/swagger"
  });
  module.exports.fastifySwagger = fastifySwagger;
  module.exports.default = fastifySwagger;
  module.exports.formatParamUrl = formatParamUrl;
});

// node_modules/@fastify/swagger-ui/static/csp.json
var require_csp = __commonJS((exports, module) => {
  module.exports = { script: [], style: [] };
});

// node_modules/balanced-match/index.js
var require_balanced_match = __commonJS((exports, module) => {
  module.exports = balanced;
  function balanced(a, b, str) {
    if (a instanceof RegExp)
      a = maybeMatch(a, str);
    if (b instanceof RegExp)
      b = maybeMatch(b, str);
    var r = range(a, b, str);
    return r && {
      start: r[0],
      end: r[1],
      pre: str.slice(0, r[0]),
      body: str.slice(r[0] + a.length, r[1]),
      post: str.slice(r[1] + b.length)
    };
  }
  function maybeMatch(reg, str) {
    var m = str.match(reg);
    return m ? m[0] : null;
  }
  balanced.range = range;
  function range(a, b, str) {
    var begs, beg, left, right, result;
    var ai = str.indexOf(a);
    var bi = str.indexOf(b, ai + 1);
    var i = ai;
    if (ai >= 0 && bi > 0) {
      if (a === b) {
        return [ai, bi];
      }
      begs = [];
      left = str.length;
      while (i >= 0 && !result) {
        if (i == ai) {
          begs.push(i);
          ai = str.indexOf(a, i + 1);
        } else if (begs.length == 1) {
          result = [begs.pop(), bi];
        } else {
          beg = begs.pop();
          if (beg < left) {
            left = beg;
            right = bi;
          }
          bi = str.indexOf(b, i + 1);
        }
        i = ai < bi && ai >= 0 ? ai : bi;
      }
      if (begs.length) {
        result = [left, right];
      }
    }
    return result;
  }
});

// node_modules/brace-expansion/index.js
var require_brace_expansion = __commonJS((exports, module) => {
  var balanced = require_balanced_match();
  module.exports = expandTop;
  var escSlash = "\x00SLASH" + Math.random() + "\x00";
  var escOpen = "\x00OPEN" + Math.random() + "\x00";
  var escClose = "\x00CLOSE" + Math.random() + "\x00";
  var escComma = "\x00COMMA" + Math.random() + "\x00";
  var escPeriod = "\x00PERIOD" + Math.random() + "\x00";
  function numeric(str) {
    return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
  }
  function escapeBraces(str) {
    return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
  }
  function unescapeBraces(str) {
    return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
  }
  function parseCommaParts(str) {
    if (!str)
      return [""];
    var parts = [];
    var m = balanced("{", "}", str);
    if (!m)
      return str.split(",");
    var pre = m.pre;
    var body = m.body;
    var post = m.post;
    var p = pre.split(",");
    p[p.length - 1] += "{" + body + "}";
    var postParts = parseCommaParts(post);
    if (post.length) {
      p[p.length - 1] += postParts.shift();
      p.push.apply(p, postParts);
    }
    parts.push.apply(parts, p);
    return parts;
  }
  function expandTop(str) {
    if (!str)
      return [];
    if (str.substr(0, 2) === "{}") {
      str = "\\{\\}" + str.substr(2);
    }
    return expand(escapeBraces(str), true).map(unescapeBraces);
  }
  function embrace(str) {
    return "{" + str + "}";
  }
  function isPadded(el) {
    return /^-?0\d/.test(el);
  }
  function lte(i, y) {
    return i <= y;
  }
  function gte(i, y) {
    return i >= y;
  }
  function expand(str, isTop) {
    var expansions = [];
    var m = balanced("{", "}", str);
    if (!m)
      return [str];
    var pre = m.pre;
    var post = m.post.length ? expand(m.post, false) : [""];
    if (/\$$/.test(m.pre)) {
      for (var k = 0;k < post.length; k++) {
        var expansion = pre + "{" + m.body + "}" + post[k];
        expansions.push(expansion);
      }
    } else {
      var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
      var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
      var isSequence = isNumericSequence || isAlphaSequence;
      var isOptions = m.body.indexOf(",") >= 0;
      if (!isSequence && !isOptions) {
        if (m.post.match(/,.*\}/)) {
          str = m.pre + "{" + m.body + escClose + m.post;
          return expand(str);
        }
        return [str];
      }
      var n;
      if (isSequence) {
        n = m.body.split(/\.\./);
      } else {
        n = parseCommaParts(m.body);
        if (n.length === 1) {
          n = expand(n[0], false).map(embrace);
          if (n.length === 1) {
            return post.map(function(p) {
              return m.pre + n[0] + p;
            });
          }
        }
      }
      var N;
      if (isSequence) {
        var x = numeric(n[0]);
        var y = numeric(n[1]);
        var width = Math.max(n[0].length, n[1].length);
        var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
        var test = lte;
        var reverse = y < x;
        if (reverse) {
          incr *= -1;
          test = gte;
        }
        var pad = n.some(isPadded);
        N = [];
        for (var i = x;test(i, y); i += incr) {
          var c;
          if (isAlphaSequence) {
            c = String.fromCharCode(i);
            if (c === "\\")
              c = "";
          } else {
            c = String(i);
            if (pad) {
              var need = width - c.length;
              if (need > 0) {
                var z = new Array(need + 1).join("0");
                if (i < 0)
                  c = "-" + z + c.slice(1);
                else
                  c = z + c;
              }
            }
          }
          N.push(c);
        }
      } else {
        N = [];
        for (var j = 0;j < n.length; j++) {
          N.push.apply(N, expand(n[j], false));
        }
      }
      for (var j = 0;j < N.length; j++) {
        for (var k = 0;k < post.length; k++) {
          var expansion = pre + N[j] + post[k];
          if (!isTop || isSequence || expansion)
            expansions.push(expansion);
        }
      }
    }
    return expansions;
  }
});

// node_modules/minimatch/dist/commonjs/assert-valid-pattern.js
var require_assert_valid_pattern = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.assertValidPattern = undefined;
  var MAX_PATTERN_LENGTH = 1024 * 64;
  var assertValidPattern = (pattern) => {
    if (typeof pattern !== "string") {
      throw new TypeError("invalid pattern");
    }
    if (pattern.length > MAX_PATTERN_LENGTH) {
      throw new TypeError("pattern is too long");
    }
  };
  exports.assertValidPattern = assertValidPattern;
});

// node_modules/minimatch/dist/commonjs/brace-expressions.js
var require_brace_expressions = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.parseClass = undefined;
  var posixClasses = {
    "[:alnum:]": ["\\p{L}\\p{Nl}\\p{Nd}", true],
    "[:alpha:]": ["\\p{L}\\p{Nl}", true],
    "[:ascii:]": ["\\x" + "00-\\x" + "7f", false],
    "[:blank:]": ["\\p{Zs}\\t", true],
    "[:cntrl:]": ["\\p{Cc}", true],
    "[:digit:]": ["\\p{Nd}", true],
    "[:graph:]": ["\\p{Z}\\p{C}", true, true],
    "[:lower:]": ["\\p{Ll}", true],
    "[:print:]": ["\\p{C}", true],
    "[:punct:]": ["\\p{P}", true],
    "[:space:]": ["\\p{Z}\\t\\r\\n\\v\\f", true],
    "[:upper:]": ["\\p{Lu}", true],
    "[:word:]": ["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}", true],
    "[:xdigit:]": ["A-Fa-f0-9", false]
  };
  var braceEscape = (s) => s.replace(/[[\]\\-]/g, "\\$&");
  var regexpEscape = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  var rangesToString = (ranges) => ranges.join("");
  var parseClass = (glob, position) => {
    const pos = position;
    if (glob.charAt(pos) !== "[") {
      throw new Error("not in a brace expression");
    }
    const ranges = [];
    const negs = [];
    let i = pos + 1;
    let sawStart = false;
    let uflag = false;
    let escaping = false;
    let negate = false;
    let endPos = pos;
    let rangeStart = "";
    WHILE:
      while (i < glob.length) {
        const c = glob.charAt(i);
        if ((c === "!" || c === "^") && i === pos + 1) {
          negate = true;
          i++;
          continue;
        }
        if (c === "]" && sawStart && !escaping) {
          endPos = i + 1;
          break;
        }
        sawStart = true;
        if (c === "\\") {
          if (!escaping) {
            escaping = true;
            i++;
            continue;
          }
        }
        if (c === "[" && !escaping) {
          for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {
            if (glob.startsWith(cls, i)) {
              if (rangeStart) {
                return ["$.", false, glob.length - pos, true];
              }
              i += cls.length;
              if (neg)
                negs.push(unip);
              else
                ranges.push(unip);
              uflag = uflag || u;
              continue WHILE;
            }
          }
        }
        escaping = false;
        if (rangeStart) {
          if (c > rangeStart) {
            ranges.push(braceEscape(rangeStart) + "-" + braceEscape(c));
          } else if (c === rangeStart) {
            ranges.push(braceEscape(c));
          }
          rangeStart = "";
          i++;
          continue;
        }
        if (glob.startsWith("-]", i + 1)) {
          ranges.push(braceEscape(c + "-"));
          i += 2;
          continue;
        }
        if (glob.startsWith("-", i + 1)) {
          rangeStart = c;
          i += 2;
          continue;
        }
        ranges.push(braceEscape(c));
        i++;
      }
    if (endPos < i) {
      return ["", false, 0, false];
    }
    if (!ranges.length && !negs.length) {
      return ["$.", false, glob.length - pos, true];
    }
    if (negs.length === 0 && ranges.length === 1 && /^\\?.$/.test(ranges[0]) && !negate) {
      const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0];
      return [regexpEscape(r), false, endPos - pos, false];
    }
    const sranges = "[" + (negate ? "^" : "") + rangesToString(ranges) + "]";
    const snegs = "[" + (negate ? "" : "^") + rangesToString(negs) + "]";
    const comb = ranges.length && negs.length ? "(" + sranges + "|" + snegs + ")" : ranges.length ? sranges : snegs;
    return [comb, uflag, endPos - pos, true];
  };
  exports.parseClass = parseClass;
});

// node_modules/minimatch/dist/commonjs/unescape.js
var require_unescape = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.unescape = undefined;
  var unescape2 = (s, { windowsPathsNoEscape = false } = {}) => {
    return windowsPathsNoEscape ? s.replace(/\[([^\/\\])\]/g, "$1") : s.replace(/((?!\\).|^)\[([^\/\\])\]/g, "$1$2").replace(/\\([^\/])/g, "$1");
  };
  exports.unescape = unescape2;
});

// node_modules/minimatch/dist/commonjs/ast.js
var require_ast = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.AST = undefined;
  var brace_expressions_js_1 = require_brace_expressions();
  var unescape_js_1 = require_unescape();
  var types = new Set(["!", "?", "+", "*", "@"]);
  var isExtglobType = (c) => types.has(c);
  var startNoTraversal = "(?!(?:^|/)\\.\\.?(?:$|/))";
  var startNoDot = "(?!\\.)";
  var addPatternStart = new Set(["[", "."]);
  var justDots = new Set(["..", "."]);
  var reSpecials = new Set("().*{}+?[]^$\\!");
  var regExpEscape = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  var qmark = "[^/]";
  var star = qmark + "*?";
  var starNoEmpty = qmark + "+?";

  class AST {
    type;
    #root;
    #hasMagic;
    #uflag = false;
    #parts = [];
    #parent;
    #parentIndex;
    #negs;
    #filledNegs = false;
    #options;
    #toString;
    #emptyExt = false;
    constructor(type, parent, options = {}) {
      this.type = type;
      if (type)
        this.#hasMagic = true;
      this.#parent = parent;
      this.#root = this.#parent ? this.#parent.#root : this;
      this.#options = this.#root === this ? options : this.#root.#options;
      this.#negs = this.#root === this ? [] : this.#root.#negs;
      if (type === "!" && !this.#root.#filledNegs)
        this.#negs.push(this);
      this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0;
    }
    get hasMagic() {
      if (this.#hasMagic !== undefined)
        return this.#hasMagic;
      for (const p of this.#parts) {
        if (typeof p === "string")
          continue;
        if (p.type || p.hasMagic)
          return this.#hasMagic = true;
      }
      return this.#hasMagic;
    }
    toString() {
      if (this.#toString !== undefined)
        return this.#toString;
      if (!this.type) {
        return this.#toString = this.#parts.map((p) => String(p)).join("");
      } else {
        return this.#toString = this.type + "(" + this.#parts.map((p) => String(p)).join("|") + ")";
      }
    }
    #fillNegs() {
      if (this !== this.#root)
        throw new Error("should only call on root");
      if (this.#filledNegs)
        return this;
      this.toString();
      this.#filledNegs = true;
      let n;
      while (n = this.#negs.pop()) {
        if (n.type !== "!")
          continue;
        let p = n;
        let pp = p.#parent;
        while (pp) {
          for (let i = p.#parentIndex + 1;!pp.type && i < pp.#parts.length; i++) {
            for (const part of n.#parts) {
              if (typeof part === "string") {
                throw new Error("string part in extglob AST??");
              }
              part.copyIn(pp.#parts[i]);
            }
          }
          p = pp;
          pp = p.#parent;
        }
      }
      return this;
    }
    push(...parts) {
      for (const p of parts) {
        if (p === "")
          continue;
        if (typeof p !== "string" && !(p instanceof AST && p.#parent === this)) {
          throw new Error("invalid part: " + p);
        }
        this.#parts.push(p);
      }
    }
    toJSON() {
      const ret = this.type === null ? this.#parts.slice().map((p) => typeof p === "string" ? p : p.toJSON()) : [this.type, ...this.#parts.map((p) => p.toJSON())];
      if (this.isStart() && !this.type)
        ret.unshift([]);
      if (this.isEnd() && (this === this.#root || this.#root.#filledNegs && this.#parent?.type === "!")) {
        ret.push({});
      }
      return ret;
    }
    isStart() {
      if (this.#root === this)
        return true;
      if (!this.#parent?.isStart())
        return false;
      if (this.#parentIndex === 0)
        return true;
      const p = this.#parent;
      for (let i = 0;i < this.#parentIndex; i++) {
        const pp = p.#parts[i];
        if (!(pp instanceof AST && pp.type === "!")) {
          return false;
        }
      }
      return true;
    }
    isEnd() {
      if (this.#root === this)
        return true;
      if (this.#parent?.type === "!")
        return true;
      if (!this.#parent?.isEnd())
        return false;
      if (!this.type)
        return this.#parent?.isEnd();
      const pl = this.#parent ? this.#parent.#parts.length : 0;
      return this.#parentIndex === pl - 1;
    }
    copyIn(part) {
      if (typeof part === "string")
        this.push(part);
      else
        this.push(part.clone(this));
    }
    clone(parent) {
      const c = new AST(this.type, parent);
      for (const p of this.#parts) {
        c.copyIn(p);
      }
      return c;
    }
    static #parseAST(str, ast, pos, opt) {
      let escaping = false;
      let inBrace = false;
      let braceStart = -1;
      let braceNeg = false;
      if (ast.type === null) {
        let i2 = pos;
        let acc2 = "";
        while (i2 < str.length) {
          const c = str.charAt(i2++);
          if (escaping || c === "\\") {
            escaping = !escaping;
            acc2 += c;
            continue;
          }
          if (inBrace) {
            if (i2 === braceStart + 1) {
              if (c === "^" || c === "!") {
                braceNeg = true;
              }
            } else if (c === "]" && !(i2 === braceStart + 2 && braceNeg)) {
              inBrace = false;
            }
            acc2 += c;
            continue;
          } else if (c === "[") {
            inBrace = true;
            braceStart = i2;
            braceNeg = false;
            acc2 += c;
            continue;
          }
          if (!opt.noext && isExtglobType(c) && str.charAt(i2) === "(") {
            ast.push(acc2);
            acc2 = "";
            const ext = new AST(c, ast);
            i2 = AST.#parseAST(str, ext, i2, opt);
            ast.push(ext);
            continue;
          }
          acc2 += c;
        }
        ast.push(acc2);
        return i2;
      }
      let i = pos + 1;
      let part = new AST(null, ast);
      const parts = [];
      let acc = "";
      while (i < str.length) {
        const c = str.charAt(i++);
        if (escaping || c === "\\") {
          escaping = !escaping;
          acc += c;
          continue;
        }
        if (inBrace) {
          if (i === braceStart + 1) {
            if (c === "^" || c === "!") {
              braceNeg = true;
            }
          } else if (c === "]" && !(i === braceStart + 2 && braceNeg)) {
            inBrace = false;
          }
          acc += c;
          continue;
        } else if (c === "[") {
          inBrace = true;
          braceStart = i;
          braceNeg = false;
          acc += c;
          continue;
        }
        if (isExtglobType(c) && str.charAt(i) === "(") {
          part.push(acc);
          acc = "";
          const ext = new AST(c, part);
          part.push(ext);
          i = AST.#parseAST(str, ext, i, opt);
          continue;
        }
        if (c === "|") {
          part.push(acc);
          acc = "";
          parts.push(part);
          part = new AST(null, ast);
          continue;
        }
        if (c === ")") {
          if (acc === "" && ast.#parts.length === 0) {
            ast.#emptyExt = true;
          }
          part.push(acc);
          acc = "";
          ast.push(...parts, part);
          return i;
        }
        acc += c;
      }
      ast.type = null;
      ast.#hasMagic = undefined;
      ast.#parts = [str.substring(pos - 1)];
      return i;
    }
    static fromGlob(pattern, options = {}) {
      const ast = new AST(null, undefined, options);
      AST.#parseAST(pattern, ast, 0, options);
      return ast;
    }
    toMMPattern() {
      if (this !== this.#root)
        return this.#root.toMMPattern();
      const glob = this.toString();
      const [re, body, hasMagic, uflag] = this.toRegExpSource();
      const anyMagic = hasMagic || this.#hasMagic || this.#options.nocase && !this.#options.nocaseMagicOnly && glob.toUpperCase() !== glob.toLowerCase();
      if (!anyMagic) {
        return body;
      }
      const flags = (this.#options.nocase ? "i" : "") + (uflag ? "u" : "");
      return Object.assign(new RegExp(`^${re}$`, flags), {
        _src: re,
        _glob: glob
      });
    }
    get options() {
      return this.#options;
    }
    toRegExpSource(allowDot) {
      const dot = allowDot ?? !!this.#options.dot;
      if (this.#root === this)
        this.#fillNegs();
      if (!this.type) {
        const noEmpty = this.isStart() && this.isEnd();
        const src = this.#parts.map((p) => {
          const [re, _, hasMagic, uflag] = typeof p === "string" ? AST.#parseGlob(p, this.#hasMagic, noEmpty) : p.toRegExpSource(allowDot);
          this.#hasMagic = this.#hasMagic || hasMagic;
          this.#uflag = this.#uflag || uflag;
          return re;
        }).join("");
        let start2 = "";
        if (this.isStart()) {
          if (typeof this.#parts[0] === "string") {
            const dotTravAllowed = this.#parts.length === 1 && justDots.has(this.#parts[0]);
            if (!dotTravAllowed) {
              const aps = addPatternStart;
              const needNoTrav = dot && aps.has(src.charAt(0)) || src.startsWith("\\.") && aps.has(src.charAt(2)) || src.startsWith("\\.\\.") && aps.has(src.charAt(4));
              const needNoDot = !dot && !allowDot && aps.has(src.charAt(0));
              start2 = needNoTrav ? startNoTraversal : needNoDot ? startNoDot : "";
            }
          }
        }
        let end = "";
        if (this.isEnd() && this.#root.#filledNegs && this.#parent?.type === "!") {
          end = "(?:$|\\/)";
        }
        const final2 = start2 + src + end;
        return [
          final2,
          (0, unescape_js_1.unescape)(src),
          this.#hasMagic = !!this.#hasMagic,
          this.#uflag
        ];
      }
      const repeated = this.type === "*" || this.type === "+";
      const start = this.type === "!" ? "(?:(?!(?:" : "(?:";
      let body = this.#partsToRegExp(dot);
      if (this.isStart() && this.isEnd() && !body && this.type !== "!") {
        const s = this.toString();
        this.#parts = [s];
        this.type = null;
        this.#hasMagic = undefined;
        return [s, (0, unescape_js_1.unescape)(this.toString()), false, false];
      }
      let bodyDotAllowed = !repeated || allowDot || dot || !startNoDot ? "" : this.#partsToRegExp(true);
      if (bodyDotAllowed === body) {
        bodyDotAllowed = "";
      }
      if (bodyDotAllowed) {
        body = `(?:${body})(?:${bodyDotAllowed})*?`;
      }
      let final = "";
      if (this.type === "!" && this.#emptyExt) {
        final = (this.isStart() && !dot ? startNoDot : "") + starNoEmpty;
      } else {
        const close = this.type === "!" ? "))" + (this.isStart() && !dot && !allowDot ? startNoDot : "") + star + ")" : this.type === "@" ? ")" : this.type === "?" ? ")?" : this.type === "+" && bodyDotAllowed ? ")" : this.type === "*" && bodyDotAllowed ? `)?` : `)${this.type}`;
        final = start + body + close;
      }
      return [
        final,
        (0, unescape_js_1.unescape)(body),
        this.#hasMagic = !!this.#hasMagic,
        this.#uflag
      ];
    }
    #partsToRegExp(dot) {
      return this.#parts.map((p) => {
        if (typeof p === "string") {
          throw new Error("string type in extglob ast??");
        }
        const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot);
        this.#uflag = this.#uflag || uflag;
        return re;
      }).filter((p) => !(this.isStart() && this.isEnd()) || !!p).join("|");
    }
    static #parseGlob(glob, hasMagic, noEmpty = false) {
      let escaping = false;
      let re = "";
      let uflag = false;
      for (let i = 0;i < glob.length; i++) {
        const c = glob.charAt(i);
        if (escaping) {
          escaping = false;
          re += (reSpecials.has(c) ? "\\" : "") + c;
          continue;
        }
        if (c === "\\") {
          if (i === glob.length - 1) {
            re += "\\\\";
          } else {
            escaping = true;
          }
          continue;
        }
        if (c === "[") {
          const [src, needUflag, consumed, magic] = (0, brace_expressions_js_1.parseClass)(glob, i);
          if (consumed) {
            re += src;
            uflag = uflag || needUflag;
            i += consumed - 1;
            hasMagic = hasMagic || magic;
            continue;
          }
        }
        if (c === "*") {
          if (noEmpty && glob === "*")
            re += starNoEmpty;
          else
            re += star;
          hasMagic = true;
          continue;
        }
        if (c === "?") {
          re += qmark;
          hasMagic = true;
          continue;
        }
        re += regExpEscape(c);
      }
      return [re, (0, unescape_js_1.unescape)(glob), !!hasMagic, uflag];
    }
  }
  exports.AST = AST;
});

// node_modules/minimatch/dist/commonjs/escape.js
var require_escape = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.escape = undefined;
  var escape2 = (s, { windowsPathsNoEscape = false } = {}) => {
    return windowsPathsNoEscape ? s.replace(/[?*()[\]]/g, "[$&]") : s.replace(/[?*()[\]\\]/g, "\\$&");
  };
  exports.escape = escape2;
});

// node_modules/minimatch/dist/commonjs/index.js
var require_commonjs = __commonJS((exports) => {
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.unescape = exports.escape = exports.AST = exports.Minimatch = exports.match = exports.makeRe = exports.braceExpand = exports.defaults = exports.filter = exports.GLOBSTAR = exports.sep = exports.minimatch = undefined;
  var brace_expansion_1 = __importDefault(require_brace_expansion());
  var assert_valid_pattern_js_1 = require_assert_valid_pattern();
  var ast_js_1 = require_ast();
  var escape_js_1 = require_escape();
  var unescape_js_1 = require_unescape();
  var minimatch = (p, pattern, options = {}) => {
    (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);
    if (!options.nocomment && pattern.charAt(0) === "#") {
      return false;
    }
    return new Minimatch(pattern, options).match(p);
  };
  exports.minimatch = minimatch;
  var starDotExtRE = /^\*+([^+@!?\*\[\(]*)$/;
  var starDotExtTest = (ext2) => (f) => !f.startsWith(".") && f.endsWith(ext2);
  var starDotExtTestDot = (ext2) => (f) => f.endsWith(ext2);
  var starDotExtTestNocase = (ext2) => {
    ext2 = ext2.toLowerCase();
    return (f) => !f.startsWith(".") && f.toLowerCase().endsWith(ext2);
  };
  var starDotExtTestNocaseDot = (ext2) => {
    ext2 = ext2.toLowerCase();
    return (f) => f.toLowerCase().endsWith(ext2);
  };
  var starDotStarRE = /^\*+\.\*+$/;
  var starDotStarTest = (f) => !f.startsWith(".") && f.includes(".");
  var starDotStarTestDot = (f) => f !== "." && f !== ".." && f.includes(".");
  var dotStarRE = /^\.\*+$/;
  var dotStarTest = (f) => f !== "." && f !== ".." && f.startsWith(".");
  var starRE = /^\*+$/;
  var starTest = (f) => f.length !== 0 && !f.startsWith(".");
  var starTestDot = (f) => f.length !== 0 && f !== "." && f !== "..";
  var qmarksRE = /^\?+([^+@!?\*\[\(]*)?$/;
  var qmarksTestNocase = ([$0, ext2 = ""]) => {
    const noext = qmarksTestNoExt([$0]);
    if (!ext2)
      return noext;
    ext2 = ext2.toLowerCase();
    return (f) => noext(f) && f.toLowerCase().endsWith(ext2);
  };
  var qmarksTestNocaseDot = ([$0, ext2 = ""]) => {
    const noext = qmarksTestNoExtDot([$0]);
    if (!ext2)
      return noext;
    ext2 = ext2.toLowerCase();
    return (f) => noext(f) && f.toLowerCase().endsWith(ext2);
  };
  var qmarksTestDot = ([$0, ext2 = ""]) => {
    const noext = qmarksTestNoExtDot([$0]);
    return !ext2 ? noext : (f) => noext(f) && f.endsWith(ext2);
  };
  var qmarksTest = ([$0, ext2 = ""]) => {
    const noext = qmarksTestNoExt([$0]);
    return !ext2 ? noext : (f) => noext(f) && f.endsWith(ext2);
  };
  var qmarksTestNoExt = ([$0]) => {
    const len = $0.length;
    return (f) => f.length === len && !f.startsWith(".");
  };
  var qmarksTestNoExtDot = ([$0]) => {
    const len = $0.length;
    return (f) => f.length === len && f !== "." && f !== "..";
  };
  var defaultPlatform = typeof process === "object" && process ? typeof process.env === "object" && process.env && process.env.__MINIMATCH_TESTING_PLATFORM__ || process.platform : "posix";
  var path = {
    win32: { sep: "\\" },
    posix: { sep: "/" }
  };
  exports.sep = defaultPlatform === "win32" ? path.win32.sep : path.posix.sep;
  exports.minimatch.sep = exports.sep;
  exports.GLOBSTAR = Symbol("globstar **");
  exports.minimatch.GLOBSTAR = exports.GLOBSTAR;
  var qmark = "[^/]";
  var star = qmark + "*?";
  var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
  var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
  var filter = (pattern, options = {}) => (p) => (0, exports.minimatch)(p, pattern, options);
  exports.filter = filter;
  exports.minimatch.filter = exports.filter;
  var ext = (a, b = {}) => Object.assign({}, a, b);
  var defaults = (def) => {
    if (!def || typeof def !== "object" || !Object.keys(def).length) {
      return exports.minimatch;
    }
    const orig = exports.minimatch;
    const m = (p, pattern, options = {}) => orig(p, pattern, ext(def, options));
    return Object.assign(m, {
      Minimatch: class Minimatch2 extends orig.Minimatch {
        constructor(pattern, options = {}) {
          super(pattern, ext(def, options));
        }
        static defaults(options) {
          return orig.defaults(ext(def, options)).Minimatch;
        }
      },
      AST: class AST extends orig.AST {
        constructor(type, parent, options = {}) {
          super(type, parent, ext(def, options));
        }
        static fromGlob(pattern, options = {}) {
          return orig.AST.fromGlob(pattern, ext(def, options));
        }
      },
      unescape: (s, options = {}) => orig.unescape(s, ext(def, options)),
      escape: (s, options = {}) => orig.escape(s, ext(def, options)),
      filter: (pattern, options = {}) => orig.filter(pattern, ext(def, options)),
      defaults: (options) => orig.defaults(ext(def, options)),
      makeRe: (pattern, options = {}) => orig.makeRe(pattern, ext(def, options)),
      braceExpand: (pattern, options = {}) => orig.braceExpand(pattern, ext(def, options)),
      match: (list, pattern, options = {}) => orig.match(list, pattern, ext(def, options)),
      sep: orig.sep,
      GLOBSTAR: exports.GLOBSTAR
    });
  };
  exports.defaults = defaults;
  exports.minimatch.defaults = exports.defaults;
  var braceExpand = (pattern, options = {}) => {
    (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);
    if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
      return [pattern];
    }
    return (0, brace_expansion_1.default)(pattern);
  };
  exports.braceExpand = braceExpand;
  exports.minimatch.braceExpand = exports.braceExpand;
  var makeRe = (pattern, options = {}) => new Minimatch(pattern, options).makeRe();
  exports.makeRe = makeRe;
  exports.minimatch.makeRe = exports.makeRe;
  var match = (list, pattern, options = {}) => {
    const mm = new Minimatch(pattern, options);
    list = list.filter((f) => mm.match(f));
    if (mm.options.nonull && !list.length) {
      list.push(pattern);
    }
    return list;
  };
  exports.match = match;
  exports.minimatch.match = exports.match;
  var globMagic = /[?*]|[+@!]\(.*?\)|\[|\]/;
  var regExpEscape = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");

  class Minimatch {
    options;
    set;
    pattern;
    windowsPathsNoEscape;
    nonegate;
    negate;
    comment;
    empty;
    preserveMultipleSlashes;
    partial;
    globSet;
    globParts;
    nocase;
    isWindows;
    platform;
    windowsNoMagicRoot;
    regexp;
    constructor(pattern, options = {}) {
      (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);
      options = options || {};
      this.options = options;
      this.pattern = pattern;
      this.platform = options.platform || defaultPlatform;
      this.isWindows = this.platform === "win32";
      this.windowsPathsNoEscape = !!options.windowsPathsNoEscape || options.allowWindowsEscape === false;
      if (this.windowsPathsNoEscape) {
        this.pattern = this.pattern.replace(/\\/g, "/");
      }
      this.preserveMultipleSlashes = !!options.preserveMultipleSlashes;
      this.regexp = null;
      this.negate = false;
      this.nonegate = !!options.nonegate;
      this.comment = false;
      this.empty = false;
      this.partial = !!options.partial;
      this.nocase = !!this.options.nocase;
      this.windowsNoMagicRoot = options.windowsNoMagicRoot !== undefined ? options.windowsNoMagicRoot : !!(this.isWindows && this.nocase);
      this.globSet = [];
      this.globParts = [];
      this.set = [];
      this.make();
    }
    hasMagic() {
      if (this.options.magicalBraces && this.set.length > 1) {
        return true;
      }
      for (const pattern of this.set) {
        for (const part of pattern) {
          if (typeof part !== "string")
            return true;
        }
      }
      return false;
    }
    debug(..._) {
    }
    make() {
      const pattern = this.pattern;
      const options = this.options;
      if (!options.nocomment && pattern.charAt(0) === "#") {
        this.comment = true;
        return;
      }
      if (!pattern) {
        this.empty = true;
        return;
      }
      this.parseNegate();
      this.globSet = [...new Set(this.braceExpand())];
      if (options.debug) {
        this.debug = (...args) => console.error(...args);
      }
      this.debug(this.pattern, this.globSet);
      const rawGlobParts = this.globSet.map((s) => this.slashSplit(s));
      this.globParts = this.preprocess(rawGlobParts);
      this.debug(this.pattern, this.globParts);
      let set = this.globParts.map((s, _, __) => {
        if (this.isWindows && this.windowsNoMagicRoot) {
          const isUNC = s[0] === "" && s[1] === "" && (s[2] === "?" || !globMagic.test(s[2])) && !globMagic.test(s[3]);
          const isDrive = /^[a-z]:/i.test(s[0]);
          if (isUNC) {
            return [...s.slice(0, 4), ...s.slice(4).map((ss) => this.parse(ss))];
          } else if (isDrive) {
            return [s[0], ...s.slice(1).map((ss) => this.parse(ss))];
          }
        }
        return s.map((ss) => this.parse(ss));
      });
      this.debug(this.pattern, set);
      this.set = set.filter((s) => s.indexOf(false) === -1);
      if (this.isWindows) {
        for (let i = 0;i < this.set.length; i++) {
          const p = this.set[i];
          if (p[0] === "" && p[1] === "" && this.globParts[i][2] === "?" && typeof p[3] === "string" && /^[a-z]:$/i.test(p[3])) {
            p[2] = "?";
          }
        }
      }
      this.debug(this.pattern, this.set);
    }
    preprocess(globParts) {
      if (this.options.noglobstar) {
        for (let i = 0;i < globParts.length; i++) {
          for (let j = 0;j < globParts[i].length; j++) {
            if (globParts[i][j] === "**") {
              globParts[i][j] = "*";
            }
          }
        }
      }
      const { optimizationLevel = 1 } = this.options;
      if (optimizationLevel >= 2) {
        globParts = this.firstPhasePreProcess(globParts);
        globParts = this.secondPhasePreProcess(globParts);
      } else if (optimizationLevel >= 1) {
        globParts = this.levelOneOptimize(globParts);
      } else {
        globParts = this.adjascentGlobstarOptimize(globParts);
      }
      return globParts;
    }
    adjascentGlobstarOptimize(globParts) {
      return globParts.map((parts) => {
        let gs = -1;
        while ((gs = parts.indexOf("**", gs + 1)) !== -1) {
          let i = gs;
          while (parts[i + 1] === "**") {
            i++;
          }
          if (i !== gs) {
            parts.splice(gs, i - gs);
          }
        }
        return parts;
      });
    }
    levelOneOptimize(globParts) {
      return globParts.map((parts) => {
        parts = parts.reduce((set, part) => {
          const prev = set[set.length - 1];
          if (part === "**" && prev === "**") {
            return set;
          }
          if (part === "..") {
            if (prev && prev !== ".." && prev !== "." && prev !== "**") {
              set.pop();
              return set;
            }
          }
          set.push(part);
          return set;
        }, []);
        return parts.length === 0 ? [""] : parts;
      });
    }
    levelTwoFileOptimize(parts) {
      if (!Array.isArray(parts)) {
        parts = this.slashSplit(parts);
      }
      let didSomething = false;
      do {
        didSomething = false;
        if (!this.preserveMultipleSlashes) {
          for (let i = 1;i < parts.length - 1; i++) {
            const p = parts[i];
            if (i === 1 && p === "" && parts[0] === "")
              continue;
            if (p === "." || p === "") {
              didSomething = true;
              parts.splice(i, 1);
              i--;
            }
          }
          if (parts[0] === "." && parts.length === 2 && (parts[1] === "." || parts[1] === "")) {
            didSomething = true;
            parts.pop();
          }
        }
        let dd = 0;
        while ((dd = parts.indexOf("..", dd + 1)) !== -1) {
          const p = parts[dd - 1];
          if (p && p !== "." && p !== ".." && p !== "**") {
            didSomething = true;
            parts.splice(dd - 1, 2);
            dd -= 2;
          }
        }
      } while (didSomething);
      return parts.length === 0 ? [""] : parts;
    }
    firstPhasePreProcess(globParts) {
      let didSomething = false;
      do {
        didSomething = false;
        for (let parts of globParts) {
          let gs = -1;
          while ((gs = parts.indexOf("**", gs + 1)) !== -1) {
            let gss = gs;
            while (parts[gss + 1] === "**") {
              gss++;
            }
            if (gss > gs) {
              parts.splice(gs + 1, gss - gs);
            }
            let next = parts[gs + 1];
            const p = parts[gs + 2];
            const p2 = parts[gs + 3];
            if (next !== "..")
              continue;
            if (!p || p === "." || p === ".." || !p2 || p2 === "." || p2 === "..") {
              continue;
            }
            didSomething = true;
            parts.splice(gs, 1);
            const other = parts.slice(0);
            other[gs] = "**";
            globParts.push(other);
            gs--;
          }
          if (!this.preserveMultipleSlashes) {
            for (let i = 1;i < parts.length - 1; i++) {
              const p = parts[i];
              if (i === 1 && p === "" && parts[0] === "")
                continue;
              if (p === "." || p === "") {
                didSomething = true;
                parts.splice(i, 1);
                i--;
              }
            }
            if (parts[0] === "." && parts.length === 2 && (parts[1] === "." || parts[1] === "")) {
              didSomething = true;
              parts.pop();
            }
          }
          let dd = 0;
          while ((dd = parts.indexOf("..", dd + 1)) !== -1) {
            const p = parts[dd - 1];
            if (p && p !== "." && p !== ".." && p !== "**") {
              didSomething = true;
              const needDot = dd === 1 && parts[dd + 1] === "**";
              const splin = needDot ? ["."] : [];
              parts.splice(dd - 1, 2, ...splin);
              if (parts.length === 0)
                parts.push("");
              dd -= 2;
            }
          }
        }
      } while (didSomething);
      return globParts;
    }
    secondPhasePreProcess(globParts) {
      for (let i = 0;i < globParts.length - 1; i++) {
        for (let j = i + 1;j < globParts.length; j++) {
          const matched = this.partsMatch(globParts[i], globParts[j], !this.preserveMultipleSlashes);
          if (matched) {
            globParts[i] = [];
            globParts[j] = matched;
            break;
          }
        }
      }
      return globParts.filter((gs) => gs.length);
    }
    partsMatch(a, b, emptyGSMatch = false) {
      let ai = 0;
      let bi = 0;
      let result = [];
      let which = "";
      while (ai < a.length && bi < b.length) {
        if (a[ai] === b[bi]) {
          result.push(which === "b" ? b[bi] : a[ai]);
          ai++;
          bi++;
        } else if (emptyGSMatch && a[ai] === "**" && b[bi] === a[ai + 1]) {
          result.push(a[ai]);
          ai++;
        } else if (emptyGSMatch && b[bi] === "**" && a[ai] === b[bi + 1]) {
          result.push(b[bi]);
          bi++;
        } else if (a[ai] === "*" && b[bi] && (this.options.dot || !b[bi].startsWith(".")) && b[bi] !== "**") {
          if (which === "b")
            return false;
          which = "a";
          result.push(a[ai]);
          ai++;
          bi++;
        } else if (b[bi] === "*" && a[ai] && (this.options.dot || !a[ai].startsWith(".")) && a[ai] !== "**") {
          if (which === "a")
            return false;
          which = "b";
          result.push(b[bi]);
          ai++;
          bi++;
        } else {
          return false;
        }
      }
      return a.length === b.length && result;
    }
    parseNegate() {
      if (this.nonegate)
        return;
      const pattern = this.pattern;
      let negate = false;
      let negateOffset = 0;
      for (let i = 0;i < pattern.length && pattern.charAt(i) === "!"; i++) {
        negate = !negate;
        negateOffset++;
      }
      if (negateOffset)
        this.pattern = pattern.slice(negateOffset);
      this.negate = negate;
    }
    matchOne(file, pattern, partial = false) {
      const options = this.options;
      if (this.isWindows) {
        const fileDrive = typeof file[0] === "string" && /^[a-z]:$/i.test(file[0]);
        const fileUNC = !fileDrive && file[0] === "" && file[1] === "" && file[2] === "?" && /^[a-z]:$/i.test(file[3]);
        const patternDrive = typeof pattern[0] === "string" && /^[a-z]:$/i.test(pattern[0]);
        const patternUNC = !patternDrive && pattern[0] === "" && pattern[1] === "" && pattern[2] === "?" && typeof pattern[3] === "string" && /^[a-z]:$/i.test(pattern[3]);
        const fdi = fileUNC ? 3 : fileDrive ? 0 : undefined;
        const pdi = patternUNC ? 3 : patternDrive ? 0 : undefined;
        if (typeof fdi === "number" && typeof pdi === "number") {
          const [fd, pd] = [file[fdi], pattern[pdi]];
          if (fd.toLowerCase() === pd.toLowerCase()) {
            pattern[pdi] = fd;
            if (pdi > fdi) {
              pattern = pattern.slice(pdi);
            } else if (fdi > pdi) {
              file = file.slice(fdi);
            }
          }
        }
      }
      const { optimizationLevel = 1 } = this.options;
      if (optimizationLevel >= 2) {
        file = this.levelTwoFileOptimize(file);
      }
      this.debug("matchOne", this, { file, pattern });
      this.debug("matchOne", file.length, pattern.length);
      for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length;fi < fl && pi < pl; fi++, pi++) {
        this.debug("matchOne loop");
        var p = pattern[pi];
        var f = file[fi];
        this.debug(pattern, p, f);
        if (p === false) {
          return false;
        }
        if (p === exports.GLOBSTAR) {
          this.debug("GLOBSTAR", [pattern, p, f]);
          var fr = fi;
          var pr = pi + 1;
          if (pr === pl) {
            this.debug("** at the end");
            for (;fi < fl; fi++) {
              if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".")
                return false;
            }
            return true;
          }
          while (fr < fl) {
            var swallowee = file[fr];
            this.debug(`
globstar while`, file, fr, pattern, pr, swallowee);
            if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
              this.debug("globstar found match!", fr, fl, swallowee);
              return true;
            } else {
              if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
                this.debug("dot detected!", file, fr, pattern, pr);
                break;
              }
              this.debug("globstar swallow a segment, and continue");
              fr++;
            }
          }
          if (partial) {
            this.debug(`
>>> no match, partial?`, file, fr, pattern, pr);
            if (fr === fl) {
              return true;
            }
          }
          return false;
        }
        let hit;
        if (typeof p === "string") {
          hit = f === p;
          this.debug("string match", p, f, hit);
        } else {
          hit = p.test(f);
          this.debug("pattern match", p, f, hit);
        }
        if (!hit)
          return false;
      }
      if (fi === fl && pi === pl) {
        return true;
      } else if (fi === fl) {
        return partial;
      } else if (pi === pl) {
        return fi === fl - 1 && file[fi] === "";
      } else {
        throw new Error("wtf?");
      }
    }
    braceExpand() {
      return (0, exports.braceExpand)(this.pattern, this.options);
    }
    parse(pattern) {
      (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);
      const options = this.options;
      if (pattern === "**")
        return exports.GLOBSTAR;
      if (pattern === "")
        return "";
      let m;
      let fastTest = null;
      if (m = pattern.match(starRE)) {
        fastTest = options.dot ? starTestDot : starTest;
      } else if (m = pattern.match(starDotExtRE)) {
        fastTest = (options.nocase ? options.dot ? starDotExtTestNocaseDot : starDotExtTestNocase : options.dot ? starDotExtTestDot : starDotExtTest)(m[1]);
      } else if (m = pattern.match(qmarksRE)) {
        fastTest = (options.nocase ? options.dot ? qmarksTestNocaseDot : qmarksTestNocase : options.dot ? qmarksTestDot : qmarksTest)(m);
      } else if (m = pattern.match(starDotStarRE)) {
        fastTest = options.dot ? starDotStarTestDot : starDotStarTest;
      } else if (m = pattern.match(dotStarRE)) {
        fastTest = dotStarTest;
      }
      const re = ast_js_1.AST.fromGlob(pattern, this.options).toMMPattern();
      if (fastTest && typeof re === "object") {
        Reflect.defineProperty(re, "test", { value: fastTest });
      }
      return re;
    }
    makeRe() {
      if (this.regexp || this.regexp === false)
        return this.regexp;
      const set = this.set;
      if (!set.length) {
        this.regexp = false;
        return this.regexp;
      }
      const options = this.options;
      const twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
      const flags = new Set(options.nocase ? ["i"] : []);
      let re = set.map((pattern) => {
        const pp = pattern.map((p) => {
          if (p instanceof RegExp) {
            for (const f of p.flags.split(""))
              flags.add(f);
          }
          return typeof p === "string" ? regExpEscape(p) : p === exports.GLOBSTAR ? exports.GLOBSTAR : p._src;
        });
        pp.forEach((p, i) => {
          const next = pp[i + 1];
          const prev = pp[i - 1];
          if (p !== exports.GLOBSTAR || prev === exports.GLOBSTAR) {
            return;
          }
          if (prev === undefined) {
            if (next !== undefined && next !== exports.GLOBSTAR) {
              pp[i + 1] = "(?:\\/|" + twoStar + "\\/)?" + next;
            } else {
              pp[i] = twoStar;
            }
          } else if (next === undefined) {
            pp[i - 1] = prev + "(?:\\/|" + twoStar + ")?";
          } else if (next !== exports.GLOBSTAR) {
            pp[i - 1] = prev + "(?:\\/|\\/" + twoStar + "\\/)" + next;
            pp[i + 1] = exports.GLOBSTAR;
          }
        });
        return pp.filter((p) => p !== exports.GLOBSTAR).join("/");
      }).join("|");
      const [open, close] = set.length > 1 ? ["(?:", ")"] : ["", ""];
      re = "^" + open + re + close + "$";
      if (this.negate)
        re = "^(?!" + re + ").+$";
      try {
        this.regexp = new RegExp(re, [...flags].join(""));
      } catch (ex) {
        this.regexp = false;
      }
      return this.regexp;
    }
    slashSplit(p) {
      if (this.preserveMultipleSlashes) {
        return p.split("/");
      } else if (this.isWindows && /^\/\/[^\/]+/.test(p)) {
        return ["", ...p.split(/\/+/)];
      } else {
        return p.split(/\/+/);
      }
    }
    match(f, partial = this.partial) {
      this.debug("match", f, this.pattern);
      if (this.comment) {
        return false;
      }
      if (this.empty) {
        return f === "";
      }
      if (f === "/" && partial) {
        return true;
      }
      const options = this.options;
      if (this.isWindows) {
        f = f.split("\\").join("/");
      }
      const ff = this.slashSplit(f);
      this.debug(this.pattern, "split", ff);
      const set = this.set;
      this.debug(this.pattern, "set", set);
      let filename = ff[ff.length - 1];
      if (!filename) {
        for (let i = ff.length - 2;!filename && i >= 0; i--) {
          filename = ff[i];
        }
      }
      for (let i = 0;i < set.length; i++) {
        const pattern = set[i];
        let file = ff;
        if (options.matchBase && pattern.length === 1) {
          file = [filename];
        }
        const hit = this.matchOne(file, pattern, partial);
        if (hit) {
          if (options.flipNegate) {
            return true;
          }
          return !this.negate;
        }
      }
      if (options.flipNegate) {
        return false;
      }
      return this.negate;
    }
    static defaults(def) {
      return exports.minimatch.defaults(def).Minimatch;
    }
  }
  exports.Minimatch = Minimatch;
  var ast_js_2 = require_ast();
  Object.defineProperty(exports, "AST", { enumerable: true, get: function() {
    return ast_js_2.AST;
  } });
  var escape_js_2 = require_escape();
  Object.defineProperty(exports, "escape", { enumerable: true, get: function() {
    return escape_js_2.escape;
  } });
  var unescape_js_2 = require_unescape();
  Object.defineProperty(exports, "unescape", { enumerable: true, get: function() {
    return unescape_js_2.unescape;
  } });
  exports.minimatch.AST = ast_js_1.AST;
  exports.minimatch.Minimatch = Minimatch;
  exports.minimatch.escape = escape_js_1.escape;
  exports.minimatch.unescape = unescape_js_1.unescape;
});

// node_modules/lru-cache/dist/commonjs/index.js
var require_commonjs2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.LRUCache = undefined;
  var perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
  var warned = new Set;
  var PROCESS = typeof process === "object" && !!process ? process : {};
  var emitWarning = (msg, type, code, fn) => {
    typeof PROCESS.emitWarning === "function" ? PROCESS.emitWarning(msg, type, code, fn) : console.error(`[${code}] ${type}: ${msg}`);
  };
  var AC = globalThis.AbortController;
  var AS = globalThis.AbortSignal;
  if (typeof AC === "undefined") {
    AS = class AbortSignal {
      onabort;
      _onabort = [];
      reason;
      aborted = false;
      addEventListener(_, fn) {
        this._onabort.push(fn);
      }
    };
    AC = class AbortController {
      constructor() {
        warnACPolyfill();
      }
      signal = new AS;
      abort(reason) {
        if (this.signal.aborted)
          return;
        this.signal.reason = reason;
        this.signal.aborted = true;
        for (const fn of this.signal._onabort) {
          fn(reason);
        }
        this.signal.onabort?.(reason);
      }
    };
    let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== "1";
    const warnACPolyfill = () => {
      if (!printACPolyfillWarning)
        return;
      printACPolyfillWarning = false;
      emitWarning("AbortController is not defined. If using lru-cache in " + "node 14, load an AbortController polyfill from the " + "`node-abort-controller` package. A minimal polyfill is " + "provided for use by LRUCache.fetch(), but it should not be " + "relied upon in other contexts (eg, passing it to other APIs that " + "use AbortController/AbortSignal might have undesirable effects). " + "You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", warnACPolyfill);
    };
  }
  var shouldWarn = (code) => !warned.has(code);
  var TYPE = Symbol("type");
  var isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
  var getUintArray = (max) => !isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;

  class ZeroArray extends Array {
    constructor(size) {
      super(size);
      this.fill(0);
    }
  }

  class Stack {
    heap;
    length;
    static #constructing = false;
    static create(max) {
      const HeapCls = getUintArray(max);
      if (!HeapCls)
        return [];
      Stack.#constructing = true;
      const s = new Stack(max, HeapCls);
      Stack.#constructing = false;
      return s;
    }
    constructor(max, HeapCls) {
      if (!Stack.#constructing) {
        throw new TypeError("instantiate Stack using Stack.create(n)");
      }
      this.heap = new HeapCls(max);
      this.length = 0;
    }
    push(n) {
      this.heap[this.length++] = n;
    }
    pop() {
      return this.heap[--this.length];
    }
  }

  class LRUCache {
    #max;
    #maxSize;
    #dispose;
    #onInsert;
    #disposeAfter;
    #fetchMethod;
    #memoMethod;
    ttl;
    ttlResolution;
    ttlAutopurge;
    updateAgeOnGet;
    updateAgeOnHas;
    allowStale;
    noDisposeOnSet;
    noUpdateTTL;
    maxEntrySize;
    sizeCalculation;
    noDeleteOnFetchRejection;
    noDeleteOnStaleGet;
    allowStaleOnFetchAbort;
    allowStaleOnFetchRejection;
    ignoreFetchAbort;
    #size;
    #calculatedSize;
    #keyMap;
    #keyList;
    #valList;
    #next;
    #prev;
    #head;
    #tail;
    #free;
    #disposed;
    #sizes;
    #starts;
    #ttls;
    #hasDispose;
    #hasFetchMethod;
    #hasDisposeAfter;
    #hasOnInsert;
    static unsafeExposeInternals(c) {
      return {
        starts: c.#starts,
        ttls: c.#ttls,
        sizes: c.#sizes,
        keyMap: c.#keyMap,
        keyList: c.#keyList,
        valList: c.#valList,
        next: c.#next,
        prev: c.#prev,
        get head() {
          return c.#head;
        },
        get tail() {
          return c.#tail;
        },
        free: c.#free,
        isBackgroundFetch: (p) => c.#isBackgroundFetch(p),
        backgroundFetch: (k, index, options, context) => c.#backgroundFetch(k, index, options, context),
        moveToTail: (index) => c.#moveToTail(index),
        indexes: (options) => c.#indexes(options),
        rindexes: (options) => c.#rindexes(options),
        isStale: (index) => c.#isStale(index)
      };
    }
    get max() {
      return this.#max;
    }
    get maxSize() {
      return this.#maxSize;
    }
    get calculatedSize() {
      return this.#calculatedSize;
    }
    get size() {
      return this.#size;
    }
    get fetchMethod() {
      return this.#fetchMethod;
    }
    get memoMethod() {
      return this.#memoMethod;
    }
    get dispose() {
      return this.#dispose;
    }
    get onInsert() {
      return this.#onInsert;
    }
    get disposeAfter() {
      return this.#disposeAfter;
    }
    constructor(options) {
      const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, onInsert, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, memoMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort } = options;
      if (max !== 0 && !isPosInt(max)) {
        throw new TypeError("max option must be a nonnegative integer");
      }
      const UintArray = max ? getUintArray(max) : Array;
      if (!UintArray) {
        throw new Error("invalid max value: " + max);
      }
      this.#max = max;
      this.#maxSize = maxSize;
      this.maxEntrySize = maxEntrySize || this.#maxSize;
      this.sizeCalculation = sizeCalculation;
      if (this.sizeCalculation) {
        if (!this.#maxSize && !this.maxEntrySize) {
          throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
        }
        if (typeof this.sizeCalculation !== "function") {
          throw new TypeError("sizeCalculation set to non-function");
        }
      }
      if (memoMethod !== undefined && typeof memoMethod !== "function") {
        throw new TypeError("memoMethod must be a function if defined");
      }
      this.#memoMethod = memoMethod;
      if (fetchMethod !== undefined && typeof fetchMethod !== "function") {
        throw new TypeError("fetchMethod must be a function if specified");
      }
      this.#fetchMethod = fetchMethod;
      this.#hasFetchMethod = !!fetchMethod;
      this.#keyMap = new Map;
      this.#keyList = new Array(max).fill(undefined);
      this.#valList = new Array(max).fill(undefined);
      this.#next = new UintArray(max);
      this.#prev = new UintArray(max);
      this.#head = 0;
      this.#tail = 0;
      this.#free = Stack.create(max);
      this.#size = 0;
      this.#calculatedSize = 0;
      if (typeof dispose === "function") {
        this.#dispose = dispose;
      }
      if (typeof onInsert === "function") {
        this.#onInsert = onInsert;
      }
      if (typeof disposeAfter === "function") {
        this.#disposeAfter = disposeAfter;
        this.#disposed = [];
      } else {
        this.#disposeAfter = undefined;
        this.#disposed = undefined;
      }
      this.#hasDispose = !!this.#dispose;
      this.#hasOnInsert = !!this.#onInsert;
      this.#hasDisposeAfter = !!this.#disposeAfter;
      this.noDisposeOnSet = !!noDisposeOnSet;
      this.noUpdateTTL = !!noUpdateTTL;
      this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
      this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
      this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
      this.ignoreFetchAbort = !!ignoreFetchAbort;
      if (this.maxEntrySize !== 0) {
        if (this.#maxSize !== 0) {
          if (!isPosInt(this.#maxSize)) {
            throw new TypeError("maxSize must be a positive integer if specified");
          }
        }
        if (!isPosInt(this.maxEntrySize)) {
          throw new TypeError("maxEntrySize must be a positive integer if specified");
        }
        this.#initializeSizeTracking();
      }
      this.allowStale = !!allowStale;
      this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
      this.updateAgeOnGet = !!updateAgeOnGet;
      this.updateAgeOnHas = !!updateAgeOnHas;
      this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
      this.ttlAutopurge = !!ttlAutopurge;
      this.ttl = ttl || 0;
      if (this.ttl) {
        if (!isPosInt(this.ttl)) {
          throw new TypeError("ttl must be a positive integer if specified");
        }
        this.#initializeTTLTracking();
      }
      if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {
        throw new TypeError("At least one of max, maxSize, or ttl is required");
      }
      if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {
        const code = "LRU_CACHE_UNBOUNDED";
        if (shouldWarn(code)) {
          warned.add(code);
          const msg = "TTL caching without ttlAutopurge, max, or maxSize can " + "result in unbounded memory consumption.";
          emitWarning(msg, "UnboundedCacheWarning", code, LRUCache);
        }
      }
    }
    getRemainingTTL(key) {
      return this.#keyMap.has(key) ? Infinity : 0;
    }
    #initializeTTLTracking() {
      const ttls = new ZeroArray(this.#max);
      const starts = new ZeroArray(this.#max);
      this.#ttls = ttls;
      this.#starts = starts;
      this.#setItemTTL = (index, ttl, start = perf.now()) => {
        starts[index] = ttl !== 0 ? start : 0;
        ttls[index] = ttl;
        if (ttl !== 0 && this.ttlAutopurge) {
          const t = setTimeout(() => {
            if (this.#isStale(index)) {
              this.#delete(this.#keyList[index], "expire");
            }
          }, ttl + 1);
          if (t.unref) {
            t.unref();
          }
        }
      };
      this.#updateItemAge = (index) => {
        starts[index] = ttls[index] !== 0 ? perf.now() : 0;
      };
      this.#statusTTL = (status, index) => {
        if (ttls[index]) {
          const ttl = ttls[index];
          const start = starts[index];
          if (!ttl || !start)
            return;
          status.ttl = ttl;
          status.start = start;
          status.now = cachedNow || getNow();
          const age = status.now - start;
          status.remainingTTL = ttl - age;
        }
      };
      let cachedNow = 0;
      const getNow = () => {
        const n = perf.now();
        if (this.ttlResolution > 0) {
          cachedNow = n;
          const t = setTimeout(() => cachedNow = 0, this.ttlResolution);
          if (t.unref) {
            t.unref();
          }
        }
        return n;
      };
      this.getRemainingTTL = (key) => {
        const index = this.#keyMap.get(key);
        if (index === undefined) {
          return 0;
        }
        const ttl = ttls[index];
        const start = starts[index];
        if (!ttl || !start) {
          return Infinity;
        }
        const age = (cachedNow || getNow()) - start;
        return ttl - age;
      };
      this.#isStale = (index) => {
        const s = starts[index];
        const t = ttls[index];
        return !!t && !!s && (cachedNow || getNow()) - s > t;
      };
    }
    #updateItemAge = () => {
    };
    #statusTTL = () => {
    };
    #setItemTTL = () => {
    };
    #isStale = () => false;
    #initializeSizeTracking() {
      const sizes = new ZeroArray(this.#max);
      this.#calculatedSize = 0;
      this.#sizes = sizes;
      this.#removeItemSize = (index) => {
        this.#calculatedSize -= sizes[index];
        sizes[index] = 0;
      };
      this.#requireSize = (k, v, size, sizeCalculation) => {
        if (this.#isBackgroundFetch(v)) {
          return 0;
        }
        if (!isPosInt(size)) {
          if (sizeCalculation) {
            if (typeof sizeCalculation !== "function") {
              throw new TypeError("sizeCalculation must be a function");
            }
            size = sizeCalculation(v, k);
            if (!isPosInt(size)) {
              throw new TypeError("sizeCalculation return invalid (expect positive integer)");
            }
          } else {
            throw new TypeError("invalid size value (must be positive integer). " + "When maxSize or maxEntrySize is used, sizeCalculation " + "or size must be set.");
          }
        }
        return size;
      };
      this.#addItemSize = (index, size, status) => {
        sizes[index] = size;
        if (this.#maxSize) {
          const maxSize = this.#maxSize - sizes[index];
          while (this.#calculatedSize > maxSize) {
            this.#evict(true);
          }
        }
        this.#calculatedSize += sizes[index];
        if (status) {
          status.entrySize = size;
          status.totalCalculatedSize = this.#calculatedSize;
        }
      };
    }
    #removeItemSize = (_i) => {
    };
    #addItemSize = (_i, _s, _st) => {
    };
    #requireSize = (_k, _v, size, sizeCalculation) => {
      if (size || sizeCalculation) {
        throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
      }
      return 0;
    };
    *#indexes({ allowStale = this.allowStale } = {}) {
      if (this.#size) {
        for (let i = this.#tail;; ) {
          if (!this.#isValidIndex(i)) {
            break;
          }
          if (allowStale || !this.#isStale(i)) {
            yield i;
          }
          if (i === this.#head) {
            break;
          } else {
            i = this.#prev[i];
          }
        }
      }
    }
    *#rindexes({ allowStale = this.allowStale } = {}) {
      if (this.#size) {
        for (let i = this.#head;; ) {
          if (!this.#isValidIndex(i)) {
            break;
          }
          if (allowStale || !this.#isStale(i)) {
            yield i;
          }
          if (i === this.#tail) {
            break;
          } else {
            i = this.#next[i];
          }
        }
      }
    }
    #isValidIndex(index) {
      return index !== undefined && this.#keyMap.get(this.#keyList[index]) === index;
    }
    *entries() {
      for (const i of this.#indexes()) {
        if (this.#valList[i] !== undefined && this.#keyList[i] !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield [this.#keyList[i], this.#valList[i]];
        }
      }
    }
    *rentries() {
      for (const i of this.#rindexes()) {
        if (this.#valList[i] !== undefined && this.#keyList[i] !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield [this.#keyList[i], this.#valList[i]];
        }
      }
    }
    *keys() {
      for (const i of this.#indexes()) {
        const k = this.#keyList[i];
        if (k !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield k;
        }
      }
    }
    *rkeys() {
      for (const i of this.#rindexes()) {
        const k = this.#keyList[i];
        if (k !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield k;
        }
      }
    }
    *values() {
      for (const i of this.#indexes()) {
        const v = this.#valList[i];
        if (v !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield this.#valList[i];
        }
      }
    }
    *rvalues() {
      for (const i of this.#rindexes()) {
        const v = this.#valList[i];
        if (v !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield this.#valList[i];
        }
      }
    }
    [Symbol.iterator]() {
      return this.entries();
    }
    [Symbol.toStringTag] = "LRUCache";
    find(fn, getOptions = {}) {
      for (const i of this.#indexes()) {
        const v = this.#valList[i];
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
        if (value === undefined)
          continue;
        if (fn(value, this.#keyList[i], this)) {
          return this.get(this.#keyList[i], getOptions);
        }
      }
    }
    forEach(fn, thisp = this) {
      for (const i of this.#indexes()) {
        const v = this.#valList[i];
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
        if (value === undefined)
          continue;
        fn.call(thisp, value, this.#keyList[i], this);
      }
    }
    rforEach(fn, thisp = this) {
      for (const i of this.#rindexes()) {
        const v = this.#valList[i];
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
        if (value === undefined)
          continue;
        fn.call(thisp, value, this.#keyList[i], this);
      }
    }
    purgeStale() {
      let deleted = false;
      for (const i of this.#rindexes({ allowStale: true })) {
        if (this.#isStale(i)) {
          this.#delete(this.#keyList[i], "expire");
          deleted = true;
        }
      }
      return deleted;
    }
    info(key) {
      const i = this.#keyMap.get(key);
      if (i === undefined)
        return;
      const v = this.#valList[i];
      const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === undefined)
        return;
      const entry = { value };
      if (this.#ttls && this.#starts) {
        const ttl = this.#ttls[i];
        const start = this.#starts[i];
        if (ttl && start) {
          const remain = ttl - (perf.now() - start);
          entry.ttl = remain;
          entry.start = Date.now();
        }
      }
      if (this.#sizes) {
        entry.size = this.#sizes[i];
      }
      return entry;
    }
    dump() {
      const arr = [];
      for (const i of this.#indexes({ allowStale: true })) {
        const key = this.#keyList[i];
        const v = this.#valList[i];
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
        if (value === undefined || key === undefined)
          continue;
        const entry = { value };
        if (this.#ttls && this.#starts) {
          entry.ttl = this.#ttls[i];
          const age = perf.now() - this.#starts[i];
          entry.start = Math.floor(Date.now() - age);
        }
        if (this.#sizes) {
          entry.size = this.#sizes[i];
        }
        arr.unshift([key, entry]);
      }
      return arr;
    }
    load(arr) {
      this.clear();
      for (const [key, entry] of arr) {
        if (entry.start) {
          const age = Date.now() - entry.start;
          entry.start = perf.now() - age;
        }
        this.set(key, entry.value, entry);
      }
    }
    set(k, v, setOptions = {}) {
      if (v === undefined) {
        this.delete(k);
        return this;
      }
      const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status } = setOptions;
      let { noUpdateTTL = this.noUpdateTTL } = setOptions;
      const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);
      if (this.maxEntrySize && size > this.maxEntrySize) {
        if (status) {
          status.set = "miss";
          status.maxEntrySizeExceeded = true;
        }
        this.#delete(k, "set");
        return this;
      }
      let index = this.#size === 0 ? undefined : this.#keyMap.get(k);
      if (index === undefined) {
        index = this.#size === 0 ? this.#tail : this.#free.length !== 0 ? this.#free.pop() : this.#size === this.#max ? this.#evict(false) : this.#size;
        this.#keyList[index] = k;
        this.#valList[index] = v;
        this.#keyMap.set(k, index);
        this.#next[this.#tail] = index;
        this.#prev[index] = this.#tail;
        this.#tail = index;
        this.#size++;
        this.#addItemSize(index, size, status);
        if (status)
          status.set = "add";
        noUpdateTTL = false;
        if (this.#hasOnInsert) {
          this.#onInsert?.(v, k, "add");
        }
      } else {
        this.#moveToTail(index);
        const oldVal = this.#valList[index];
        if (v !== oldVal) {
          if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {
            oldVal.__abortController.abort(new Error("replaced"));
            const { __staleWhileFetching: s } = oldVal;
            if (s !== undefined && !noDisposeOnSet) {
              if (this.#hasDispose) {
                this.#dispose?.(s, k, "set");
              }
              if (this.#hasDisposeAfter) {
                this.#disposed?.push([s, k, "set"]);
              }
            }
          } else if (!noDisposeOnSet) {
            if (this.#hasDispose) {
              this.#dispose?.(oldVal, k, "set");
            }
            if (this.#hasDisposeAfter) {
              this.#disposed?.push([oldVal, k, "set"]);
            }
          }
          this.#removeItemSize(index);
          this.#addItemSize(index, size, status);
          this.#valList[index] = v;
          if (status) {
            status.set = "replace";
            const oldValue = oldVal && this.#isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
            if (oldValue !== undefined)
              status.oldValue = oldValue;
          }
        } else if (status) {
          status.set = "update";
        }
        if (this.#hasOnInsert) {
          this.onInsert?.(v, k, v === oldVal ? "update" : "replace");
        }
      }
      if (ttl !== 0 && !this.#ttls) {
        this.#initializeTTLTracking();
      }
      if (this.#ttls) {
        if (!noUpdateTTL) {
          this.#setItemTTL(index, ttl, start);
        }
        if (status)
          this.#statusTTL(status, index);
      }
      if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {
        const dt = this.#disposed;
        let task;
        while (task = dt?.shift()) {
          this.#disposeAfter?.(...task);
        }
      }
      return this;
    }
    pop() {
      try {
        while (this.#size) {
          const val = this.#valList[this.#head];
          this.#evict(true);
          if (this.#isBackgroundFetch(val)) {
            if (val.__staleWhileFetching) {
              return val.__staleWhileFetching;
            }
          } else if (val !== undefined) {
            return val;
          }
        }
      } finally {
        if (this.#hasDisposeAfter && this.#disposed) {
          const dt = this.#disposed;
          let task;
          while (task = dt?.shift()) {
            this.#disposeAfter?.(...task);
          }
        }
      }
    }
    #evict(free) {
      const head = this.#head;
      const k = this.#keyList[head];
      const v = this.#valList[head];
      if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {
        v.__abortController.abort(new Error("evicted"));
      } else if (this.#hasDispose || this.#hasDisposeAfter) {
        if (this.#hasDispose) {
          this.#dispose?.(v, k, "evict");
        }
        if (this.#hasDisposeAfter) {
          this.#disposed?.push([v, k, "evict"]);
        }
      }
      this.#removeItemSize(head);
      if (free) {
        this.#keyList[head] = undefined;
        this.#valList[head] = undefined;
        this.#free.push(head);
      }
      if (this.#size === 1) {
        this.#head = this.#tail = 0;
        this.#free.length = 0;
      } else {
        this.#head = this.#next[head];
      }
      this.#keyMap.delete(k);
      this.#size--;
      return head;
    }
    has(k, hasOptions = {}) {
      const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;
      const index = this.#keyMap.get(k);
      if (index !== undefined) {
        const v = this.#valList[index];
        if (this.#isBackgroundFetch(v) && v.__staleWhileFetching === undefined) {
          return false;
        }
        if (!this.#isStale(index)) {
          if (updateAgeOnHas) {
            this.#updateItemAge(index);
          }
          if (status) {
            status.has = "hit";
            this.#statusTTL(status, index);
          }
          return true;
        } else if (status) {
          status.has = "stale";
          this.#statusTTL(status, index);
        }
      } else if (status) {
        status.has = "miss";
      }
      return false;
    }
    peek(k, peekOptions = {}) {
      const { allowStale = this.allowStale } = peekOptions;
      const index = this.#keyMap.get(k);
      if (index === undefined || !allowStale && this.#isStale(index)) {
        return;
      }
      const v = this.#valList[index];
      return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
    }
    #backgroundFetch(k, index, options, context) {
      const v = index === undefined ? undefined : this.#valList[index];
      if (this.#isBackgroundFetch(v)) {
        return v;
      }
      const ac = new AC;
      const { signal } = options;
      signal?.addEventListener("abort", () => ac.abort(signal.reason), {
        signal: ac.signal
      });
      const fetchOpts = {
        signal: ac.signal,
        options,
        context
      };
      const cb = (v2, updateCache = false) => {
        const { aborted } = ac.signal;
        const ignoreAbort = options.ignoreFetchAbort && v2 !== undefined;
        if (options.status) {
          if (aborted && !updateCache) {
            options.status.fetchAborted = true;
            options.status.fetchError = ac.signal.reason;
            if (ignoreAbort)
              options.status.fetchAbortIgnored = true;
          } else {
            options.status.fetchResolved = true;
          }
        }
        if (aborted && !ignoreAbort && !updateCache) {
          return fetchFail(ac.signal.reason);
        }
        const bf2 = p;
        if (this.#valList[index] === p) {
          if (v2 === undefined) {
            if (bf2.__staleWhileFetching) {
              this.#valList[index] = bf2.__staleWhileFetching;
            } else {
              this.#delete(k, "fetch");
            }
          } else {
            if (options.status)
              options.status.fetchUpdated = true;
            this.set(k, v2, fetchOpts.options);
          }
        }
        return v2;
      };
      const eb = (er) => {
        if (options.status) {
          options.status.fetchRejected = true;
          options.status.fetchError = er;
        }
        return fetchFail(er);
      };
      const fetchFail = (er) => {
        const { aborted } = ac.signal;
        const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
        const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
        const noDelete = allowStale || options.noDeleteOnFetchRejection;
        const bf2 = p;
        if (this.#valList[index] === p) {
          const del = !noDelete || bf2.__staleWhileFetching === undefined;
          if (del) {
            this.#delete(k, "fetch");
          } else if (!allowStaleAborted) {
            this.#valList[index] = bf2.__staleWhileFetching;
          }
        }
        if (allowStale) {
          if (options.status && bf2.__staleWhileFetching !== undefined) {
            options.status.returnedStale = true;
          }
          return bf2.__staleWhileFetching;
        } else if (bf2.__returned === bf2) {
          throw er;
        }
      };
      const pcall = (res, rej) => {
        const fmp = this.#fetchMethod?.(k, v, fetchOpts);
        if (fmp && fmp instanceof Promise) {
          fmp.then((v2) => res(v2 === undefined ? undefined : v2), rej);
        }
        ac.signal.addEventListener("abort", () => {
          if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
            res(undefined);
            if (options.allowStaleOnFetchAbort) {
              res = (v2) => cb(v2, true);
            }
          }
        });
      };
      if (options.status)
        options.status.fetchDispatched = true;
      const p = new Promise(pcall).then(cb, eb);
      const bf = Object.assign(p, {
        __abortController: ac,
        __staleWhileFetching: v,
        __returned: undefined
      });
      if (index === undefined) {
        this.set(k, bf, { ...fetchOpts.options, status: undefined });
        index = this.#keyMap.get(k);
      } else {
        this.#valList[index] = bf;
      }
      return bf;
    }
    #isBackgroundFetch(p) {
      if (!this.#hasFetchMethod)
        return false;
      const b = p;
      return !!b && b instanceof Promise && b.hasOwnProperty("__staleWhileFetching") && b.__abortController instanceof AC;
    }
    async fetch(k, fetchOptions = {}) {
      const {
        allowStale = this.allowStale,
        updateAgeOnGet = this.updateAgeOnGet,
        noDeleteOnStaleGet = this.noDeleteOnStaleGet,
        ttl = this.ttl,
        noDisposeOnSet = this.noDisposeOnSet,
        size = 0,
        sizeCalculation = this.sizeCalculation,
        noUpdateTTL = this.noUpdateTTL,
        noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
        allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
        ignoreFetchAbort = this.ignoreFetchAbort,
        allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
        context,
        forceRefresh = false,
        status,
        signal
      } = fetchOptions;
      if (!this.#hasFetchMethod) {
        if (status)
          status.fetch = "get";
        return this.get(k, {
          allowStale,
          updateAgeOnGet,
          noDeleteOnStaleGet,
          status
        });
      }
      const options = {
        allowStale,
        updateAgeOnGet,
        noDeleteOnStaleGet,
        ttl,
        noDisposeOnSet,
        size,
        sizeCalculation,
        noUpdateTTL,
        noDeleteOnFetchRejection,
        allowStaleOnFetchRejection,
        allowStaleOnFetchAbort,
        ignoreFetchAbort,
        status,
        signal
      };
      let index = this.#keyMap.get(k);
      if (index === undefined) {
        if (status)
          status.fetch = "miss";
        const p = this.#backgroundFetch(k, index, options, context);
        return p.__returned = p;
      } else {
        const v = this.#valList[index];
        if (this.#isBackgroundFetch(v)) {
          const stale = allowStale && v.__staleWhileFetching !== undefined;
          if (status) {
            status.fetch = "inflight";
            if (stale)
              status.returnedStale = true;
          }
          return stale ? v.__staleWhileFetching : v.__returned = v;
        }
        const isStale = this.#isStale(index);
        if (!forceRefresh && !isStale) {
          if (status)
            status.fetch = "hit";
          this.#moveToTail(index);
          if (updateAgeOnGet) {
            this.#updateItemAge(index);
          }
          if (status)
            this.#statusTTL(status, index);
          return v;
        }
        const p = this.#backgroundFetch(k, index, options, context);
        const hasStale = p.__staleWhileFetching !== undefined;
        const staleVal = hasStale && allowStale;
        if (status) {
          status.fetch = isStale ? "stale" : "refresh";
          if (staleVal && isStale)
            status.returnedStale = true;
        }
        return staleVal ? p.__staleWhileFetching : p.__returned = p;
      }
    }
    async forceFetch(k, fetchOptions = {}) {
      const v = await this.fetch(k, fetchOptions);
      if (v === undefined)
        throw new Error("fetch() returned undefined");
      return v;
    }
    memo(k, memoOptions = {}) {
      const memoMethod = this.#memoMethod;
      if (!memoMethod) {
        throw new Error("no memoMethod provided to constructor");
      }
      const { context, forceRefresh, ...options } = memoOptions;
      const v = this.get(k, options);
      if (!forceRefresh && v !== undefined)
        return v;
      const vv = memoMethod(k, v, {
        options,
        context
      });
      this.set(k, vv, options);
      return vv;
    }
    get(k, getOptions = {}) {
      const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status } = getOptions;
      const index = this.#keyMap.get(k);
      if (index !== undefined) {
        const value = this.#valList[index];
        const fetching = this.#isBackgroundFetch(value);
        if (status)
          this.#statusTTL(status, index);
        if (this.#isStale(index)) {
          if (status)
            status.get = "stale";
          if (!fetching) {
            if (!noDeleteOnStaleGet) {
              this.#delete(k, "expire");
            }
            if (status && allowStale)
              status.returnedStale = true;
            return allowStale ? value : undefined;
          } else {
            if (status && allowStale && value.__staleWhileFetching !== undefined) {
              status.returnedStale = true;
            }
            return allowStale ? value.__staleWhileFetching : undefined;
          }
        } else {
          if (status)
            status.get = "hit";
          if (fetching) {
            return value.__staleWhileFetching;
          }
          this.#moveToTail(index);
          if (updateAgeOnGet) {
            this.#updateItemAge(index);
          }
          return value;
        }
      } else if (status) {
        status.get = "miss";
      }
    }
    #connect(p, n) {
      this.#prev[n] = p;
      this.#next[p] = n;
    }
    #moveToTail(index) {
      if (index !== this.#tail) {
        if (index === this.#head) {
          this.#head = this.#next[index];
        } else {
          this.#connect(this.#prev[index], this.#next[index]);
        }
        this.#connect(this.#tail, index);
        this.#tail = index;
      }
    }
    delete(k) {
      return this.#delete(k, "delete");
    }
    #delete(k, reason) {
      let deleted = false;
      if (this.#size !== 0) {
        const index = this.#keyMap.get(k);
        if (index !== undefined) {
          deleted = true;
          if (this.#size === 1) {
            this.#clear(reason);
          } else {
            this.#removeItemSize(index);
            const v = this.#valList[index];
            if (this.#isBackgroundFetch(v)) {
              v.__abortController.abort(new Error("deleted"));
            } else if (this.#hasDispose || this.#hasDisposeAfter) {
              if (this.#hasDispose) {
                this.#dispose?.(v, k, reason);
              }
              if (this.#hasDisposeAfter) {
                this.#disposed?.push([v, k, reason]);
              }
            }
            this.#keyMap.delete(k);
            this.#keyList[index] = undefined;
            this.#valList[index] = undefined;
            if (index === this.#tail) {
              this.#tail = this.#prev[index];
            } else if (index === this.#head) {
              this.#head = this.#next[index];
            } else {
              const pi = this.#prev[index];
              this.#next[pi] = this.#next[index];
              const ni = this.#next[index];
              this.#prev[ni] = this.#prev[index];
            }
            this.#size--;
            this.#free.push(index);
          }
        }
      }
      if (this.#hasDisposeAfter && this.#disposed?.length) {
        const dt = this.#disposed;
        let task;
        while (task = dt?.shift()) {
          this.#disposeAfter?.(...task);
        }
      }
      return deleted;
    }
    clear() {
      return this.#clear("delete");
    }
    #clear(reason) {
      for (const index of this.#rindexes({ allowStale: true })) {
        const v = this.#valList[index];
        if (this.#isBackgroundFetch(v)) {
          v.__abortController.abort(new Error("deleted"));
        } else {
          const k = this.#keyList[index];
          if (this.#hasDispose) {
            this.#dispose?.(v, k, reason);
          }
          if (this.#hasDisposeAfter) {
            this.#disposed?.push([v, k, reason]);
          }
        }
      }
      this.#keyMap.clear();
      this.#valList.fill(undefined);
      this.#keyList.fill(undefined);
      if (this.#ttls && this.#starts) {
        this.#ttls.fill(0);
        this.#starts.fill(0);
      }
      if (this.#sizes) {
        this.#sizes.fill(0);
      }
      this.#head = 0;
      this.#tail = 0;
      this.#free.length = 0;
      this.#calculatedSize = 0;
      this.#size = 0;
      if (this.#hasDisposeAfter && this.#disposed) {
        const dt = this.#disposed;
        let task;
        while (task = dt?.shift()) {
          this.#disposeAfter?.(...task);
        }
      }
    }
  }
  exports.LRUCache = LRUCache;
});

// node_modules/minipass/dist/commonjs/index.js
var require_commonjs3 = __commonJS((exports) => {
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Minipass = exports.isWritable = exports.isReadable = exports.isStream = undefined;
  var proc = typeof process === "object" && process ? process : {
    stdout: null,
    stderr: null
  };
  var node_events_1 = __require("node:events");
  var node_stream_1 = __importDefault(__require("node:stream"));
  var node_string_decoder_1 = __require("node:string_decoder");
  var isStream = (s) => !!s && typeof s === "object" && (s instanceof Minipass || s instanceof node_stream_1.default || (0, exports.isReadable)(s) || (0, exports.isWritable)(s));
  exports.isStream = isStream;
  var isReadable = (s) => !!s && typeof s === "object" && s instanceof node_events_1.EventEmitter && typeof s.pipe === "function" && s.pipe !== node_stream_1.default.Writable.prototype.pipe;
  exports.isReadable = isReadable;
  var isWritable = (s) => !!s && typeof s === "object" && s instanceof node_events_1.EventEmitter && typeof s.write === "function" && typeof s.end === "function";
  exports.isWritable = isWritable;
  var EOF = Symbol("EOF");
  var MAYBE_EMIT_END = Symbol("maybeEmitEnd");
  var EMITTED_END = Symbol("emittedEnd");
  var EMITTING_END = Symbol("emittingEnd");
  var EMITTED_ERROR = Symbol("emittedError");
  var CLOSED = Symbol("closed");
  var READ = Symbol("read");
  var FLUSH = Symbol("flush");
  var FLUSHCHUNK = Symbol("flushChunk");
  var ENCODING = Symbol("encoding");
  var DECODER = Symbol("decoder");
  var FLOWING = Symbol("flowing");
  var PAUSED = Symbol("paused");
  var RESUME = Symbol("resume");
  var BUFFER = Symbol("buffer");
  var PIPES = Symbol("pipes");
  var BUFFERLENGTH = Symbol("bufferLength");
  var BUFFERPUSH = Symbol("bufferPush");
  var BUFFERSHIFT = Symbol("bufferShift");
  var OBJECTMODE = Symbol("objectMode");
  var DESTROYED = Symbol("destroyed");
  var ERROR = Symbol("error");
  var EMITDATA = Symbol("emitData");
  var EMITEND = Symbol("emitEnd");
  var EMITEND2 = Symbol("emitEnd2");
  var ASYNC = Symbol("async");
  var ABORT = Symbol("abort");
  var ABORTED = Symbol("aborted");
  var SIGNAL = Symbol("signal");
  var DATALISTENERS = Symbol("dataListeners");
  var DISCARDED = Symbol("discarded");
  var defer = (fn) => Promise.resolve().then(fn);
  var nodefer = (fn) => fn();
  var isEndish = (ev) => ev === "end" || ev === "finish" || ev === "prefinish";
  var isArrayBufferLike = (b) => b instanceof ArrayBuffer || !!b && typeof b === "object" && b.constructor && b.constructor.name === "ArrayBuffer" && b.byteLength >= 0;
  var isArrayBufferView = (b) => !Buffer.isBuffer(b) && ArrayBuffer.isView(b);

  class Pipe {
    src;
    dest;
    opts;
    ondrain;
    constructor(src, dest, opts) {
      this.src = src;
      this.dest = dest;
      this.opts = opts;
      this.ondrain = () => src[RESUME]();
      this.dest.on("drain", this.ondrain);
    }
    unpipe() {
      this.dest.removeListener("drain", this.ondrain);
    }
    proxyErrors(_er) {
    }
    end() {
      this.unpipe();
      if (this.opts.end)
        this.dest.end();
    }
  }

  class PipeProxyErrors extends Pipe {
    unpipe() {
      this.src.removeListener("error", this.proxyErrors);
      super.unpipe();
    }
    constructor(src, dest, opts) {
      super(src, dest, opts);
      this.proxyErrors = (er) => dest.emit("error", er);
      src.on("error", this.proxyErrors);
    }
  }
  var isObjectModeOptions = (o) => !!o.objectMode;
  var isEncodingOptions = (o) => !o.objectMode && !!o.encoding && o.encoding !== "buffer";

  class Minipass extends node_events_1.EventEmitter {
    [FLOWING] = false;
    [PAUSED] = false;
    [PIPES] = [];
    [BUFFER] = [];
    [OBJECTMODE];
    [ENCODING];
    [ASYNC];
    [DECODER];
    [EOF] = false;
    [EMITTED_END] = false;
    [EMITTING_END] = false;
    [CLOSED] = false;
    [EMITTED_ERROR] = null;
    [BUFFERLENGTH] = 0;
    [DESTROYED] = false;
    [SIGNAL];
    [ABORTED] = false;
    [DATALISTENERS] = 0;
    [DISCARDED] = false;
    writable = true;
    readable = true;
    constructor(...args) {
      const options = args[0] || {};
      super();
      if (options.objectMode && typeof options.encoding === "string") {
        throw new TypeError("Encoding and objectMode may not be used together");
      }
      if (isObjectModeOptions(options)) {
        this[OBJECTMODE] = true;
        this[ENCODING] = null;
      } else if (isEncodingOptions(options)) {
        this[ENCODING] = options.encoding;
        this[OBJECTMODE] = false;
      } else {
        this[OBJECTMODE] = false;
        this[ENCODING] = null;
      }
      this[ASYNC] = !!options.async;
      this[DECODER] = this[ENCODING] ? new node_string_decoder_1.StringDecoder(this[ENCODING]) : null;
      if (options && options.debugExposeBuffer === true) {
        Object.defineProperty(this, "buffer", { get: () => this[BUFFER] });
      }
      if (options && options.debugExposePipes === true) {
        Object.defineProperty(this, "pipes", { get: () => this[PIPES] });
      }
      const { signal } = options;
      if (signal) {
        this[SIGNAL] = signal;
        if (signal.aborted) {
          this[ABORT]();
        } else {
          signal.addEventListener("abort", () => this[ABORT]());
        }
      }
    }
    get bufferLength() {
      return this[BUFFERLENGTH];
    }
    get encoding() {
      return this[ENCODING];
    }
    set encoding(_enc) {
      throw new Error("Encoding must be set at instantiation time");
    }
    setEncoding(_enc) {
      throw new Error("Encoding must be set at instantiation time");
    }
    get objectMode() {
      return this[OBJECTMODE];
    }
    set objectMode(_om) {
      throw new Error("objectMode must be set at instantiation time");
    }
    get ["async"]() {
      return this[ASYNC];
    }
    set ["async"](a) {
      this[ASYNC] = this[ASYNC] || !!a;
    }
    [ABORT]() {
      this[ABORTED] = true;
      this.emit("abort", this[SIGNAL]?.reason);
      this.destroy(this[SIGNAL]?.reason);
    }
    get aborted() {
      return this[ABORTED];
    }
    set aborted(_) {
    }
    write(chunk, encoding, cb) {
      if (this[ABORTED])
        return false;
      if (this[EOF])
        throw new Error("write after end");
      if (this[DESTROYED]) {
        this.emit("error", Object.assign(new Error("Cannot call write after a stream was destroyed"), { code: "ERR_STREAM_DESTROYED" }));
        return true;
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = "utf8";
      }
      if (!encoding)
        encoding = "utf8";
      const fn = this[ASYNC] ? defer : nodefer;
      if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
        if (isArrayBufferView(chunk)) {
          chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
        } else if (isArrayBufferLike(chunk)) {
          chunk = Buffer.from(chunk);
        } else if (typeof chunk !== "string") {
          throw new Error("Non-contiguous data written to non-objectMode stream");
        }
      }
      if (this[OBJECTMODE]) {
        if (this[FLOWING] && this[BUFFERLENGTH] !== 0)
          this[FLUSH](true);
        if (this[FLOWING])
          this.emit("data", chunk);
        else
          this[BUFFERPUSH](chunk);
        if (this[BUFFERLENGTH] !== 0)
          this.emit("readable");
        if (cb)
          fn(cb);
        return this[FLOWING];
      }
      if (!chunk.length) {
        if (this[BUFFERLENGTH] !== 0)
          this.emit("readable");
        if (cb)
          fn(cb);
        return this[FLOWING];
      }
      if (typeof chunk === "string" && !(encoding === this[ENCODING] && !this[DECODER]?.lastNeed)) {
        chunk = Buffer.from(chunk, encoding);
      }
      if (Buffer.isBuffer(chunk) && this[ENCODING]) {
        chunk = this[DECODER].write(chunk);
      }
      if (this[FLOWING] && this[BUFFERLENGTH] !== 0)
        this[FLUSH](true);
      if (this[FLOWING])
        this.emit("data", chunk);
      else
        this[BUFFERPUSH](chunk);
      if (this[BUFFERLENGTH] !== 0)
        this.emit("readable");
      if (cb)
        fn(cb);
      return this[FLOWING];
    }
    read(n) {
      if (this[DESTROYED])
        return null;
      this[DISCARDED] = false;
      if (this[BUFFERLENGTH] === 0 || n === 0 || n && n > this[BUFFERLENGTH]) {
        this[MAYBE_EMIT_END]();
        return null;
      }
      if (this[OBJECTMODE])
        n = null;
      if (this[BUFFER].length > 1 && !this[OBJECTMODE]) {
        this[BUFFER] = [
          this[ENCODING] ? this[BUFFER].join("") : Buffer.concat(this[BUFFER], this[BUFFERLENGTH])
        ];
      }
      const ret = this[READ](n || null, this[BUFFER][0]);
      this[MAYBE_EMIT_END]();
      return ret;
    }
    [READ](n, chunk) {
      if (this[OBJECTMODE])
        this[BUFFERSHIFT]();
      else {
        const c = chunk;
        if (n === c.length || n === null)
          this[BUFFERSHIFT]();
        else if (typeof c === "string") {
          this[BUFFER][0] = c.slice(n);
          chunk = c.slice(0, n);
          this[BUFFERLENGTH] -= n;
        } else {
          this[BUFFER][0] = c.subarray(n);
          chunk = c.subarray(0, n);
          this[BUFFERLENGTH] -= n;
        }
      }
      this.emit("data", chunk);
      if (!this[BUFFER].length && !this[EOF])
        this.emit("drain");
      return chunk;
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = undefined;
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = "utf8";
      }
      if (chunk !== undefined)
        this.write(chunk, encoding);
      if (cb)
        this.once("end", cb);
      this[EOF] = true;
      this.writable = false;
      if (this[FLOWING] || !this[PAUSED])
        this[MAYBE_EMIT_END]();
      return this;
    }
    [RESUME]() {
      if (this[DESTROYED])
        return;
      if (!this[DATALISTENERS] && !this[PIPES].length) {
        this[DISCARDED] = true;
      }
      this[PAUSED] = false;
      this[FLOWING] = true;
      this.emit("resume");
      if (this[BUFFER].length)
        this[FLUSH]();
      else if (this[EOF])
        this[MAYBE_EMIT_END]();
      else
        this.emit("drain");
    }
    resume() {
      return this[RESUME]();
    }
    pause() {
      this[FLOWING] = false;
      this[PAUSED] = true;
      this[DISCARDED] = false;
    }
    get destroyed() {
      return this[DESTROYED];
    }
    get flowing() {
      return this[FLOWING];
    }
    get paused() {
      return this[PAUSED];
    }
    [BUFFERPUSH](chunk) {
      if (this[OBJECTMODE])
        this[BUFFERLENGTH] += 1;
      else
        this[BUFFERLENGTH] += chunk.length;
      this[BUFFER].push(chunk);
    }
    [BUFFERSHIFT]() {
      if (this[OBJECTMODE])
        this[BUFFERLENGTH] -= 1;
      else
        this[BUFFERLENGTH] -= this[BUFFER][0].length;
      return this[BUFFER].shift();
    }
    [FLUSH](noDrain = false) {
      do {
      } while (this[FLUSHCHUNK](this[BUFFERSHIFT]()) && this[BUFFER].length);
      if (!noDrain && !this[BUFFER].length && !this[EOF])
        this.emit("drain");
    }
    [FLUSHCHUNK](chunk) {
      this.emit("data", chunk);
      return this[FLOWING];
    }
    pipe(dest, opts) {
      if (this[DESTROYED])
        return dest;
      this[DISCARDED] = false;
      const ended = this[EMITTED_END];
      opts = opts || {};
      if (dest === proc.stdout || dest === proc.stderr)
        opts.end = false;
      else
        opts.end = opts.end !== false;
      opts.proxyErrors = !!opts.proxyErrors;
      if (ended) {
        if (opts.end)
          dest.end();
      } else {
        this[PIPES].push(!opts.proxyErrors ? new Pipe(this, dest, opts) : new PipeProxyErrors(this, dest, opts));
        if (this[ASYNC])
          defer(() => this[RESUME]());
        else
          this[RESUME]();
      }
      return dest;
    }
    unpipe(dest) {
      const p = this[PIPES].find((p2) => p2.dest === dest);
      if (p) {
        if (this[PIPES].length === 1) {
          if (this[FLOWING] && this[DATALISTENERS] === 0) {
            this[FLOWING] = false;
          }
          this[PIPES] = [];
        } else
          this[PIPES].splice(this[PIPES].indexOf(p), 1);
        p.unpipe();
      }
    }
    addListener(ev, handler) {
      return this.on(ev, handler);
    }
    on(ev, handler) {
      const ret = super.on(ev, handler);
      if (ev === "data") {
        this[DISCARDED] = false;
        this[DATALISTENERS]++;
        if (!this[PIPES].length && !this[FLOWING]) {
          this[RESUME]();
        }
      } else if (ev === "readable" && this[BUFFERLENGTH] !== 0) {
        super.emit("readable");
      } else if (isEndish(ev) && this[EMITTED_END]) {
        super.emit(ev);
        this.removeAllListeners(ev);
      } else if (ev === "error" && this[EMITTED_ERROR]) {
        const h = handler;
        if (this[ASYNC])
          defer(() => h.call(this, this[EMITTED_ERROR]));
        else
          h.call(this, this[EMITTED_ERROR]);
      }
      return ret;
    }
    removeListener(ev, handler) {
      return this.off(ev, handler);
    }
    off(ev, handler) {
      const ret = super.off(ev, handler);
      if (ev === "data") {
        this[DATALISTENERS] = this.listeners("data").length;
        if (this[DATALISTENERS] === 0 && !this[DISCARDED] && !this[PIPES].length) {
          this[FLOWING] = false;
        }
      }
      return ret;
    }
    removeAllListeners(ev) {
      const ret = super.removeAllListeners(ev);
      if (ev === "data" || ev === undefined) {
        this[DATALISTENERS] = 0;
        if (!this[DISCARDED] && !this[PIPES].length) {
          this[FLOWING] = false;
        }
      }
      return ret;
    }
    get emittedEnd() {
      return this[EMITTED_END];
    }
    [MAYBE_EMIT_END]() {
      if (!this[EMITTING_END] && !this[EMITTED_END] && !this[DESTROYED] && this[BUFFER].length === 0 && this[EOF]) {
        this[EMITTING_END] = true;
        this.emit("end");
        this.emit("prefinish");
        this.emit("finish");
        if (this[CLOSED])
          this.emit("close");
        this[EMITTING_END] = false;
      }
    }
    emit(ev, ...args) {
      const data = args[0];
      if (ev !== "error" && ev !== "close" && ev !== DESTROYED && this[DESTROYED]) {
        return false;
      } else if (ev === "data") {
        return !this[OBJECTMODE] && !data ? false : this[ASYNC] ? (defer(() => this[EMITDATA](data)), true) : this[EMITDATA](data);
      } else if (ev === "end") {
        return this[EMITEND]();
      } else if (ev === "close") {
        this[CLOSED] = true;
        if (!this[EMITTED_END] && !this[DESTROYED])
          return false;
        const ret2 = super.emit("close");
        this.removeAllListeners("close");
        return ret2;
      } else if (ev === "error") {
        this[EMITTED_ERROR] = data;
        super.emit(ERROR, data);
        const ret2 = !this[SIGNAL] || this.listeners("error").length ? super.emit("error", data) : false;
        this[MAYBE_EMIT_END]();
        return ret2;
      } else if (ev === "resume") {
        const ret2 = super.emit("resume");
        this[MAYBE_EMIT_END]();
        return ret2;
      } else if (ev === "finish" || ev === "prefinish") {
        const ret2 = super.emit(ev);
        this.removeAllListeners(ev);
        return ret2;
      }
      const ret = super.emit(ev, ...args);
      this[MAYBE_EMIT_END]();
      return ret;
    }
    [EMITDATA](data) {
      for (const p of this[PIPES]) {
        if (p.dest.write(data) === false)
          this.pause();
      }
      const ret = this[DISCARDED] ? false : super.emit("data", data);
      this[MAYBE_EMIT_END]();
      return ret;
    }
    [EMITEND]() {
      if (this[EMITTED_END])
        return false;
      this[EMITTED_END] = true;
      this.readable = false;
      return this[ASYNC] ? (defer(() => this[EMITEND2]()), true) : this[EMITEND2]();
    }
    [EMITEND2]() {
      if (this[DECODER]) {
        const data = this[DECODER].end();
        if (data) {
          for (const p of this[PIPES]) {
            p.dest.write(data);
          }
          if (!this[DISCARDED])
            super.emit("data", data);
        }
      }
      for (const p of this[PIPES]) {
        p.end();
      }
      const ret = super.emit("end");
      this.removeAllListeners("end");
      return ret;
    }
    async collect() {
      const buf = Object.assign([], {
        dataLength: 0
      });
      if (!this[OBJECTMODE])
        buf.dataLength = 0;
      const p = this.promise();
      this.on("data", (c) => {
        buf.push(c);
        if (!this[OBJECTMODE])
          buf.dataLength += c.length;
      });
      await p;
      return buf;
    }
    async concat() {
      if (this[OBJECTMODE]) {
        throw new Error("cannot concat in objectMode");
      }
      const buf = await this.collect();
      return this[ENCODING] ? buf.join("") : Buffer.concat(buf, buf.dataLength);
    }
    async promise() {
      return new Promise((resolve, reject) => {
        this.on(DESTROYED, () => reject(new Error("stream destroyed")));
        this.on("error", (er) => reject(er));
        this.on("end", () => resolve());
      });
    }
    [Symbol.asyncIterator]() {
      this[DISCARDED] = false;
      let stopped = false;
      const stop = async () => {
        this.pause();
        stopped = true;
        return { value: undefined, done: true };
      };
      const next = () => {
        if (stopped)
          return stop();
        const res = this.read();
        if (res !== null)
          return Promise.resolve({ done: false, value: res });
        if (this[EOF])
          return stop();
        let resolve;
        let reject;
        const onerr = (er) => {
          this.off("data", ondata);
          this.off("end", onend);
          this.off(DESTROYED, ondestroy);
          stop();
          reject(er);
        };
        const ondata = (value) => {
          this.off("error", onerr);
          this.off("end", onend);
          this.off(DESTROYED, ondestroy);
          this.pause();
          resolve({ value, done: !!this[EOF] });
        };
        const onend = () => {
          this.off("error", onerr);
          this.off("data", ondata);
          this.off(DESTROYED, ondestroy);
          stop();
          resolve({ done: true, value: undefined });
        };
        const ondestroy = () => onerr(new Error("stream destroyed"));
        return new Promise((res2, rej) => {
          reject = rej;
          resolve = res2;
          this.once(DESTROYED, ondestroy);
          this.once("error", onerr);
          this.once("end", onend);
          this.once("data", ondata);
        });
      };
      return {
        next,
        throw: stop,
        return: stop,
        [Symbol.asyncIterator]() {
          return this;
        }
      };
    }
    [Symbol.iterator]() {
      this[DISCARDED] = false;
      let stopped = false;
      const stop = () => {
        this.pause();
        this.off(ERROR, stop);
        this.off(DESTROYED, stop);
        this.off("end", stop);
        stopped = true;
        return { done: true, value: undefined };
      };
      const next = () => {
        if (stopped)
          return stop();
        const value = this.read();
        return value === null ? stop() : { done: false, value };
      };
      this.once("end", stop);
      this.once(ERROR, stop);
      this.once(DESTROYED, stop);
      return {
        next,
        throw: stop,
        return: stop,
        [Symbol.iterator]() {
          return this;
        }
      };
    }
    destroy(er) {
      if (this[DESTROYED]) {
        if (er)
          this.emit("error", er);
        else
          this.emit(DESTROYED);
        return this;
      }
      this[DESTROYED] = true;
      this[DISCARDED] = true;
      this[BUFFER].length = 0;
      this[BUFFERLENGTH] = 0;
      const wc = this;
      if (typeof wc.close === "function" && !this[CLOSED])
        wc.close();
      if (er)
        this.emit("error", er);
      else
        this.emit(DESTROYED);
      return this;
    }
    static get isStream() {
      return exports.isStream;
    }
  }
  exports.Minipass = Minipass;
});

// node_modules/path-scurry/dist/commonjs/index.js
var require_commonjs4 = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.PathScurry = exports.Path = exports.PathScurryDarwin = exports.PathScurryPosix = exports.PathScurryWin32 = exports.PathScurryBase = exports.PathPosix = exports.PathWin32 = exports.PathBase = exports.ChildrenCache = exports.ResolveCache = undefined;
  var lru_cache_1 = require_commonjs2();
  var node_path_1 = __require("node:path");
  var node_url_1 = __require("node:url");
  var fs_1 = __require("fs");
  var actualFS = __importStar(__require("node:fs"));
  var realpathSync = fs_1.realpathSync.native;
  var promises_1 = __require("node:fs/promises");
  var minipass_1 = require_commonjs3();
  var defaultFS = {
    lstatSync: fs_1.lstatSync,
    readdir: fs_1.readdir,
    readdirSync: fs_1.readdirSync,
    readlinkSync: fs_1.readlinkSync,
    realpathSync,
    promises: {
      lstat: promises_1.lstat,
      readdir: promises_1.readdir,
      readlink: promises_1.readlink,
      realpath: promises_1.realpath
    }
  };
  var fsFromOption = (fsOption) => !fsOption || fsOption === defaultFS || fsOption === actualFS ? defaultFS : {
    ...defaultFS,
    ...fsOption,
    promises: {
      ...defaultFS.promises,
      ...fsOption.promises || {}
    }
  };
  var uncDriveRegexp = /^\\\\\?\\([a-z]:)\\?$/i;
  var uncToDrive = (rootPath) => rootPath.replace(/\//g, "\\").replace(uncDriveRegexp, "$1\\");
  var eitherSep = /[\\\/]/;
  var UNKNOWN = 0;
  var IFIFO = 1;
  var IFCHR = 2;
  var IFDIR = 4;
  var IFBLK = 6;
  var IFREG = 8;
  var IFLNK = 10;
  var IFSOCK = 12;
  var IFMT = 15;
  var IFMT_UNKNOWN = ~IFMT;
  var READDIR_CALLED = 16;
  var LSTAT_CALLED = 32;
  var ENOTDIR = 64;
  var ENOENT = 128;
  var ENOREADLINK = 256;
  var ENOREALPATH = 512;
  var ENOCHILD = ENOTDIR | ENOENT | ENOREALPATH;
  var TYPEMASK = 1023;
  var entToType = (s) => s.isFile() ? IFREG : s.isDirectory() ? IFDIR : s.isSymbolicLink() ? IFLNK : s.isCharacterDevice() ? IFCHR : s.isBlockDevice() ? IFBLK : s.isSocket() ? IFSOCK : s.isFIFO() ? IFIFO : UNKNOWN;
  var normalizeCache = new Map;
  var normalize = (s) => {
    const c = normalizeCache.get(s);
    if (c)
      return c;
    const n = s.normalize("NFKD");
    normalizeCache.set(s, n);
    return n;
  };
  var normalizeNocaseCache = new Map;
  var normalizeNocase = (s) => {
    const c = normalizeNocaseCache.get(s);
    if (c)
      return c;
    const n = normalize(s.toLowerCase());
    normalizeNocaseCache.set(s, n);
    return n;
  };

  class ResolveCache extends lru_cache_1.LRUCache {
    constructor() {
      super({ max: 256 });
    }
  }
  exports.ResolveCache = ResolveCache;

  class ChildrenCache extends lru_cache_1.LRUCache {
    constructor(maxSize = 16 * 1024) {
      super({
        maxSize,
        sizeCalculation: (a) => a.length + 1
      });
    }
  }
  exports.ChildrenCache = ChildrenCache;
  var setAsCwd = Symbol("PathScurry setAsCwd");

  class PathBase {
    name;
    root;
    roots;
    parent;
    nocase;
    isCWD = false;
    #fs;
    #dev;
    get dev() {
      return this.#dev;
    }
    #mode;
    get mode() {
      return this.#mode;
    }
    #nlink;
    get nlink() {
      return this.#nlink;
    }
    #uid;
    get uid() {
      return this.#uid;
    }
    #gid;
    get gid() {
      return this.#gid;
    }
    #rdev;
    get rdev() {
      return this.#rdev;
    }
    #blksize;
    get blksize() {
      return this.#blksize;
    }
    #ino;
    get ino() {
      return this.#ino;
    }
    #size;
    get size() {
      return this.#size;
    }
    #blocks;
    get blocks() {
      return this.#blocks;
    }
    #atimeMs;
    get atimeMs() {
      return this.#atimeMs;
    }
    #mtimeMs;
    get mtimeMs() {
      return this.#mtimeMs;
    }
    #ctimeMs;
    get ctimeMs() {
      return this.#ctimeMs;
    }
    #birthtimeMs;
    get birthtimeMs() {
      return this.#birthtimeMs;
    }
    #atime;
    get atime() {
      return this.#atime;
    }
    #mtime;
    get mtime() {
      return this.#mtime;
    }
    #ctime;
    get ctime() {
      return this.#ctime;
    }
    #birthtime;
    get birthtime() {
      return this.#birthtime;
    }
    #matchName;
    #depth;
    #fullpath;
    #fullpathPosix;
    #relative;
    #relativePosix;
    #type;
    #children;
    #linkTarget;
    #realpath;
    get parentPath() {
      return (this.parent || this).fullpath();
    }
    get path() {
      return this.parentPath;
    }
    constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
      this.name = name;
      this.#matchName = nocase ? normalizeNocase(name) : normalize(name);
      this.#type = type & TYPEMASK;
      this.nocase = nocase;
      this.roots = roots;
      this.root = root || this;
      this.#children = children;
      this.#fullpath = opts.fullpath;
      this.#relative = opts.relative;
      this.#relativePosix = opts.relativePosix;
      this.parent = opts.parent;
      if (this.parent) {
        this.#fs = this.parent.#fs;
      } else {
        this.#fs = fsFromOption(opts.fs);
      }
    }
    depth() {
      if (this.#depth !== undefined)
        return this.#depth;
      if (!this.parent)
        return this.#depth = 0;
      return this.#depth = this.parent.depth() + 1;
    }
    childrenCache() {
      return this.#children;
    }
    resolve(path) {
      if (!path) {
        return this;
      }
      const rootPath = this.getRootString(path);
      const dir = path.substring(rootPath.length);
      const dirParts = dir.split(this.splitSep);
      const result = rootPath ? this.getRoot(rootPath).#resolveParts(dirParts) : this.#resolveParts(dirParts);
      return result;
    }
    #resolveParts(dirParts) {
      let p = this;
      for (const part of dirParts) {
        p = p.child(part);
      }
      return p;
    }
    children() {
      const cached = this.#children.get(this);
      if (cached) {
        return cached;
      }
      const children = Object.assign([], { provisional: 0 });
      this.#children.set(this, children);
      this.#type &= ~READDIR_CALLED;
      return children;
    }
    child(pathPart, opts) {
      if (pathPart === "" || pathPart === ".") {
        return this;
      }
      if (pathPart === "..") {
        return this.parent || this;
      }
      const children = this.children();
      const name = this.nocase ? normalizeNocase(pathPart) : normalize(pathPart);
      for (const p of children) {
        if (p.#matchName === name) {
          return p;
        }
      }
      const s = this.parent ? this.sep : "";
      const fullpath = this.#fullpath ? this.#fullpath + s + pathPart : undefined;
      const pchild = this.newChild(pathPart, UNKNOWN, {
        ...opts,
        parent: this,
        fullpath
      });
      if (!this.canReaddir()) {
        pchild.#type |= ENOENT;
      }
      children.push(pchild);
      return pchild;
    }
    relative() {
      if (this.isCWD)
        return "";
      if (this.#relative !== undefined) {
        return this.#relative;
      }
      const name = this.name;
      const p = this.parent;
      if (!p) {
        return this.#relative = this.name;
      }
      const pv = p.relative();
      return pv + (!pv || !p.parent ? "" : this.sep) + name;
    }
    relativePosix() {
      if (this.sep === "/")
        return this.relative();
      if (this.isCWD)
        return "";
      if (this.#relativePosix !== undefined)
        return this.#relativePosix;
      const name = this.name;
      const p = this.parent;
      if (!p) {
        return this.#relativePosix = this.fullpathPosix();
      }
      const pv = p.relativePosix();
      return pv + (!pv || !p.parent ? "" : "/") + name;
    }
    fullpath() {
      if (this.#fullpath !== undefined) {
        return this.#fullpath;
      }
      const name = this.name;
      const p = this.parent;
      if (!p) {
        return this.#fullpath = this.name;
      }
      const pv = p.fullpath();
      const fp = pv + (!p.parent ? "" : this.sep) + name;
      return this.#fullpath = fp;
    }
    fullpathPosix() {
      if (this.#fullpathPosix !== undefined)
        return this.#fullpathPosix;
      if (this.sep === "/")
        return this.#fullpathPosix = this.fullpath();
      if (!this.parent) {
        const p2 = this.fullpath().replace(/\\/g, "/");
        if (/^[a-z]:\//i.test(p2)) {
          return this.#fullpathPosix = `//?/${p2}`;
        } else {
          return this.#fullpathPosix = p2;
        }
      }
      const p = this.parent;
      const pfpp = p.fullpathPosix();
      const fpp = pfpp + (!pfpp || !p.parent ? "" : "/") + this.name;
      return this.#fullpathPosix = fpp;
    }
    isUnknown() {
      return (this.#type & IFMT) === UNKNOWN;
    }
    isType(type) {
      return this[`is${type}`]();
    }
    getType() {
      return this.isUnknown() ? "Unknown" : this.isDirectory() ? "Directory" : this.isFile() ? "File" : this.isSymbolicLink() ? "SymbolicLink" : this.isFIFO() ? "FIFO" : this.isCharacterDevice() ? "CharacterDevice" : this.isBlockDevice() ? "BlockDevice" : this.isSocket() ? "Socket" : "Unknown";
    }
    isFile() {
      return (this.#type & IFMT) === IFREG;
    }
    isDirectory() {
      return (this.#type & IFMT) === IFDIR;
    }
    isCharacterDevice() {
      return (this.#type & IFMT) === IFCHR;
    }
    isBlockDevice() {
      return (this.#type & IFMT) === IFBLK;
    }
    isFIFO() {
      return (this.#type & IFMT) === IFIFO;
    }
    isSocket() {
      return (this.#type & IFMT) === IFSOCK;
    }
    isSymbolicLink() {
      return (this.#type & IFLNK) === IFLNK;
    }
    lstatCached() {
      return this.#type & LSTAT_CALLED ? this : undefined;
    }
    readlinkCached() {
      return this.#linkTarget;
    }
    realpathCached() {
      return this.#realpath;
    }
    readdirCached() {
      const children = this.children();
      return children.slice(0, children.provisional);
    }
    canReadlink() {
      if (this.#linkTarget)
        return true;
      if (!this.parent)
        return false;
      const ifmt = this.#type & IFMT;
      return !(ifmt !== UNKNOWN && ifmt !== IFLNK || this.#type & ENOREADLINK || this.#type & ENOENT);
    }
    calledReaddir() {
      return !!(this.#type & READDIR_CALLED);
    }
    isENOENT() {
      return !!(this.#type & ENOENT);
    }
    isNamed(n) {
      return !this.nocase ? this.#matchName === normalize(n) : this.#matchName === normalizeNocase(n);
    }
    async readlink() {
      const target = this.#linkTarget;
      if (target) {
        return target;
      }
      if (!this.canReadlink()) {
        return;
      }
      if (!this.parent) {
        return;
      }
      try {
        const read = await this.#fs.promises.readlink(this.fullpath());
        const linkTarget = (await this.parent.realpath())?.resolve(read);
        if (linkTarget) {
          return this.#linkTarget = linkTarget;
        }
      } catch (er) {
        this.#readlinkFail(er.code);
        return;
      }
    }
    readlinkSync() {
      const target = this.#linkTarget;
      if (target) {
        return target;
      }
      if (!this.canReadlink()) {
        return;
      }
      if (!this.parent) {
        return;
      }
      try {
        const read = this.#fs.readlinkSync(this.fullpath());
        const linkTarget = this.parent.realpathSync()?.resolve(read);
        if (linkTarget) {
          return this.#linkTarget = linkTarget;
        }
      } catch (er) {
        this.#readlinkFail(er.code);
        return;
      }
    }
    #readdirSuccess(children) {
      this.#type |= READDIR_CALLED;
      for (let p = children.provisional;p < children.length; p++) {
        const c = children[p];
        if (c)
          c.#markENOENT();
      }
    }
    #markENOENT() {
      if (this.#type & ENOENT)
        return;
      this.#type = (this.#type | ENOENT) & IFMT_UNKNOWN;
      this.#markChildrenENOENT();
    }
    #markChildrenENOENT() {
      const children = this.children();
      children.provisional = 0;
      for (const p of children) {
        p.#markENOENT();
      }
    }
    #markENOREALPATH() {
      this.#type |= ENOREALPATH;
      this.#markENOTDIR();
    }
    #markENOTDIR() {
      if (this.#type & ENOTDIR)
        return;
      let t = this.#type;
      if ((t & IFMT) === IFDIR)
        t &= IFMT_UNKNOWN;
      this.#type = t | ENOTDIR;
      this.#markChildrenENOENT();
    }
    #readdirFail(code = "") {
      if (code === "ENOTDIR" || code === "EPERM") {
        this.#markENOTDIR();
      } else if (code === "ENOENT") {
        this.#markENOENT();
      } else {
        this.children().provisional = 0;
      }
    }
    #lstatFail(code = "") {
      if (code === "ENOTDIR") {
        const p = this.parent;
        p.#markENOTDIR();
      } else if (code === "ENOENT") {
        this.#markENOENT();
      }
    }
    #readlinkFail(code = "") {
      let ter = this.#type;
      ter |= ENOREADLINK;
      if (code === "ENOENT")
        ter |= ENOENT;
      if (code === "EINVAL" || code === "UNKNOWN") {
        ter &= IFMT_UNKNOWN;
      }
      this.#type = ter;
      if (code === "ENOTDIR" && this.parent) {
        this.parent.#markENOTDIR();
      }
    }
    #readdirAddChild(e, c) {
      return this.#readdirMaybePromoteChild(e, c) || this.#readdirAddNewChild(e, c);
    }
    #readdirAddNewChild(e, c) {
      const type = entToType(e);
      const child = this.newChild(e.name, type, { parent: this });
      const ifmt = child.#type & IFMT;
      if (ifmt !== IFDIR && ifmt !== IFLNK && ifmt !== UNKNOWN) {
        child.#type |= ENOTDIR;
      }
      c.unshift(child);
      c.provisional++;
      return child;
    }
    #readdirMaybePromoteChild(e, c) {
      for (let p = c.provisional;p < c.length; p++) {
        const pchild = c[p];
        const name = this.nocase ? normalizeNocase(e.name) : normalize(e.name);
        if (name !== pchild.#matchName) {
          continue;
        }
        return this.#readdirPromoteChild(e, pchild, p, c);
      }
    }
    #readdirPromoteChild(e, p, index, c) {
      const v = p.name;
      p.#type = p.#type & IFMT_UNKNOWN | entToType(e);
      if (v !== e.name)
        p.name = e.name;
      if (index !== c.provisional) {
        if (index === c.length - 1)
          c.pop();
        else
          c.splice(index, 1);
        c.unshift(p);
      }
      c.provisional++;
      return p;
    }
    async lstat() {
      if ((this.#type & ENOENT) === 0) {
        try {
          this.#applyStat(await this.#fs.promises.lstat(this.fullpath()));
          return this;
        } catch (er) {
          this.#lstatFail(er.code);
        }
      }
    }
    lstatSync() {
      if ((this.#type & ENOENT) === 0) {
        try {
          this.#applyStat(this.#fs.lstatSync(this.fullpath()));
          return this;
        } catch (er) {
          this.#lstatFail(er.code);
        }
      }
    }
    #applyStat(st) {
      const { atime, atimeMs, birthtime, birthtimeMs, blksize, blocks, ctime, ctimeMs, dev, gid, ino, mode, mtime, mtimeMs, nlink, rdev, size, uid } = st;
      this.#atime = atime;
      this.#atimeMs = atimeMs;
      this.#birthtime = birthtime;
      this.#birthtimeMs = birthtimeMs;
      this.#blksize = blksize;
      this.#blocks = blocks;
      this.#ctime = ctime;
      this.#ctimeMs = ctimeMs;
      this.#dev = dev;
      this.#gid = gid;
      this.#ino = ino;
      this.#mode = mode;
      this.#mtime = mtime;
      this.#mtimeMs = mtimeMs;
      this.#nlink = nlink;
      this.#rdev = rdev;
      this.#size = size;
      this.#uid = uid;
      const ifmt = entToType(st);
      this.#type = this.#type & IFMT_UNKNOWN | ifmt | LSTAT_CALLED;
      if (ifmt !== UNKNOWN && ifmt !== IFDIR && ifmt !== IFLNK) {
        this.#type |= ENOTDIR;
      }
    }
    #onReaddirCB = [];
    #readdirCBInFlight = false;
    #callOnReaddirCB(children) {
      this.#readdirCBInFlight = false;
      const cbs = this.#onReaddirCB.slice();
      this.#onReaddirCB.length = 0;
      cbs.forEach((cb) => cb(null, children));
    }
    readdirCB(cb, allowZalgo = false) {
      if (!this.canReaddir()) {
        if (allowZalgo)
          cb(null, []);
        else
          queueMicrotask(() => cb(null, []));
        return;
      }
      const children = this.children();
      if (this.calledReaddir()) {
        const c = children.slice(0, children.provisional);
        if (allowZalgo)
          cb(null, c);
        else
          queueMicrotask(() => cb(null, c));
        return;
      }
      this.#onReaddirCB.push(cb);
      if (this.#readdirCBInFlight) {
        return;
      }
      this.#readdirCBInFlight = true;
      const fullpath = this.fullpath();
      this.#fs.readdir(fullpath, { withFileTypes: true }, (er, entries) => {
        if (er) {
          this.#readdirFail(er.code);
          children.provisional = 0;
        } else {
          for (const e of entries) {
            this.#readdirAddChild(e, children);
          }
          this.#readdirSuccess(children);
        }
        this.#callOnReaddirCB(children.slice(0, children.provisional));
        return;
      });
    }
    #asyncReaddirInFlight;
    async readdir() {
      if (!this.canReaddir()) {
        return [];
      }
      const children = this.children();
      if (this.calledReaddir()) {
        return children.slice(0, children.provisional);
      }
      const fullpath = this.fullpath();
      if (this.#asyncReaddirInFlight) {
        await this.#asyncReaddirInFlight;
      } else {
        let resolve = () => {
        };
        this.#asyncReaddirInFlight = new Promise((res) => resolve = res);
        try {
          for (const e of await this.#fs.promises.readdir(fullpath, {
            withFileTypes: true
          })) {
            this.#readdirAddChild(e, children);
          }
          this.#readdirSuccess(children);
        } catch (er) {
          this.#readdirFail(er.code);
          children.provisional = 0;
        }
        this.#asyncReaddirInFlight = undefined;
        resolve();
      }
      return children.slice(0, children.provisional);
    }
    readdirSync() {
      if (!this.canReaddir()) {
        return [];
      }
      const children = this.children();
      if (this.calledReaddir()) {
        return children.slice(0, children.provisional);
      }
      const fullpath = this.fullpath();
      try {
        for (const e of this.#fs.readdirSync(fullpath, {
          withFileTypes: true
        })) {
          this.#readdirAddChild(e, children);
        }
        this.#readdirSuccess(children);
      } catch (er) {
        this.#readdirFail(er.code);
        children.provisional = 0;
      }
      return children.slice(0, children.provisional);
    }
    canReaddir() {
      if (this.#type & ENOCHILD)
        return false;
      const ifmt = IFMT & this.#type;
      if (!(ifmt === UNKNOWN || ifmt === IFDIR || ifmt === IFLNK)) {
        return false;
      }
      return true;
    }
    shouldWalk(dirs, walkFilter) {
      return (this.#type & IFDIR) === IFDIR && !(this.#type & ENOCHILD) && !dirs.has(this) && (!walkFilter || walkFilter(this));
    }
    async realpath() {
      if (this.#realpath)
        return this.#realpath;
      if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type)
        return;
      try {
        const rp = await this.#fs.promises.realpath(this.fullpath());
        return this.#realpath = this.resolve(rp);
      } catch (_) {
        this.#markENOREALPATH();
      }
    }
    realpathSync() {
      if (this.#realpath)
        return this.#realpath;
      if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type)
        return;
      try {
        const rp = this.#fs.realpathSync(this.fullpath());
        return this.#realpath = this.resolve(rp);
      } catch (_) {
        this.#markENOREALPATH();
      }
    }
    [setAsCwd](oldCwd) {
      if (oldCwd === this)
        return;
      oldCwd.isCWD = false;
      this.isCWD = true;
      const changed = new Set([]);
      let rp = [];
      let p = this;
      while (p && p.parent) {
        changed.add(p);
        p.#relative = rp.join(this.sep);
        p.#relativePosix = rp.join("/");
        p = p.parent;
        rp.push("..");
      }
      p = oldCwd;
      while (p && p.parent && !changed.has(p)) {
        p.#relative = undefined;
        p.#relativePosix = undefined;
        p = p.parent;
      }
    }
  }
  exports.PathBase = PathBase;

  class PathWin32 extends PathBase {
    sep = "\\";
    splitSep = eitherSep;
    constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
      super(name, type, root, roots, nocase, children, opts);
    }
    newChild(name, type = UNKNOWN, opts = {}) {
      return new PathWin32(name, type, this.root, this.roots, this.nocase, this.childrenCache(), opts);
    }
    getRootString(path) {
      return node_path_1.win32.parse(path).root;
    }
    getRoot(rootPath) {
      rootPath = uncToDrive(rootPath.toUpperCase());
      if (rootPath === this.root.name) {
        return this.root;
      }
      for (const [compare, root] of Object.entries(this.roots)) {
        if (this.sameRoot(rootPath, compare)) {
          return this.roots[rootPath] = root;
        }
      }
      return this.roots[rootPath] = new PathScurryWin32(rootPath, this).root;
    }
    sameRoot(rootPath, compare = this.root.name) {
      rootPath = rootPath.toUpperCase().replace(/\//g, "\\").replace(uncDriveRegexp, "$1\\");
      return rootPath === compare;
    }
  }
  exports.PathWin32 = PathWin32;

  class PathPosix extends PathBase {
    splitSep = "/";
    sep = "/";
    constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
      super(name, type, root, roots, nocase, children, opts);
    }
    getRootString(path) {
      return path.startsWith("/") ? "/" : "";
    }
    getRoot(_rootPath) {
      return this.root;
    }
    newChild(name, type = UNKNOWN, opts = {}) {
      return new PathPosix(name, type, this.root, this.roots, this.nocase, this.childrenCache(), opts);
    }
  }
  exports.PathPosix = PathPosix;

  class PathScurryBase {
    root;
    rootPath;
    roots;
    cwd;
    #resolveCache;
    #resolvePosixCache;
    #children;
    nocase;
    #fs;
    constructor(cwd = process.cwd(), pathImpl, sep, { nocase, childrenCacheSize = 16 * 1024, fs = defaultFS } = {}) {
      this.#fs = fsFromOption(fs);
      if (cwd instanceof URL || cwd.startsWith("file://")) {
        cwd = (0, node_url_1.fileURLToPath)(cwd);
      }
      const cwdPath = pathImpl.resolve(cwd);
      this.roots = Object.create(null);
      this.rootPath = this.parseRootPath(cwdPath);
      this.#resolveCache = new ResolveCache;
      this.#resolvePosixCache = new ResolveCache;
      this.#children = new ChildrenCache(childrenCacheSize);
      const split = cwdPath.substring(this.rootPath.length).split(sep);
      if (split.length === 1 && !split[0]) {
        split.pop();
      }
      if (nocase === undefined) {
        throw new TypeError("must provide nocase setting to PathScurryBase ctor");
      }
      this.nocase = nocase;
      this.root = this.newRoot(this.#fs);
      this.roots[this.rootPath] = this.root;
      let prev = this.root;
      let len = split.length - 1;
      const joinSep = pathImpl.sep;
      let abs = this.rootPath;
      let sawFirst = false;
      for (const part of split) {
        const l = len--;
        prev = prev.child(part, {
          relative: new Array(l).fill("..").join(joinSep),
          relativePosix: new Array(l).fill("..").join("/"),
          fullpath: abs += (sawFirst ? "" : joinSep) + part
        });
        sawFirst = true;
      }
      this.cwd = prev;
    }
    depth(path = this.cwd) {
      if (typeof path === "string") {
        path = this.cwd.resolve(path);
      }
      return path.depth();
    }
    childrenCache() {
      return this.#children;
    }
    resolve(...paths) {
      let r = "";
      for (let i = paths.length - 1;i >= 0; i--) {
        const p = paths[i];
        if (!p || p === ".")
          continue;
        r = r ? `${p}/${r}` : p;
        if (this.isAbsolute(p)) {
          break;
        }
      }
      const cached = this.#resolveCache.get(r);
      if (cached !== undefined) {
        return cached;
      }
      const result = this.cwd.resolve(r).fullpath();
      this.#resolveCache.set(r, result);
      return result;
    }
    resolvePosix(...paths) {
      let r = "";
      for (let i = paths.length - 1;i >= 0; i--) {
        const p = paths[i];
        if (!p || p === ".")
          continue;
        r = r ? `${p}/${r}` : p;
        if (this.isAbsolute(p)) {
          break;
        }
      }
      const cached = this.#resolvePosixCache.get(r);
      if (cached !== undefined) {
        return cached;
      }
      const result = this.cwd.resolve(r).fullpathPosix();
      this.#resolvePosixCache.set(r, result);
      return result;
    }
    relative(entry = this.cwd) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      }
      return entry.relative();
    }
    relativePosix(entry = this.cwd) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      }
      return entry.relativePosix();
    }
    basename(entry = this.cwd) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      }
      return entry.name;
    }
    dirname(entry = this.cwd) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      }
      return (entry.parent || entry).fullpath();
    }
    async readdir(entry = this.cwd, opts = {
      withFileTypes: true
    }) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      } else if (!(entry instanceof PathBase)) {
        opts = entry;
        entry = this.cwd;
      }
      const { withFileTypes } = opts;
      if (!entry.canReaddir()) {
        return [];
      } else {
        const p = await entry.readdir();
        return withFileTypes ? p : p.map((e) => e.name);
      }
    }
    readdirSync(entry = this.cwd, opts = {
      withFileTypes: true
    }) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      } else if (!(entry instanceof PathBase)) {
        opts = entry;
        entry = this.cwd;
      }
      const { withFileTypes = true } = opts;
      if (!entry.canReaddir()) {
        return [];
      } else if (withFileTypes) {
        return entry.readdirSync();
      } else {
        return entry.readdirSync().map((e) => e.name);
      }
    }
    async lstat(entry = this.cwd) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      }
      return entry.lstat();
    }
    lstatSync(entry = this.cwd) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      }
      return entry.lstatSync();
    }
    async readlink(entry = this.cwd, { withFileTypes } = {
      withFileTypes: false
    }) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      } else if (!(entry instanceof PathBase)) {
        withFileTypes = entry.withFileTypes;
        entry = this.cwd;
      }
      const e = await entry.readlink();
      return withFileTypes ? e : e?.fullpath();
    }
    readlinkSync(entry = this.cwd, { withFileTypes } = {
      withFileTypes: false
    }) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      } else if (!(entry instanceof PathBase)) {
        withFileTypes = entry.withFileTypes;
        entry = this.cwd;
      }
      const e = entry.readlinkSync();
      return withFileTypes ? e : e?.fullpath();
    }
    async realpath(entry = this.cwd, { withFileTypes } = {
      withFileTypes: false
    }) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      } else if (!(entry instanceof PathBase)) {
        withFileTypes = entry.withFileTypes;
        entry = this.cwd;
      }
      const e = await entry.realpath();
      return withFileTypes ? e : e?.fullpath();
    }
    realpathSync(entry = this.cwd, { withFileTypes } = {
      withFileTypes: false
    }) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      } else if (!(entry instanceof PathBase)) {
        withFileTypes = entry.withFileTypes;
        entry = this.cwd;
      }
      const e = entry.realpathSync();
      return withFileTypes ? e : e?.fullpath();
    }
    async walk(entry = this.cwd, opts = {}) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      } else if (!(entry instanceof PathBase)) {
        opts = entry;
        entry = this.cwd;
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts;
      const results = [];
      if (!filter || filter(entry)) {
        results.push(withFileTypes ? entry : entry.fullpath());
      }
      const dirs = new Set;
      const walk = (dir, cb) => {
        dirs.add(dir);
        dir.readdirCB((er, entries) => {
          if (er) {
            return cb(er);
          }
          let len = entries.length;
          if (!len)
            return cb();
          const next = () => {
            if (--len === 0) {
              cb();
            }
          };
          for (const e of entries) {
            if (!filter || filter(e)) {
              results.push(withFileTypes ? e : e.fullpath());
            }
            if (follow && e.isSymbolicLink()) {
              e.realpath().then((r) => r?.isUnknown() ? r.lstat() : r).then((r) => r?.shouldWalk(dirs, walkFilter) ? walk(r, next) : next());
            } else {
              if (e.shouldWalk(dirs, walkFilter)) {
                walk(e, next);
              } else {
                next();
              }
            }
          }
        }, true);
      };
      const start = entry;
      return new Promise((res, rej) => {
        walk(start, (er) => {
          if (er)
            return rej(er);
          res(results);
        });
      });
    }
    walkSync(entry = this.cwd, opts = {}) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      } else if (!(entry instanceof PathBase)) {
        opts = entry;
        entry = this.cwd;
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts;
      const results = [];
      if (!filter || filter(entry)) {
        results.push(withFileTypes ? entry : entry.fullpath());
      }
      const dirs = new Set([entry]);
      for (const dir of dirs) {
        const entries = dir.readdirSync();
        for (const e of entries) {
          if (!filter || filter(e)) {
            results.push(withFileTypes ? e : e.fullpath());
          }
          let r = e;
          if (e.isSymbolicLink()) {
            if (!(follow && (r = e.realpathSync())))
              continue;
            if (r.isUnknown())
              r.lstatSync();
          }
          if (r.shouldWalk(dirs, walkFilter)) {
            dirs.add(r);
          }
        }
      }
      return results;
    }
    [Symbol.asyncIterator]() {
      return this.iterate();
    }
    iterate(entry = this.cwd, options = {}) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      } else if (!(entry instanceof PathBase)) {
        options = entry;
        entry = this.cwd;
      }
      return this.stream(entry, options)[Symbol.asyncIterator]();
    }
    [Symbol.iterator]() {
      return this.iterateSync();
    }
    *iterateSync(entry = this.cwd, opts = {}) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      } else if (!(entry instanceof PathBase)) {
        opts = entry;
        entry = this.cwd;
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts;
      if (!filter || filter(entry)) {
        yield withFileTypes ? entry : entry.fullpath();
      }
      const dirs = new Set([entry]);
      for (const dir of dirs) {
        const entries = dir.readdirSync();
        for (const e of entries) {
          if (!filter || filter(e)) {
            yield withFileTypes ? e : e.fullpath();
          }
          let r = e;
          if (e.isSymbolicLink()) {
            if (!(follow && (r = e.realpathSync())))
              continue;
            if (r.isUnknown())
              r.lstatSync();
          }
          if (r.shouldWalk(dirs, walkFilter)) {
            dirs.add(r);
          }
        }
      }
    }
    stream(entry = this.cwd, opts = {}) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      } else if (!(entry instanceof PathBase)) {
        opts = entry;
        entry = this.cwd;
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts;
      const results = new minipass_1.Minipass({ objectMode: true });
      if (!filter || filter(entry)) {
        results.write(withFileTypes ? entry : entry.fullpath());
      }
      const dirs = new Set;
      const queue = [entry];
      let processing = 0;
      const process2 = () => {
        let paused = false;
        while (!paused) {
          const dir = queue.shift();
          if (!dir) {
            if (processing === 0)
              results.end();
            return;
          }
          processing++;
          dirs.add(dir);
          const onReaddir = (er, entries, didRealpaths = false) => {
            if (er)
              return results.emit("error", er);
            if (follow && !didRealpaths) {
              const promises = [];
              for (const e of entries) {
                if (e.isSymbolicLink()) {
                  promises.push(e.realpath().then((r) => r?.isUnknown() ? r.lstat() : r));
                }
              }
              if (promises.length) {
                Promise.all(promises).then(() => onReaddir(null, entries, true));
                return;
              }
            }
            for (const e of entries) {
              if (e && (!filter || filter(e))) {
                if (!results.write(withFileTypes ? e : e.fullpath())) {
                  paused = true;
                }
              }
            }
            processing--;
            for (const e of entries) {
              const r = e.realpathCached() || e;
              if (r.shouldWalk(dirs, walkFilter)) {
                queue.push(r);
              }
            }
            if (paused && !results.flowing) {
              results.once("drain", process2);
            } else if (!sync) {
              process2();
            }
          };
          let sync = true;
          dir.readdirCB(onReaddir, true);
          sync = false;
        }
      };
      process2();
      return results;
    }
    streamSync(entry = this.cwd, opts = {}) {
      if (typeof entry === "string") {
        entry = this.cwd.resolve(entry);
      } else if (!(entry instanceof PathBase)) {
        opts = entry;
        entry = this.cwd;
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts;
      const results = new minipass_1.Minipass({ objectMode: true });
      const dirs = new Set;
      if (!filter || filter(entry)) {
        results.write(withFileTypes ? entry : entry.fullpath());
      }
      const queue = [entry];
      let processing = 0;
      const process2 = () => {
        let paused = false;
        while (!paused) {
          const dir = queue.shift();
          if (!dir) {
            if (processing === 0)
              results.end();
            return;
          }
          processing++;
          dirs.add(dir);
          const entries = dir.readdirSync();
          for (const e of entries) {
            if (!filter || filter(e)) {
              if (!results.write(withFileTypes ? e : e.fullpath())) {
                paused = true;
              }
            }
          }
          processing--;
          for (const e of entries) {
            let r = e;
            if (e.isSymbolicLink()) {
              if (!(follow && (r = e.realpathSync())))
                continue;
              if (r.isUnknown())
                r.lstatSync();
            }
            if (r.shouldWalk(dirs, walkFilter)) {
              queue.push(r);
            }
          }
        }
        if (paused && !results.flowing)
          results.once("drain", process2);
      };
      process2();
      return results;
    }
    chdir(path = this.cwd) {
      const oldCwd = this.cwd;
      this.cwd = typeof path === "string" ? this.cwd.resolve(path) : path;
      this.cwd[setAsCwd](oldCwd);
    }
  }
  exports.PathScurryBase = PathScurryBase;

  class PathScurryWin32 extends PathScurryBase {
    sep = "\\";
    constructor(cwd = process.cwd(), opts = {}) {
      const { nocase = true } = opts;
      super(cwd, node_path_1.win32, "\\", { ...opts, nocase });
      this.nocase = nocase;
      for (let p = this.cwd;p; p = p.parent) {
        p.nocase = this.nocase;
      }
    }
    parseRootPath(dir) {
      return node_path_1.win32.parse(dir).root.toUpperCase();
    }
    newRoot(fs) {
      return new PathWin32(this.rootPath, IFDIR, undefined, this.roots, this.nocase, this.childrenCache(), { fs });
    }
    isAbsolute(p) {
      return p.startsWith("/") || p.startsWith("\\") || /^[a-z]:(\/|\\)/i.test(p);
    }
  }
  exports.PathScurryWin32 = PathScurryWin32;

  class PathScurryPosix extends PathScurryBase {
    sep = "/";
    constructor(cwd = process.cwd(), opts = {}) {
      const { nocase = false } = opts;
      super(cwd, node_path_1.posix, "/", { ...opts, nocase });
      this.nocase = nocase;
    }
    parseRootPath(_dir) {
      return "/";
    }
    newRoot(fs) {
      return new PathPosix(this.rootPath, IFDIR, undefined, this.roots, this.nocase, this.childrenCache(), { fs });
    }
    isAbsolute(p) {
      return p.startsWith("/");
    }
  }
  exports.PathScurryPosix = PathScurryPosix;

  class PathScurryDarwin extends PathScurryPosix {
    constructor(cwd = process.cwd(), opts = {}) {
      const { nocase = true } = opts;
      super(cwd, { ...opts, nocase });
    }
  }
  exports.PathScurryDarwin = PathScurryDarwin;
  exports.Path = process.platform === "win32" ? PathWin32 : PathPosix;
  exports.PathScurry = process.platform === "win32" ? PathScurryWin32 : process.platform === "darwin" ? PathScurryDarwin : PathScurryPosix;
});

// node_modules/glob/dist/commonjs/pattern.js
var require_pattern = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Pattern = undefined;
  var minimatch_1 = require_commonjs();
  var isPatternList = (pl) => pl.length >= 1;
  var isGlobList = (gl) => gl.length >= 1;

  class Pattern {
    #patternList;
    #globList;
    #index;
    length;
    #platform;
    #rest;
    #globString;
    #isDrive;
    #isUNC;
    #isAbsolute;
    #followGlobstar = true;
    constructor(patternList, globList, index, platform) {
      if (!isPatternList(patternList)) {
        throw new TypeError("empty pattern list");
      }
      if (!isGlobList(globList)) {
        throw new TypeError("empty glob list");
      }
      if (globList.length !== patternList.length) {
        throw new TypeError("mismatched pattern list and glob list lengths");
      }
      this.length = patternList.length;
      if (index < 0 || index >= this.length) {
        throw new TypeError("index out of range");
      }
      this.#patternList = patternList;
      this.#globList = globList;
      this.#index = index;
      this.#platform = platform;
      if (this.#index === 0) {
        if (this.isUNC()) {
          const [p0, p1, p2, p3, ...prest] = this.#patternList;
          const [g0, g1, g2, g3, ...grest] = this.#globList;
          if (prest[0] === "") {
            prest.shift();
            grest.shift();
          }
          const p = [p0, p1, p2, p3, ""].join("/");
          const g = [g0, g1, g2, g3, ""].join("/");
          this.#patternList = [p, ...prest];
          this.#globList = [g, ...grest];
          this.length = this.#patternList.length;
        } else if (this.isDrive() || this.isAbsolute()) {
          const [p1, ...prest] = this.#patternList;
          const [g1, ...grest] = this.#globList;
          if (prest[0] === "") {
            prest.shift();
            grest.shift();
          }
          const p = p1 + "/";
          const g = g1 + "/";
          this.#patternList = [p, ...prest];
          this.#globList = [g, ...grest];
          this.length = this.#patternList.length;
        }
      }
    }
    pattern() {
      return this.#patternList[this.#index];
    }
    isString() {
      return typeof this.#patternList[this.#index] === "string";
    }
    isGlobstar() {
      return this.#patternList[this.#index] === minimatch_1.GLOBSTAR;
    }
    isRegExp() {
      return this.#patternList[this.#index] instanceof RegExp;
    }
    globString() {
      return this.#globString = this.#globString || (this.#index === 0 ? this.isAbsolute() ? this.#globList[0] + this.#globList.slice(1).join("/") : this.#globList.join("/") : this.#globList.slice(this.#index).join("/"));
    }
    hasMore() {
      return this.length > this.#index + 1;
    }
    rest() {
      if (this.#rest !== undefined)
        return this.#rest;
      if (!this.hasMore())
        return this.#rest = null;
      this.#rest = new Pattern(this.#patternList, this.#globList, this.#index + 1, this.#platform);
      this.#rest.#isAbsolute = this.#isAbsolute;
      this.#rest.#isUNC = this.#isUNC;
      this.#rest.#isDrive = this.#isDrive;
      return this.#rest;
    }
    isUNC() {
      const pl = this.#patternList;
      return this.#isUNC !== undefined ? this.#isUNC : this.#isUNC = this.#platform === "win32" && this.#index === 0 && pl[0] === "" && pl[1] === "" && typeof pl[2] === "string" && !!pl[2] && typeof pl[3] === "string" && !!pl[3];
    }
    isDrive() {
      const pl = this.#patternList;
      return this.#isDrive !== undefined ? this.#isDrive : this.#isDrive = this.#platform === "win32" && this.#index === 0 && this.length > 1 && typeof pl[0] === "string" && /^[a-z]:$/i.test(pl[0]);
    }
    isAbsolute() {
      const pl = this.#patternList;
      return this.#isAbsolute !== undefined ? this.#isAbsolute : this.#isAbsolute = pl[0] === "" && pl.length > 1 || this.isDrive() || this.isUNC();
    }
    root() {
      const p = this.#patternList[0];
      return typeof p === "string" && this.isAbsolute() && this.#index === 0 ? p : "";
    }
    checkFollowGlobstar() {
      return !(this.#index === 0 || !this.isGlobstar() || !this.#followGlobstar);
    }
    markFollowGlobstar() {
      if (this.#index === 0 || !this.isGlobstar() || !this.#followGlobstar)
        return false;
      this.#followGlobstar = false;
      return true;
    }
  }
  exports.Pattern = Pattern;
});

// node_modules/glob/dist/commonjs/ignore.js
var require_ignore = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Ignore = undefined;
  var minimatch_1 = require_commonjs();
  var pattern_js_1 = require_pattern();
  var defaultPlatform = typeof process === "object" && process && typeof process.platform === "string" ? process.platform : "linux";

  class Ignore {
    relative;
    relativeChildren;
    absolute;
    absoluteChildren;
    platform;
    mmopts;
    constructor(ignored, { nobrace, nocase, noext, noglobstar, platform = defaultPlatform }) {
      this.relative = [];
      this.absolute = [];
      this.relativeChildren = [];
      this.absoluteChildren = [];
      this.platform = platform;
      this.mmopts = {
        dot: true,
        nobrace,
        nocase,
        noext,
        noglobstar,
        optimizationLevel: 2,
        platform,
        nocomment: true,
        nonegate: true
      };
      for (const ign of ignored)
        this.add(ign);
    }
    add(ign) {
      const mm = new minimatch_1.Minimatch(ign, this.mmopts);
      for (let i = 0;i < mm.set.length; i++) {
        const parsed = mm.set[i];
        const globParts = mm.globParts[i];
        if (!parsed || !globParts) {
          throw new Error("invalid pattern object");
        }
        while (parsed[0] === "." && globParts[0] === ".") {
          parsed.shift();
          globParts.shift();
        }
        const p = new pattern_js_1.Pattern(parsed, globParts, 0, this.platform);
        const m = new minimatch_1.Minimatch(p.globString(), this.mmopts);
        const children = globParts[globParts.length - 1] === "**";
        const absolute = p.isAbsolute();
        if (absolute)
          this.absolute.push(m);
        else
          this.relative.push(m);
        if (children) {
          if (absolute)
            this.absoluteChildren.push(m);
          else
            this.relativeChildren.push(m);
        }
      }
    }
    ignored(p) {
      const fullpath = p.fullpath();
      const fullpaths = `${fullpath}/`;
      const relative = p.relative() || ".";
      const relatives = `${relative}/`;
      for (const m of this.relative) {
        if (m.match(relative) || m.match(relatives))
          return true;
      }
      for (const m of this.absolute) {
        if (m.match(fullpath) || m.match(fullpaths))
          return true;
      }
      return false;
    }
    childrenIgnored(p) {
      const fullpath = p.fullpath() + "/";
      const relative = (p.relative() || ".") + "/";
      for (const m of this.relativeChildren) {
        if (m.match(relative))
          return true;
      }
      for (const m of this.absoluteChildren) {
        if (m.match(fullpath))
          return true;
      }
      return false;
    }
  }
  exports.Ignore = Ignore;
});

// node_modules/glob/dist/commonjs/processor.js
var require_processor = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Processor = exports.SubWalks = exports.MatchRecord = exports.HasWalkedCache = undefined;
  var minimatch_1 = require_commonjs();

  class HasWalkedCache {
    store;
    constructor(store = new Map) {
      this.store = store;
    }
    copy() {
      return new HasWalkedCache(new Map(this.store));
    }
    hasWalked(target, pattern) {
      return this.store.get(target.fullpath())?.has(pattern.globString());
    }
    storeWalked(target, pattern) {
      const fullpath = target.fullpath();
      const cached = this.store.get(fullpath);
      if (cached)
        cached.add(pattern.globString());
      else
        this.store.set(fullpath, new Set([pattern.globString()]));
    }
  }
  exports.HasWalkedCache = HasWalkedCache;

  class MatchRecord {
    store = new Map;
    add(target, absolute, ifDir) {
      const n = (absolute ? 2 : 0) | (ifDir ? 1 : 0);
      const current = this.store.get(target);
      this.store.set(target, current === undefined ? n : n & current);
    }
    entries() {
      return [...this.store.entries()].map(([path, n]) => [
        path,
        !!(n & 2),
        !!(n & 1)
      ]);
    }
  }
  exports.MatchRecord = MatchRecord;

  class SubWalks {
    store = new Map;
    add(target, pattern) {
      if (!target.canReaddir()) {
        return;
      }
      const subs = this.store.get(target);
      if (subs) {
        if (!subs.find((p) => p.globString() === pattern.globString())) {
          subs.push(pattern);
        }
      } else
        this.store.set(target, [pattern]);
    }
    get(target) {
      const subs = this.store.get(target);
      if (!subs) {
        throw new Error("attempting to walk unknown path");
      }
      return subs;
    }
    entries() {
      return this.keys().map((k) => [k, this.store.get(k)]);
    }
    keys() {
      return [...this.store.keys()].filter((t) => t.canReaddir());
    }
  }
  exports.SubWalks = SubWalks;

  class Processor {
    hasWalkedCache;
    matches = new MatchRecord;
    subwalks = new SubWalks;
    patterns;
    follow;
    dot;
    opts;
    constructor(opts, hasWalkedCache) {
      this.opts = opts;
      this.follow = !!opts.follow;
      this.dot = !!opts.dot;
      this.hasWalkedCache = hasWalkedCache ? hasWalkedCache.copy() : new HasWalkedCache;
    }
    processPatterns(target, patterns) {
      this.patterns = patterns;
      const processingSet = patterns.map((p) => [target, p]);
      for (let [t, pattern] of processingSet) {
        this.hasWalkedCache.storeWalked(t, pattern);
        const root = pattern.root();
        const absolute = pattern.isAbsolute() && this.opts.absolute !== false;
        if (root) {
          t = t.resolve(root === "/" && this.opts.root !== undefined ? this.opts.root : root);
          const rest2 = pattern.rest();
          if (!rest2) {
            this.matches.add(t, true, false);
            continue;
          } else {
            pattern = rest2;
          }
        }
        if (t.isENOENT())
          continue;
        let p;
        let rest;
        let changed = false;
        while (typeof (p = pattern.pattern()) === "string" && (rest = pattern.rest())) {
          const c = t.resolve(p);
          t = c;
          pattern = rest;
          changed = true;
        }
        p = pattern.pattern();
        rest = pattern.rest();
        if (changed) {
          if (this.hasWalkedCache.hasWalked(t, pattern))
            continue;
          this.hasWalkedCache.storeWalked(t, pattern);
        }
        if (typeof p === "string") {
          const ifDir = p === ".." || p === "" || p === ".";
          this.matches.add(t.resolve(p), absolute, ifDir);
          continue;
        } else if (p === minimatch_1.GLOBSTAR) {
          if (!t.isSymbolicLink() || this.follow || pattern.checkFollowGlobstar()) {
            this.subwalks.add(t, pattern);
          }
          const rp = rest?.pattern();
          const rrest = rest?.rest();
          if (!rest || (rp === "" || rp === ".") && !rrest) {
            this.matches.add(t, absolute, rp === "" || rp === ".");
          } else {
            if (rp === "..") {
              const tp = t.parent || t;
              if (!rrest)
                this.matches.add(tp, absolute, true);
              else if (!this.hasWalkedCache.hasWalked(tp, rrest)) {
                this.subwalks.add(tp, rrest);
              }
            }
          }
        } else if (p instanceof RegExp) {
          this.subwalks.add(t, pattern);
        }
      }
      return this;
    }
    subwalkTargets() {
      return this.subwalks.keys();
    }
    child() {
      return new Processor(this.opts, this.hasWalkedCache);
    }
    filterEntries(parent, entries) {
      const patterns = this.subwalks.get(parent);
      const results = this.child();
      for (const e of entries) {
        for (const pattern of patterns) {
          const absolute = pattern.isAbsolute();
          const p = pattern.pattern();
          const rest = pattern.rest();
          if (p === minimatch_1.GLOBSTAR) {
            results.testGlobstar(e, pattern, rest, absolute);
          } else if (p instanceof RegExp) {
            results.testRegExp(e, p, rest, absolute);
          } else {
            results.testString(e, p, rest, absolute);
          }
        }
      }
      return results;
    }
    testGlobstar(e, pattern, rest, absolute) {
      if (this.dot || !e.name.startsWith(".")) {
        if (!pattern.hasMore()) {
          this.matches.add(e, absolute, false);
        }
        if (e.canReaddir()) {
          if (this.follow || !e.isSymbolicLink()) {
            this.subwalks.add(e, pattern);
          } else if (e.isSymbolicLink()) {
            if (rest && pattern.checkFollowGlobstar()) {
              this.subwalks.add(e, rest);
            } else if (pattern.markFollowGlobstar()) {
              this.subwalks.add(e, pattern);
            }
          }
        }
      }
      if (rest) {
        const rp = rest.pattern();
        if (typeof rp === "string" && rp !== ".." && rp !== "" && rp !== ".") {
          this.testString(e, rp, rest.rest(), absolute);
        } else if (rp === "..") {
          const ep = e.parent || e;
          this.subwalks.add(ep, rest);
        } else if (rp instanceof RegExp) {
          this.testRegExp(e, rp, rest.rest(), absolute);
        }
      }
    }
    testRegExp(e, p, rest, absolute) {
      if (!p.test(e.name))
        return;
      if (!rest) {
        this.matches.add(e, absolute, false);
      } else {
        this.subwalks.add(e, rest);
      }
    }
    testString(e, p, rest, absolute) {
      if (!e.isNamed(p))
        return;
      if (!rest) {
        this.matches.add(e, absolute, false);
      } else {
        this.subwalks.add(e, rest);
      }
    }
  }
  exports.Processor = Processor;
});

// node_modules/glob/dist/commonjs/walker.js
var require_walker = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.GlobStream = exports.GlobWalker = exports.GlobUtil = undefined;
  var minipass_1 = require_commonjs3();
  var ignore_js_1 = require_ignore();
  var processor_js_1 = require_processor();
  var makeIgnore = (ignore, opts) => typeof ignore === "string" ? new ignore_js_1.Ignore([ignore], opts) : Array.isArray(ignore) ? new ignore_js_1.Ignore(ignore, opts) : ignore;

  class GlobUtil {
    path;
    patterns;
    opts;
    seen = new Set;
    paused = false;
    aborted = false;
    #onResume = [];
    #ignore;
    #sep;
    signal;
    maxDepth;
    includeChildMatches;
    constructor(patterns, path, opts) {
      this.patterns = patterns;
      this.path = path;
      this.opts = opts;
      this.#sep = !opts.posix && opts.platform === "win32" ? "\\" : "/";
      this.includeChildMatches = opts.includeChildMatches !== false;
      if (opts.ignore || !this.includeChildMatches) {
        this.#ignore = makeIgnore(opts.ignore ?? [], opts);
        if (!this.includeChildMatches && typeof this.#ignore.add !== "function") {
          const m = "cannot ignore child matches, ignore lacks add() method.";
          throw new Error(m);
        }
      }
      this.maxDepth = opts.maxDepth || Infinity;
      if (opts.signal) {
        this.signal = opts.signal;
        this.signal.addEventListener("abort", () => {
          this.#onResume.length = 0;
        });
      }
    }
    #ignored(path) {
      return this.seen.has(path) || !!this.#ignore?.ignored?.(path);
    }
    #childrenIgnored(path) {
      return !!this.#ignore?.childrenIgnored?.(path);
    }
    pause() {
      this.paused = true;
    }
    resume() {
      if (this.signal?.aborted)
        return;
      this.paused = false;
      let fn = undefined;
      while (!this.paused && (fn = this.#onResume.shift())) {
        fn();
      }
    }
    onResume(fn) {
      if (this.signal?.aborted)
        return;
      if (!this.paused) {
        fn();
      } else {
        this.#onResume.push(fn);
      }
    }
    async matchCheck(e, ifDir) {
      if (ifDir && this.opts.nodir)
        return;
      let rpc;
      if (this.opts.realpath) {
        rpc = e.realpathCached() || await e.realpath();
        if (!rpc)
          return;
        e = rpc;
      }
      const needStat = e.isUnknown() || this.opts.stat;
      const s = needStat ? await e.lstat() : e;
      if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {
        const target = await s.realpath();
        if (target && (target.isUnknown() || this.opts.stat)) {
          await target.lstat();
        }
      }
      return this.matchCheckTest(s, ifDir);
    }
    matchCheckTest(e, ifDir) {
      return e && (this.maxDepth === Infinity || e.depth() <= this.maxDepth) && (!ifDir || e.canReaddir()) && (!this.opts.nodir || !e.isDirectory()) && (!this.opts.nodir || !this.opts.follow || !e.isSymbolicLink() || !e.realpathCached()?.isDirectory()) && !this.#ignored(e) ? e : undefined;
    }
    matchCheckSync(e, ifDir) {
      if (ifDir && this.opts.nodir)
        return;
      let rpc;
      if (this.opts.realpath) {
        rpc = e.realpathCached() || e.realpathSync();
        if (!rpc)
          return;
        e = rpc;
      }
      const needStat = e.isUnknown() || this.opts.stat;
      const s = needStat ? e.lstatSync() : e;
      if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {
        const target = s.realpathSync();
        if (target && (target?.isUnknown() || this.opts.stat)) {
          target.lstatSync();
        }
      }
      return this.matchCheckTest(s, ifDir);
    }
    matchFinish(e, absolute) {
      if (this.#ignored(e))
        return;
      if (!this.includeChildMatches && this.#ignore?.add) {
        const ign = `${e.relativePosix()}/**`;
        this.#ignore.add(ign);
      }
      const abs = this.opts.absolute === undefined ? absolute : this.opts.absolute;
      this.seen.add(e);
      const mark = this.opts.mark && e.isDirectory() ? this.#sep : "";
      if (this.opts.withFileTypes) {
        this.matchEmit(e);
      } else if (abs) {
        const abs2 = this.opts.posix ? e.fullpathPosix() : e.fullpath();
        this.matchEmit(abs2 + mark);
      } else {
        const rel = this.opts.posix ? e.relativePosix() : e.relative();
        const pre = this.opts.dotRelative && !rel.startsWith(".." + this.#sep) ? "." + this.#sep : "";
        this.matchEmit(!rel ? "." + mark : pre + rel + mark);
      }
    }
    async match(e, absolute, ifDir) {
      const p = await this.matchCheck(e, ifDir);
      if (p)
        this.matchFinish(p, absolute);
    }
    matchSync(e, absolute, ifDir) {
      const p = this.matchCheckSync(e, ifDir);
      if (p)
        this.matchFinish(p, absolute);
    }
    walkCB(target, patterns, cb) {
      if (this.signal?.aborted)
        cb();
      this.walkCB2(target, patterns, new processor_js_1.Processor(this.opts), cb);
    }
    walkCB2(target, patterns, processor, cb) {
      if (this.#childrenIgnored(target))
        return cb();
      if (this.signal?.aborted)
        cb();
      if (this.paused) {
        this.onResume(() => this.walkCB2(target, patterns, processor, cb));
        return;
      }
      processor.processPatterns(target, patterns);
      let tasks = 1;
      const next = () => {
        if (--tasks === 0)
          cb();
      };
      for (const [m, absolute, ifDir] of processor.matches.entries()) {
        if (this.#ignored(m))
          continue;
        tasks++;
        this.match(m, absolute, ifDir).then(() => next());
      }
      for (const t of processor.subwalkTargets()) {
        if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {
          continue;
        }
        tasks++;
        const childrenCached = t.readdirCached();
        if (t.calledReaddir())
          this.walkCB3(t, childrenCached, processor, next);
        else {
          t.readdirCB((_, entries) => this.walkCB3(t, entries, processor, next), true);
        }
      }
      next();
    }
    walkCB3(target, entries, processor, cb) {
      processor = processor.filterEntries(target, entries);
      let tasks = 1;
      const next = () => {
        if (--tasks === 0)
          cb();
      };
      for (const [m, absolute, ifDir] of processor.matches.entries()) {
        if (this.#ignored(m))
          continue;
        tasks++;
        this.match(m, absolute, ifDir).then(() => next());
      }
      for (const [target2, patterns] of processor.subwalks.entries()) {
        tasks++;
        this.walkCB2(target2, patterns, processor.child(), next);
      }
      next();
    }
    walkCBSync(target, patterns, cb) {
      if (this.signal?.aborted)
        cb();
      this.walkCB2Sync(target, patterns, new processor_js_1.Processor(this.opts), cb);
    }
    walkCB2Sync(target, patterns, processor, cb) {
      if (this.#childrenIgnored(target))
        return cb();
      if (this.signal?.aborted)
        cb();
      if (this.paused) {
        this.onResume(() => this.walkCB2Sync(target, patterns, processor, cb));
        return;
      }
      processor.processPatterns(target, patterns);
      let tasks = 1;
      const next = () => {
        if (--tasks === 0)
          cb();
      };
      for (const [m, absolute, ifDir] of processor.matches.entries()) {
        if (this.#ignored(m))
          continue;
        this.matchSync(m, absolute, ifDir);
      }
      for (const t of processor.subwalkTargets()) {
        if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {
          continue;
        }
        tasks++;
        const children = t.readdirSync();
        this.walkCB3Sync(t, children, processor, next);
      }
      next();
    }
    walkCB3Sync(target, entries, processor, cb) {
      processor = processor.filterEntries(target, entries);
      let tasks = 1;
      const next = () => {
        if (--tasks === 0)
          cb();
      };
      for (const [m, absolute, ifDir] of processor.matches.entries()) {
        if (this.#ignored(m))
          continue;
        this.matchSync(m, absolute, ifDir);
      }
      for (const [target2, patterns] of processor.subwalks.entries()) {
        tasks++;
        this.walkCB2Sync(target2, patterns, processor.child(), next);
      }
      next();
    }
  }
  exports.GlobUtil = GlobUtil;

  class GlobWalker extends GlobUtil {
    matches = new Set;
    constructor(patterns, path, opts) {
      super(patterns, path, opts);
    }
    matchEmit(e) {
      this.matches.add(e);
    }
    async walk() {
      if (this.signal?.aborted)
        throw this.signal.reason;
      if (this.path.isUnknown()) {
        await this.path.lstat();
      }
      await new Promise((res, rej) => {
        this.walkCB(this.path, this.patterns, () => {
          if (this.signal?.aborted) {
            rej(this.signal.reason);
          } else {
            res(this.matches);
          }
        });
      });
      return this.matches;
    }
    walkSync() {
      if (this.signal?.aborted)
        throw this.signal.reason;
      if (this.path.isUnknown()) {
        this.path.lstatSync();
      }
      this.walkCBSync(this.path, this.patterns, () => {
        if (this.signal?.aborted)
          throw this.signal.reason;
      });
      return this.matches;
    }
  }
  exports.GlobWalker = GlobWalker;

  class GlobStream extends GlobUtil {
    results;
    constructor(patterns, path, opts) {
      super(patterns, path, opts);
      this.results = new minipass_1.Minipass({
        signal: this.signal,
        objectMode: true
      });
      this.results.on("drain", () => this.resume());
      this.results.on("resume", () => this.resume());
    }
    matchEmit(e) {
      this.results.write(e);
      if (!this.results.flowing)
        this.pause();
    }
    stream() {
      const target = this.path;
      if (target.isUnknown()) {
        target.lstat().then(() => {
          this.walkCB(target, this.patterns, () => this.results.end());
        });
      } else {
        this.walkCB(target, this.patterns, () => this.results.end());
      }
      return this.results;
    }
    streamSync() {
      if (this.path.isUnknown()) {
        this.path.lstatSync();
      }
      this.walkCBSync(this.path, this.patterns, () => this.results.end());
      return this.results;
    }
  }
  exports.GlobStream = GlobStream;
});

// node_modules/glob/dist/commonjs/glob.js
var require_glob = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Glob = undefined;
  var minimatch_1 = require_commonjs();
  var node_url_1 = __require("node:url");
  var path_scurry_1 = require_commonjs4();
  var pattern_js_1 = require_pattern();
  var walker_js_1 = require_walker();
  var defaultPlatform = typeof process === "object" && process && typeof process.platform === "string" ? process.platform : "linux";

  class Glob {
    absolute;
    cwd;
    root;
    dot;
    dotRelative;
    follow;
    ignore;
    magicalBraces;
    mark;
    matchBase;
    maxDepth;
    nobrace;
    nocase;
    nodir;
    noext;
    noglobstar;
    pattern;
    platform;
    realpath;
    scurry;
    stat;
    signal;
    windowsPathsNoEscape;
    withFileTypes;
    includeChildMatches;
    opts;
    patterns;
    constructor(pattern, opts) {
      if (!opts)
        throw new TypeError("glob options required");
      this.withFileTypes = !!opts.withFileTypes;
      this.signal = opts.signal;
      this.follow = !!opts.follow;
      this.dot = !!opts.dot;
      this.dotRelative = !!opts.dotRelative;
      this.nodir = !!opts.nodir;
      this.mark = !!opts.mark;
      if (!opts.cwd) {
        this.cwd = "";
      } else if (opts.cwd instanceof URL || opts.cwd.startsWith("file://")) {
        opts.cwd = (0, node_url_1.fileURLToPath)(opts.cwd);
      }
      this.cwd = opts.cwd || "";
      this.root = opts.root;
      this.magicalBraces = !!opts.magicalBraces;
      this.nobrace = !!opts.nobrace;
      this.noext = !!opts.noext;
      this.realpath = !!opts.realpath;
      this.absolute = opts.absolute;
      this.includeChildMatches = opts.includeChildMatches !== false;
      this.noglobstar = !!opts.noglobstar;
      this.matchBase = !!opts.matchBase;
      this.maxDepth = typeof opts.maxDepth === "number" ? opts.maxDepth : Infinity;
      this.stat = !!opts.stat;
      this.ignore = opts.ignore;
      if (this.withFileTypes && this.absolute !== undefined) {
        throw new Error("cannot set absolute and withFileTypes:true");
      }
      if (typeof pattern === "string") {
        pattern = [pattern];
      }
      this.windowsPathsNoEscape = !!opts.windowsPathsNoEscape || opts.allowWindowsEscape === false;
      if (this.windowsPathsNoEscape) {
        pattern = pattern.map((p) => p.replace(/\\/g, "/"));
      }
      if (this.matchBase) {
        if (opts.noglobstar) {
          throw new TypeError("base matching requires globstar");
        }
        pattern = pattern.map((p) => p.includes("/") ? p : `./**/${p}`);
      }
      this.pattern = pattern;
      this.platform = opts.platform || defaultPlatform;
      this.opts = { ...opts, platform: this.platform };
      if (opts.scurry) {
        this.scurry = opts.scurry;
        if (opts.nocase !== undefined && opts.nocase !== opts.scurry.nocase) {
          throw new Error("nocase option contradicts provided scurry option");
        }
      } else {
        const Scurry = opts.platform === "win32" ? path_scurry_1.PathScurryWin32 : opts.platform === "darwin" ? path_scurry_1.PathScurryDarwin : opts.platform ? path_scurry_1.PathScurryPosix : path_scurry_1.PathScurry;
        this.scurry = new Scurry(this.cwd, {
          nocase: opts.nocase,
          fs: opts.fs
        });
      }
      this.nocase = this.scurry.nocase;
      const nocaseMagicOnly = this.platform === "darwin" || this.platform === "win32";
      const mmo = {
        ...opts,
        dot: this.dot,
        matchBase: this.matchBase,
        nobrace: this.nobrace,
        nocase: this.nocase,
        nocaseMagicOnly,
        nocomment: true,
        noext: this.noext,
        nonegate: true,
        optimizationLevel: 2,
        platform: this.platform,
        windowsPathsNoEscape: this.windowsPathsNoEscape,
        debug: !!this.opts.debug
      };
      const mms = this.pattern.map((p) => new minimatch_1.Minimatch(p, mmo));
      const [matchSet, globParts] = mms.reduce((set, m) => {
        set[0].push(...m.set);
        set[1].push(...m.globParts);
        return set;
      }, [[], []]);
      this.patterns = matchSet.map((set, i) => {
        const g = globParts[i];
        if (!g)
          throw new Error("invalid pattern object");
        return new pattern_js_1.Pattern(set, g, 0, this.platform);
      });
    }
    async walk() {
      return [
        ...await new walker_js_1.GlobWalker(this.patterns, this.scurry.cwd, {
          ...this.opts,
          maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
          platform: this.platform,
          nocase: this.nocase,
          includeChildMatches: this.includeChildMatches
        }).walk()
      ];
    }
    walkSync() {
      return [
        ...new walker_js_1.GlobWalker(this.patterns, this.scurry.cwd, {
          ...this.opts,
          maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
          platform: this.platform,
          nocase: this.nocase,
          includeChildMatches: this.includeChildMatches
        }).walkSync()
      ];
    }
    stream() {
      return new walker_js_1.GlobStream(this.patterns, this.scurry.cwd, {
        ...this.opts,
        maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
        platform: this.platform,
        nocase: this.nocase,
        includeChildMatches: this.includeChildMatches
      }).stream();
    }
    streamSync() {
      return new walker_js_1.GlobStream(this.patterns, this.scurry.cwd, {
        ...this.opts,
        maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
        platform: this.platform,
        nocase: this.nocase,
        includeChildMatches: this.includeChildMatches
      }).streamSync();
    }
    iterateSync() {
      return this.streamSync()[Symbol.iterator]();
    }
    [Symbol.iterator]() {
      return this.iterateSync();
    }
    iterate() {
      return this.stream()[Symbol.asyncIterator]();
    }
    [Symbol.asyncIterator]() {
      return this.iterate();
    }
  }
  exports.Glob = Glob;
});

// node_modules/glob/dist/commonjs/has-magic.js
var require_has_magic = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.hasMagic = undefined;
  var minimatch_1 = require_commonjs();
  var hasMagic = (pattern, options = {}) => {
    if (!Array.isArray(pattern)) {
      pattern = [pattern];
    }
    for (const p of pattern) {
      if (new minimatch_1.Minimatch(p, options).hasMagic())
        return true;
    }
    return false;
  };
  exports.hasMagic = hasMagic;
});

// node_modules/glob/dist/commonjs/index.js
var require_commonjs5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.glob = exports.sync = exports.iterate = exports.iterateSync = exports.stream = exports.streamSync = exports.Ignore = exports.hasMagic = exports.Glob = exports.unescape = exports.escape = undefined;
  exports.globStreamSync = globStreamSync;
  exports.globStream = globStream;
  exports.globSync = globSync;
  exports.globIterateSync = globIterateSync;
  exports.globIterate = globIterate;
  var minimatch_1 = require_commonjs();
  var glob_js_1 = require_glob();
  var has_magic_js_1 = require_has_magic();
  var minimatch_2 = require_commonjs();
  Object.defineProperty(exports, "escape", { enumerable: true, get: function() {
    return minimatch_2.escape;
  } });
  Object.defineProperty(exports, "unescape", { enumerable: true, get: function() {
    return minimatch_2.unescape;
  } });
  var glob_js_2 = require_glob();
  Object.defineProperty(exports, "Glob", { enumerable: true, get: function() {
    return glob_js_2.Glob;
  } });
  var has_magic_js_2 = require_has_magic();
  Object.defineProperty(exports, "hasMagic", { enumerable: true, get: function() {
    return has_magic_js_2.hasMagic;
  } });
  var ignore_js_1 = require_ignore();
  Object.defineProperty(exports, "Ignore", { enumerable: true, get: function() {
    return ignore_js_1.Ignore;
  } });
  function globStreamSync(pattern, options = {}) {
    return new glob_js_1.Glob(pattern, options).streamSync();
  }
  function globStream(pattern, options = {}) {
    return new glob_js_1.Glob(pattern, options).stream();
  }
  function globSync(pattern, options = {}) {
    return new glob_js_1.Glob(pattern, options).walkSync();
  }
  async function glob_(pattern, options = {}) {
    return new glob_js_1.Glob(pattern, options).walk();
  }
  function globIterateSync(pattern, options = {}) {
    return new glob_js_1.Glob(pattern, options).iterateSync();
  }
  function globIterate(pattern, options = {}) {
    return new glob_js_1.Glob(pattern, options).iterate();
  }
  exports.streamSync = globStreamSync;
  exports.stream = Object.assign(globStream, { sync: globStreamSync });
  exports.iterateSync = globIterateSync;
  exports.iterate = Object.assign(globIterate, {
    sync: globIterateSync
  });
  exports.sync = Object.assign(globSync, {
    stream: globStreamSync,
    iterate: globIterateSync
  });
  exports.glob = Object.assign(glob_, {
    glob: glob_,
    globSync,
    sync: exports.sync,
    globStream,
    stream: exports.stream,
    globStreamSync,
    streamSync: exports.streamSync,
    globIterate,
    iterate: exports.iterate,
    globIterateSync,
    iterateSync: exports.iterateSync,
    Glob: glob_js_1.Glob,
    hasMagic: has_magic_js_1.hasMagic,
    escape: minimatch_1.escape,
    unescape: minimatch_1.unescape
  });
  exports.glob.glob = exports.glob;
});

// node_modules/@fastify/send/lib/isUtf8MimeType.js
var require_isUtf8MimeType = __commonJS((exports, module) => {
  function isUtf8MimeType(value) {
    const len = value.length;
    return len > 21 && value.indexOf("application/javascript") === 0 || len > 14 && value.indexOf("application/json") === 0 || len > 5 && value.indexOf("text/") === 0;
  }
  exports.isUtf8MimeType = isUtf8MimeType;
});

// node_modules/mime/Mime.js
var require_Mime = __commonJS((exports, module) => {
  function Mime() {
    this._types = Object.create(null);
    this._extensions = Object.create(null);
    for (let i = 0;i < arguments.length; i++) {
      this.define(arguments[i]);
    }
    this.define = this.define.bind(this);
    this.getType = this.getType.bind(this);
    this.getExtension = this.getExtension.bind(this);
  }
  Mime.prototype.define = function(typeMap, force) {
    for (let type in typeMap) {
      let extensions = typeMap[type].map(function(t) {
        return t.toLowerCase();
      });
      type = type.toLowerCase();
      for (let i = 0;i < extensions.length; i++) {
        const ext = extensions[i];
        if (ext[0] === "*") {
          continue;
        }
        if (!force && ext in this._types) {
          throw new Error('Attempt to change mapping for "' + ext + '" extension from "' + this._types[ext] + '" to "' + type + '". Pass `force=true` to allow this, otherwise remove "' + ext + '" from the list of extensions for "' + type + '".');
        }
        this._types[ext] = type;
      }
      if (force || !this._extensions[type]) {
        const ext = extensions[0];
        this._extensions[type] = ext[0] !== "*" ? ext : ext.substr(1);
      }
    }
  };
  Mime.prototype.getType = function(path) {
    path = String(path);
    let last = path.replace(/^.*[/\\]/, "").toLowerCase();
    let ext = last.replace(/^.*\./, "").toLowerCase();
    let hasPath = last.length < path.length;
    let hasDot = ext.length < last.length - 1;
    return (hasDot || !hasPath) && this._types[ext] || null;
  };
  Mime.prototype.getExtension = function(type) {
    type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
    return type && this._extensions[type.toLowerCase()] || null;
  };
  module.exports = Mime;
});

// node_modules/mime/types/standard.js
var require_standard = __commonJS((exports, module) => {
  module.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["es", "ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
});

// node_modules/mime/types/other.js
var require_other = __commonJS((exports, module) => {
  module.exports = { "application/prs.cww": ["cww"], "application/vnd.1000minds.decision-model+xml": ["1km"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.keynote": ["key"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.numbers": ["numbers"], "application/vnd.apple.pages": ["pages"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.balsamiq.bmml+xml": ["bmml"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.citationstyles.style+xml": ["csl"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dbf": ["dbf"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mapbox-vector-tile": ["mvt"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["*stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.ac+xml": ["*ac"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openblox.game+xml": ["obgx"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openstreetmap.data+xml": ["osm"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.rar": ["rar"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.software602.filler.form+xml": ["fo"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.syncml.dmddf+xml": ["ddf"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["*dmg"], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": ["*bdoc"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["*deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["*iso"], "application/x-iwork-keynote-sffkey": ["*key"], "application/x-iwork-numbers-sffnumbers": ["*numbers"], "application/x-iwork-pages-sffpages": ["*pages"], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-keepass2": ["kdbx"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": ["*exe"], "application/x-msdownload": ["*exe", "*dll", "com", "bat", "*msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["*wmf", "*wmz", "*emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": ["*prc", "*pdb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["*rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["*obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["*xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": ["*m4a"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": ["*ra"], "audio/x-wav": ["*wav"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "image/prs.btif": ["btif"], "image/prs.pti": ["pti"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.airzip.accelerator.azv": ["azv"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["*sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.microsoft.icon": ["ico"], "image/vnd.ms-dds": ["dds"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.pco.b16": ["b16"], "image/vnd.tencent.tap": ["tap"], "image/vnd.valve.source.texture": ["vtf"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/vnd.zbrush.pcx": ["pcx"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["*ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": ["*bmp"], "image/x-pcx": ["*pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/vnd.wfa.wsc": ["wsc"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.opengex": ["ogex"], "model/vnd.parasolid.transmit.binary": ["x_b"], "model/vnd.parasolid.transmit.text": ["x_t"], "model/vnd.sap.vds": ["vds"], "model/vnd.usdz+zip": ["usdz"], "model/vnd.valve.source.compiled-map": ["bsp"], "model/vnd.vtu": ["vtu"], "text/prs.lines.tag": ["dsc"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": ["*org"], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
});

// node_modules/mime/index.js
var require_mime = __commonJS((exports, module) => {
  var Mime = require_Mime();
  module.exports = new Mime(require_standard(), require_other());
});

// node_modules/fast-decode-uri-component/index.js
var require_fast_decode_uri_component = __commonJS((exports, module) => {
  var UTF8_ACCEPT = 12;
  var UTF8_REJECT = 0;
  var UTF8_DATA = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    6,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    8,
    7,
    7,
    10,
    9,
    9,
    9,
    11,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    24,
    36,
    48,
    60,
    72,
    84,
    96,
    0,
    12,
    12,
    12,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    24,
    24,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    24,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    48,
    48,
    48,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    48,
    48,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    48,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    127,
    63,
    63,
    63,
    0,
    31,
    15,
    15,
    15,
    7,
    7,
    7
  ];
  function decodeURIComponent2(uri) {
    var percentPosition = uri.indexOf("%");
    if (percentPosition === -1)
      return uri;
    var length = uri.length;
    var decoded = "";
    var last = 0;
    var codepoint = 0;
    var startOfOctets = percentPosition;
    var state = UTF8_ACCEPT;
    while (percentPosition > -1 && percentPosition < length) {
      var high = hexCodeToInt(uri[percentPosition + 1], 4);
      var low = hexCodeToInt(uri[percentPosition + 2], 0);
      var byte = high | low;
      var type = UTF8_DATA[byte];
      state = UTF8_DATA[256 + state + type];
      codepoint = codepoint << 6 | byte & UTF8_DATA[364 + type];
      if (state === UTF8_ACCEPT) {
        decoded += uri.slice(last, startOfOctets);
        decoded += codepoint <= 65535 ? String.fromCharCode(codepoint) : String.fromCharCode(55232 + (codepoint >> 10), 56320 + (codepoint & 1023));
        codepoint = 0;
        last = percentPosition + 3;
        percentPosition = startOfOctets = uri.indexOf("%", last);
      } else if (state === UTF8_REJECT) {
        return null;
      } else {
        percentPosition += 3;
        if (percentPosition < length && uri.charCodeAt(percentPosition) === 37)
          continue;
        return null;
      }
    }
    return decoded + uri.slice(last);
  }
  var HEX = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
    a: 10,
    A: 10,
    b: 11,
    B: 11,
    c: 12,
    C: 12,
    d: 13,
    D: 13,
    e: 14,
    E: 14,
    f: 15,
    F: 15
  };
  function hexCodeToInt(c, shift) {
    var i = HEX[c];
    return i === undefined ? 255 : i << shift;
  }
  module.exports = decodeURIComponent2;
});

// node_modules/escape-html/index.js
var require_escape_html = __commonJS((exports, module) => {
  /*!
   * escape-html
   * Copyright(c) 2012-2013 TJ Holowaychuk
   * Copyright(c) 2015 Andreas Lubbe
   * Copyright(c) 2015 Tiancheng "Timothy" Gu
   * MIT Licensed
   */
  var matchHtmlRegExp = /["'&<>]/;
  module.exports = escapeHtml;
  function escapeHtml(string) {
    var str = "" + string;
    var match = matchHtmlRegExp.exec(str);
    if (!match) {
      return str;
    }
    var escape2;
    var html = "";
    var index = 0;
    var lastIndex = 0;
    for (index = match.index;index < str.length; index++) {
      switch (str.charCodeAt(index)) {
        case 34:
          escape2 = "&quot;";
          break;
        case 38:
          escape2 = "&amp;";
          break;
        case 39:
          escape2 = "&#39;";
          break;
        case 60:
          escape2 = "&lt;";
          break;
        case 62:
          escape2 = "&gt;";
          break;
        default:
          continue;
      }
      if (lastIndex !== index) {
        html += str.substring(lastIndex, index);
      }
      lastIndex = index + 1;
      html += escape2;
    }
    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
  }
});

// node_modules/@lukeed/ms/dist/index.js
var require_dist2 = __commonJS((exports) => {
  var RGX = /^(-?(?:\d+)?\.?\d+) *(m(?:illiseconds?|s(?:ecs?)?))?(s(?:ec(?:onds?|s)?)?)?(m(?:in(?:utes?|s)?)?)?(h(?:ours?|rs?)?)?(d(?:ays?)?)?(w(?:eeks?|ks?)?)?(y(?:ears?|rs?)?)?$/;
  var SEC = 1000;
  var MIN = SEC * 60;
  var HOUR = MIN * 60;
  var DAY = HOUR * 24;
  var YEAR = DAY * 365.25;
  function parse(val) {
    var num, arr = val.toLowerCase().match(RGX);
    if (arr != null && (num = parseFloat(arr[1]))) {
      if (arr[3] != null)
        return num * SEC;
      if (arr[4] != null)
        return num * MIN;
      if (arr[5] != null)
        return num * HOUR;
      if (arr[6] != null)
        return num * DAY;
      if (arr[7] != null)
        return num * DAY * 7;
      if (arr[8] != null)
        return num * YEAR;
      return num;
    }
  }
  function fmt(val, pfx, str, long) {
    var num = (val | 0) === val ? val : ~~(val + 0.5);
    return pfx + num + (long ? " " + str + (num != 1 ? "s" : "") : str[0]);
  }
  function format(num, long) {
    var pfx = num < 0 ? "-" : "", abs = num < 0 ? -num : num;
    if (abs < SEC)
      return num + (long ? " ms" : "ms");
    if (abs < MIN)
      return fmt(abs / SEC, pfx, "second", long);
    if (abs < HOUR)
      return fmt(abs / MIN, pfx, "minute", long);
    if (abs < DAY)
      return fmt(abs / HOUR, pfx, "hour", long);
    if (abs < YEAR)
      return fmt(abs / DAY, pfx, "day", long);
    return fmt(abs / YEAR, pfx, "year", long);
  }
  exports.format = format;
  exports.parse = parse;
});

// node_modules/@fastify/send/lib/collapseLeadingSlashes.js
var require_collapseLeadingSlashes = __commonJS((exports, module) => {
  function collapseLeadingSlashes(str) {
    if (str[0] !== "/" || str[1] !== "/") {
      return str;
    }
    for (let i = 2, il = str.length;i < il; ++i) {
      if (str[i] !== "/") {
        return str.slice(i - 1);
      }
    }
  }
  exports.collapseLeadingSlashes = collapseLeadingSlashes;
});

// node_modules/@fastify/send/lib/containsDotFile.js
var require_containsDotFile = __commonJS((exports, module) => {
  /*!
   * send
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  function containsDotFile(parts) {
    for (let i = 0, il = parts.length;i < il; ++i) {
      if (parts[i].length !== 1 && parts[i][0] === ".") {
        return true;
      }
    }
    return false;
  }
  exports.containsDotFile = containsDotFile;
});

// node_modules/@fastify/send/lib/contentRange.js
var require_contentRange = __commonJS((exports) => {
  /*!
   * send
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  function contentRange(type, size, range) {
    return type + " " + (range ? range.start + "-" + range.end : "*") + "/" + size;
  }
  exports.contentRange = contentRange;
});

// node_modules/@fastify/send/lib/createHtmlDocument.js
var require_createHtmlDocument = __commonJS((exports) => {
  /*!
   * send
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  function createHtmlDocument(title, body) {
    const html = `<!DOCTYPE html>
` + `<html lang="en">
` + `<head>
` + `<meta charset="utf-8">
` + "<title>" + title + `</title>
` + `</head>
` + `<body>
` + "<pre>" + body + `</pre>
` + `</body>
` + `</html>
`;
    return [html, Buffer.byteLength(html)];
  }
  exports.createHtmlDocument = createHtmlDocument;
});

// node_modules/@fastify/send/lib/normalizeList.js
var require_normalizeList = __commonJS((exports, module) => {
  function normalizeList(val, name) {
    if (typeof val === "string") {
      return [val];
    } else if (val === false) {
      return [];
    } else if (Array.isArray(val)) {
      for (let i = 0, il = val.length;i < il; ++i) {
        if (typeof val[i] !== "string") {
          throw new TypeError(name + " must be array of strings or false");
        }
      }
      return val;
    } else {
      throw new TypeError(name + " must be array of strings or false");
    }
  }
  exports.normalizeList = normalizeList;
});

// node_modules/@fastify/send/lib/parseBytesRange.js
var require_parseBytesRange = __commonJS((exports, module) => {
  /*!
   * Based on range-parser
   *
   * Copyright(c) 2012-2014 TJ Holowaychuk
   * Copyright(c) 2015-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  function parseBytesRange(size, str) {
    const values = str.slice(str.indexOf("=") + 1);
    const ranges = [];
    const len = values.length;
    let i = 0;
    let il = 0;
    let j = 0;
    let start;
    let end;
    let commaIdx = values.indexOf(",");
    let dashIdx = values.indexOf("-");
    let prevIdx = -1;
    while (true) {
      commaIdx === -1 && (commaIdx = len);
      start = parseInt(values.slice(prevIdx + 1, dashIdx), 10);
      end = parseInt(values.slice(dashIdx + 1, commaIdx), 10);
      if (start !== start) {
        start = size - end;
        end = size - 1;
      } else if (end !== end) {
        end = size - 1;
      } else if (end > size - 1) {
        end = size - 1;
      }
      if (start === start && end === end && start > -1 && start <= end) {
        ranges.push({
          start,
          end,
          index: j++
        });
      }
      if (commaIdx === len) {
        break;
      }
      prevIdx = commaIdx++;
      dashIdx = values.indexOf("-", commaIdx);
      commaIdx = values.indexOf(",", commaIdx);
    }
    if (j < 2) {
      return ranges;
    }
    ranges.sort(sortByRangeStart);
    il = j;
    j = 0;
    i = 1;
    while (i < il) {
      const range = ranges[i++];
      const current = ranges[j];
      if (range.start > current.end + 1) {
        ranges[++j] = range;
      } else if (range.end > current.end) {
        current.end = range.end;
        current.index > range.index && (current.index = range.index);
      }
    }
    ranges.length = j + 1;
    ranges.sort(sortByRangeIndex);
    return ranges;
  }
  function sortByRangeIndex(a, b) {
    return a.index - b.index;
  }
  function sortByRangeStart(a, b) {
    return a.start - b.start;
  }
  exports.parseBytesRange = parseBytesRange;
});

// node_modules/@fastify/send/lib/parseTokenList.js
var require_parseTokenList = __commonJS((exports, module) => {
  var slice = String.prototype.slice;
  function parseTokenList(str, cb) {
    let end = 0;
    let start = 0;
    let result;
    for (let i = 0, len = str.length;i < len; i++) {
      switch (str.charCodeAt(i)) {
        case 32:
          if (start === end) {
            start = end = i + 1;
          }
          break;
        case 44:
          if (start !== end) {
            result = cb(slice.call(str, start, end));
            if (result !== undefined) {
              return result;
            }
          }
          start = end = i + 1;
          break;
        default:
          end = i + 1;
          break;
      }
    }
    if (start !== end) {
      return cb(slice.call(str, start, end));
    }
  }
  exports.parseTokenList = parseTokenList;
});

// node_modules/depd/index.js
var require_depd = __commonJS((exports, module) => {
  /*!
   * depd
   * Copyright(c) 2014-2018 Douglas Christopher Wilson
   * MIT Licensed
   */
  var relative = __require("path").relative;
  module.exports = depd;
  var basePath = process.cwd();
  function containsNamespace(str, namespace) {
    var vals = str.split(/[ ,]+/);
    var ns = String(namespace).toLowerCase();
    for (var i = 0;i < vals.length; i++) {
      var val = vals[i];
      if (val && (val === "*" || val.toLowerCase() === ns)) {
        return true;
      }
    }
    return false;
  }
  function convertDataDescriptorToAccessor(obj, prop, message) {
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    var value = descriptor.value;
    descriptor.get = function getter() {
      return value;
    };
    if (descriptor.writable) {
      descriptor.set = function setter(val) {
        return value = val;
      };
    }
    delete descriptor.value;
    delete descriptor.writable;
    Object.defineProperty(obj, prop, descriptor);
    return descriptor;
  }
  function createArgumentsString(arity) {
    var str = "";
    for (var i = 0;i < arity; i++) {
      str += ", arg" + i;
    }
    return str.substr(2);
  }
  function createStackString(stack) {
    var str = this.name + ": " + this.namespace;
    if (this.message) {
      str += " deprecated " + this.message;
    }
    for (var i = 0;i < stack.length; i++) {
      str += `
    at ` + stack[i].toString();
    }
    return str;
  }
  function depd(namespace) {
    if (!namespace) {
      throw new TypeError("argument namespace is required");
    }
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    var file = site[0];
    function deprecate(message) {
      log.call(deprecate, message);
    }
    deprecate._file = file;
    deprecate._ignored = isignored(namespace);
    deprecate._namespace = namespace;
    deprecate._traced = istraced(namespace);
    deprecate._warned = Object.create(null);
    deprecate.function = wrapfunction;
    deprecate.property = wrapproperty;
    return deprecate;
  }
  function eehaslisteners(emitter, type) {
    var count = typeof emitter.listenerCount !== "function" ? emitter.listeners(type).length : emitter.listenerCount(type);
    return count > 0;
  }
  function isignored(namespace) {
    if (process.noDeprecation) {
      return true;
    }
    var str = process.env.NO_DEPRECATION || "";
    return containsNamespace(str, namespace);
  }
  function istraced(namespace) {
    if (process.traceDeprecation) {
      return true;
    }
    var str = process.env.TRACE_DEPRECATION || "";
    return containsNamespace(str, namespace);
  }
  function log(message, site) {
    var haslisteners = eehaslisteners(process, "deprecation");
    if (!haslisteners && this._ignored) {
      return;
    }
    var caller;
    var callFile;
    var callSite;
    var depSite;
    var i = 0;
    var seen = false;
    var stack = getStack();
    var file = this._file;
    if (site) {
      depSite = site;
      callSite = callSiteLocation(stack[1]);
      callSite.name = depSite.name;
      file = callSite[0];
    } else {
      i = 2;
      depSite = callSiteLocation(stack[i]);
      callSite = depSite;
    }
    for (;i < stack.length; i++) {
      caller = callSiteLocation(stack[i]);
      callFile = caller[0];
      if (callFile === file) {
        seen = true;
      } else if (callFile === this._file) {
        file = this._file;
      } else if (seen) {
        break;
      }
    }
    var key = caller ? depSite.join(":") + "__" + caller.join(":") : undefined;
    if (key !== undefined && key in this._warned) {
      return;
    }
    this._warned[key] = true;
    var msg = message;
    if (!msg) {
      msg = callSite === depSite || !callSite.name ? defaultMessage(depSite) : defaultMessage(callSite);
    }
    if (haslisteners) {
      var err = DeprecationError(this._namespace, msg, stack.slice(i));
      process.emit("deprecation", err);
      return;
    }
    var format = process.stderr.isTTY ? formatColor : formatPlain;
    var output = format.call(this, msg, caller, stack.slice(i));
    process.stderr.write(output + `
`, "utf8");
  }
  function callSiteLocation(callSite) {
    var file = callSite.getFileName() || "<anonymous>";
    var line = callSite.getLineNumber();
    var colm = callSite.getColumnNumber();
    if (callSite.isEval()) {
      file = callSite.getEvalOrigin() + ", " + file;
    }
    var site = [file, line, colm];
    site.callSite = callSite;
    site.name = callSite.getFunctionName();
    return site;
  }
  function defaultMessage(site) {
    var callSite = site.callSite;
    var funcName = site.name;
    if (!funcName) {
      funcName = "<anonymous@" + formatLocation(site) + ">";
    }
    var context = callSite.getThis();
    var typeName = context && callSite.getTypeName();
    if (typeName === "Object") {
      typeName = undefined;
    }
    if (typeName === "Function") {
      typeName = context.name || typeName;
    }
    return typeName && callSite.getMethodName() ? typeName + "." + funcName : funcName;
  }
  function formatPlain(msg, caller, stack) {
    var timestamp = new Date().toUTCString();
    var formatted = timestamp + " " + this._namespace + " deprecated " + msg;
    if (this._traced) {
      for (var i = 0;i < stack.length; i++) {
        formatted += `
    at ` + stack[i].toString();
      }
      return formatted;
    }
    if (caller) {
      formatted += " at " + formatLocation(caller);
    }
    return formatted;
  }
  function formatColor(msg, caller, stack) {
    var formatted = "\x1B[36;1m" + this._namespace + "\x1B[22;39m" + " \x1B[33;1mdeprecated\x1B[22;39m" + " \x1B[0m" + msg + "\x1B[39m";
    if (this._traced) {
      for (var i = 0;i < stack.length; i++) {
        formatted += `
    \x1B[36mat ` + stack[i].toString() + "\x1B[39m";
      }
      return formatted;
    }
    if (caller) {
      formatted += " \x1B[36m" + formatLocation(caller) + "\x1B[39m";
    }
    return formatted;
  }
  function formatLocation(callSite) {
    return relative(basePath, callSite[0]) + ":" + callSite[1] + ":" + callSite[2];
  }
  function getStack() {
    var limit = Error.stackTraceLimit;
    var obj = {};
    var prep = Error.prepareStackTrace;
    Error.prepareStackTrace = prepareObjectStackTrace;
    Error.stackTraceLimit = Math.max(10, limit);
    Error.captureStackTrace(obj);
    var stack = obj.stack.slice(1);
    Error.prepareStackTrace = prep;
    Error.stackTraceLimit = limit;
    return stack;
  }
  function prepareObjectStackTrace(obj, stack) {
    return stack;
  }
  function wrapfunction(fn, message) {
    if (typeof fn !== "function") {
      throw new TypeError("argument fn must be a function");
    }
    var args = createArgumentsString(fn.length);
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    site.name = fn.name;
    var deprecatedfn = new Function("fn", "log", "deprecate", "message", "site", `"use strict"
` + "return function (" + args + ") {" + `log.call(deprecate, message, site)
` + `return fn.apply(this, arguments)
` + "}")(fn, log, this, message, site);
    return deprecatedfn;
  }
  function wrapproperty(obj, prop, message) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") {
      throw new TypeError("argument obj must be object");
    }
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    if (!descriptor) {
      throw new TypeError("must call property on owner object");
    }
    if (!descriptor.configurable) {
      throw new TypeError("property must be configurable");
    }
    var deprecate = this;
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    site.name = prop;
    if ("value" in descriptor) {
      descriptor = convertDataDescriptorToAccessor(obj, prop, message);
    }
    var get = descriptor.get;
    var set = descriptor.set;
    if (typeof get === "function") {
      descriptor.get = function getter() {
        log.call(deprecate, message, site);
        return get.apply(this, arguments);
      };
    }
    if (typeof set === "function") {
      descriptor.set = function setter() {
        log.call(deprecate, message, site);
        return set.apply(this, arguments);
      };
    }
    Object.defineProperty(obj, prop, descriptor);
  }
  function DeprecationError(namespace, message, stack) {
    var error = new Error;
    var stackString;
    Object.defineProperty(error, "constructor", {
      value: DeprecationError
    });
    Object.defineProperty(error, "message", {
      configurable: true,
      enumerable: false,
      value: message,
      writable: true
    });
    Object.defineProperty(error, "name", {
      enumerable: false,
      configurable: true,
      value: "DeprecationError",
      writable: true
    });
    Object.defineProperty(error, "namespace", {
      configurable: true,
      enumerable: false,
      value: namespace,
      writable: true
    });
    Object.defineProperty(error, "stack", {
      configurable: true,
      enumerable: false,
      get: function() {
        if (stackString !== undefined) {
          return stackString;
        }
        return stackString = createStackString.call(this, stack);
      },
      set: function setter(val) {
        stackString = val;
      }
    });
    return error;
  }
});

// node_modules/setprototypeof/index.js
var require_setprototypeof = __commonJS((exports, module) => {
  module.exports = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);
  function setProtoOf(obj, proto) {
    obj.__proto__ = proto;
    return obj;
  }
  function mixinProperties(obj, proto) {
    for (var prop in proto) {
      if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
        obj[prop] = proto[prop];
      }
    }
    return obj;
  }
});

// node_modules/statuses/codes.json
var require_codes = __commonJS((exports, module) => {
  module.exports = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "103": "Early Hints",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a Teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Too Early",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "509": "Bandwidth Limit Exceeded",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  };
});

// node_modules/statuses/index.js
var require_statuses = __commonJS((exports, module) => {
  /*!
   * statuses
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  var codes = require_codes();
  module.exports = status;
  status.message = codes;
  status.code = createMessageToStatusCodeMap(codes);
  status.codes = createStatusCodeList(codes);
  status.redirect = {
    300: true,
    301: true,
    302: true,
    303: true,
    305: true,
    307: true,
    308: true
  };
  status.empty = {
    204: true,
    205: true,
    304: true
  };
  status.retry = {
    502: true,
    503: true,
    504: true
  };
  function createMessageToStatusCodeMap(codes2) {
    var map = {};
    Object.keys(codes2).forEach(function forEachCode(code) {
      var message = codes2[code];
      var status2 = Number(code);
      map[message.toLowerCase()] = status2;
    });
    return map;
  }
  function createStatusCodeList(codes2) {
    return Object.keys(codes2).map(function mapCode(code) {
      return Number(code);
    });
  }
  function getStatusCode(message) {
    var msg = message.toLowerCase();
    if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {
      throw new Error('invalid status message: "' + message + '"');
    }
    return status.code[msg];
  }
  function getStatusMessage(code) {
    if (!Object.prototype.hasOwnProperty.call(status.message, code)) {
      throw new Error("invalid status code: " + code);
    }
    return status.message[code];
  }
  function status(code) {
    if (typeof code === "number") {
      return getStatusMessage(code);
    }
    if (typeof code !== "string") {
      throw new TypeError("code must be a number or string");
    }
    var n = parseInt(code, 10);
    if (!isNaN(n)) {
      return getStatusMessage(n);
    }
    return getStatusCode(code);
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS((exports, module) => {
  if (typeof Object.create === "function") {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor;
        ctor.prototype.constructor = ctor;
      }
    };
  }
});

// node_modules/inherits/inherits.js
var require_inherits = __commonJS((exports, module) => {
  try {
    util = __require("util");
    if (typeof util.inherits !== "function")
      throw "";
    module.exports = util.inherits;
  } catch (e) {
    module.exports = require_inherits_browser();
  }
  var util;
});

// node_modules/toidentifier/index.js
var require_toidentifier = __commonJS((exports, module) => {
  /*!
   * toidentifier
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = toIdentifier;
  function toIdentifier(str) {
    return str.split(" ").map(function(token) {
      return token.slice(0, 1).toUpperCase() + token.slice(1);
    }).join("").replace(/[^ _0-9a-z]/gi, "");
  }
});

// node_modules/http-errors/index.js
var require_http_errors = __commonJS((exports, module) => {
  /*!
   * http-errors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  var deprecate = require_depd()("http-errors");
  var setPrototypeOf = require_setprototypeof();
  var statuses = require_statuses();
  var inherits = require_inherits();
  var toIdentifier = require_toidentifier();
  module.exports = createError;
  module.exports.HttpError = createHttpErrorConstructor();
  module.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError);
  populateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);
  function codeClass(status) {
    return Number(String(status).charAt(0) + "00");
  }
  function createError() {
    var err;
    var msg;
    var status = 500;
    var props = {};
    for (var i = 0;i < arguments.length; i++) {
      var arg = arguments[i];
      var type = typeof arg;
      if (type === "object" && arg instanceof Error) {
        err = arg;
        status = err.status || err.statusCode || status;
      } else if (type === "number" && i === 0) {
        status = arg;
      } else if (type === "string") {
        msg = arg;
      } else if (type === "object") {
        props = arg;
      } else {
        throw new TypeError("argument #" + (i + 1) + " unsupported type " + type);
      }
    }
    if (typeof status === "number" && (status < 400 || status >= 600)) {
      deprecate("non-error status code; use only 4xx or 5xx status codes");
    }
    if (typeof status !== "number" || !statuses.message[status] && (status < 400 || status >= 600)) {
      status = 500;
    }
    var HttpError = createError[status] || createError[codeClass(status)];
    if (!err) {
      err = HttpError ? new HttpError(msg) : new Error(msg || statuses.message[status]);
      Error.captureStackTrace(err, createError);
    }
    if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
      err.expose = status < 500;
      err.status = err.statusCode = status;
    }
    for (var key in props) {
      if (key !== "status" && key !== "statusCode") {
        err[key] = props[key];
      }
    }
    return err;
  }
  function createHttpErrorConstructor() {
    function HttpError() {
      throw new TypeError("cannot construct abstract class");
    }
    inherits(HttpError, Error);
    return HttpError;
  }
  function createClientErrorConstructor(HttpError, name, code) {
    var className = toClassName(name);
    function ClientError(message) {
      var msg = message != null ? message : statuses.message[code];
      var err = new Error(msg);
      Error.captureStackTrace(err, ClientError);
      setPrototypeOf(err, ClientError.prototype);
      Object.defineProperty(err, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err;
    }
    inherits(ClientError, HttpError);
    nameFunc(ClientError, className);
    ClientError.prototype.status = code;
    ClientError.prototype.statusCode = code;
    ClientError.prototype.expose = true;
    return ClientError;
  }
  function createIsHttpErrorFunction(HttpError) {
    return function isHttpError(val) {
      if (!val || typeof val !== "object") {
        return false;
      }
      if (val instanceof HttpError) {
        return true;
      }
      return val instanceof Error && typeof val.expose === "boolean" && typeof val.statusCode === "number" && val.status === val.statusCode;
    };
  }
  function createServerErrorConstructor(HttpError, name, code) {
    var className = toClassName(name);
    function ServerError(message) {
      var msg = message != null ? message : statuses.message[code];
      var err = new Error(msg);
      Error.captureStackTrace(err, ServerError);
      setPrototypeOf(err, ServerError.prototype);
      Object.defineProperty(err, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err;
    }
    inherits(ServerError, HttpError);
    nameFunc(ServerError, className);
    ServerError.prototype.status = code;
    ServerError.prototype.statusCode = code;
    ServerError.prototype.expose = false;
    return ServerError;
  }
  function nameFunc(func, name) {
    var desc = Object.getOwnPropertyDescriptor(func, "name");
    if (desc && desc.configurable) {
      desc.value = name;
      Object.defineProperty(func, "name", desc);
    }
  }
  function populateConstructorExports(exports2, codes, HttpError) {
    codes.forEach(function forEachCode(code) {
      var CodeError;
      var name = toIdentifier(statuses.message[code]);
      switch (codeClass(code)) {
        case 400:
          CodeError = createClientErrorConstructor(HttpError, name, code);
          break;
        case 500:
          CodeError = createServerErrorConstructor(HttpError, name, code);
          break;
      }
      if (CodeError) {
        exports2[code] = CodeError;
        exports2[name] = CodeError;
      }
    });
  }
  function toClassName(name) {
    return name.substr(-5) !== "Error" ? name + "Error" : name;
  }
});

// node_modules/@fastify/send/lib/createHttpError.js
var require_createHttpError = __commonJS((exports, module) => {
  var createError = require_http_errors();
  function createHttpError(status, err) {
    if (!err) {
      return createError(status);
    }
    return err instanceof Error ? createError(status, err, { expose: false }) : createError(status, err);
  }
  exports.createHttpError = createHttpError;
});

// node_modules/@fastify/send/lib/send.js
var require_send = __commonJS((exports, module) => {
  var fs = __require("node:fs");
  var path = __require("node:path");
  var stream = __require("node:stream");
  var debug = __require("node:util").debuglog("send");
  var decode = require_fast_decode_uri_component();
  var escapeHtml = require_escape_html();
  var mime = require_mime();
  var ms = require_dist2();
  var { collapseLeadingSlashes } = require_collapseLeadingSlashes();
  var { containsDotFile } = require_containsDotFile();
  var { contentRange } = require_contentRange();
  var { createHtmlDocument } = require_createHtmlDocument();
  var { isUtf8MimeType } = require_isUtf8MimeType();
  var { normalizeList } = require_normalizeList();
  var { parseBytesRange } = require_parseBytesRange();
  var { parseTokenList } = require_parseTokenList();
  var { createHttpError } = require_createHttpError();
  var extname = path.extname;
  var join = path.join;
  var normalize = path.normalize;
  var resolve = path.resolve;
  var sep = path.sep;
  var Readable = stream.Readable;
  var BYTES_RANGE_REGEXP = /^ *bytes=/;
  var MAX_MAXAGE = 60 * 60 * 24 * 365 * 1000;
  var UP_PATH_REGEXP = /(?:^|[\\/])\.\.(?:[\\/]|$)/;
  var ERROR_RESPONSES = {
    400: createHtmlDocument("Error", "Bad Request"),
    403: createHtmlDocument("Error", "Forbidden"),
    404: createHtmlDocument("Error", "Not Found"),
    412: createHtmlDocument("Error", "Precondition Failed"),
    416: createHtmlDocument("Error", "Range Not Satisfiable"),
    500: createHtmlDocument("Error", "Internal Server Error")
  };
  var validDotFilesOptions = [
    "allow",
    "ignore",
    "deny"
  ];
  function normalizeMaxAge(_maxage) {
    let maxage;
    if (typeof _maxage === "string") {
      maxage = ms.parse(_maxage);
    } else {
      maxage = Number(_maxage);
    }
    if (maxage !== maxage) {
      return 0;
    }
    return Math.min(Math.max(0, maxage), MAX_MAXAGE);
  }
  function normalizeOptions(options) {
    options = options ?? {};
    const acceptRanges = options.acceptRanges !== undefined ? Boolean(options.acceptRanges) : true;
    const cacheControl = options.cacheControl !== undefined ? Boolean(options.cacheControl) : true;
    const contentType = options.contentType !== undefined ? Boolean(options.contentType) : true;
    const etag = options.etag !== undefined ? Boolean(options.etag) : true;
    const dotfiles = options.dotfiles !== undefined ? validDotFilesOptions.indexOf(options.dotfiles) : 1;
    if (dotfiles === -1) {
      throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"');
    }
    const extensions = options.extensions !== undefined ? normalizeList(options.extensions, "extensions option") : [];
    const immutable = options.immutable !== undefined ? Boolean(options.immutable) : false;
    const index = options.index !== undefined ? normalizeList(options.index, "index option") : ["index.html"];
    const lastModified = options.lastModified !== undefined ? Boolean(options.lastModified) : true;
    const maxage = normalizeMaxAge(options.maxAge ?? options.maxage);
    const maxContentRangeChunkSize = options.maxContentRangeChunkSize !== undefined ? Number(options.maxContentRangeChunkSize) : null;
    const root = options.root ? resolve(options.root) : null;
    return {
      acceptRanges,
      cacheControl,
      contentType,
      etag,
      dotfiles,
      extensions,
      immutable,
      index,
      lastModified,
      maxage,
      maxContentRangeChunkSize,
      root,
      start: options.start,
      end: options.end
    };
  }
  function normalizePath(_path, root) {
    let path2 = decode(_path);
    if (path2 == null) {
      return { statusCode: 400 };
    }
    if (~path2.indexOf("\x00")) {
      return { statusCode: 400 };
    }
    let parts;
    if (root !== null) {
      if (path2) {
        path2 = normalize("." + sep + path2);
      }
      if (UP_PATH_REGEXP.test(path2)) {
        debug('malicious path "%s"', path2);
        return { statusCode: 403 };
      }
      parts = path2.split(sep);
      path2 = normalize(join(root, path2));
    } else {
      if (UP_PATH_REGEXP.test(path2)) {
        debug('malicious path "%s"', path2);
        return { statusCode: 403 };
      }
      parts = normalize(path2).split(sep);
      path2 = resolve(path2);
    }
    return { path: path2, parts };
  }
  function hasTrailingSlash(path2) {
    return path2[path2.length - 1] === "/";
  }
  function isConditionalGET(request) {
    return request.headers["if-match"] || request.headers["if-unmodified-since"] || request.headers["if-none-match"] || request.headers["if-modified-since"];
  }
  function isNotModifiedFailure(request, headers) {
    if ("cache-control" in request.headers && request.headers["cache-control"].indexOf("no-cache") !== -1) {
      return false;
    }
    if ("if-none-match" in request.headers) {
      const ifNoneMatch = request.headers["if-none-match"];
      if (ifNoneMatch === "*") {
        return true;
      }
      const etag = headers.ETag;
      if (typeof etag !== "string") {
        return false;
      }
      const etagL = etag.length;
      const isMatching = parseTokenList(ifNoneMatch, function(match) {
        const mL = match.length;
        if (etagL === mL && match === etag || etagL > mL && "W/" + match === etag) {
          return true;
        }
      });
      if (isMatching) {
        return true;
      }
      return false;
    }
    if ("if-modified-since" in request.headers) {
      const ifModifiedSince = request.headers["if-modified-since"];
      const lastModified = headers["Last-Modified"];
      if (!lastModified || Date.parse(lastModified) <= Date.parse(ifModifiedSince)) {
        return true;
      }
    }
    return false;
  }
  function isPreconditionFailure(request, headers) {
    const ifMatch = request.headers["if-match"];
    if (ifMatch) {
      const etag = headers.ETag;
      if (ifMatch !== "*") {
        const isMatching = parseTokenList(ifMatch, function(match) {
          if (match === etag || "W/" + match === etag) {
            return true;
          }
        }) || false;
        if (isMatching !== true) {
          return true;
        }
      }
    }
    if ("if-unmodified-since" in request.headers) {
      const ifUnmodifiedSince = request.headers["if-unmodified-since"];
      const unmodifiedSince = Date.parse(ifUnmodifiedSince);
      if (unmodifiedSince === unmodifiedSince) {
        const lastModified = Date.parse(headers["Last-Modified"]);
        if (lastModified !== lastModified || lastModified > unmodifiedSince) {
          return true;
        }
      }
    }
    return false;
  }
  function isRangeFresh(request, headers) {
    if (!("if-range" in request.headers)) {
      return true;
    }
    const ifRange = request.headers["if-range"];
    if (ifRange.indexOf('"') !== -1) {
      const etag = headers.ETag;
      return etag && ifRange.indexOf(etag) !== -1 || false;
    }
    const ifRangeTimestamp = Date.parse(ifRange);
    if (ifRangeTimestamp !== ifRangeTimestamp) {
      return false;
    }
    const lastModified = Date.parse(headers["Last-Modified"]);
    return lastModified !== lastModified || lastModified <= ifRangeTimestamp;
  }
  function tryStat(path2) {
    return new Promise((resolve2) => {
      fs.stat(path2, function onstat(error, stat) {
        resolve2({ error, stat });
      });
    });
  }
  function sendError(statusCode, err) {
    const headers = {};
    if (err && err.headers) {
      for (const headerName in err.headers) {
        headers[headerName] = err.headers[headerName];
      }
    }
    const doc = ERROR_RESPONSES[statusCode];
    headers["Content-Type"] = "text/html; charset=utf-8";
    headers["Content-Length"] = doc[1];
    headers["Content-Security-Policy"] = "default-src 'none'";
    headers["X-Content-Type-Options"] = "nosniff";
    return {
      statusCode,
      headers,
      stream: Readable.from(doc[0]),
      type: "error",
      metadata: { error: createHttpError(statusCode, err) }
    };
  }
  function sendStatError(err) {
    switch (err.code) {
      case "ENAMETOOLONG":
      case "ENOTDIR":
      case "ENOENT":
        return sendError(404, err);
      default:
        return sendError(500, err);
    }
  }
  function sendNotModified(headers, path2, stat) {
    debug("not modified");
    delete headers["Content-Encoding"];
    delete headers["Content-Language"];
    delete headers["Content-Length"];
    delete headers["Content-Range"];
    delete headers["Content-Type"];
    return {
      statusCode: 304,
      headers,
      stream: Readable.from(""),
      type: "file",
      metadata: { path: path2, stat }
    };
  }
  function sendFileDirectly(request, path2, stat, options) {
    let len = stat.size;
    let offset = options.start ?? 0;
    let statusCode = 200;
    const headers = {};
    debug('send "%s"', path2);
    if (options.acceptRanges) {
      debug("accept ranges");
      headers["Accept-Ranges"] = "bytes";
    }
    if (options.cacheControl) {
      let cacheControl = "public, max-age=" + Math.floor(options.maxage / 1000);
      if (options.immutable) {
        cacheControl += ", immutable";
      }
      debug("cache-control %s", cacheControl);
      headers["Cache-Control"] = cacheControl;
    }
    if (options.lastModified) {
      const modified = stat.mtime.toUTCString();
      debug("modified %s", modified);
      headers["Last-Modified"] = modified;
    }
    if (options.etag) {
      const etag = 'W/"' + stat.size.toString(16) + "-" + stat.mtime.getTime().toString(16) + '"';
      debug("etag %s", etag);
      headers.ETag = etag;
    }
    if (options.contentType) {
      let type = mime.getType(path2) || mime.default_type;
      debug("content-type %s", type);
      if (type && isUtf8MimeType(type)) {
        type += "; charset=utf-8";
      }
      if (type) {
        headers["Content-Type"] = type;
      }
    }
    if (isConditionalGET(request)) {
      if (isPreconditionFailure(request, headers)) {
        return sendError(412);
      }
      if (isNotModifiedFailure(request, headers)) {
        return sendNotModified(headers, path2, stat);
      }
    }
    len = Math.max(0, len - offset);
    if (options.end !== undefined) {
      const bytes = options.end - offset + 1;
      if (len > bytes)
        len = bytes;
    }
    if (options.acceptRanges) {
      const rangeHeader = request.headers.range;
      if (rangeHeader !== undefined && BYTES_RANGE_REGEXP.test(rangeHeader)) {
        if (isRangeFresh(request, headers)) {
          const ranges = parseBytesRange(len, rangeHeader);
          if (ranges.length === 0) {
            debug("range unsatisfiable");
            headers["Content-Range"] = contentRange("bytes", len);
            return sendError(416, {
              headers: { "Content-Range": headers["Content-Range"] }
            });
          } else if (ranges.length === 1) {
            debug("range %j", ranges);
            statusCode = 206;
            if (options.maxContentRangeChunkSize) {
              ranges[0].end = Math.min(ranges[0].end, ranges[0].start + options.maxContentRangeChunkSize - 1);
            }
            headers["Content-Range"] = contentRange("bytes", len, ranges[0]);
            offset += ranges[0].start;
            len = ranges[0].end - ranges[0].start + 1;
          }
        } else {
          debug("range stale");
        }
      }
    }
    headers["Content-Length"] = len;
    if (request.method === "HEAD") {
      return {
        statusCode,
        headers,
        stream: Readable.from(""),
        type: "file",
        metadata: { path: path2, stat }
      };
    }
    const stream2 = fs.createReadStream(path2, {
      start: offset,
      end: Math.max(offset, offset + len - 1)
    });
    return {
      statusCode,
      headers,
      stream: stream2,
      type: "file",
      metadata: { path: path2, stat }
    };
  }
  function sendRedirect(path2, options) {
    if (hasTrailingSlash(options.path)) {
      return sendError(403);
    }
    const loc = encodeURI(collapseLeadingSlashes(options.path + "/"));
    const doc = createHtmlDocument("Redirecting", "Redirecting to " + escapeHtml(loc));
    const headers = {};
    headers["Content-Type"] = "text/html; charset=utf-8";
    headers["Content-Length"] = doc[1];
    headers["Content-Security-Policy"] = "default-src 'none'";
    headers["X-Content-Type-Options"] = "nosniff";
    headers.Location = loc;
    return {
      statusCode: 301,
      headers,
      stream: Readable.from(doc[0]),
      type: "directory",
      metadata: { requestPath: options.path, path: path2 }
    };
  }
  async function sendIndex(request, path2, options) {
    let err;
    for (let i = 0;i < options.index.length; i++) {
      const index = options.index[i];
      const p = join(path2, index);
      const { error, stat } = await tryStat(p);
      if (error) {
        err = error;
        continue;
      }
      if (stat.isDirectory())
        continue;
      return sendFileDirectly(request, p, stat, options);
    }
    if (err) {
      return sendStatError(err);
    }
    return sendError(404);
  }
  async function sendFile(request, path2, options) {
    const { error, stat } = await tryStat(path2);
    if (error && error.code === "ENOENT" && !extname(path2) && path2[path2.length - 1] !== sep) {
      let err = error;
      for (let i = 0;i < options.extensions.length; i++) {
        const extension = options.extensions[i];
        const p = path2 + "." + extension;
        const { error: error2, stat: stat2 } = await tryStat(p);
        if (error2) {
          err = error2;
          continue;
        }
        if (stat2.isDirectory()) {
          err = null;
          continue;
        }
        return sendFileDirectly(request, p, stat2, options);
      }
      if (err) {
        return sendStatError(err);
      }
      return sendError(404);
    }
    if (error)
      return sendStatError(error);
    if (stat.isDirectory())
      return sendRedirect(path2, options);
    return sendFileDirectly(request, path2, stat, options);
  }
  async function send(request, _path, options) {
    const opts = normalizeOptions(options);
    opts.path = _path;
    const parsed = normalizePath(_path, opts.root);
    const { path: path2, parts } = parsed;
    if (parsed.statusCode !== undefined) {
      return sendError(parsed.statusCode);
    }
    if ((debug.enabled || opts.dotfiles !== 0) && containsDotFile(parts)) {
      switch (opts.dotfiles) {
        case 0:
          debug('allow dotfile "%s"', path2);
          break;
        case 2:
          debug('deny dotfile "%s"', path2);
          return sendError(403);
        case 1:
        default:
          debug('ignore dotfile "%s"', path2);
          return sendError(404);
      }
    }
    if (opts.index.length && hasTrailingSlash(_path)) {
      return sendIndex(request, path2, opts);
    }
    return sendFile(request, path2, opts);
  }
  exports.send = send;
});

// node_modules/@fastify/send/index.js
var require_send2 = __commonJS((exports, module) => {
  /*!
   * send
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  var isUtf8MimeType = require_isUtf8MimeType().isUtf8MimeType;
  var mime = require_mime();
  var send = require_send().send;
  module.exports = send;
  module.exports.default = send;
  module.exports.send = send;
  module.exports.isUtf8MimeType = isUtf8MimeType;
  module.exports.mime = mime;
});

// node_modules/@fastify/accept-negotiator/index.js
var require_accept_negotiator = __commonJS((exports, module) => {
  function Negotiator(options) {
    if (!new.target) {
      return new Negotiator(options);
    }
    const {
      supportedValues = [],
      cache
    } = options && typeof options === "object" && options || {};
    this.supportedValues = supportedValues;
    this.cache = cache;
  }
  Negotiator.prototype.negotiate = function(header) {
    if (typeof header !== "string") {
      return null;
    }
    if (!this.cache) {
      return negotiate(header, this.supportedValues);
    }
    if (!this.cache.has(header)) {
      this.cache.set(header, negotiate(header, this.supportedValues));
    }
    return this.cache.get(header);
  };
  function negotiate(header, supportedValues) {
    if (!header || !Array.isArray(supportedValues) || supportedValues.length === 0) {
      return null;
    }
    if (header === "*") {
      return supportedValues[0];
    }
    let preferredEncoding = null;
    let preferredEncodingPriority = Infinity;
    let preferredEncodingQuality = 0;
    function processMatch(enc, quality) {
      if (quality === 0 || preferredEncodingQuality > quality) {
        return false;
      }
      const encoding = enc === "*" && supportedValues[0] || enc;
      const priority = supportedValues.indexOf(encoding);
      if (priority === -1) {
        return false;
      }
      if (priority === 0 && quality === 1) {
        preferredEncoding = encoding;
        return true;
      } else if (preferredEncodingQuality < quality) {
        preferredEncoding = encoding;
        preferredEncodingPriority = priority;
        preferredEncodingQuality = quality;
      } else if (preferredEncodingPriority > priority) {
        preferredEncoding = encoding;
        preferredEncodingPriority = priority;
        preferredEncodingQuality = quality;
      }
      return false;
    }
    parse(header, processMatch);
    return preferredEncoding;
  }
  var BEGIN = 0;
  var TOKEN = 1;
  var QUALITY = 2;
  var END = 3;
  function parse(header, processMatch) {
    let str = "";
    let quality;
    let state = BEGIN;
    for (let i = 0, il = header.length;i < il; ++i) {
      const char = header[i];
      if (char === " " || char === "\t") {
        continue;
      } else if (char === ";") {
        if (state === TOKEN) {
          state = QUALITY;
          quality = "";
        }
        continue;
      } else if (char === ",") {
        if (state === TOKEN) {
          if (processMatch(str, 1)) {
            state = END;
            break;
          }
          state = BEGIN;
          str = "";
        } else if (state === QUALITY) {
          if (processMatch(str, parseFloat(quality) || 0)) {
            state = END;
            break;
          }
          state = BEGIN;
          str = "";
          quality = "";
        }
        continue;
      } else if (state === QUALITY) {
        if (char === "q" || char === "=") {
          continue;
        } else if (char === "." || char === "1" || char === "0" || char === "2" || char === "3" || char === "4" || char === "5" || char === "6" || char === "7" || char === "8" || char === "9") {
          quality += char;
          continue;
        }
      } else if (state === BEGIN) {
        state = TOKEN;
        str += char;
        continue;
      }
      if (state === TOKEN) {
        const prevChar = header[i - 1];
        if (prevChar === " " || prevChar === "\t") {
          str = "";
        }
        str += char;
        continue;
      }
      if (processMatch(str, parseFloat(quality) || 0)) {
        state = END;
        break;
      }
      state = BEGIN;
      str = char;
      quality = "";
    }
    if (state === TOKEN) {
      processMatch(str, 1);
    } else if (state === QUALITY) {
      processMatch(str, parseFloat(quality) || 0);
    }
  }
  module.exports = negotiate;
  module.exports.default = negotiate;
  module.exports.negotiate = negotiate;
  module.exports.Negotiator = Negotiator;
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS((exports, module) => {
  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
  var buffer = __require("buffer");
  var Buffer2 = buffer.Buffer;
  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }
  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer2(arg, encodingOrOffset, length);
  }
  SafeBuffer.prototype = Object.create(Buffer2.prototype);
  copyProps(Buffer2, SafeBuffer);
  SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      throw new TypeError("Argument must not be a number");
    }
    return Buffer2(arg, encodingOrOffset, length);
  };
  SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    var buf = Buffer2(size);
    if (fill !== undefined) {
      if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };
  SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return Buffer2(size);
  };
  SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return buffer.SlowBuffer(size);
  };
});

// node_modules/content-disposition/index.js
var require_content_disposition = __commonJS((exports, module) => {
  /*!
   * content-disposition
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = contentDisposition;
  module.exports.parse = parse;
  var basename = __require("path").basename;
  var Buffer2 = require_safe_buffer().Buffer;
  var ENCODE_URL_ATTR_CHAR_REGEXP = /[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g;
  var HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/;
  var HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g;
  var NON_LATIN1_REGEXP = /[^\x20-\x7e\xa0-\xff]/g;
  var QESC_REGEXP = /\\([\u0000-\u007f])/g;
  var QUOTE_REGEXP = /([\\"])/g;
  var PARAM_REGEXP = /;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g;
  var TEXT_REGEXP = /^[\x20-\x7e\x80-\xff]+$/;
  var TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;
  var EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;
  var DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/;
  function contentDisposition(filename, options) {
    var opts = options || {};
    var type = opts.type || "attachment";
    var params = createparams(filename, opts.fallback);
    return format(new ContentDisposition(type, params));
  }
  function createparams(filename, fallback) {
    if (filename === undefined) {
      return;
    }
    var params = {};
    if (typeof filename !== "string") {
      throw new TypeError("filename must be a string");
    }
    if (fallback === undefined) {
      fallback = true;
    }
    if (typeof fallback !== "string" && typeof fallback !== "boolean") {
      throw new TypeError("fallback must be a string or boolean");
    }
    if (typeof fallback === "string" && NON_LATIN1_REGEXP.test(fallback)) {
      throw new TypeError("fallback must be ISO-8859-1 string");
    }
    var name = basename(filename);
    var isQuotedString = TEXT_REGEXP.test(name);
    var fallbackName = typeof fallback !== "string" ? fallback && getlatin1(name) : basename(fallback);
    var hasFallback = typeof fallbackName === "string" && fallbackName !== name;
    if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {
      params["filename*"] = name;
    }
    if (isQuotedString || hasFallback) {
      params.filename = hasFallback ? fallbackName : name;
    }
    return params;
  }
  function format(obj) {
    var parameters = obj.parameters;
    var type = obj.type;
    if (!type || typeof type !== "string" || !TOKEN_REGEXP.test(type)) {
      throw new TypeError("invalid type");
    }
    var string = String(type).toLowerCase();
    if (parameters && typeof parameters === "object") {
      var param;
      var params = Object.keys(parameters).sort();
      for (var i = 0;i < params.length; i++) {
        param = params[i];
        var val = param.substr(-1) === "*" ? ustring(parameters[param]) : qstring(parameters[param]);
        string += "; " + param + "=" + val;
      }
    }
    return string;
  }
  function decodefield(str) {
    var match = EXT_VALUE_REGEXP.exec(str);
    if (!match) {
      throw new TypeError("invalid extended field value");
    }
    var charset = match[1].toLowerCase();
    var encoded = match[2];
    var value;
    var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode);
    switch (charset) {
      case "iso-8859-1":
        value = getlatin1(binary);
        break;
      case "utf-8":
        value = Buffer2.from(binary, "binary").toString("utf8");
        break;
      default:
        throw new TypeError("unsupported charset in extended field");
    }
    return value;
  }
  function getlatin1(val) {
    return String(val).replace(NON_LATIN1_REGEXP, "?");
  }
  function parse(string) {
    if (!string || typeof string !== "string") {
      throw new TypeError("argument string is required");
    }
    var match = DISPOSITION_TYPE_REGEXP.exec(string);
    if (!match) {
      throw new TypeError("invalid type format");
    }
    var index = match[0].length;
    var type = match[1].toLowerCase();
    var key;
    var names = [];
    var params = {};
    var value;
    index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ";" ? index - 1 : index;
    while (match = PARAM_REGEXP.exec(string)) {
      if (match.index !== index) {
        throw new TypeError("invalid parameter format");
      }
      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];
      if (names.indexOf(key) !== -1) {
        throw new TypeError("invalid duplicate parameter");
      }
      names.push(key);
      if (key.indexOf("*") + 1 === key.length) {
        key = key.slice(0, -1);
        value = decodefield(value);
        params[key] = value;
        continue;
      }
      if (typeof params[key] === "string") {
        continue;
      }
      if (value[0] === '"') {
        value = value.substr(1, value.length - 2).replace(QESC_REGEXP, "$1");
      }
      params[key] = value;
    }
    if (index !== -1 && index !== string.length) {
      throw new TypeError("invalid parameter format");
    }
    return new ContentDisposition(type, params);
  }
  function pdecode(str, hex) {
    return String.fromCharCode(parseInt(hex, 16));
  }
  function pencode(char) {
    return "%" + String(char).charCodeAt(0).toString(16).toUpperCase();
  }
  function qstring(val) {
    var str = String(val);
    return '"' + str.replace(QUOTE_REGEXP, "\\$1") + '"';
  }
  function ustring(val) {
    var str = String(val);
    var encoded = encodeURIComponent(str).replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode);
    return "UTF-8''" + encoded;
  }
  function ContentDisposition(type, parameters) {
    this.type = type;
    this.parameters = parameters;
  }
});

// node_modules/reusify/reusify.js
var require_reusify = __commonJS((exports, module) => {
  function reusify(Constructor) {
    var head = new Constructor;
    var tail = head;
    function get() {
      var current = head;
      if (current.next) {
        head = current.next;
      } else {
        head = new Constructor;
        tail = head;
      }
      current.next = null;
      return current;
    }
    function release(obj) {
      tail.next = obj;
      tail = obj;
    }
    return {
      get,
      release
    };
  }
  module.exports = reusify;
});

// node_modules/fastq/queue.js
var require_queue = __commonJS((exports, module) => {
  var reusify = require_reusify();
  function fastqueue(context, worker, _concurrency) {
    if (typeof context === "function") {
      _concurrency = worker;
      worker = context;
      context = null;
    }
    if (!(_concurrency >= 1)) {
      throw new Error("fastqueue concurrency must be equal to or greater than 1");
    }
    var cache = reusify(Task);
    var queueHead = null;
    var queueTail = null;
    var _running = 0;
    var errorHandler = null;
    var self = {
      push,
      drain: noop,
      saturated: noop,
      pause,
      paused: false,
      get concurrency() {
        return _concurrency;
      },
      set concurrency(value) {
        if (!(value >= 1)) {
          throw new Error("fastqueue concurrency must be equal to or greater than 1");
        }
        _concurrency = value;
        if (self.paused)
          return;
        for (;queueHead && _running < _concurrency; ) {
          _running++;
          release();
        }
      },
      running,
      resume,
      idle,
      length,
      getQueue,
      unshift,
      empty: noop,
      kill,
      killAndDrain,
      error
    };
    return self;
    function running() {
      return _running;
    }
    function pause() {
      self.paused = true;
    }
    function length() {
      var current = queueHead;
      var counter = 0;
      while (current) {
        current = current.next;
        counter++;
      }
      return counter;
    }
    function getQueue() {
      var current = queueHead;
      var tasks = [];
      while (current) {
        tasks.push(current.value);
        current = current.next;
      }
      return tasks;
    }
    function resume() {
      if (!self.paused)
        return;
      self.paused = false;
      if (queueHead === null) {
        _running++;
        release();
        return;
      }
      for (;queueHead && _running < _concurrency; ) {
        _running++;
        release();
      }
    }
    function idle() {
      return _running === 0 && self.length() === 0;
    }
    function push(value, done) {
      var current = cache.get();
      current.context = context;
      current.release = release;
      current.value = value;
      current.callback = done || noop;
      current.errorHandler = errorHandler;
      if (_running >= _concurrency || self.paused) {
        if (queueTail) {
          queueTail.next = current;
          queueTail = current;
        } else {
          queueHead = current;
          queueTail = current;
          self.saturated();
        }
      } else {
        _running++;
        worker.call(context, current.value, current.worked);
      }
    }
    function unshift(value, done) {
      var current = cache.get();
      current.context = context;
      current.release = release;
      current.value = value;
      current.callback = done || noop;
      current.errorHandler = errorHandler;
      if (_running >= _concurrency || self.paused) {
        if (queueHead) {
          current.next = queueHead;
          queueHead = current;
        } else {
          queueHead = current;
          queueTail = current;
          self.saturated();
        }
      } else {
        _running++;
        worker.call(context, current.value, current.worked);
      }
    }
    function release(holder) {
      if (holder) {
        cache.release(holder);
      }
      var next = queueHead;
      if (next && _running <= _concurrency) {
        if (!self.paused) {
          if (queueTail === queueHead) {
            queueTail = null;
          }
          queueHead = next.next;
          next.next = null;
          worker.call(context, next.value, next.worked);
          if (queueTail === null) {
            self.empty();
          }
        } else {
          _running--;
        }
      } else if (--_running === 0) {
        self.drain();
      }
    }
    function kill() {
      queueHead = null;
      queueTail = null;
      self.drain = noop;
    }
    function killAndDrain() {
      queueHead = null;
      queueTail = null;
      self.drain();
      self.drain = noop;
    }
    function error(handler) {
      errorHandler = handler;
    }
  }
  function noop() {
  }
  function Task() {
    this.value = null;
    this.callback = noop;
    this.next = null;
    this.release = noop;
    this.context = null;
    this.errorHandler = null;
    var self = this;
    this.worked = function worked(err, result) {
      var callback = self.callback;
      var errorHandler = self.errorHandler;
      var val = self.value;
      self.value = null;
      self.callback = noop;
      if (self.errorHandler) {
        errorHandler(err, val);
      }
      callback.call(self.context, err, result);
      self.release(self);
    };
  }
  function queueAsPromised(context, worker, _concurrency) {
    if (typeof context === "function") {
      _concurrency = worker;
      worker = context;
      context = null;
    }
    function asyncWrapper(arg, cb) {
      worker.call(this, arg).then(function(res) {
        cb(null, res);
      }, cb);
    }
    var queue = fastqueue(context, asyncWrapper, _concurrency);
    var pushCb = queue.push;
    var unshiftCb = queue.unshift;
    queue.push = push;
    queue.unshift = unshift;
    queue.drained = drained;
    return queue;
    function push(value) {
      var p = new Promise(function(resolve, reject) {
        pushCb(value, function(err, result) {
          if (err) {
            reject(err);
            return;
          }
          resolve(result);
        });
      });
      p.catch(noop);
      return p;
    }
    function unshift(value) {
      var p = new Promise(function(resolve, reject) {
        unshiftCb(value, function(err, result) {
          if (err) {
            reject(err);
            return;
          }
          resolve(result);
        });
      });
      p.catch(noop);
      return p;
    }
    function drained() {
      var p = new Promise(function(resolve) {
        process.nextTick(function() {
          if (queue.idle()) {
            resolve();
          } else {
            var previousDrain = queue.drain;
            queue.drain = function() {
              if (typeof previousDrain === "function")
                previousDrain();
              resolve();
              queue.drain = previousDrain;
            };
          }
        });
      });
      return p;
    }
  }
  module.exports = fastqueue;
  module.exports.promise = queueAsPromised;
});

// node_modules/@fastify/static/lib/dirList.js
var require_dirList = __commonJS((exports, module) => {
  var os = __require("node:os");
  var path = __require("node:path");
  var fs = __require("node:fs/promises");
  var fastq = require_queue();
  var fastqConcurrency = Math.max(1, os.cpus().length - 1);
  var dirList = {
    _getExtendedInfo: async function(dir, info) {
      const depth = dir.split(path.sep).length;
      const files = await fs.readdir(dir);
      const worker = async (filename) => {
        const filePath = path.join(dir, filename);
        let stats;
        try {
          stats = await fs.stat(filePath);
        } catch {
          return;
        }
        if (stats.isDirectory()) {
          info.totalFolderCount++;
          filePath.split(path.sep).length === depth + 1 && info.folderCount++;
          await dirList._getExtendedInfo(filePath, info);
        } else {
          info.totalSize += stats.size;
          info.totalFileCount++;
          filePath.split(path.sep).length === depth + 1 && info.fileCount++;
          info.lastModified = Math.max(info.lastModified, stats.mtimeMs);
        }
      };
      const queue = fastq.promise(worker, fastqConcurrency);
      await Promise.all(files.map((filename) => queue.push(filename)));
    },
    getExtendedInfo: async function(folderPath) {
      const info = {
        totalSize: 0,
        fileCount: 0,
        totalFileCount: 0,
        folderCount: 0,
        totalFolderCount: 0,
        lastModified: 0
      };
      await dirList._getExtendedInfo(folderPath, info);
      return info;
    },
    list: async function(dir, options, dotfiles) {
      const entries = { dirs: [], files: [] };
      let files = await fs.readdir(dir);
      if (dotfiles === "deny" || dotfiles === "ignore") {
        files = files.filter((file) => file.charAt(0) !== ".");
      }
      if (files.length < 1) {
        return entries;
      }
      const worker = async (filename) => {
        let stats;
        try {
          stats = await fs.stat(path.join(dir, filename));
        } catch {
          return;
        }
        const entry = { name: filename, stats };
        if (stats.isDirectory()) {
          if (options.extendedFolderInfo) {
            entry.extendedInfo = await dirList.getExtendedInfo(path.join(dir, filename));
          }
          entries.dirs.push(entry);
        } else {
          entries.files.push(entry);
        }
      };
      const queue = fastq.promise(worker, fastqConcurrency);
      await Promise.all(files.map((filename) => queue.push(filename)));
      entries.dirs.sort((a, b) => a.name.localeCompare(b.name));
      entries.files.sort((a, b) => a.name.localeCompare(b.name));
      return entries;
    },
    send: async function({ reply, dir, options, route, prefix, dotfiles }) {
      if (reply.request.query.format === "html" && typeof options.render !== "function") {
        throw new TypeError("The `list.render` option must be a function and is required with the URL parameter `format=html`");
      }
      let entries;
      try {
        entries = await dirList.list(dir, options, dotfiles);
      } catch {
        return reply.callNotFound();
      }
      const format = reply.request.query.format || options.format;
      if (format !== "html") {
        if (options.jsonFormat !== "extended") {
          const nameEntries = { dirs: [], files: [] };
          entries.dirs.forEach((entry) => nameEntries.dirs.push(entry.name));
          entries.files.forEach((entry) => nameEntries.files.push(entry.name));
          await reply.send(nameEntries);
        } else {
          await reply.send(entries);
        }
        return;
      }
      const html = options.render(entries.dirs.map((entry) => dirList.htmlInfo(entry, route, prefix, options)), entries.files.map((entry) => dirList.htmlInfo(entry, route, prefix, options)));
      await reply.type("text/html").send(html);
    },
    htmlInfo: function(entry, route, prefix, options) {
      if (options.names?.includes(path.basename(route))) {
        route = path.normalize(path.join(route, ".."));
      }
      return {
        href: encodeURI(path.join(prefix, route, entry.name).replace(/\\/gu, "/")),
        name: entry.name,
        stats: entry.stats,
        extendedInfo: entry.extendedInfo
      };
    },
    handle: function(route, options) {
      return options.names?.includes(path.basename(route)) || ((options.names?.includes("/") && route[route.length - 1] === "/") ?? false);
    },
    path: function(root, route) {
      const _route = route[route.length - 1] === "/" ? route + "none" : route;
      return path.dirname(path.join(root, _route));
    },
    validateOptions: function(options) {
      if (!options.list) {
        return;
      }
      if (Array.isArray(options.root)) {
        return new TypeError("multi-root with list option is not supported");
      }
      if (options.list.format && options.list.format !== "json" && options.list.format !== "html") {
        return new TypeError("The `list.format` option must be json or html");
      }
      if (options.list.names && !Array.isArray(options.list.names)) {
        return new TypeError("The `list.names` option must be an array");
      }
      if (options.list.jsonFormat != null && options.list.jsonFormat !== "names" && options.list.jsonFormat !== "extended") {
        return new TypeError("The `list.jsonFormat` option must be name or extended");
      }
      if (options.list.format === "html" && typeof options.list.render !== "function") {
        return new TypeError("The `list.render` option must be a function and is required with html format");
      }
    }
  };
  module.exports = dirList;
});

// node_modules/@fastify/static/index.js
var require_static2 = __commonJS((exports, module) => {
  var path = __require("node:path");
  var { fileURLToPath } = __require("node:url");
  var { statSync } = __require("node:fs");
  var { glob } = require_commonjs5();
  var fp = require_plugin();
  var send = require_send2();
  var encodingNegotiator = require_accept_negotiator();
  var contentDisposition = require_content_disposition();
  var dirList = require_dirList();
  var endForwardSlashRegex = /\/$/u;
  var asteriskRegex = /\*/gu;
  var supportedEncodings = ["br", "gzip", "deflate"];
  send.mime.default_type = "application/octet-stream";
  async function fastifyStatic(fastify, opts) {
    opts.root = normalizeRoot(opts.root);
    checkRootPathForErrors(fastify, opts.root);
    const setHeaders = opts.setHeaders;
    if (setHeaders !== undefined && typeof setHeaders !== "function") {
      throw new TypeError("The `setHeaders` option must be a function");
    }
    const invalidDirListOpts = dirList.validateOptions(opts);
    if (invalidDirListOpts) {
      throw invalidDirListOpts;
    }
    if (opts.dotfiles === undefined) {
      opts.dotfiles = "allow";
    }
    const sendOptions = {
      root: opts.root,
      acceptRanges: opts.acceptRanges,
      contentType: opts.contentType,
      cacheControl: opts.cacheControl,
      dotfiles: opts.dotfiles,
      etag: opts.etag,
      extensions: opts.extensions,
      immutable: opts.immutable,
      index: opts.index,
      lastModified: opts.lastModified,
      maxAge: opts.maxAge
    };
    let prefix = opts.prefix ?? (opts.prefix = "/");
    if (!opts.prefixAvoidTrailingSlash) {
      prefix = prefix[prefix.length - 1] === "/" ? prefix : prefix + "/";
    }
    const routeOpts = {
      constraints: opts.constraints,
      schema: {
        hide: opts.schemaHide !== undefined ? opts.schemaHide : true
      },
      logLevel: opts.logLevel,
      errorHandler(error, request, reply) {
        if (error?.code === "ERR_STREAM_PREMATURE_CLOSE") {
          reply.request.raw.destroy();
          return;
        }
        fastify.errorHandler(error, request, reply);
      }
    };
    if (opts.decorateReply !== false) {
      fastify.decorateReply("sendFile", function(filePath, rootPath, options) {
        const opts2 = typeof rootPath === "object" ? rootPath : options;
        const root = typeof rootPath === "string" ? rootPath : opts2?.root;
        pumpSendToReply(this.request, this, filePath, root || sendOptions.root, 0, opts2);
        return this;
      });
      fastify.decorateReply("download", function(filePath, fileName, options = {}) {
        const { root, ...opts2 } = typeof fileName === "object" ? fileName : options;
        fileName = typeof fileName === "string" ? fileName : filePath;
        this.header("content-disposition", contentDisposition(fileName));
        pumpSendToReply(this.request, this, filePath, root, 0, opts2);
        return this;
      });
    }
    if (opts.serve !== false) {
      if (opts.wildcard && typeof opts.wildcard !== "boolean") {
        throw new TypeError('"wildcard" option must be a boolean');
      }
      if (opts.wildcard === undefined || opts.wildcard === true) {
        fastify.route({
          ...routeOpts,
          method: ["HEAD", "GET"],
          path: prefix + "*",
          handler(req, reply) {
            pumpSendToReply(req, reply, "/" + req.params["*"], sendOptions.root);
          }
        });
        if (opts.redirect === true && prefix !== opts.prefix) {
          fastify.get(opts.prefix, routeOpts, (req, reply) => {
            reply.redirect(getRedirectUrl(req.raw.url), 301);
          });
        }
      } else {
        const indexes = opts.index === undefined ? ["index.html"] : [].concat(opts.index);
        const indexDirs = new Map;
        const routes = new Set;
        const roots = Array.isArray(sendOptions.root) ? sendOptions.root : [sendOptions.root];
        for (let rootPath of roots) {
          rootPath = rootPath.split(path.win32.sep).join(path.posix.sep);
          !rootPath.endsWith("/") && (rootPath += "/");
          const files = await glob("**/**", {
            cwd: rootPath,
            absolute: false,
            follow: true,
            nodir: true,
            dot: opts.serveDotFiles
          });
          for (let file of files) {
            file = file.split(path.win32.sep).join(path.posix.sep);
            const route = prefix + file;
            if (routes.has(route)) {
              continue;
            }
            routes.add(route);
            setUpHeadAndGet(routeOpts, route, `/${file}`, rootPath);
            const key = path.posix.basename(route);
            if (indexes.includes(key) && !indexDirs.has(key)) {
              indexDirs.set(path.posix.dirname(route), rootPath);
            }
          }
        }
        for (const [dirname, rootPath] of indexDirs.entries()) {
          const pathname = dirname + (dirname.endsWith("/") ? "" : "/");
          const file = "/" + pathname.replace(prefix, "");
          setUpHeadAndGet(routeOpts, pathname, file, rootPath);
          if (opts.redirect === true) {
            setUpHeadAndGet(routeOpts, pathname.replace(endForwardSlashRegex, ""), file.replace(endForwardSlashRegex, ""), rootPath);
          }
        }
      }
    }
    const allowedPath = opts.allowedPath;
    async function pumpSendToReply(request, reply, pathname, rootPath, rootPathOffset = 0, pumpOptions, checkedEncodings) {
      const pathnameOrig = pathname;
      const options = Object.assign({}, sendOptions, pumpOptions);
      if (rootPath) {
        if (Array.isArray(rootPath)) {
          options.root = rootPath[rootPathOffset];
        } else {
          options.root = rootPath;
        }
      }
      if (allowedPath && !allowedPath(pathname, options.root, request)) {
        return reply.callNotFound();
      }
      let encoding;
      let pathnameForSend = pathname;
      if (opts.preCompressed) {
        if (!checkedEncodings) {
          checkedEncodings = new Set;
        }
        encoding = getEncodingHeader(request.headers, checkedEncodings);
        if (encoding) {
          if (pathname.endsWith("/")) {
            pathname = findIndexFile(pathname, options.root, options.index);
            if (!pathname) {
              return reply.callNotFound();
            }
            pathnameForSend = pathnameForSend + pathname + "." + getEncodingExtension(encoding);
          } else {
            pathnameForSend = pathname + "." + getEncodingExtension(encoding);
          }
        }
      }
      const {
        statusCode,
        headers,
        stream,
        type,
        metadata
      } = await send(request.raw, encodeURI(pathnameForSend), options);
      switch (type) {
        case "directory": {
          const path2 = metadata.path;
          if (opts.list) {
            await dirList.send({
              reply,
              dir: path2,
              options: opts.list,
              route: pathname,
              prefix,
              dotfiles: opts.dotfiles
            }).catch((err) => reply.send(err));
          }
          if (opts.redirect === true) {
            try {
              reply.redirect(getRedirectUrl(request.raw.url), 301);
            } catch (error) {
              await reply.send(error);
            }
          } else {
            if (!pathname.endsWith("/") && findIndexFile(pathname, options.root, options.index)) {
              return pumpSendToReply(request, reply, pathname + "/", rootPath, undefined, undefined, checkedEncodings);
            }
            reply.callNotFound();
          }
          break;
        }
        case "error": {
          if (statusCode === 403 && (!options.index || !options.index.length) && pathnameForSend[pathnameForSend.length - 1] === "/") {
            if (opts.list) {
              await dirList.send({
                reply,
                dir: dirList.path(opts.root, pathname),
                options: opts.list,
                route: pathname,
                prefix,
                dotfiles: opts.dotfiles
              }).catch((err) => reply.send(err));
            }
          }
          if (metadata.error.code === "ENOENT") {
            if (opts.preCompressed && encoding) {
              if (opts.redirect !== true) {
                const indexPathname = findIndexFile(pathname, options.root, options.index);
                if (indexPathname) {
                  return pumpSendToReply(request, reply, pathname + "/", rootPath, undefined, undefined, checkedEncodings);
                }
              }
            }
            if (opts.list && dirList.handle(pathname, opts.list)) {
              await dirList.send({
                reply,
                dir: dirList.path(opts.root, pathname),
                options: opts.list,
                route: pathname,
                prefix,
                dotfiles: opts.dotfiles
              }).catch((err) => reply.send(err));
              return;
            }
            if (Array.isArray(rootPath) && rootPathOffset < rootPath.length - 1) {
              return pumpSendToReply(request, reply, pathname, rootPath, rootPathOffset + 1);
            }
            if (opts.preCompressed && !checkedEncodings.has(encoding)) {
              checkedEncodings.add(encoding);
              return pumpSendToReply(request, reply, pathnameOrig, rootPath, rootPathOffset, undefined, checkedEncodings);
            }
            return reply.callNotFound();
          }
          if (metadata.error.status === 404) {
            return reply.callNotFound();
          }
          await reply.send(metadata.error);
          break;
        }
        case "file": {
          const newStatusCode = reply.statusCode !== 200 ? reply.statusCode : statusCode;
          reply.code(newStatusCode);
          if (setHeaders !== undefined) {
            setHeaders(reply.raw, metadata.path, metadata.stat);
          }
          reply.headers(headers);
          if (encoding) {
            reply.header("content-type", getContentType(pathname));
            reply.header("content-encoding", encoding);
          }
          await reply.send(stream);
          break;
        }
      }
    }
    function setUpHeadAndGet(routeOpts2, route, file, rootPath) {
      const toSetUp = Object.assign({}, routeOpts2, {
        method: ["HEAD", "GET"],
        url: route,
        handler: serveFileHandler
      });
      toSetUp.config = toSetUp.config || {};
      toSetUp.config.file = file;
      toSetUp.config.rootPath = rootPath;
      fastify.route(toSetUp);
    }
    async function serveFileHandler(req, reply) {
      const routeConfig = req.routeOptions?.config || req.routeConfig;
      return pumpSendToReply(req, reply, routeConfig.file, routeConfig.rootPath);
    }
  }
  function normalizeRoot(root) {
    if (root === undefined) {
      return root;
    }
    if (root instanceof URL && root.protocol === "file:") {
      return fileURLToPath(root);
    }
    if (Array.isArray(root)) {
      const result = [];
      for (let i = 0, il = root.length;i < il; ++i) {
        if (root[i] instanceof URL && root[i].protocol === "file:") {
          result.push(fileURLToPath(root[i]));
        } else {
          result.push(root[i]);
        }
      }
      return result;
    }
    return root;
  }
  function checkRootPathForErrors(fastify, rootPath) {
    if (rootPath === undefined) {
      throw new Error('"root" option is required');
    }
    if (Array.isArray(rootPath)) {
      if (!rootPath.length) {
        throw new Error('"root" option array requires one or more paths');
      }
      if (new Set(rootPath).size !== rootPath.length) {
        throw new Error('"root" option array contains one or more duplicate paths');
      }
      rootPath.map((path2) => checkPath(fastify, path2));
      return;
    }
    if (typeof rootPath === "string") {
      return checkPath(fastify, rootPath);
    }
    throw new Error('"root" option must be a string or array of strings');
  }
  function checkPath(fastify, rootPath) {
    if (typeof rootPath !== "string") {
      throw new TypeError('"root" option must be a string');
    }
    if (path.isAbsolute(rootPath) === false) {
      throw new Error('"root" option must be an absolute path');
    }
    let pathStat;
    try {
      pathStat = statSync(rootPath);
    } catch (e) {
      if (e.code === "ENOENT") {
        fastify.log.warn(`"root" path "${rootPath}" must exist`);
        return;
      }
      throw e;
    }
    if (pathStat.isDirectory() === false) {
      throw new Error('"root" option must point to a directory');
    }
  }
  function getContentType(path2) {
    const type = send.mime.getType(path2) || send.mime.default_type;
    if (!send.isUtf8MimeType(type)) {
      return type;
    }
    return `${type}; charset=utf-8`;
  }
  function findIndexFile(pathname, root, indexFiles = ["index.html"]) {
    if (Array.isArray(indexFiles)) {
      return indexFiles.find((filename) => {
        const p = path.join(root, pathname, filename);
        try {
          const stats = statSync(p);
          return !stats.isDirectory();
        } catch {
          return false;
        }
      });
    }
    return false;
  }
  function getEncodingHeader(headers, checked) {
    if (!("accept-encoding" in headers))
      return;
    const header = headers["accept-encoding"].toLowerCase().replace(asteriskRegex, "gzip");
    return encodingNegotiator.negotiate(header, supportedEncodings.filter((enc) => !checked.has(enc)));
  }
  function getEncodingExtension(encoding) {
    switch (encoding) {
      case "br":
        return "br";
      case "gzip":
        return "gz";
    }
  }
  function getRedirectUrl(url) {
    let i = 0;
    for (;i < url.length; ++i) {
      if (url[i] !== "/" && url[i] !== "\\")
        break;
    }
    url = "/" + url.substr(i);
    try {
      const parsed = new URL(url, "http://localhost.com/");
      const parsedPathname = parsed.pathname;
      return parsedPathname + (parsedPathname[parsedPathname.length - 1] !== "/" ? "/" : "") + (parsed.search || "");
    } catch {
      const err = new Error(`Invalid redirect URL: ${url}`);
      err.statusCode = 400;
      throw err;
    }
  }
  module.exports = fp(fastifyStatic, {
    fastify: "5.x",
    name: "@fastify/static"
  });
  module.exports.default = fastifyStatic;
  module.exports.fastifyStatic = fastifyStatic;
});

// node_modules/@fastify/swagger-ui/lib/serialize.js
var require_serialize = __commonJS((exports, module) => {
  function serialize(value) {
    switch (typeof value) {
      case "bigint":
        return value.toString() + "n";
      case "boolean":
        return value ? "true" : "false";
      case "function":
        return value.toString();
      case "number":
        return "" + value;
      case "object":
        if (value === null) {
          return "null";
        } else if (Array.isArray(value)) {
          return serializeArray(value);
        } else if (value instanceof RegExp) {
          return `/${value.source}/${value.flags}`;
        } else if (value instanceof Date) {
          return `new Date(${value.getTime()})`;
        } else if (value instanceof Set) {
          return `new Set(${serializeArray(Array.from(value))})`;
        } else if (value instanceof Map) {
          return `new Map(${serializeArray(Array.from(value))})`;
        } else {
          return serializeObject(value);
        }
      case "string":
        return JSON.stringify(value);
      case "symbol":
        return serializeSymbol(value);
      case "undefined":
        return "undefined";
    }
  }
  var symbolRE = /Symbol\((.+)\)/;
  function serializeSymbol(value) {
    return symbolRE.test(value.toString()) ? `Symbol("${value.toString().match(symbolRE)[1]}")` : "Symbol()";
  }
  function serializeArray(value) {
    let result = "[";
    const il = value.length;
    const last = il - 1;
    for (let i = 0;i < il; ++i) {
      result += serialize(value[i]);
      i !== last && (result += ",");
    }
    return result + "]";
  }
  function serializeObject(value) {
    let result = "{";
    const keys = Object.keys(value);
    let i = 0;
    const il = keys.length;
    const last = il - 1;
    for (;i < il; ++i) {
      const key = keys[i];
      result += `"${key}":${serialize(value[key])}`;
      i !== last && (result += ",");
    }
    return result + "}";
  }
  module.exports = serialize;
});

// node_modules/@fastify/swagger-ui/lib/swagger-initializer.js
var require_swagger_initializer = __commonJS((exports, module) => {
  var serialize = require_serialize();
  function swaggerInitializer(opts) {
    const hasLogo = opts.logo && opts.logo.content !== undefined;
    const logoBase64 = hasLogo && Buffer.from(opts.logo.content).toString("base64");
    const logoData = hasLogo && `data:${opts.logo.type};base64,${logoBase64}`;
    const logoHref = hasLogo && opts.logo.href;
    const logoTarget = hasLogo && opts.logo.target;
    return `window.onload = function () {
    function waitForElement(selector) {
      return new Promise(resolve => {
          if (document.querySelector(selector)) {
              return resolve(document.querySelector(selector));
          }

          const observer = new MutationObserver(mutations => {
              if (document.querySelector(selector)) {
                  observer.disconnect();
                  resolve(document.querySelector(selector));
              }
          });

          // If you get "parameter 1 is not of type 'Node'" error, see https://stackoverflow.com/a/77855838/492336
          observer.observe(document.body, {
              childList: true,
              subtree: true
          });
      });
    }
    function resolveUrl(url) {
      let currentHref = window.location.href;
      currentHref = currentHref.split('#', 1)[0];
      currentHref = currentHref.endsWith('/') ? currentHref : currentHref + '/';
      const anchor = document.createElement('a');
      anchor.href = currentHref + url;
      return anchor.href
    }

    const config = ${serialize(opts.uiConfig)}
    const resConfig = Object.assign({}, {
      dom_id: '#swagger-ui',
      deepLinking: true,
      presets: [
        SwaggerUIBundle.presets.apis,
        SwaggerUIStandalonePreset
      ],
      plugins: [
        SwaggerUIBundle.plugins.DownloadUrl
      ],
      layout: "StandaloneLayout",
      validatorUrl: ${serialize(opts.validatorUrl || null)},
    }, config, {
      url: resolveUrl('./json'),
      oauth2RedirectUrl: resolveUrl('./static/oauth2-redirect.html')
    });

    const ui = SwaggerUIBundle(resConfig)

    ${logoData ? `
    if (resConfig.layout === 'StandaloneLayout') {
      // Replace the logo
      waitForElement('#swagger-ui > section > div.topbar > div > div > a').then((link) => {
        const img = document.createElement('img')
        img.height = 40
        img.src = '${logoData}'
        ${logoHref ? `img.href = '${logoHref}'` : "img.href = resolveUrl('/')"}
        ${logoTarget ? `img.target = '${logoTarget}'` : ""}
        link.innerHTML = ''
        link.appendChild(img)
      })
    }` : ""}

    ui.initOAuth(${serialize(opts.initOAuth)})
  }`;
  }
  module.exports = swaggerInitializer;
});

// node_modules/@fastify/swagger-ui/lib/index-html.js
var require_index_html = __commonJS((exports, module) => {
  function indexHtml(opts) {
    let routePrefix = opts.prefix;
    if (opts.indexPrefix) {
      routePrefix = `${opts.indexPrefix.replace(/\/$/, "")}/${opts.prefix.replace(/^\//, "")}`;
    }
    return (url) => {
      const hasTrailingSlash = /\/$/.test(url);
      const prefix = hasTrailingSlash ? `.${opts.staticPrefix}` : `${routePrefix}${opts.staticPrefix}`;
      return `<!-- HTML for static distribution bundle build -->
      <!DOCTYPE html>
      <html lang="en">
      <head>
      <meta charset="UTF-8">
      <title>${opts.theme?.title || "Swagger UI"}</title>
      <link rel="stylesheet" type="text/css" href="${prefix}/swagger-ui.css" />
      <link rel="stylesheet" type="text/css" href="${prefix}/index.css" />
      ${opts.theme && opts.theme.css ? opts.theme.css.map((css) => `<link rel="stylesheet" type="text/css" href="${prefix}/theme/${css.filename}" />
`).join("") : ""}
      ${opts.theme && opts.theme.favicon ? opts.theme.favicon.map((favicon) => `<link rel="${favicon.rel}" type="${favicon.type}" href="${prefix}/theme/${favicon.filename}" sizes="${favicon.sizes}" />
`).join("") : `
      <link rel="icon" type="image/png" href="${prefix}/favicon-32x32.png" sizes="32x32" />
      <link rel="icon" type="image/png" href="${prefix}/favicon-16x16.png" sizes="16x16" />
      `}
      </head>

      <body>
      <div id="swagger-ui"></div>
      <script src="${prefix}/swagger-ui-bundle.js" charset="UTF-8"> </script>
      <script src="${prefix}/swagger-ui-standalone-preset.js" charset="UTF-8"> </script>
      <script src="${prefix}/swagger-initializer.js" charset="UTF-8"> </script>
      ${opts.theme && opts.theme.js ? opts.theme.js.map((js) => `<script src="${prefix}/theme/${js.filename}" charset="UTF-8"> </script>
`).join("") : ""}
      </body>
      </html>
      `;
    };
  }
  module.exports = indexHtml;
});

// node_modules/@fastify/swagger-ui/lib/routes.js
var require_routes = __commonJS((exports, module) => {
  var __dirname = "/Users/tabaza/Desktop/opencx/eval-mock-servers/node_modules/@fastify/swagger-ui/lib";
  var path = __require("node:path");
  var yaml = require_dist();
  var fastifyStatic = require_static2();
  var rfdc = require_rfdc()();
  var swaggerInitializer = require_swagger_initializer();
  var indexHtml = require_index_html();
  var staticPrefix = "/static";
  function fastifySwagger(fastify, opts, done) {
    let staticCSP = false;
    if (opts.staticCSP === true) {
      const csp = fastify.swaggerCSP;
      staticCSP = `default-src 'self'; base-uri 'self'; font-src 'self' https: data:; frame-ancestors 'self'; img-src 'self' data: validator.swagger.io; object-src 'none'; script-src 'self' ${csp.script.join(" ")}; script-src-attr 'none'; style-src 'self' https: ${csp.style.join(" ")}; upgrade-insecure-requests;`;
    }
    if (typeof opts.staticCSP === "string") {
      staticCSP = opts.staticCSP;
    }
    if (typeof opts.staticCSP === "object" && opts.staticCSP !== null) {
      staticCSP = "";
      Object.keys(opts.staticCSP).forEach(function(key) {
        const value = Array.isArray(opts.staticCSP[key]) ? opts.staticCSP[key].join(" ") : opts.staticCSP[key];
        staticCSP += `${key.toLowerCase()} ${value}; `;
      });
    }
    if (typeof staticCSP === "string" || typeof opts.transformStaticCSP === "function") {
      fastify.addHook("onSend", function(_request, reply, _payload, done2) {
        if (typeof staticCSP === "string") {
          reply.header("content-security-policy", staticCSP.trim());
        }
        const header = reply.getHeader("content-security-policy");
        if (header && typeof opts.transformStaticCSP === "function") {
          reply.header("content-security-policy", opts.transformStaticCSP(header));
        }
        done2();
      });
    }
    const hooks = Object.create(null);
    if (opts.hooks) {
      const additionalHooks = [
        "onRequest",
        "preHandler"
      ];
      for (const hook of additionalHooks) {
        hooks[hook] = opts.hooks[hook];
      }
    }
    if (opts.theme) {
      const themePrefix = `${staticPrefix}/theme`;
      if (opts.theme.css) {
        for (const cssFile of opts.theme.css) {
          fastify.route({
            url: `${themePrefix}/${cssFile.filename}`,
            method: "GET",
            schema: { hide: true },
            ...hooks,
            handler: (_req, reply) => {
              reply.header("content-type", "text/css; charset=UTF-8").send(cssFile.content);
            }
          });
        }
      }
      if (opts.theme.js) {
        for (const jsFile of opts.theme.js) {
          fastify.route({
            url: `${themePrefix}/${jsFile.filename}`,
            method: "GET",
            schema: { hide: true },
            ...hooks,
            handler: (_req, reply) => {
              reply.header("content-type", "application/javascript; charset=utf-8").send(jsFile.content);
            }
          });
        }
      }
      if (opts.theme.favicon) {
        for (const favicon of opts.theme.favicon) {
          fastify.route({
            url: `${themePrefix}/${favicon.filename}`,
            method: "GET",
            schema: { hide: true },
            ...hooks,
            handler: (_req, reply) => {
              reply.header("content-type", favicon.type).send(favicon.content);
            }
          });
        }
      }
    }
    const indexHtmlContent = indexHtml({ ...opts, staticPrefix });
    fastify.route({
      url: "/",
      method: "GET",
      schema: { hide: true },
      ...hooks,
      handler: (req, reply) => {
        reply.header("content-type", "text/html; charset=utf-8").send(indexHtmlContent(req.url));
      }
    });
    fastify.route({
      url: `${staticPrefix}/index.html`,
      method: "GET",
      schema: { hide: true },
      ...hooks,
      handler: (req, reply) => {
        reply.redirect(req.url.replace(/\/static\/index\.html$/, "/"));
      }
    });
    const swaggerInitializerContent = swaggerInitializer(opts);
    fastify.route({
      url: `${staticPrefix}/swagger-initializer.js`,
      method: "GET",
      schema: { hide: true },
      ...hooks,
      handler: (_req, reply) => {
        reply.header("content-type", "application/javascript; charset=utf-8").send(swaggerInitializerContent);
      }
    });
    const hasTransformSpecificationFn = typeof opts.transformSpecification === "function";
    const shouldCloneSwaggerObject = opts.transformSpecificationClone ?? true;
    const transformSpecification = opts.transformSpecification;
    fastify.route({
      url: "/json",
      method: "GET",
      schema: { hide: true },
      ...hooks,
      handler: hasTransformSpecificationFn ? shouldCloneSwaggerObject ? function(req, reply) {
        reply.send(transformSpecification(rfdc(fastify.swagger()), req, reply));
      } : function(req, reply) {
        reply.send(transformSpecification(fastify.swagger(), req, reply));
      } : function(_req, reply) {
        reply.send(fastify.swagger());
      }
    });
    fastify.route({
      url: "/yaml",
      method: "GET",
      schema: { hide: true },
      ...hooks,
      handler: hasTransformSpecificationFn ? shouldCloneSwaggerObject ? function(req, reply) {
        reply.type("application/x-yaml").send(yaml.stringify(transformSpecification(rfdc(fastify.swagger()), req, reply)));
      } : function(req, reply) {
        reply.type("application/x-yaml").send(yaml.stringify(transformSpecification(fastify.swagger(), req, reply)));
      } : function(_req, reply) {
        reply.type("application/x-yaml").send(fastify.swagger({ yaml: true }));
      }
    });
    fastify.register(fastifyStatic, {
      root: opts.baseDir || path.join(__dirname, "..", "static"),
      prefix: staticPrefix,
      decorateReply: false
    });
    if (opts.baseDir) {
      fastify.register(fastifyStatic, {
        root: opts.baseDir,
        serve: false
      });
      fastify.route({
        url: "/*",
        method: "GET",
        schema: { hide: true },
        ...hooks,
        handler: function(req, reply) {
          const file = req.params["*"];
          reply.sendFile(file);
        }
      });
    }
    done();
  }
  module.exports = fastifySwagger;
});

// node_modules/@fastify/swagger-ui/index.js
var require_swagger_ui = __commonJS((exports, module) => {
  var __dirname = "/Users/tabaza/Desktop/opencx/eval-mock-servers/node_modules/@fastify/swagger-ui";
  var fsPromises = __require("node:fs/promises");
  var path = __require("node:path");
  var fp = require_plugin();
  var csp = require_csp();
  async function fastifySwaggerUi(fastify, opts) {
    fastify.decorate("swaggerCSP", csp);
    let logoContent = opts.logo;
    if (logoContent == null) {
      const bufferLogoContent = await fsPromises.readFile(path.join(__dirname, "./static/logo.svg"));
      logoContent = { type: "image/svg+xml", content: bufferLogoContent };
    }
    await fastify.register(require_routes(), {
      prefix: opts.routePrefix || "/documentation",
      uiConfig: opts.uiConfig || {},
      initOAuth: opts.initOAuth || {},
      hooks: opts.uiHooks,
      theme: opts.theme || {},
      logo: logoContent,
      ...opts
    });
  }
  module.exports = fp(fastifySwaggerUi, {
    fastify: "5.x",
    name: "@fastify/swagger-ui",
    dependencies: ["@fastify/swagger"]
  });
  module.exports.default = fastifySwaggerUi;
  module.exports.fastifySwaggerUi = fastifySwaggerUi;
});

// node_modules/avvio/lib/errors.js
var require_errors3 = __commonJS((exports, module) => {
  var { createError } = require_error();
  module.exports = {
    AVV_ERR_EXPOSE_ALREADY_DEFINED: createError("AVV_ERR_EXPOSE_ALREADY_DEFINED", "'%s' is already defined, specify an expose option for '%s'"),
    AVV_ERR_ATTRIBUTE_ALREADY_DEFINED: createError("AVV_ERR_ATTRIBUTE_ALREADY_DEFINED", "'%s' is already defined"),
    AVV_ERR_CALLBACK_NOT_FN: createError("AVV_ERR_CALLBACK_NOT_FN", "Callback for '%s' hook is not a function. Received: '%s'"),
    AVV_ERR_PLUGIN_NOT_VALID: createError("AVV_ERR_PLUGIN_NOT_VALID", "Plugin must be a function or a promise. Received: '%s'"),
    AVV_ERR_ROOT_PLG_BOOTED: createError("AVV_ERR_ROOT_PLG_BOOTED", "Root plugin has already booted"),
    AVV_ERR_PARENT_PLG_LOADED: createError("AVV_ERR_PARENT_PLG_LOADED", "Impossible to load '%s' plugin because the parent '%s' was already loaded"),
    AVV_ERR_READY_TIMEOUT: createError("AVV_ERR_READY_TIMEOUT", "Plugin did not start in time: '%s'. You may have forgotten to call 'done' function or to resolve a Promise"),
    AVV_ERR_PLUGIN_EXEC_TIMEOUT: createError("AVV_ERR_PLUGIN_EXEC_TIMEOUT", "Plugin did not start in time: '%s'. You may have forgotten to call 'done' function or to resolve a Promise")
  };
});

// node_modules/avvio/lib/symbols.js
var require_symbols2 = __commonJS((exports, module) => {
  var kAvvio = Symbol("avvio.Boot");
  var kIsOnCloseHandler = Symbol("isOnCloseHandler");
  var kThenifyDoNotWrap = Symbol("avvio.ThenifyDoNotWrap");
  var kUntrackNode = Symbol("avvio.TimeTree.untrackNode");
  var kTrackNode = Symbol("avvio.TimeTree.trackNode");
  var kGetParent = Symbol("avvio.TimeTree.getParent");
  var kGetNode = Symbol("avvio.TimeTree.getNode");
  var kAddNode = Symbol("avvio.TimeTree.addNode");
  var kPluginMeta = Symbol.for("plugin-meta");
  module.exports = {
    kAvvio,
    kIsOnCloseHandler,
    kThenifyDoNotWrap,
    kUntrackNode,
    kTrackNode,
    kGetParent,
    kGetNode,
    kAddNode,
    kPluginMeta
  };
});

// node_modules/avvio/lib/time-tree.js
var require_time_tree = __commonJS((exports, module) => {
  var {
    kUntrackNode,
    kTrackNode,
    kGetParent,
    kGetNode,
    kAddNode
  } = require_symbols2();

  class TimeTree {
    constructor() {
      this.root = null;
      this.tableId = new Map;
      this.tableLabel = new Map;
    }
    [kTrackNode](node) {
      this.tableId.set(node.id, node);
      if (this.tableLabel.has(node.label)) {
        this.tableLabel.get(node.label).push(node);
      } else {
        this.tableLabel.set(node.label, [node]);
      }
    }
    [kUntrackNode](node) {
      this.tableId.delete(node.id);
      const labelNode = this.tableLabel.get(node.label);
      labelNode.pop();
      if (labelNode.length === 0) {
        this.tableLabel.delete(node.label);
      }
    }
    [kGetParent](parent) {
      if (parent === null) {
        return null;
      } else if (this.tableLabel.has(parent)) {
        const parentNode = this.tableLabel.get(parent);
        return parentNode[parentNode.length - 1];
      } else {
        return null;
      }
    }
    [kGetNode](nodeId) {
      return this.tableId.get(nodeId);
    }
    [kAddNode](parent, label, start) {
      const parentNode = this[kGetParent](parent);
      const isRoot = parentNode === null;
      if (isRoot) {
        this.root = {
          parent: null,
          id: "root",
          label,
          nodes: [],
          start,
          stop: null,
          diff: -1
        };
        this[kTrackNode](this.root);
        return this.root.id;
      }
      const nodeId = `${label}-${Math.random()}`;
      const childNode = {
        parent,
        id: nodeId,
        label,
        nodes: [],
        start,
        stop: null,
        diff: -1
      };
      parentNode.nodes.push(childNode);
      this[kTrackNode](childNode);
      return nodeId;
    }
    start(parent, label, start = Date.now()) {
      return this[kAddNode](parent, label, start);
    }
    stop(nodeId, stop = Date.now()) {
      const node = this[kGetNode](nodeId);
      if (node) {
        node.stop = stop;
        node.diff = node.stop - node.start || 0;
        this[kUntrackNode](node);
      }
    }
    toJSON() {
      return Object.assign({}, this.root);
    }
    prettyPrint() {
      return prettyPrintTimeTree(this.toJSON());
    }
  }
  function prettyPrintTimeTree(obj, prefix = "") {
    let result = prefix;
    const nodesCount = obj.nodes.length;
    const lastIndex = nodesCount - 1;
    result += `${obj.label} ${obj.diff} ms
`;
    for (let i = 0;i < nodesCount; ++i) {
      const node = obj.nodes[i];
      const prefix_ = prefix + (i === lastIndex ? "  " : "│ ");
      result += prefix;
      result += i === lastIndex ? "└─" : "├─";
      result += node.nodes.length === 0 ? "─ " : "┬ ";
      result += prettyPrintTimeTree(node, prefix_).slice(prefix.length + 2);
    }
    return result;
  }
  module.exports = {
    TimeTree
  };
});

// node_modules/avvio/lib/debug.js
var require_debug = __commonJS((exports, module) => {
  var { debuglog } = __require("node:util");
  var debug = debuglog("avvio");
  module.exports = {
    debug
  };
});

// node_modules/avvio/lib/create-promise.js
var require_create_promise = __commonJS((exports, module) => {
  function createPromise() {
    const obj = {
      resolve: null,
      reject: null,
      promise: null
    };
    obj.promise = new Promise((resolve, reject) => {
      obj.resolve = resolve;
      obj.reject = reject;
    });
    return obj;
  }
  module.exports = {
    createPromise
  };
});

// node_modules/avvio/lib/get-plugin-name.js
var require_get_plugin_name = __commonJS((exports, module) => {
  var { kPluginMeta } = require_symbols2();
  function getPluginName(plugin, options) {
    if (plugin[kPluginMeta] && plugin[kPluginMeta].name) {
      return plugin[kPluginMeta].name;
    }
    if (options && options.name) {
      return options.name;
    }
    if (plugin.name) {
      return plugin.name;
    } else {
      return plugin.toString().split(`
`).slice(0, 2).map((s) => s.trim()).join(" -- ");
    }
  }
  module.exports = {
    getPluginName
  };
});

// node_modules/avvio/lib/is-promise-like.js
var require_is_promise_like = __commonJS((exports, module) => {
  function isPromiseLike(maybePromiseLike) {
    return maybePromiseLike !== null && typeof maybePromiseLike === "object" && typeof maybePromiseLike.then === "function";
  }
  module.exports = {
    isPromiseLike
  };
});

// node_modules/avvio/lib/plugin.js
var require_plugin2 = __commonJS((exports, module) => {
  var { EventEmitter } = __require("node:events");
  var { inherits } = __require("node:util");
  var { debug } = require_debug();
  var { createPromise } = require_create_promise();
  var { AVV_ERR_PLUGIN_EXEC_TIMEOUT } = require_errors3();
  var { getPluginName } = require_get_plugin_name();
  var { isPromiseLike } = require_is_promise_like();
  function Plugin(queue, func, options, isAfter, timeout) {
    this.queue = queue;
    this.func = func;
    this.options = options;
    this.isAfter = isAfter;
    this.timeout = timeout;
    this.started = false;
    this.name = getPluginName(func, options);
    this.queue.pause();
    this._error = null;
    this.loaded = false;
    this._promise = null;
    this.startTime = null;
  }
  inherits(Plugin, EventEmitter);
  Plugin.prototype.exec = function(server, callback) {
    debug("exec", this.name);
    this.server = server;
    const func = this.func;
    const name = this.name;
    let completed = false;
    this.options = typeof this.options === "function" ? this.options(this.server) : this.options;
    let timer = null;
    const done = (execErr) => {
      if (completed) {
        debug("loading complete", name);
        return;
      }
      this._error = execErr;
      if (execErr) {
        debug("exec errored", name);
      } else {
        debug("exec completed", name);
      }
      completed = true;
      if (timer) {
        clearTimeout(timer);
      }
      callback(execErr);
    };
    if (this.timeout > 0) {
      debug("setting up timeout", name, this.timeout);
      timer = setTimeout(function() {
        debug("timed out", name);
        timer = null;
        const readyTimeoutErr = new AVV_ERR_PLUGIN_EXEC_TIMEOUT(name);
        readyTimeoutErr.fn = func;
        done(readyTimeoutErr);
      }, this.timeout);
    }
    this.started = true;
    this.startTime = Date.now();
    this.emit("start", this.server ? this.server.name : null, this.name, Date.now());
    const maybePromiseLike = func(this.server, this.options, done);
    if (isPromiseLike(maybePromiseLike)) {
      debug("exec: resolving promise", name);
      maybePromiseLike.then(() => process.nextTick(done), (e) => process.nextTick(done, e));
    } else if (func.length < 3) {
      done();
    }
  };
  Plugin.prototype.loadedSoFar = function() {
    debug("loadedSoFar", this.name);
    if (this.loaded) {
      return Promise.resolve();
    }
    const setup = () => {
      this.server.after((afterErr, callback) => {
        this._error = afterErr;
        this.queue.pause();
        if (this._promise) {
          if (afterErr) {
            debug("rejecting promise", this.name, afterErr);
            this._promise.reject(afterErr);
          } else {
            debug("resolving promise", this.name);
            this._promise.resolve();
          }
          this._promise = null;
        }
        process.nextTick(callback, afterErr);
      });
      this.queue.resume();
    };
    let res;
    if (!this._promise) {
      this._promise = createPromise();
      res = this._promise.promise;
      if (!this.server) {
        this.on("start", setup);
      } else {
        setup();
      }
    } else {
      res = Promise.resolve();
    }
    return res;
  };
  Plugin.prototype.enqueue = function(plugin, callback) {
    debug("enqueue", this.name, plugin.name);
    this.emit("enqueue", this.server ? this.server.name : null, this.name, Date.now());
    this.queue.push(plugin, callback);
  };
  Plugin.prototype.finish = function(err, callback) {
    debug("finish", this.name, err);
    const done = () => {
      if (this.loaded) {
        return;
      }
      debug("loaded", this.name);
      this.emit("loaded", this.server ? this.server.name : null, this.name, Date.now());
      this.loaded = true;
      callback(err);
    };
    if (err) {
      if (this._promise) {
        this._promise.reject(err);
        this._promise = null;
      }
      done();
      return;
    }
    const check = () => {
      debug("check", this.name, this.queue.length(), this.queue.running(), this._promise);
      if (this.queue.length() === 0 && this.queue.running() === 0) {
        if (this._promise) {
          const wrap = () => {
            debug("wrap");
            queueMicrotask(check);
          };
          this._promise.resolve();
          this._promise.promise.then(wrap, wrap);
          this._promise = null;
        } else {
          done();
        }
      } else {
        debug("delayed", this.name);
        this.queue.drain = () => {
          debug("drain", this.name);
          this.queue.drain = noop;
          queueMicrotask(check);
        };
      }
    };
    queueMicrotask(check);
    this.queue.resume();
  };
  function noop() {
  }
  module.exports = {
    Plugin
  };
});

// node_modules/avvio/lib/validate-plugin.js
var require_validate_plugin = __commonJS((exports, module) => {
  var { AVV_ERR_PLUGIN_NOT_VALID } = require_errors3();
  function validatePlugin(maybePlugin) {
    if (!(maybePlugin && (typeof maybePlugin === "function" || typeof maybePlugin.then === "function"))) {
      if (Array.isArray(maybePlugin)) {
        throw new AVV_ERR_PLUGIN_NOT_VALID("array");
      } else if (maybePlugin === null) {
        throw new AVV_ERR_PLUGIN_NOT_VALID("null");
      } else {
        throw new AVV_ERR_PLUGIN_NOT_VALID(typeof maybePlugin);
      }
    }
  }
  module.exports = {
    validatePlugin
  };
});

// node_modules/avvio/lib/is-bundled-or-typescript-plugin.js
var require_is_bundled_or_typescript_plugin = __commonJS((exports, module) => {
  function isBundledOrTypescriptPlugin(maybeBundledOrTypescriptPlugin) {
    return maybeBundledOrTypescriptPlugin !== null && typeof maybeBundledOrTypescriptPlugin === "object" && typeof maybeBundledOrTypescriptPlugin.default === "function";
  }
  module.exports = {
    isBundledOrTypescriptPlugin
  };
});

// node_modules/avvio/lib/thenify.js
var require_thenify = __commonJS((exports, module) => {
  var { debug } = require_debug();
  var { kThenifyDoNotWrap } = require_symbols2();
  function thenify() {
    if (this.booted) {
      debug("thenify returning undefined because we are already booted");
      return;
    }
    if (this[kThenifyDoNotWrap]) {
      this[kThenifyDoNotWrap] = false;
      return;
    }
    debug("thenify");
    return (resolve, reject) => {
      const p = this._loadRegistered();
      return p.then(() => {
        this[kThenifyDoNotWrap] = true;
        return resolve(this._server);
      }, reject);
    };
  }
  module.exports = {
    thenify
  };
});

// node_modules/avvio/lib/execute-with-thenable.js
var require_execute_with_thenable = __commonJS((exports, module) => {
  var { isPromiseLike } = require_is_promise_like();
  var { kAvvio } = require_symbols2();
  function executeWithThenable(func, args, callback) {
    const result = func.apply(func, args);
    if (isPromiseLike(result) && !result[kAvvio]) {
      result.then(() => process.nextTick(callback), (error) => process.nextTick(callback, error));
    } else if (callback) {
      process.nextTick(callback);
    }
  }
  module.exports = {
    executeWithThenable
  };
});

// node_modules/avvio/boot.js
var require_boot = __commonJS((exports, module) => {
  var fastq = require_queue();
  var EE = __require("node:events").EventEmitter;
  var inherits = __require("node:util").inherits;
  var {
    AVV_ERR_EXPOSE_ALREADY_DEFINED,
    AVV_ERR_CALLBACK_NOT_FN,
    AVV_ERR_ROOT_PLG_BOOTED,
    AVV_ERR_READY_TIMEOUT,
    AVV_ERR_ATTRIBUTE_ALREADY_DEFINED
  } = require_errors3();
  var {
    kAvvio,
    kIsOnCloseHandler
  } = require_symbols2();
  var { TimeTree } = require_time_tree();
  var { Plugin } = require_plugin2();
  var { debug } = require_debug();
  var { validatePlugin } = require_validate_plugin();
  var { isBundledOrTypescriptPlugin } = require_is_bundled_or_typescript_plugin();
  var { isPromiseLike } = require_is_promise_like();
  var { thenify } = require_thenify();
  var { executeWithThenable } = require_execute_with_thenable();
  function Boot(server, opts, done) {
    if (typeof server === "function" && arguments.length === 1) {
      done = server;
      opts = {};
      server = null;
    }
    if (typeof opts === "function") {
      done = opts;
      opts = {};
    }
    opts = opts || {};
    opts.autostart = opts.autostart !== false;
    opts.timeout = Number(opts.timeout) || 0;
    opts.expose = opts.expose || {};
    if (!new.target) {
      return new Boot(server, opts, done);
    }
    this._server = server || this;
    this._opts = opts;
    if (server) {
      this._expose();
    }
    this._current = [];
    this._error = null;
    this._lastUsed = null;
    this.setMaxListeners(0);
    if (done) {
      this.once("start", done);
    }
    this.started = false;
    this.booted = false;
    this.pluginTree = new TimeTree;
    this._readyQ = fastq(this, callWithCbOrNextTick, 1);
    this._readyQ.pause();
    this._readyQ.drain = () => {
      this.emit("start");
      this._readyQ.drain = noop;
    };
    this._closeQ = fastq(this, closeWithCbOrNextTick, 1);
    this._closeQ.pause();
    this._closeQ.drain = () => {
      this.emit("close");
      this._closeQ.drain = noop;
    };
    this._doStart = null;
    const instance = this;
    this._root = new Plugin(fastq(this, this._loadPluginNextTick, 1), function root(server2, opts2, done2) {
      instance._doStart = done2;
      opts2.autostart && instance.start();
    }, opts, false, 0);
    this._trackPluginLoading(this._root);
    this._loadPlugin(this._root, (err) => {
      debug("root plugin ready");
      try {
        this.emit("preReady");
        this._root = null;
      } catch (preReadyError) {
        err = err || this._error || preReadyError;
      }
      if (err) {
        this._error = err;
        if (this._readyQ.length() === 0) {
          throw err;
        }
      } else {
        this.booted = true;
      }
      this._readyQ.resume();
    });
  }
  inherits(Boot, EE);
  Boot.prototype.start = function() {
    this.started = true;
    process.nextTick(this._doStart);
    return this;
  };
  Boot.prototype.override = function(server, func, opts) {
    return server;
  };
  Boot.prototype[kAvvio] = true;
  Boot.prototype.use = function(plugin, opts) {
    this._lastUsed = this._addPlugin(plugin, opts, false);
    return this;
  };
  Boot.prototype._loadRegistered = function() {
    const plugin = this._current[0];
    const weNeedToStart = !this.started && !this.booted;
    if (weNeedToStart) {
      process.nextTick(() => this._root.queue.resume());
    }
    if (!plugin) {
      return Promise.resolve();
    }
    return plugin.loadedSoFar();
  };
  Object.defineProperty(Boot.prototype, "then", { get: thenify });
  Boot.prototype._addPlugin = function(pluginFn, opts, isAfter) {
    if (isBundledOrTypescriptPlugin(pluginFn)) {
      pluginFn = pluginFn.default;
    }
    validatePlugin(pluginFn);
    opts = opts || {};
    if (this.booted) {
      throw new AVV_ERR_ROOT_PLG_BOOTED;
    }
    const current = this._current[0];
    let timeout = this._opts.timeout;
    if (!current.loaded && current.timeout > 0) {
      const delta = Date.now() - current.startTime;
      timeout = current.timeout - (delta + 3);
    }
    const plugin = new Plugin(fastq(this, this._loadPluginNextTick, 1), pluginFn, opts, isAfter, timeout);
    this._trackPluginLoading(plugin);
    if (current.loaded) {
      throw new Error(plugin.name, current.name);
    }
    current.enqueue(plugin, (err) => {
      err && (this._error = err);
    });
    return plugin;
  };
  Boot.prototype._expose = function _expose() {
    const instance = this;
    const server = instance._server;
    const {
      use: useKey = "use",
      after: afterKey = "after",
      ready: readyKey = "ready",
      onClose: onCloseKey = "onClose",
      close: closeKey = "close"
    } = this._opts.expose;
    if (server[useKey]) {
      throw new AVV_ERR_EXPOSE_ALREADY_DEFINED(useKey, "use");
    }
    server[useKey] = function(fn, opts) {
      instance.use(fn, opts);
      return this;
    };
    if (server[afterKey]) {
      throw new AVV_ERR_EXPOSE_ALREADY_DEFINED(afterKey, "after");
    }
    server[afterKey] = function(func) {
      if (typeof func !== "function") {
        return instance._loadRegistered();
      }
      instance.after(encapsulateThreeParam(func, this));
      return this;
    };
    if (server[readyKey]) {
      throw new AVV_ERR_EXPOSE_ALREADY_DEFINED(readyKey, "ready");
    }
    server[readyKey] = function(func) {
      if (func && typeof func !== "function") {
        throw new AVV_ERR_CALLBACK_NOT_FN(readyKey, typeof func);
      }
      return instance.ready(func ? encapsulateThreeParam(func, this) : undefined);
    };
    if (server[onCloseKey]) {
      throw new AVV_ERR_EXPOSE_ALREADY_DEFINED(onCloseKey, "onClose");
    }
    server[onCloseKey] = function(func) {
      if (typeof func !== "function") {
        throw new AVV_ERR_CALLBACK_NOT_FN(onCloseKey, typeof func);
      }
      instance.onClose(encapsulateTwoParam(func, this));
      return this;
    };
    if (server[closeKey]) {
      throw new AVV_ERR_EXPOSE_ALREADY_DEFINED(closeKey, "close");
    }
    server[closeKey] = function(func) {
      if (func && typeof func !== "function") {
        throw new AVV_ERR_CALLBACK_NOT_FN(closeKey, typeof func);
      }
      if (func) {
        instance.close(encapsulateThreeParam(func, this));
        return this;
      }
      return instance.close();
    };
    if (server.then) {
      throw new AVV_ERR_ATTRIBUTE_ALREADY_DEFINED("then");
    }
    Object.defineProperty(server, "then", { get: thenify.bind(instance) });
    server[kAvvio] = true;
  };
  Boot.prototype.after = function(func) {
    if (!func) {
      return this._loadRegistered();
    }
    this._addPlugin(_after.bind(this), {}, true);
    function _after(s, opts, done) {
      callWithCbOrNextTick.call(this, func, done);
    }
    return this;
  };
  Boot.prototype.onClose = function(func) {
    if (typeof func !== "function") {
      throw new AVV_ERR_CALLBACK_NOT_FN("onClose", typeof func);
    }
    func[kIsOnCloseHandler] = true;
    this._closeQ.unshift(func, (err) => {
      err && (this._error = err);
    });
    return this;
  };
  Boot.prototype.close = function(func) {
    let promise;
    if (func) {
      if (typeof func !== "function") {
        throw new AVV_ERR_CALLBACK_NOT_FN("close", typeof func);
      }
    } else {
      promise = new Promise(function(resolve, reject) {
        func = function(err) {
          if (err) {
            return reject(err);
          }
          resolve();
        };
      });
    }
    this.ready(() => {
      this._error = null;
      this._closeQ.push(func);
      process.nextTick(this._closeQ.resume.bind(this._closeQ));
    });
    return promise;
  };
  Boot.prototype.ready = function(func) {
    if (func) {
      if (typeof func !== "function") {
        throw new AVV_ERR_CALLBACK_NOT_FN("ready", typeof func);
      }
      this._readyQ.push(func);
      queueMicrotask(this.start.bind(this));
      return;
    }
    return new Promise((resolve, reject) => {
      this._readyQ.push(readyPromiseCB);
      this.start();
      const relativeContext = this._current[0].server;
      function readyPromiseCB(err, context, done) {
        if (err) {
          reject(err);
        } else {
          resolve(relativeContext);
        }
        process.nextTick(done);
      }
    });
  };
  Boot.prototype._trackPluginLoading = function(plugin) {
    const parentName = this._current[0]?.name || null;
    plugin.once("start", (serverName, funcName, time) => {
      const nodeId = this.pluginTree.start(parentName || null, funcName, time);
      plugin.once("loaded", (serverName2, funcName2, time2) => {
        this.pluginTree.stop(nodeId, time2);
      });
    });
  };
  Boot.prototype.prettyPrint = function() {
    return this.pluginTree.prettyPrint();
  };
  Boot.prototype.toJSON = function() {
    return this.pluginTree.toJSON();
  };
  Boot.prototype._loadPlugin = function(plugin, callback) {
    const instance = this;
    if (isPromiseLike(plugin.func)) {
      plugin.func.then((fn) => {
        if (typeof fn.default === "function") {
          fn = fn.default;
        }
        plugin.func = fn;
        this._loadPlugin(plugin, callback);
      }, callback);
      return;
    }
    const last = instance._current[0];
    instance._current.unshift(plugin);
    if (instance._error && !plugin.isAfter) {
      debug("skipping loading of plugin as instance errored and it is not an after", plugin.name);
      process.nextTick(execCallback);
      return;
    }
    let server = last && last.server || instance._server;
    if (!plugin.isAfter) {
      try {
        server = instance.override(server, plugin.func, plugin.options);
      } catch (overrideErr) {
        debug("override errored", plugin.name);
        return execCallback(overrideErr);
      }
    }
    plugin.exec(server, execCallback);
    function execCallback(err) {
      plugin.finish(err, (err2) => {
        instance._current.shift();
        callback(err2);
      });
    }
  };
  Boot.prototype._loadPluginNextTick = function(plugin, callback) {
    process.nextTick(this._loadPlugin.bind(this), plugin, callback);
  };
  function noop() {
  }
  function callWithCbOrNextTick(func, cb) {
    const context = this._server;
    const err = this._error;
    this._error = null;
    if (func.length === 0) {
      this._error = err;
      executeWithThenable(func, [], cb);
    } else if (func.length === 1) {
      executeWithThenable(func, [err], cb);
    } else {
      if (this._opts.timeout === 0) {
        const wrapCb = (err2) => {
          this._error = err2;
          cb(this._error);
        };
        if (func.length === 2) {
          func(err, wrapCb);
        } else {
          func(err, context, wrapCb);
        }
      } else {
        timeoutCall.call(this, func, err, context, cb);
      }
    }
  }
  function timeoutCall(func, rootErr, context, cb) {
    const name = func.unwrappedName ?? func.name;
    debug("setting up ready timeout", name, this._opts.timeout);
    let timer = setTimeout(() => {
      debug("timed out", name);
      timer = null;
      const toutErr = new AVV_ERR_READY_TIMEOUT(name);
      toutErr.fn = func;
      this._error = toutErr;
      cb(toutErr);
    }, this._opts.timeout);
    if (func.length === 2) {
      func(rootErr, timeoutCb.bind(this));
    } else {
      func(rootErr, context, timeoutCb.bind(this));
    }
    function timeoutCb(err) {
      if (timer) {
        clearTimeout(timer);
        this._error = err;
        cb(this._error);
      } else {
      }
    }
  }
  function closeWithCbOrNextTick(func, cb) {
    const context = this._server;
    const isOnCloseHandler = func[kIsOnCloseHandler];
    if (func.length === 0 || func.length === 1) {
      let promise;
      if (isOnCloseHandler) {
        promise = func(context);
      } else {
        promise = func(this._error);
      }
      if (promise && typeof promise.then === "function") {
        debug("resolving close/onClose promise");
        promise.then(() => process.nextTick(cb), (e) => process.nextTick(cb, e));
      } else {
        process.nextTick(cb);
      }
    } else if (func.length === 2) {
      if (isOnCloseHandler) {
        func(context, cb);
      } else {
        func(this._error, cb);
      }
    } else {
      if (isOnCloseHandler) {
        func(context, cb);
      } else {
        func(this._error, context, cb);
      }
    }
  }
  function encapsulateTwoParam(func, that) {
    return _encapsulateTwoParam.bind(that);
    function _encapsulateTwoParam(context, cb) {
      let res;
      if (func.length === 0) {
        res = func();
        if (res && res.then) {
          res.then(function() {
            process.nextTick(cb);
          }, cb);
        } else {
          process.nextTick(cb);
        }
      } else if (func.length === 1) {
        res = func(this);
        if (res && res.then) {
          res.then(function() {
            process.nextTick(cb);
          }, cb);
        } else {
          process.nextTick(cb);
        }
      } else {
        func(this, cb);
      }
    }
  }
  function encapsulateThreeParam(func, that) {
    const wrapped = _encapsulateThreeParam.bind(that);
    wrapped.unwrappedName = func.name;
    return wrapped;
    function _encapsulateThreeParam(err, cb) {
      let res;
      if (!func) {
        process.nextTick(cb);
      } else if (func.length === 0) {
        res = func();
        if (res && res.then) {
          res.then(function() {
            process.nextTick(cb, err);
          }, cb);
        } else {
          process.nextTick(cb, err);
        }
      } else if (func.length === 1) {
        res = func(err);
        if (res && res.then) {
          res.then(function() {
            process.nextTick(cb);
          }, cb);
        } else {
          process.nextTick(cb);
        }
      } else if (func.length === 2) {
        func(err, cb);
      } else {
        func(err, this, cb);
      }
    }
  }
  module.exports = Boot;
});

// node_modules/fastify/lib/symbols.js
var require_symbols3 = __commonJS((exports, module) => {
  var keys = {
    kAvvioBoot: Symbol("fastify.avvioBoot"),
    kChildren: Symbol("fastify.children"),
    kServerBindings: Symbol("fastify.serverBindings"),
    kBodyLimit: Symbol("fastify.bodyLimit"),
    kSupportedHTTPMethods: Symbol("fastify.acceptedHTTPMethods"),
    kRoutePrefix: Symbol("fastify.routePrefix"),
    kLogLevel: Symbol("fastify.logLevel"),
    kLogSerializers: Symbol("fastify.logSerializers"),
    kHooks: Symbol("fastify.hooks"),
    kContentTypeParser: Symbol("fastify.contentTypeParser"),
    kState: Symbol("fastify.state"),
    kOptions: Symbol("fastify.options"),
    kDisableRequestLogging: Symbol("fastify.disableRequestLogging"),
    kPluginNameChain: Symbol("fastify.pluginNameChain"),
    kRouteContext: Symbol("fastify.context"),
    kGenReqId: Symbol("fastify.genReqId"),
    kSchemaController: Symbol("fastify.schemaController"),
    kSchemaHeaders: Symbol("headers-schema"),
    kSchemaParams: Symbol("params-schema"),
    kSchemaQuerystring: Symbol("querystring-schema"),
    kSchemaBody: Symbol("body-schema"),
    kSchemaResponse: Symbol("response-schema"),
    kSchemaErrorFormatter: Symbol("fastify.schemaErrorFormatter"),
    kSchemaVisited: Symbol("fastify.schemas.visited"),
    kRequest: Symbol("fastify.Request"),
    kRequestPayloadStream: Symbol("fastify.RequestPayloadStream"),
    kRequestAcceptVersion: Symbol("fastify.RequestAcceptVersion"),
    kRequestCacheValidateFns: Symbol("fastify.request.cache.validateFns"),
    kRequestOriginalUrl: Symbol("fastify.request.originalUrl"),
    kFourOhFour: Symbol("fastify.404"),
    kCanSetNotFoundHandler: Symbol("fastify.canSetNotFoundHandler"),
    kFourOhFourLevelInstance: Symbol("fastify.404LogLevelInstance"),
    kFourOhFourContext: Symbol("fastify.404ContextKey"),
    kDefaultJsonParse: Symbol("fastify.defaultJSONParse"),
    kReply: Symbol("fastify.Reply"),
    kReplySerializer: Symbol("fastify.reply.serializer"),
    kReplyIsError: Symbol("fastify.reply.isError"),
    kReplyHeaders: Symbol("fastify.reply.headers"),
    kReplyTrailers: Symbol("fastify.reply.trailers"),
    kReplyHasStatusCode: Symbol("fastify.reply.hasStatusCode"),
    kReplyHijacked: Symbol("fastify.reply.hijacked"),
    kReplyStartTime: Symbol("fastify.reply.startTime"),
    kReplyNextErrorHandler: Symbol("fastify.reply.nextErrorHandler"),
    kReplyEndTime: Symbol("fastify.reply.endTime"),
    kReplyErrorHandlerCalled: Symbol("fastify.reply.errorHandlerCalled"),
    kReplyIsRunningOnErrorHook: Symbol("fastify.reply.isRunningOnErrorHook"),
    kReplySerializerDefault: Symbol("fastify.replySerializerDefault"),
    kReplyCacheSerializeFns: Symbol("fastify.reply.cache.serializeFns"),
    kTestInternals: Symbol("fastify.testInternals"),
    kErrorHandler: Symbol("fastify.errorHandler"),
    kChildLoggerFactory: Symbol("fastify.childLoggerFactory"),
    kHasBeenDecorated: Symbol("fastify.hasBeenDecorated"),
    kKeepAliveConnections: Symbol("fastify.keepAliveConnections"),
    kRouteByFastify: Symbol("fastify.routeByFastify")
  };
  module.exports = keys;
});

// node_modules/process-warning/index.js
var require_process_warning = __commonJS((exports, module) => {
  var { format } = __require("node:util");
  function createDeprecation(params) {
    return createWarning({ ...params, name: "DeprecationWarning" });
  }
  function createWarning({ name, code, message, unlimited = false } = {}) {
    if (!name)
      throw new Error("Warning name must not be empty");
    if (!code)
      throw new Error("Warning code must not be empty");
    if (!message)
      throw new Error("Warning message must not be empty");
    if (typeof unlimited !== "boolean")
      throw new Error("Warning opts.unlimited must be a boolean");
    code = code.toUpperCase();
    let warningContainer = {
      [name]: function(a, b, c) {
        if (warning.emitted === true && warning.unlimited !== true) {
          return;
        }
        warning.emitted = true;
        process.emitWarning(warning.format(a, b, c), warning.name, warning.code);
      }
    };
    if (unlimited) {
      warningContainer = {
        [name]: function(a, b, c) {
          warning.emitted = true;
          process.emitWarning(warning.format(a, b, c), warning.name, warning.code);
        }
      };
    }
    const warning = warningContainer[name];
    warning.emitted = false;
    warning.message = message;
    warning.unlimited = unlimited;
    warning.code = code;
    warning.format = function(a, b, c) {
      let formatted;
      if (a && b && c) {
        formatted = format(message, a, b, c);
      } else if (a && b) {
        formatted = format(message, a, b);
      } else if (a) {
        formatted = format(message, a);
      } else {
        formatted = message;
      }
      return formatted;
    };
    return warning;
  }
  var out = { createWarning, createDeprecation };
  module.exports = out;
  module.exports.default = out;
  module.exports.processWarning = out;
});

// node_modules/fastify/lib/warnings.js
var require_warnings = __commonJS((exports, module) => {
  var { createWarning } = require_process_warning();
  var FSTWRN001 = createWarning({
    name: "FastifyWarning",
    code: "FSTWRN001",
    message: "The %s schema for %s: %s is missing. This may indicate the schema is not well specified.",
    unlimited: true
  });
  var FSTWRN003 = createWarning({
    name: "FastifyWarning",
    code: "FSTWRN003",
    message: "The %s mixes async and callback styles that may lead to unhandled rejections. Please use only one of them.",
    unlimited: true
  });
  var FSTSEC001 = createWarning({
    name: "FastifySecurity",
    code: "FSTSEC001",
    message: 'You are using /%s/ Content-Type which may be vulnerable to CORS attack. Please make sure your RegExp start with "^" or include ";?" to proper detection of the essence MIME type.',
    unlimited: true
  });
  module.exports = {
    FSTWRN001,
    FSTWRN003,
    FSTSEC001
  };
});

// node_modules/fastify/lib/errors.js
var require_errors4 = __commonJS((exports, module) => {
  var createError = require_error();
  var codes = {
    FST_ERR_NOT_FOUND: createError("FST_ERR_NOT_FOUND", "Not Found", 404),
    FST_ERR_OPTIONS_NOT_OBJ: createError("FST_ERR_OPTIONS_NOT_OBJ", "Options must be an object", 500, TypeError),
    FST_ERR_QSP_NOT_FN: createError("FST_ERR_QSP_NOT_FN", "querystringParser option should be a function, instead got '%s'", 500, TypeError),
    FST_ERR_SCHEMA_CONTROLLER_BUCKET_OPT_NOT_FN: createError("FST_ERR_SCHEMA_CONTROLLER_BUCKET_OPT_NOT_FN", "schemaController.bucket option should be a function, instead got '%s'", 500, TypeError),
    FST_ERR_SCHEMA_ERROR_FORMATTER_NOT_FN: createError("FST_ERR_SCHEMA_ERROR_FORMATTER_NOT_FN", "schemaErrorFormatter option should be a non async function. Instead got '%s'.", 500, TypeError),
    FST_ERR_AJV_CUSTOM_OPTIONS_OPT_NOT_OBJ: createError("FST_ERR_AJV_CUSTOM_OPTIONS_OPT_NOT_OBJ", "ajv.customOptions option should be an object, instead got '%s'", 500, TypeError),
    FST_ERR_AJV_CUSTOM_OPTIONS_OPT_NOT_ARR: createError("FST_ERR_AJV_CUSTOM_OPTIONS_OPT_NOT_ARR", "ajv.plugins option should be an array, instead got '%s'", 500, TypeError),
    FST_ERR_VALIDATION: createError("FST_ERR_VALIDATION", "%s", 400),
    FST_ERR_LISTEN_OPTIONS_INVALID: createError("FST_ERR_LISTEN_OPTIONS_INVALID", "Invalid listen options: '%s'", 500, TypeError),
    FST_ERR_ERROR_HANDLER_NOT_FN: createError("FST_ERR_ERROR_HANDLER_NOT_FN", "Error Handler must be a function", 500, TypeError),
    FST_ERR_CTP_ALREADY_PRESENT: createError("FST_ERR_CTP_ALREADY_PRESENT", "Content type parser '%s' already present."),
    FST_ERR_CTP_INVALID_TYPE: createError("FST_ERR_CTP_INVALID_TYPE", "The content type should be a string or a RegExp", 500, TypeError),
    FST_ERR_CTP_EMPTY_TYPE: createError("FST_ERR_CTP_EMPTY_TYPE", "The content type cannot be an empty string", 500, TypeError),
    FST_ERR_CTP_INVALID_HANDLER: createError("FST_ERR_CTP_INVALID_HANDLER", "The content type handler should be a function", 500, TypeError),
    FST_ERR_CTP_INVALID_PARSE_TYPE: createError("FST_ERR_CTP_INVALID_PARSE_TYPE", "The body parser can only parse your data as 'string' or 'buffer', you asked '%s' which is not supported.", 500, TypeError),
    FST_ERR_CTP_BODY_TOO_LARGE: createError("FST_ERR_CTP_BODY_TOO_LARGE", "Request body is too large", 413, RangeError),
    FST_ERR_CTP_INVALID_MEDIA_TYPE: createError("FST_ERR_CTP_INVALID_MEDIA_TYPE", "Unsupported Media Type: %s", 415),
    FST_ERR_CTP_INVALID_CONTENT_LENGTH: createError("FST_ERR_CTP_INVALID_CONTENT_LENGTH", "Request body size did not match Content-Length", 400, RangeError),
    FST_ERR_CTP_EMPTY_JSON_BODY: createError("FST_ERR_CTP_EMPTY_JSON_BODY", "Body cannot be empty when content-type is set to 'application/json'", 400),
    FST_ERR_CTP_INSTANCE_ALREADY_STARTED: createError("FST_ERR_CTP_INSTANCE_ALREADY_STARTED", 'Cannot call "%s" when fastify instance is already started!', 400),
    FST_ERR_DEC_ALREADY_PRESENT: createError("FST_ERR_DEC_ALREADY_PRESENT", "The decorator '%s' has already been added!"),
    FST_ERR_DEC_DEPENDENCY_INVALID_TYPE: createError("FST_ERR_DEC_DEPENDENCY_INVALID_TYPE", "The dependencies of decorator '%s' must be of type Array.", 500, TypeError),
    FST_ERR_DEC_MISSING_DEPENDENCY: createError("FST_ERR_DEC_MISSING_DEPENDENCY", "The decorator is missing dependency '%s'."),
    FST_ERR_DEC_AFTER_START: createError("FST_ERR_DEC_AFTER_START", "The decorator '%s' has been added after start!"),
    FST_ERR_DEC_REFERENCE_TYPE: createError("FST_ERR_DEC_REFERENCE_TYPE", "The decorator '%s' of type '%s' is a reference type. Use the { getter, setter } interface instead."),
    FST_ERR_HOOK_INVALID_TYPE: createError("FST_ERR_HOOK_INVALID_TYPE", "The hook name must be a string", 500, TypeError),
    FST_ERR_HOOK_INVALID_HANDLER: createError("FST_ERR_HOOK_INVALID_HANDLER", "%s hook should be a function, instead got %s", 500, TypeError),
    FST_ERR_HOOK_INVALID_ASYNC_HANDLER: createError("FST_ERR_HOOK_INVALID_ASYNC_HANDLER", "Async function has too many arguments. Async hooks should not use the 'done' argument.", 500, TypeError),
    FST_ERR_HOOK_NOT_SUPPORTED: createError("FST_ERR_HOOK_NOT_SUPPORTED", "%s hook not supported!", 500, TypeError),
    FST_ERR_MISSING_MIDDLEWARE: createError("FST_ERR_MISSING_MIDDLEWARE", "You must register a plugin for handling middlewares, visit fastify.dev/docs/latest/Reference/Middleware/ for more info.", 500),
    FST_ERR_HOOK_TIMEOUT: createError("FST_ERR_HOOK_TIMEOUT", "A callback for '%s' hook%s timed out. You may have forgotten to call 'done' function or to resolve a Promise"),
    FST_ERR_LOG_INVALID_DESTINATION: createError("FST_ERR_LOG_INVALID_DESTINATION", "Cannot specify both logger.stream and logger.file options"),
    FST_ERR_LOG_INVALID_LOGGER: createError("FST_ERR_LOG_INVALID_LOGGER", "Invalid logger object provided. The logger instance should have these functions(s): '%s'.", 500, TypeError),
    FST_ERR_LOG_INVALID_LOGGER_INSTANCE: createError("FST_ERR_LOG_INVALID_LOGGER_INSTANCE", "loggerInstance only accepts a logger instance.", 500, TypeError),
    FST_ERR_LOG_INVALID_LOGGER_CONFIG: createError("FST_ERR_LOG_INVALID_LOGGER_CONFIG", "logger options only accepts a configuration object.", 500, TypeError),
    FST_ERR_LOG_LOGGER_AND_LOGGER_INSTANCE_PROVIDED: createError("FST_ERR_LOG_LOGGER_AND_LOGGER_INSTANCE_PROVIDED", "You cannot provide both logger and loggerInstance. Please provide only one.", 500, TypeError),
    FST_ERR_REP_INVALID_PAYLOAD_TYPE: createError("FST_ERR_REP_INVALID_PAYLOAD_TYPE", "Attempted to send payload of invalid type '%s'. Expected a string or Buffer.", 500, TypeError),
    FST_ERR_REP_RESPONSE_BODY_CONSUMED: createError("FST_ERR_REP_RESPONSE_BODY_CONSUMED", "Response.body is already consumed."),
    FST_ERR_REP_READABLE_STREAM_LOCKED: createError("FST_ERR_REP_READABLE_STREAM_LOCKED", "ReadableStream was locked. You should call releaseLock() method on reader before sending."),
    FST_ERR_REP_ALREADY_SENT: createError("FST_ERR_REP_ALREADY_SENT", 'Reply was already sent, did you forget to "return reply" in "%s" (%s)?'),
    FST_ERR_REP_SENT_VALUE: createError("FST_ERR_REP_SENT_VALUE", "The only possible value for reply.sent is true.", 500, TypeError),
    FST_ERR_SEND_INSIDE_ONERR: createError("FST_ERR_SEND_INSIDE_ONERR", "You cannot use `send` inside the `onError` hook"),
    FST_ERR_SEND_UNDEFINED_ERR: createError("FST_ERR_SEND_UNDEFINED_ERR", "Undefined error has occurred"),
    FST_ERR_BAD_STATUS_CODE: createError("FST_ERR_BAD_STATUS_CODE", "Called reply with an invalid status code: %s"),
    FST_ERR_BAD_TRAILER_NAME: createError("FST_ERR_BAD_TRAILER_NAME", "Called reply.trailer with an invalid header name: %s"),
    FST_ERR_BAD_TRAILER_VALUE: createError("FST_ERR_BAD_TRAILER_VALUE", "Called reply.trailer('%s', fn) with an invalid type: %s. Expected a function."),
    FST_ERR_FAILED_ERROR_SERIALIZATION: createError("FST_ERR_FAILED_ERROR_SERIALIZATION", "Failed to serialize an error. Error: %s. Original error: %s"),
    FST_ERR_MISSING_SERIALIZATION_FN: createError("FST_ERR_MISSING_SERIALIZATION_FN", 'Missing serialization function. Key "%s"'),
    FST_ERR_MISSING_CONTENTTYPE_SERIALIZATION_FN: createError("FST_ERR_MISSING_CONTENTTYPE_SERIALIZATION_FN", 'Missing serialization function. Key "%s:%s"'),
    FST_ERR_REQ_INVALID_VALIDATION_INVOCATION: createError("FST_ERR_REQ_INVALID_VALIDATION_INVOCATION", 'Invalid validation invocation. Missing validation function for HTTP part "%s" nor schema provided.'),
    FST_ERR_SCH_MISSING_ID: createError("FST_ERR_SCH_MISSING_ID", "Missing schema $id property"),
    FST_ERR_SCH_ALREADY_PRESENT: createError("FST_ERR_SCH_ALREADY_PRESENT", "Schema with id '%s' already declared!"),
    FST_ERR_SCH_CONTENT_MISSING_SCHEMA: createError("FST_ERR_SCH_CONTENT_MISSING_SCHEMA", "Schema is missing for the content type '%s'"),
    FST_ERR_SCH_DUPLICATE: createError("FST_ERR_SCH_DUPLICATE", "Schema with '%s' already present!"),
    FST_ERR_SCH_VALIDATION_BUILD: createError("FST_ERR_SCH_VALIDATION_BUILD", "Failed building the validation schema for %s: %s, due to error %s"),
    FST_ERR_SCH_SERIALIZATION_BUILD: createError("FST_ERR_SCH_SERIALIZATION_BUILD", "Failed building the serialization schema for %s: %s, due to error %s"),
    FST_ERR_SCH_RESPONSE_SCHEMA_NOT_NESTED_2XX: createError("FST_ERR_SCH_RESPONSE_SCHEMA_NOT_NESTED_2XX", 'response schemas should be nested under a valid status code, e.g { 2xx: { type: "object" } }'),
    FST_ERR_HTTP2_INVALID_VERSION: createError("FST_ERR_HTTP2_INVALID_VERSION", "HTTP2 is available only from node >= 8.8.1"),
    FST_ERR_INIT_OPTS_INVALID: createError("FST_ERR_INIT_OPTS_INVALID", "Invalid initialization options: '%s'"),
    FST_ERR_FORCE_CLOSE_CONNECTIONS_IDLE_NOT_AVAILABLE: createError("FST_ERR_FORCE_CLOSE_CONNECTIONS_IDLE_NOT_AVAILABLE", "Cannot set forceCloseConnections to 'idle' as your HTTP server does not support closeIdleConnections method"),
    FST_ERR_DUPLICATED_ROUTE: createError("FST_ERR_DUPLICATED_ROUTE", "Method '%s' already declared for route '%s'"),
    FST_ERR_BAD_URL: createError("FST_ERR_BAD_URL", "'%s' is not a valid url component", 400, URIError),
    FST_ERR_ASYNC_CONSTRAINT: createError("FST_ERR_ASYNC_CONSTRAINT", "Unexpected error from async constraint", 500),
    FST_ERR_INVALID_URL: createError("FST_ERR_INVALID_URL", "URL must be a string. Received '%s'", 400, TypeError),
    FST_ERR_ROUTE_OPTIONS_NOT_OBJ: createError("FST_ERR_ROUTE_OPTIONS_NOT_OBJ", 'Options for "%s:%s" route must be an object', 500, TypeError),
    FST_ERR_ROUTE_DUPLICATED_HANDLER: createError("FST_ERR_ROUTE_DUPLICATED_HANDLER", 'Duplicate handler for "%s:%s" route is not allowed!', 500),
    FST_ERR_ROUTE_HANDLER_NOT_FN: createError("FST_ERR_ROUTE_HANDLER_NOT_FN", "Error Handler for %s:%s route, if defined, must be a function", 500, TypeError),
    FST_ERR_ROUTE_MISSING_HANDLER: createError("FST_ERR_ROUTE_MISSING_HANDLER", 'Missing handler function for "%s:%s" route.', 500),
    FST_ERR_ROUTE_METHOD_INVALID: createError("FST_ERR_ROUTE_METHOD_INVALID", "Provided method is invalid!", 500, TypeError),
    FST_ERR_ROUTE_METHOD_NOT_SUPPORTED: createError("FST_ERR_ROUTE_METHOD_NOT_SUPPORTED", "%s method is not supported.", 500),
    FST_ERR_ROUTE_BODY_VALIDATION_SCHEMA_NOT_SUPPORTED: createError("FST_ERR_ROUTE_BODY_VALIDATION_SCHEMA_NOT_SUPPORTED", "Body validation schema for %s:%s route is not supported!", 500),
    FST_ERR_ROUTE_BODY_LIMIT_OPTION_NOT_INT: createError("FST_ERR_ROUTE_BODY_LIMIT_OPTION_NOT_INT", "'bodyLimit' option must be an integer > 0. Got '%s'", 500, TypeError),
    FST_ERR_ROUTE_REWRITE_NOT_STR: createError("FST_ERR_ROUTE_REWRITE_NOT_STR", 'Rewrite url for "%s" needs to be of type "string" but received "%s"', 500, TypeError),
    FST_ERR_REOPENED_CLOSE_SERVER: createError("FST_ERR_REOPENED_CLOSE_SERVER", "Fastify has already been closed and cannot be reopened"),
    FST_ERR_REOPENED_SERVER: createError("FST_ERR_REOPENED_SERVER", "Fastify is already listening"),
    FST_ERR_INSTANCE_ALREADY_LISTENING: createError("FST_ERR_INSTANCE_ALREADY_LISTENING", "Fastify instance is already listening. %s"),
    FST_ERR_PLUGIN_VERSION_MISMATCH: createError("FST_ERR_PLUGIN_VERSION_MISMATCH", "fastify-plugin: %s - expected '%s' fastify version, '%s' is installed"),
    FST_ERR_PLUGIN_NOT_PRESENT_IN_INSTANCE: createError("FST_ERR_PLUGIN_NOT_PRESENT_IN_INSTANCE", "The decorator '%s'%s is not present in %s"),
    FST_ERR_PLUGIN_INVALID_ASYNC_HANDLER: createError("FST_ERR_PLUGIN_INVALID_ASYNC_HANDLER", "The %s plugin being registered mixes async and callback styles. Async plugin should not mix async and callback style.", 500, TypeError),
    FST_ERR_PLUGIN_CALLBACK_NOT_FN: createError("FST_ERR_PLUGIN_CALLBACK_NOT_FN", "fastify-plugin: %s", 500, TypeError),
    FST_ERR_PLUGIN_NOT_VALID: createError("FST_ERR_PLUGIN_NOT_VALID", "fastify-plugin: %s"),
    FST_ERR_ROOT_PLG_BOOTED: createError("FST_ERR_ROOT_PLG_BOOTED", "fastify-plugin: %s"),
    FST_ERR_PARENT_PLUGIN_BOOTED: createError("FST_ERR_PARENT_PLUGIN_BOOTED", "fastify-plugin: %s"),
    FST_ERR_PLUGIN_TIMEOUT: createError("FST_ERR_PLUGIN_TIMEOUT", "fastify-plugin: %s")
  };
  function appendStackTrace(oldErr, newErr) {
    newErr.cause = oldErr;
    return newErr;
  }
  module.exports = codes;
  module.exports.appendStackTrace = appendStackTrace;
  module.exports.AVVIO_ERRORS_MAP = {
    AVV_ERR_CALLBACK_NOT_FN: codes.FST_ERR_PLUGIN_CALLBACK_NOT_FN,
    AVV_ERR_PLUGIN_NOT_VALID: codes.FST_ERR_PLUGIN_NOT_VALID,
    AVV_ERR_ROOT_PLG_BOOTED: codes.FST_ERR_ROOT_PLG_BOOTED,
    AVV_ERR_PARENT_PLG_LOADED: codes.FST_ERR_PARENT_PLUGIN_BOOTED,
    AVV_ERR_READY_TIMEOUT: codes.FST_ERR_PLUGIN_TIMEOUT,
    AVV_ERR_PLUGIN_EXEC_TIMEOUT: codes.FST_ERR_PLUGIN_TIMEOUT
  };
});

// node_modules/fastify/lib/hooks.js
var require_hooks = __commonJS((exports, module) => {
  var applicationHooks = [
    "onRoute",
    "onRegister",
    "onReady",
    "onListen",
    "preClose",
    "onClose"
  ];
  var lifecycleHooks = [
    "onTimeout",
    "onRequest",
    "preParsing",
    "preValidation",
    "preSerialization",
    "preHandler",
    "onSend",
    "onResponse",
    "onError",
    "onRequestAbort"
  ];
  var supportedHooks = lifecycleHooks.concat(applicationHooks);
  var {
    FST_ERR_HOOK_INVALID_TYPE,
    FST_ERR_HOOK_INVALID_HANDLER,
    FST_ERR_SEND_UNDEFINED_ERR,
    FST_ERR_HOOK_TIMEOUT,
    FST_ERR_HOOK_NOT_SUPPORTED,
    AVVIO_ERRORS_MAP,
    appendStackTrace
  } = require_errors4();
  var {
    kChildren,
    kHooks,
    kRequestPayloadStream
  } = require_symbols3();
  function Hooks() {
    this.onRequest = [];
    this.preParsing = [];
    this.preValidation = [];
    this.preSerialization = [];
    this.preHandler = [];
    this.onResponse = [];
    this.onSend = [];
    this.onError = [];
    this.onRoute = [];
    this.onRegister = [];
    this.onReady = [];
    this.onListen = [];
    this.onTimeout = [];
    this.onRequestAbort = [];
    this.preClose = [];
  }
  Hooks.prototype = Object.create(null);
  Hooks.prototype.validate = function(hook, fn) {
    if (typeof hook !== "string")
      throw new FST_ERR_HOOK_INVALID_TYPE;
    if (Array.isArray(this[hook]) === false) {
      throw new FST_ERR_HOOK_NOT_SUPPORTED(hook);
    }
    if (typeof fn !== "function")
      throw new FST_ERR_HOOK_INVALID_HANDLER(hook, Object.prototype.toString.call(fn));
  };
  Hooks.prototype.add = function(hook, fn) {
    this.validate(hook, fn);
    this[hook].push(fn);
  };
  function buildHooks(h) {
    const hooks = new Hooks;
    hooks.onRequest = h.onRequest.slice();
    hooks.preParsing = h.preParsing.slice();
    hooks.preValidation = h.preValidation.slice();
    hooks.preSerialization = h.preSerialization.slice();
    hooks.preHandler = h.preHandler.slice();
    hooks.onSend = h.onSend.slice();
    hooks.onResponse = h.onResponse.slice();
    hooks.onError = h.onError.slice();
    hooks.onRoute = h.onRoute.slice();
    hooks.onRegister = h.onRegister.slice();
    hooks.onTimeout = h.onTimeout.slice();
    hooks.onRequestAbort = h.onRequestAbort.slice();
    hooks.onReady = [];
    hooks.onListen = [];
    hooks.preClose = [];
    return hooks;
  }
  function hookRunnerApplication(hookName, boot, server, cb) {
    const hooks = server[kHooks][hookName];
    let i = 0;
    let c = 0;
    next();
    function exit(err) {
      const hookFnName = hooks[i - 1]?.name;
      const hookFnFragment = hookFnName ? ` "${hookFnName}"` : "";
      if (err) {
        if (err.code === "AVV_ERR_READY_TIMEOUT") {
          err = appendStackTrace(err, new FST_ERR_HOOK_TIMEOUT(hookName, hookFnFragment));
        } else {
          err = AVVIO_ERRORS_MAP[err.code] != null ? appendStackTrace(err, new AVVIO_ERRORS_MAP[err.code](err.message)) : err;
        }
        cb(err);
        return;
      }
      cb();
    }
    function next(err) {
      if (err) {
        exit(err);
        return;
      }
      if (i === hooks.length && c === server[kChildren].length) {
        if (i === 0 && c === 0) {
          exit();
        } else {
          boot(function manageTimeout(err2, done) {
            exit(err2);
            done(err2);
          });
        }
        return;
      }
      if (i === hooks.length && c < server[kChildren].length) {
        const child = server[kChildren][c++];
        hookRunnerApplication(hookName, boot, child, next);
        return;
      }
      boot(wrap(hooks[i++], server));
      next();
    }
    function wrap(fn, server2) {
      return function(err, done) {
        if (err) {
          done(err);
          return;
        }
        if (fn.length === 1) {
          try {
            fn.call(server2, done);
          } catch (error) {
            done(error);
          }
          return;
        }
        try {
          const ret = fn.call(server2);
          if (ret && typeof ret.then === "function") {
            ret.then(done, done);
            return;
          }
        } catch (error) {
          err = error;
        }
        done(err);
      };
    }
  }
  function onListenHookRunner(server) {
    const hooks = server[kHooks].onListen;
    const hooksLen = hooks.length;
    let i = 0;
    let c = 0;
    next();
    function next(err) {
      err && server.log.error(err);
      if (i === hooksLen) {
        while (c < server[kChildren].length) {
          const child = server[kChildren][c++];
          onListenHookRunner(child);
        }
        return;
      }
      wrap(hooks[i++], server, next);
    }
    async function wrap(fn, server2, done) {
      if (fn.length === 1) {
        try {
          fn.call(server2, done);
        } catch (e) {
          done(e);
        }
        return;
      }
      try {
        const ret = fn.call(server2);
        if (ret && typeof ret.then === "function") {
          ret.then(done, done);
          return;
        }
        done();
      } catch (error) {
        done(error);
      }
    }
  }
  function hookRunnerGenerator(iterator) {
    return function hookRunner(functions, request, reply, cb) {
      let i = 0;
      function next(err) {
        if (err || i === functions.length) {
          cb(err, request, reply);
          return;
        }
        let result;
        try {
          result = iterator(functions[i++], request, reply, next);
        } catch (error) {
          cb(error, request, reply);
          return;
        }
        if (result && typeof result.then === "function") {
          result.then(handleResolve, handleReject);
        }
      }
      function handleResolve() {
        next();
      }
      function handleReject(err) {
        if (!err) {
          err = new FST_ERR_SEND_UNDEFINED_ERR;
        }
        cb(err, request, reply);
      }
      next();
    };
  }
  function onResponseHookIterator(fn, request, reply, next) {
    return fn(request, reply, next);
  }
  var onResponseHookRunner = hookRunnerGenerator(onResponseHookIterator);
  var preValidationHookRunner = hookRunnerGenerator(hookIterator);
  var preHandlerHookRunner = hookRunnerGenerator(hookIterator);
  var onTimeoutHookRunner = hookRunnerGenerator(hookIterator);
  var onRequestHookRunner = hookRunnerGenerator(hookIterator);
  function onSendHookRunner(functions, request, reply, payload, cb) {
    let i = 0;
    function next(err, newPayload) {
      if (err) {
        cb(err, request, reply, payload);
        return;
      }
      if (newPayload !== undefined) {
        payload = newPayload;
      }
      if (i === functions.length) {
        cb(null, request, reply, payload);
        return;
      }
      let result;
      try {
        result = functions[i++](request, reply, payload, next);
      } catch (error) {
        cb(error, request, reply);
        return;
      }
      if (result && typeof result.then === "function") {
        result.then(handleResolve, handleReject);
      }
    }
    function handleResolve(newPayload) {
      next(null, newPayload);
    }
    function handleReject(err) {
      if (!err) {
        err = new FST_ERR_SEND_UNDEFINED_ERR;
      }
      cb(err, request, reply, payload);
    }
    next();
  }
  var preSerializationHookRunner = onSendHookRunner;
  function preParsingHookRunner(functions, request, reply, cb) {
    let i = 0;
    function next(err, newPayload) {
      if (reply.sent) {
        return;
      }
      if (newPayload !== undefined) {
        request[kRequestPayloadStream] = newPayload;
      }
      if (err || i === functions.length) {
        cb(err, request, reply);
        return;
      }
      let result;
      try {
        result = functions[i++](request, reply, request[kRequestPayloadStream], next);
      } catch (error) {
        cb(error, request, reply);
        return;
      }
      if (result && typeof result.then === "function") {
        result.then(handleResolve, handleReject);
      }
    }
    function handleResolve(newPayload) {
      next(null, newPayload);
    }
    function handleReject(err) {
      if (!err) {
        err = new FST_ERR_SEND_UNDEFINED_ERR;
      }
      cb(err, request, reply);
    }
    next();
  }
  function onRequestAbortHookRunner(functions, request, cb) {
    let i = 0;
    function next(err) {
      if (err || i === functions.length) {
        cb(err, request);
        return;
      }
      let result;
      try {
        result = functions[i++](request, next);
      } catch (error) {
        cb(error, request);
        return;
      }
      if (result && typeof result.then === "function") {
        result.then(handleResolve, handleReject);
      }
    }
    function handleResolve() {
      next();
    }
    function handleReject(err) {
      if (!err) {
        err = new FST_ERR_SEND_UNDEFINED_ERR;
      }
      cb(err, request);
    }
    next();
  }
  function hookIterator(fn, request, reply, next) {
    if (reply.sent === true)
      return;
    return fn(request, reply, next);
  }
  module.exports = {
    Hooks,
    buildHooks,
    hookRunnerGenerator,
    preParsingHookRunner,
    onResponseHookRunner,
    onSendHookRunner,
    preSerializationHookRunner,
    onRequestAbortHookRunner,
    hookIterator,
    hookRunnerApplication,
    onListenHookRunner,
    preHandlerHookRunner,
    preValidationHookRunner,
    onRequestHookRunner,
    onTimeoutHookRunner,
    lifecycleHooks,
    supportedHooks
  };
});

// node_modules/fastify/lib/server.js
var require_server = __commonJS((exports, module) => {
  var http = __require("node:http");
  var https = __require("node:https");
  var dns = __require("node:dns");
  var os = __require("node:os");
  var { kState, kOptions, kServerBindings } = require_symbols3();
  var { FSTWRN003 } = require_warnings();
  var { onListenHookRunner } = require_hooks();
  var {
    FST_ERR_HTTP2_INVALID_VERSION,
    FST_ERR_REOPENED_CLOSE_SERVER,
    FST_ERR_REOPENED_SERVER,
    FST_ERR_LISTEN_OPTIONS_INVALID
  } = require_errors4();
  exports.createServer = createServer;
  function defaultResolveServerListeningText(address) {
    return `Server listening at ${address}`;
  }
  function createServer(options, httpHandler) {
    const server = getServerInstance(options, httpHandler);
    function listen(listenOptions = { port: 0, host: "localhost" }, cb = undefined) {
      if (typeof cb === "function") {
        if (cb.constructor.name === "AsyncFunction") {
          FSTWRN003("listen method");
        }
        listenOptions.cb = cb;
      }
      if (listenOptions.signal) {
        if (typeof listenOptions.signal.on !== "function" && typeof listenOptions.signal.addEventListener !== "function") {
          throw new FST_ERR_LISTEN_OPTIONS_INVALID("Invalid options.signal");
        }
        if (listenOptions.signal.aborted) {
          this.close();
        } else {
          const onAborted = () => {
            this.close();
          };
          listenOptions.signal.addEventListener("abort", onAborted, { once: true });
        }
      }
      let host;
      if (listenOptions.path == null) {
        host = listenOptions.host ?? "localhost";
      } else {
        host = listenOptions.host;
      }
      if (!Object.hasOwn(listenOptions, "host") || listenOptions.host == null) {
        listenOptions.host = host;
      }
      if (host === "localhost") {
        listenOptions.cb = (err, address) => {
          if (err) {
            cb(err, address);
            return;
          }
          multipleBindings.call(this, server, httpHandler, options, listenOptions, () => {
            this[kState].listening = true;
            cb(null, address);
            onListenHookRunner(this);
          });
        };
      } else {
        listenOptions.cb = (err, address) => {
          if (err) {
            cb(err, address);
            return;
          }
          this[kState].listening = true;
          cb(null, address);
          onListenHookRunner(this);
        };
      }
      if (cb === undefined) {
        const listening = listenPromise.call(this, server, listenOptions);
        return listening.then((address) => {
          return new Promise((resolve, reject) => {
            if (host === "localhost") {
              multipleBindings.call(this, server, httpHandler, options, listenOptions, () => {
                this[kState].listening = true;
                resolve(address);
                onListenHookRunner(this);
              });
            } else {
              resolve(address);
              onListenHookRunner(this);
            }
          });
        });
      }
      this.ready(listenCallback.call(this, server, listenOptions));
    }
    return { server, listen };
  }
  function multipleBindings(mainServer, httpHandler, serverOpts, listenOptions, onListen) {
    this[kState].listening = false;
    dns.lookup(listenOptions.host, { all: true }, (dnsErr, addresses) => {
      if (dnsErr) {
        onListen();
        return;
      }
      const isMainServerListening = mainServer.listening && serverOpts.serverFactory;
      let binding = 0;
      let bound = 0;
      if (!isMainServerListening) {
        const primaryAddress = mainServer.address();
        for (const adr of addresses) {
          if (adr.address !== primaryAddress.address) {
            binding++;
            const secondaryOpts = Object.assign({}, listenOptions, {
              host: adr.address,
              port: primaryAddress.port,
              cb: (_ignoreErr) => {
                bound++;
                if (!_ignoreErr) {
                  this[kServerBindings].push(secondaryServer);
                }
                if (bound === binding) {
                  onListen();
                }
              }
            });
            const secondaryServer = getServerInstance(serverOpts, httpHandler);
            const closeSecondary = () => {
              secondaryServer.close(() => {
              });
              if (typeof secondaryServer.closeAllConnections === "function" && serverOpts.forceCloseConnections === true) {
                secondaryServer.closeAllConnections();
              }
            };
            secondaryServer.on("upgrade", mainServer.emit.bind(mainServer, "upgrade"));
            mainServer.on("unref", closeSecondary);
            mainServer.on("close", closeSecondary);
            mainServer.on("error", closeSecondary);
            this[kState].listening = false;
            listenCallback.call(this, secondaryServer, secondaryOpts)();
          }
        }
      }
      if (binding === 0) {
        onListen();
        return;
      }
      const originUnref = mainServer.unref;
      mainServer.unref = function() {
        originUnref.call(mainServer);
        mainServer.emit("unref");
      };
    });
  }
  function listenCallback(server, listenOptions) {
    const wrap = (err) => {
      server.removeListener("error", wrap);
      server.removeListener("listening", wrap);
      if (!err) {
        const address = logServerAddress.call(this, server, listenOptions.listenTextResolver || defaultResolveServerListeningText);
        listenOptions.cb(null, address);
      } else {
        this[kState].listening = false;
        listenOptions.cb(err, null);
      }
    };
    return (err) => {
      if (err != null)
        return listenOptions.cb(err);
      if (this[kState].listening && this[kState].closing) {
        return listenOptions.cb(new FST_ERR_REOPENED_CLOSE_SERVER, null);
      } else if (this[kState].listening) {
        return listenOptions.cb(new FST_ERR_REOPENED_SERVER, null);
      }
      server.once("error", wrap);
      if (!this[kState].closing) {
        server.once("listening", wrap);
        server.listen(listenOptions);
        this[kState].listening = true;
      }
    };
  }
  function listenPromise(server, listenOptions) {
    if (this[kState].listening && this[kState].closing) {
      return Promise.reject(new FST_ERR_REOPENED_CLOSE_SERVER);
    } else if (this[kState].listening) {
      return Promise.reject(new FST_ERR_REOPENED_SERVER);
    }
    return this.ready().then(() => {
      let errEventHandler;
      let listeningEventHandler;
      function cleanup() {
        server.removeListener("error", errEventHandler);
        server.removeListener("listening", listeningEventHandler);
      }
      const errEvent = new Promise((resolve, reject) => {
        errEventHandler = (err) => {
          cleanup();
          this[kState].listening = false;
          reject(err);
        };
        server.once("error", errEventHandler);
      });
      const listeningEvent = new Promise((resolve, reject) => {
        listeningEventHandler = () => {
          cleanup();
          this[kState].listening = true;
          resolve(logServerAddress.call(this, server, listenOptions.listenTextResolver || defaultResolveServerListeningText));
        };
        server.once("listening", listeningEventHandler);
      });
      server.listen(listenOptions);
      return Promise.race([
        errEvent,
        listeningEvent
      ]);
    });
  }
  function getServerInstance(options, httpHandler) {
    let server = null;
    const httpsOptions = options.https === true ? {} : options.https;
    if (options.serverFactory) {
      server = options.serverFactory(httpHandler, options);
    } else if (options.http2) {
      if (typeof httpsOptions === "object") {
        server = http2().createSecureServer(httpsOptions, httpHandler);
      } else {
        server = http2().createServer(httpHandler);
      }
      server.on("session", sessionTimeout(options.http2SessionTimeout));
    } else {
      if (httpsOptions) {
        server = https.createServer(httpsOptions, httpHandler);
      } else {
        server = http.createServer(options.http, httpHandler);
      }
      server.keepAliveTimeout = options.keepAliveTimeout;
      server.requestTimeout = options.requestTimeout;
      if (options.maxRequestsPerSocket > 0) {
        server.maxRequestsPerSocket = options.maxRequestsPerSocket;
      }
    }
    if (!options.serverFactory) {
      server.setTimeout(options.connectionTimeout);
    }
    return server;
  }
  function getAddresses(address) {
    if (address.address === "0.0.0.0") {
      return Object.values(os.networkInterfaces()).flatMap((iface) => {
        return iface.filter((iface2) => iface2.family === "IPv4");
      }).sort((iface) => {
        return iface.internal ? -1 : 1;
      }).map((iface) => {
        return iface.address;
      });
    }
    return [address.address];
  }
  function logServerAddress(server, listenTextResolver) {
    let addresses;
    const isUnixSocket = typeof server.address() === "string";
    if (!isUnixSocket) {
      if (server.address().address.indexOf(":") === -1) {
        addresses = getAddresses(server.address()).map((address) => address + ":" + server.address().port);
      } else {
        addresses = ["[" + server.address().address + "]:" + server.address().port];
      }
      addresses = addresses.map((address) => "http" + (this[kOptions].https ? "s" : "") + "://" + address);
    } else {
      addresses = [server.address()];
    }
    for (const address of addresses) {
      this.log.info(listenTextResolver(address));
    }
    return addresses[0];
  }
  function http2() {
    try {
      return __require("node:http2");
    } catch (err) {
      throw new FST_ERR_HTTP2_INVALID_VERSION;
    }
  }
  function sessionTimeout(timeout) {
    return function(session) {
      session.setTimeout(timeout, close);
    };
  }
  function close() {
    this.close();
  }
});

// node_modules/fastify/lib/validation.js
var require_validation = __commonJS((exports, module) => {
  var {
    kSchemaHeaders: headersSchema,
    kSchemaParams: paramsSchema,
    kSchemaQuerystring: querystringSchema,
    kSchemaBody: bodySchema,
    kSchemaResponse: responseSchema
  } = require_symbols3();
  var scChecker = /^[1-5](?:\d{2}|xx)$|^default$/;
  var {
    FST_ERR_SCH_RESPONSE_SCHEMA_NOT_NESTED_2XX
  } = require_errors4();
  var { FSTWRN001 } = require_warnings();
  function compileSchemasForSerialization(context, compile) {
    if (!context.schema || !context.schema.response) {
      return;
    }
    const { method, url } = context.config || {};
    context[responseSchema] = Object.keys(context.schema.response).reduce(function(acc, statusCode) {
      const schema = context.schema.response[statusCode];
      statusCode = statusCode.toLowerCase();
      if (!scChecker.test(statusCode)) {
        throw new FST_ERR_SCH_RESPONSE_SCHEMA_NOT_NESTED_2XX;
      }
      if (schema.content) {
        const contentTypesSchemas = {};
        for (const mediaName of Object.keys(schema.content)) {
          const contentSchema = schema.content[mediaName].schema;
          contentTypesSchemas[mediaName] = compile({
            schema: contentSchema,
            url,
            method,
            httpStatus: statusCode,
            contentType: mediaName
          });
        }
        acc[statusCode] = contentTypesSchemas;
      } else {
        acc[statusCode] = compile({
          schema,
          url,
          method,
          httpStatus: statusCode
        });
      }
      return acc;
    }, {});
  }
  function compileSchemasForValidation(context, compile, isCustom) {
    const { schema } = context;
    if (!schema) {
      return;
    }
    const { method, url } = context.config || {};
    const headers = schema.headers;
    if (headers && (isCustom || Object.getPrototypeOf(headers) !== Object.prototype)) {
      context[headersSchema] = compile({ schema: headers, method, url, httpPart: "headers" });
    } else if (headers) {
      const headersSchemaLowerCase = {};
      Object.keys(headers).forEach((k) => {
        headersSchemaLowerCase[k] = headers[k];
      });
      if (headersSchemaLowerCase.required instanceof Array) {
        headersSchemaLowerCase.required = headersSchemaLowerCase.required.map((h) => h.toLowerCase());
      }
      if (headers.properties) {
        headersSchemaLowerCase.properties = {};
        Object.keys(headers.properties).forEach((k) => {
          headersSchemaLowerCase.properties[k.toLowerCase()] = headers.properties[k];
        });
      }
      context[headersSchema] = compile({ schema: headersSchemaLowerCase, method, url, httpPart: "headers" });
    } else if (Object.hasOwn(schema, "headers")) {
      FSTWRN001("headers", method, url);
    }
    if (schema.body) {
      const contentProperty = schema.body.content;
      if (contentProperty) {
        const contentTypeSchemas = {};
        for (const contentType of Object.keys(contentProperty)) {
          const contentSchema = contentProperty[contentType].schema;
          contentTypeSchemas[contentType] = compile({ schema: contentSchema, method, url, httpPart: "body", contentType });
        }
        context[bodySchema] = contentTypeSchemas;
      } else {
        context[bodySchema] = compile({ schema: schema.body, method, url, httpPart: "body" });
      }
    } else if (Object.hasOwn(schema, "body")) {
      FSTWRN001("body", method, url);
    }
    if (schema.querystring) {
      context[querystringSchema] = compile({ schema: schema.querystring, method, url, httpPart: "querystring" });
    } else if (Object.hasOwn(schema, "querystring")) {
      FSTWRN001("querystring", method, url);
    }
    if (schema.params) {
      context[paramsSchema] = compile({ schema: schema.params, method, url, httpPart: "params" });
    } else if (Object.hasOwn(schema, "params")) {
      FSTWRN001("params", method, url);
    }
  }
  function validateParam(validatorFunction, request, paramName) {
    const isUndefined = request[paramName] === undefined;
    const ret = validatorFunction && validatorFunction(isUndefined ? null : request[paramName]);
    if (ret && typeof ret.then === "function") {
      return ret.then((res) => {
        return answer(res);
      }).catch((err) => {
        return err;
      });
    }
    return answer(ret);
    function answer(ret2) {
      if (ret2 === false)
        return validatorFunction.errors;
      if (ret2 && ret2.error)
        return ret2.error;
      if (ret2 && ret2.value)
        request[paramName] = ret2.value;
      return false;
    }
  }
  function validate(context, request, execution) {
    const runExecution = execution === undefined;
    if (runExecution || !execution.skipParams) {
      const params = validateParam(context[paramsSchema], request, "params");
      if (params) {
        if (typeof params.then !== "function") {
          return wrapValidationError(params, "params", context.schemaErrorFormatter);
        } else {
          return validateAsyncParams(params, context, request);
        }
      }
    }
    if (runExecution || !execution.skipBody) {
      let validatorFunction = null;
      if (typeof context[bodySchema] === "function") {
        validatorFunction = context[bodySchema];
      } else if (context[bodySchema]) {
        const contentType = request.headers["content-type"]?.split(";", 1)[0];
        const contentSchema = context[bodySchema][contentType];
        if (contentSchema) {
          validatorFunction = contentSchema;
        }
      }
      const body = validateParam(validatorFunction, request, "body");
      if (body) {
        if (typeof body.then !== "function") {
          return wrapValidationError(body, "body", context.schemaErrorFormatter);
        } else {
          return validateAsyncBody(body, context, request);
        }
      }
    }
    if (runExecution || !execution.skipQuery) {
      const query = validateParam(context[querystringSchema], request, "query");
      if (query) {
        if (typeof query.then !== "function") {
          return wrapValidationError(query, "querystring", context.schemaErrorFormatter);
        } else {
          return validateAsyncQuery(query, context, request);
        }
      }
    }
    const headers = validateParam(context[headersSchema], request, "headers");
    if (headers) {
      if (typeof headers.then !== "function") {
        return wrapValidationError(headers, "headers", context.schemaErrorFormatter);
      } else {
        return validateAsyncHeaders(headers, context, request);
      }
    }
    return false;
  }
  function validateAsyncParams(validatePromise, context, request) {
    return validatePromise.then((paramsResult) => {
      if (paramsResult) {
        return wrapValidationError(paramsResult, "params", context.schemaErrorFormatter);
      }
      return validate(context, request, { skipParams: true });
    });
  }
  function validateAsyncBody(validatePromise, context, request) {
    return validatePromise.then((bodyResult) => {
      if (bodyResult) {
        return wrapValidationError(bodyResult, "body", context.schemaErrorFormatter);
      }
      return validate(context, request, { skipParams: true, skipBody: true });
    });
  }
  function validateAsyncQuery(validatePromise, context, request) {
    return validatePromise.then((queryResult) => {
      if (queryResult) {
        return wrapValidationError(queryResult, "querystring", context.schemaErrorFormatter);
      }
      return validate(context, request, { skipParams: true, skipBody: true, skipQuery: true });
    });
  }
  function validateAsyncHeaders(validatePromise, context, request) {
    return validatePromise.then((headersResult) => {
      if (headersResult) {
        return wrapValidationError(headersResult, "headers", context.schemaErrorFormatter);
      }
      return false;
    });
  }
  function wrapValidationError(result, dataVar, schemaErrorFormatter) {
    if (result instanceof Error) {
      result.statusCode = result.statusCode || 400;
      result.code = result.code || "FST_ERR_VALIDATION";
      result.validationContext = result.validationContext || dataVar;
      return result;
    }
    const error = schemaErrorFormatter(result, dataVar);
    error.statusCode = error.statusCode || 400;
    error.code = error.code || "FST_ERR_VALIDATION";
    error.validation = result;
    error.validationContext = dataVar;
    return error;
  }
  module.exports = {
    symbols: { bodySchema, querystringSchema, responseSchema, paramsSchema, headersSchema },
    compileSchemasForValidation,
    compileSchemasForSerialization,
    validate
  };
});

// node_modules/fastify/lib/wrapThenable.js
var require_wrapThenable = __commonJS((exports, module) => {
  var {
    kReplyIsError,
    kReplyHijacked
  } = require_symbols3();
  var diagnostics = __require("node:diagnostics_channel");
  var channels = diagnostics.tracingChannel("fastify.request.handler");
  function wrapThenable(thenable, reply, store) {
    if (store)
      store.async = true;
    thenable.then(function(payload) {
      if (reply[kReplyHijacked] === true) {
        return;
      }
      if (store) {
        channels.asyncStart.publish(store);
      }
      try {
        if (payload !== undefined || reply.sent === false && reply.raw.headersSent === false && reply.request.raw.aborted === false && reply.request.socket && !reply.request.socket.destroyed) {
          try {
            reply.send(payload);
          } catch (err) {
            reply[kReplyIsError] = true;
            reply.send(err);
          }
        }
      } finally {
        if (store) {
          channels.asyncEnd.publish(store);
        }
      }
    }, function(err) {
      if (store) {
        store.error = err;
        channels.error.publish(store);
        channels.asyncStart.publish(store);
      }
      try {
        if (reply.sent === true) {
          reply.log.error({ err }, "Promise errored, but reply.sent = true was set");
          return;
        }
        reply[kReplyIsError] = true;
        reply.send(err);
      } catch (err2) {
        reply.send(err2);
      } finally {
        if (store) {
          channels.asyncEnd.publish(store);
        }
      }
    });
  }
  module.exports = wrapThenable;
});

// node_modules/fastify/lib/handleRequest.js
var require_handleRequest = __commonJS((exports, module) => {
  var diagnostics = __require("node:diagnostics_channel");
  var { validate: validateSchema } = require_validation();
  var { preValidationHookRunner, preHandlerHookRunner } = require_hooks();
  var wrapThenable = require_wrapThenable();
  var {
    kReplyIsError,
    kRouteContext,
    kFourOhFourContext,
    kSupportedHTTPMethods
  } = require_symbols3();
  var channels = diagnostics.tracingChannel("fastify.request.handler");
  function handleRequest(err, request, reply) {
    if (reply.sent === true)
      return;
    if (err != null) {
      reply[kReplyIsError] = true;
      reply.send(err);
      return;
    }
    const method = request.raw.method;
    const headers = request.headers;
    const context = request[kRouteContext];
    if (this[kSupportedHTTPMethods].bodyless.has(method)) {
      handler(request, reply);
      return;
    }
    if (this[kSupportedHTTPMethods].bodywith.has(method)) {
      const contentType = headers["content-type"];
      const contentLength = headers["content-length"];
      const transferEncoding = headers["transfer-encoding"];
      if (contentType === undefined) {
        if ((contentLength === undefined || contentLength === "0") && transferEncoding === undefined) {
          handler(request, reply);
        } else {
          context.contentTypeParser.run("", handler, request, reply);
        }
      } else {
        if (contentLength === undefined && transferEncoding === undefined && method === "OPTIONS") {
          handler(request, reply);
          return;
        }
        context.contentTypeParser.run(contentType, handler, request, reply);
      }
      return;
    }
    handler(request, reply);
  }
  function handler(request, reply) {
    try {
      if (request[kRouteContext].preValidation !== null) {
        preValidationHookRunner(request[kRouteContext].preValidation, request, reply, preValidationCallback);
      } else {
        preValidationCallback(null, request, reply);
      }
    } catch (err) {
      preValidationCallback(err, request, reply);
    }
  }
  function preValidationCallback(err, request, reply) {
    if (reply.sent === true)
      return;
    if (err != null) {
      reply[kReplyIsError] = true;
      reply.send(err);
      return;
    }
    const validationErr = validateSchema(reply[kRouteContext], request);
    const isAsync = validationErr && typeof validationErr.then === "function" || false;
    if (isAsync) {
      const cb = validationCompleted.bind(null, request, reply);
      validationErr.then(cb, cb);
    } else {
      validationCompleted(request, reply, validationErr);
    }
  }
  function validationCompleted(request, reply, validationErr) {
    if (validationErr) {
      if (reply[kRouteContext].attachValidation === false) {
        reply.send(validationErr);
        return;
      }
      reply.request.validationError = validationErr;
    }
    if (request[kRouteContext].preHandler !== null) {
      preHandlerHookRunner(request[kRouteContext].preHandler, request, reply, preHandlerCallback);
    } else {
      preHandlerCallback(null, request, reply);
    }
  }
  function preHandlerCallback(err, request, reply) {
    if (reply.sent)
      return;
    const context = request[kRouteContext];
    if (!channels.hasSubscribers || context[kFourOhFourContext] === null) {
      preHandlerCallbackInner(err, request, reply);
    } else {
      const store = {
        request,
        reply,
        async: false,
        route: {
          url: context.config.url,
          method: context.config.method
        }
      };
      channels.start.runStores(store, preHandlerCallbackInner, undefined, err, request, reply, store);
    }
  }
  function preHandlerCallbackInner(err, request, reply, store) {
    const context = request[kRouteContext];
    try {
      if (err != null) {
        reply[kReplyIsError] = true;
        reply.send(err);
        if (store) {
          store.error = err;
          channels.error.publish(store);
        }
        return;
      }
      let result;
      try {
        result = context.handler(request, reply);
      } catch (err2) {
        if (store) {
          store.error = err2;
          channels.error.publish(store);
        }
        reply[kReplyIsError] = true;
        reply.send(err2);
        return;
      }
      if (result !== undefined) {
        if (result !== null && typeof result.then === "function") {
          wrapThenable(result, reply, store);
        } else {
          reply.send(result);
        }
      }
    } finally {
      if (store)
        channels.end.publish(store);
    }
  }
  module.exports = handleRequest;
  module.exports[Symbol.for("internals")] = { handler, preHandlerCallback };
});

// node_modules/abstract-logging/index.js
var require_abstract_logging = __commonJS((exports, module) => {
  function noop() {
  }
  var proto = {
    fatal: noop,
    error: noop,
    warn: noop,
    info: noop,
    debug: noop,
    trace: noop
  };
  Object.defineProperty(module, "exports", {
    get() {
      return Object.create(proto);
    }
  });
});

// node_modules/pino-std-serializers/lib/err-helpers.js
var require_err_helpers = __commonJS((exports, module) => {
  var isErrorLike = (err) => {
    return err && typeof err.message === "string";
  };
  var getErrorCause = (err) => {
    if (!err)
      return;
    const cause = err.cause;
    if (typeof cause === "function") {
      const causeResult = err.cause();
      return isErrorLike(causeResult) ? causeResult : undefined;
    } else {
      return isErrorLike(cause) ? cause : undefined;
    }
  };
  var _stackWithCauses = (err, seen) => {
    if (!isErrorLike(err))
      return "";
    const stack = err.stack || "";
    if (seen.has(err)) {
      return stack + `
causes have become circular...`;
    }
    const cause = getErrorCause(err);
    if (cause) {
      seen.add(err);
      return stack + `
caused by: ` + _stackWithCauses(cause, seen);
    } else {
      return stack;
    }
  };
  var stackWithCauses = (err) => _stackWithCauses(err, new Set);
  var _messageWithCauses = (err, seen, skip) => {
    if (!isErrorLike(err))
      return "";
    const message = skip ? "" : err.message || "";
    if (seen.has(err)) {
      return message + ": ...";
    }
    const cause = getErrorCause(err);
    if (cause) {
      seen.add(err);
      const skipIfVErrorStyleCause = typeof err.cause === "function";
      return message + (skipIfVErrorStyleCause ? "" : ": ") + _messageWithCauses(cause, seen, skipIfVErrorStyleCause);
    } else {
      return message;
    }
  };
  var messageWithCauses = (err) => _messageWithCauses(err, new Set);
  module.exports = {
    isErrorLike,
    getErrorCause,
    stackWithCauses,
    messageWithCauses
  };
});

// node_modules/pino-std-serializers/lib/err-proto.js
var require_err_proto = __commonJS((exports, module) => {
  var seen = Symbol("circular-ref-tag");
  var rawSymbol = Symbol("pino-raw-err-ref");
  var pinoErrProto = Object.create({}, {
    type: {
      enumerable: true,
      writable: true,
      value: undefined
    },
    message: {
      enumerable: true,
      writable: true,
      value: undefined
    },
    stack: {
      enumerable: true,
      writable: true,
      value: undefined
    },
    aggregateErrors: {
      enumerable: true,
      writable: true,
      value: undefined
    },
    raw: {
      enumerable: false,
      get: function() {
        return this[rawSymbol];
      },
      set: function(val) {
        this[rawSymbol] = val;
      }
    }
  });
  Object.defineProperty(pinoErrProto, rawSymbol, {
    writable: true,
    value: {}
  });
  module.exports = {
    pinoErrProto,
    pinoErrorSymbols: {
      seen,
      rawSymbol
    }
  };
});

// node_modules/pino-std-serializers/lib/err.js
var require_err = __commonJS((exports, module) => {
  module.exports = errSerializer;
  var { messageWithCauses, stackWithCauses, isErrorLike } = require_err_helpers();
  var { pinoErrProto, pinoErrorSymbols } = require_err_proto();
  var { seen } = pinoErrorSymbols;
  var { toString } = Object.prototype;
  function errSerializer(err) {
    if (!isErrorLike(err)) {
      return err;
    }
    err[seen] = undefined;
    const _err = Object.create(pinoErrProto);
    _err.type = toString.call(err.constructor) === "[object Function]" ? err.constructor.name : err.name;
    _err.message = messageWithCauses(err);
    _err.stack = stackWithCauses(err);
    if (Array.isArray(err.errors)) {
      _err.aggregateErrors = err.errors.map((err2) => errSerializer(err2));
    }
    for (const key in err) {
      if (_err[key] === undefined) {
        const val = err[key];
        if (isErrorLike(val)) {
          if (key !== "cause" && !Object.prototype.hasOwnProperty.call(val, seen)) {
            _err[key] = errSerializer(val);
          }
        } else {
          _err[key] = val;
        }
      }
    }
    delete err[seen];
    _err.raw = err;
    return _err;
  }
});

// node_modules/pino-std-serializers/lib/err-with-cause.js
var require_err_with_cause = __commonJS((exports, module) => {
  module.exports = errWithCauseSerializer;
  var { isErrorLike } = require_err_helpers();
  var { pinoErrProto, pinoErrorSymbols } = require_err_proto();
  var { seen } = pinoErrorSymbols;
  var { toString } = Object.prototype;
  function errWithCauseSerializer(err) {
    if (!isErrorLike(err)) {
      return err;
    }
    err[seen] = undefined;
    const _err = Object.create(pinoErrProto);
    _err.type = toString.call(err.constructor) === "[object Function]" ? err.constructor.name : err.name;
    _err.message = err.message;
    _err.stack = err.stack;
    if (Array.isArray(err.errors)) {
      _err.aggregateErrors = err.errors.map((err2) => errWithCauseSerializer(err2));
    }
    if (isErrorLike(err.cause) && !Object.prototype.hasOwnProperty.call(err.cause, seen)) {
      _err.cause = errWithCauseSerializer(err.cause);
    }
    for (const key in err) {
      if (_err[key] === undefined) {
        const val = err[key];
        if (isErrorLike(val)) {
          if (!Object.prototype.hasOwnProperty.call(val, seen)) {
            _err[key] = errWithCauseSerializer(val);
          }
        } else {
          _err[key] = val;
        }
      }
    }
    delete err[seen];
    _err.raw = err;
    return _err;
  }
});

// node_modules/pino-std-serializers/lib/req.js
var require_req = __commonJS((exports, module) => {
  module.exports = {
    mapHttpRequest,
    reqSerializer
  };
  var rawSymbol = Symbol("pino-raw-req-ref");
  var pinoReqProto = Object.create({}, {
    id: {
      enumerable: true,
      writable: true,
      value: ""
    },
    method: {
      enumerable: true,
      writable: true,
      value: ""
    },
    url: {
      enumerable: true,
      writable: true,
      value: ""
    },
    query: {
      enumerable: true,
      writable: true,
      value: ""
    },
    params: {
      enumerable: true,
      writable: true,
      value: ""
    },
    headers: {
      enumerable: true,
      writable: true,
      value: {}
    },
    remoteAddress: {
      enumerable: true,
      writable: true,
      value: ""
    },
    remotePort: {
      enumerable: true,
      writable: true,
      value: ""
    },
    raw: {
      enumerable: false,
      get: function() {
        return this[rawSymbol];
      },
      set: function(val) {
        this[rawSymbol] = val;
      }
    }
  });
  Object.defineProperty(pinoReqProto, rawSymbol, {
    writable: true,
    value: {}
  });
  function reqSerializer(req) {
    const connection = req.info || req.socket;
    const _req = Object.create(pinoReqProto);
    _req.id = typeof req.id === "function" ? req.id() : req.id || (req.info ? req.info.id : undefined);
    _req.method = req.method;
    if (req.originalUrl) {
      _req.url = req.originalUrl;
    } else {
      const path = req.path;
      _req.url = typeof path === "string" ? path : req.url ? req.url.path || req.url : undefined;
    }
    if (req.query) {
      _req.query = req.query;
    }
    if (req.params) {
      _req.params = req.params;
    }
    _req.headers = req.headers;
    _req.remoteAddress = connection && connection.remoteAddress;
    _req.remotePort = connection && connection.remotePort;
    _req.raw = req.raw || req;
    return _req;
  }
  function mapHttpRequest(req) {
    return {
      req: reqSerializer(req)
    };
  }
});

// node_modules/pino-std-serializers/lib/res.js
var require_res = __commonJS((exports, module) => {
  module.exports = {
    mapHttpResponse,
    resSerializer
  };
  var rawSymbol = Symbol("pino-raw-res-ref");
  var pinoResProto = Object.create({}, {
    statusCode: {
      enumerable: true,
      writable: true,
      value: 0
    },
    headers: {
      enumerable: true,
      writable: true,
      value: ""
    },
    raw: {
      enumerable: false,
      get: function() {
        return this[rawSymbol];
      },
      set: function(val) {
        this[rawSymbol] = val;
      }
    }
  });
  Object.defineProperty(pinoResProto, rawSymbol, {
    writable: true,
    value: {}
  });
  function resSerializer(res) {
    const _res = Object.create(pinoResProto);
    _res.statusCode = res.headersSent ? res.statusCode : null;
    _res.headers = res.getHeaders ? res.getHeaders() : res._headers;
    _res.raw = res;
    return _res;
  }
  function mapHttpResponse(res) {
    return {
      res: resSerializer(res)
    };
  }
});

// node_modules/pino-std-serializers/index.js
var require_pino_std_serializers = __commonJS((exports, module) => {
  var errSerializer = require_err();
  var errWithCauseSerializer = require_err_with_cause();
  var reqSerializers = require_req();
  var resSerializers = require_res();
  module.exports = {
    err: errSerializer,
    errWithCause: errWithCauseSerializer,
    mapHttpRequest: reqSerializers.mapHttpRequest,
    mapHttpResponse: resSerializers.mapHttpResponse,
    req: reqSerializers.reqSerializer,
    res: resSerializers.resSerializer,
    wrapErrorSerializer: function wrapErrorSerializer(customSerializer) {
      if (customSerializer === errSerializer)
        return customSerializer;
      return function wrapErrSerializer(err) {
        return customSerializer(errSerializer(err));
      };
    },
    wrapRequestSerializer: function wrapRequestSerializer(customSerializer) {
      if (customSerializer === reqSerializers.reqSerializer)
        return customSerializer;
      return function wrappedReqSerializer(req) {
        return customSerializer(reqSerializers.reqSerializer(req));
      };
    },
    wrapResponseSerializer: function wrapResponseSerializer(customSerializer) {
      if (customSerializer === resSerializers.resSerializer)
        return customSerializer;
      return function wrappedResSerializer(res) {
        return customSerializer(resSerializers.resSerializer(res));
      };
    }
  };
});

// node_modules/pino/lib/caller.js
var require_caller = __commonJS((exports, module) => {
  function noOpPrepareStackTrace(_, stack) {
    return stack;
  }
  module.exports = function getCallers() {
    const originalPrepare = Error.prepareStackTrace;
    Error.prepareStackTrace = noOpPrepareStackTrace;
    const stack = new Error().stack;
    Error.prepareStackTrace = originalPrepare;
    if (!Array.isArray(stack)) {
      return;
    }
    const entries = stack.slice(2);
    const fileNames = [];
    for (const entry of entries) {
      if (!entry) {
        continue;
      }
      fileNames.push(entry.getFileName());
    }
    return fileNames;
  };
});

// node_modules/fast-redact/lib/validator.js
var require_validator = __commonJS((exports, module) => {
  module.exports = validator;
  function validator(opts = {}) {
    const {
      ERR_PATHS_MUST_BE_STRINGS = () => "fast-redact - Paths must be (non-empty) strings",
      ERR_INVALID_PATH = (s) => `fast-redact – Invalid path (${s})`
    } = opts;
    return function validate({ paths }) {
      paths.forEach((s) => {
        if (typeof s !== "string") {
          throw Error(ERR_PATHS_MUST_BE_STRINGS());
        }
        try {
          if (/〇/.test(s))
            throw Error();
          const expr = (s[0] === "[" ? "" : ".") + s.replace(/^\*/, "〇").replace(/\.\*/g, ".〇").replace(/\[\*\]/g, "[〇]");
          if (/\n|\r|;/.test(expr))
            throw Error();
          if (/\/\*/.test(expr))
            throw Error();
          Function(`
            'use strict'
            const o = new Proxy({}, { get: () => o, set: () => { throw Error() } });
            const 〇 = null;
            o${expr}
            if ([o${expr}].length !== 1) throw Error()`)();
        } catch (e) {
          throw Error(ERR_INVALID_PATH(s));
        }
      });
    };
  }
});

// node_modules/fast-redact/lib/rx.js
var require_rx = __commonJS((exports, module) => {
  module.exports = /[^.[\]]+|\[((?:.)*?)\]/g;
});

// node_modules/fast-redact/lib/parse.js
var require_parse = __commonJS((exports, module) => {
  var rx = require_rx();
  module.exports = parse;
  function parse({ paths }) {
    const wildcards = [];
    var wcLen = 0;
    const secret = paths.reduce(function(o, strPath, ix) {
      var path = strPath.match(rx).map((p) => p.replace(/'|"|`/g, ""));
      const leadingBracket = strPath[0] === "[";
      path = path.map((p) => {
        if (p[0] === "[")
          return p.substr(1, p.length - 2);
        else
          return p;
      });
      const star = path.indexOf("*");
      if (star > -1) {
        const before = path.slice(0, star);
        const beforeStr = before.join(".");
        const after = path.slice(star + 1, path.length);
        const nested = after.length > 0;
        wcLen++;
        wildcards.push({
          before,
          beforeStr,
          after,
          nested
        });
      } else {
        o[strPath] = {
          path,
          val: undefined,
          precensored: false,
          circle: "",
          escPath: JSON.stringify(strPath),
          leadingBracket
        };
      }
      return o;
    }, {});
    return { wildcards, wcLen, secret };
  }
});

// node_modules/fast-redact/lib/redactor.js
var require_redactor = __commonJS((exports, module) => {
  var rx = require_rx();
  module.exports = redactor;
  function redactor({ secret, serialize, wcLen, strict, isCensorFct, censorFctTakesPath }, state) {
    const redact = Function("o", `
    if (typeof o !== 'object' || o == null) {
      ${strictImpl(strict, serialize)}
    }
    const { censor, secret } = this
    const originalSecret = {}
    const secretKeys = Object.keys(secret)
    for (var i = 0; i < secretKeys.length; i++) {
      originalSecret[secretKeys[i]] = secret[secretKeys[i]]
    }

    ${redactTmpl(secret, isCensorFct, censorFctTakesPath)}
    this.compileRestore()
    ${dynamicRedactTmpl(wcLen > 0, isCensorFct, censorFctTakesPath)}
    this.secret = originalSecret
    ${resultTmpl(serialize)}
  `).bind(state);
    redact.state = state;
    if (serialize === false) {
      redact.restore = (o) => state.restore(o);
    }
    return redact;
  }
  function redactTmpl(secret, isCensorFct, censorFctTakesPath) {
    return Object.keys(secret).map((path) => {
      const { escPath, leadingBracket, path: arrPath } = secret[path];
      const skip = leadingBracket ? 1 : 0;
      const delim = leadingBracket ? "" : ".";
      const hops = [];
      var match;
      while ((match = rx.exec(path)) !== null) {
        const [, ix] = match;
        const { index, input } = match;
        if (index > skip)
          hops.push(input.substring(0, index - (ix ? 0 : 1)));
      }
      var existence = hops.map((p) => `o${delim}${p}`).join(" && ");
      if (existence.length === 0)
        existence += `o${delim}${path} != null`;
      else
        existence += ` && o${delim}${path} != null`;
      const circularDetection = `
      switch (true) {
        ${hops.reverse().map((p) => `
          case o${delim}${p} === censor:
            secret[${escPath}].circle = ${JSON.stringify(p)}
            break
        `).join(`
`)}
      }
    `;
      const censorArgs = censorFctTakesPath ? `val, ${JSON.stringify(arrPath)}` : `val`;
      return `
      if (${existence}) {
        const val = o${delim}${path}
        if (val === censor) {
          secret[${escPath}].precensored = true
        } else {
          secret[${escPath}].val = val
          o${delim}${path} = ${isCensorFct ? `censor(${censorArgs})` : "censor"}
          ${circularDetection}
        }
      }
    `;
    }).join(`
`);
  }
  function dynamicRedactTmpl(hasWildcards, isCensorFct, censorFctTakesPath) {
    return hasWildcards === true ? `
    {
      const { wildcards, wcLen, groupRedact, nestedRedact } = this
      for (var i = 0; i < wcLen; i++) {
        const { before, beforeStr, after, nested } = wildcards[i]
        if (nested === true) {
          secret[beforeStr] = secret[beforeStr] || []
          nestedRedact(secret[beforeStr], o, before, after, censor, ${isCensorFct}, ${censorFctTakesPath})
        } else secret[beforeStr] = groupRedact(o, before, censor, ${isCensorFct}, ${censorFctTakesPath})
      }
    }
  ` : "";
  }
  function resultTmpl(serialize) {
    return serialize === false ? `return o` : `
    var s = this.serialize(o)
    this.restore(o)
    return s
  `;
  }
  function strictImpl(strict, serialize) {
    return strict === true ? `throw Error('fast-redact: primitives cannot be redacted')` : serialize === false ? `return o` : `return this.serialize(o)`;
  }
});

// node_modules/fast-redact/lib/modifiers.js
var require_modifiers = __commonJS((exports, module) => {
  module.exports = {
    groupRedact,
    groupRestore,
    nestedRedact,
    nestedRestore
  };
  function groupRestore({ keys, values, target }) {
    if (target == null || typeof target === "string")
      return;
    const length = keys.length;
    for (var i = 0;i < length; i++) {
      const k = keys[i];
      target[k] = values[i];
    }
  }
  function groupRedact(o, path, censor, isCensorFct, censorFctTakesPath) {
    const target = get(o, path);
    if (target == null || typeof target === "string")
      return { keys: null, values: null, target, flat: true };
    const keys = Object.keys(target);
    const keysLength = keys.length;
    const pathLength = path.length;
    const pathWithKey = censorFctTakesPath ? [...path] : undefined;
    const values = new Array(keysLength);
    for (var i = 0;i < keysLength; i++) {
      const key = keys[i];
      values[i] = target[key];
      if (censorFctTakesPath) {
        pathWithKey[pathLength] = key;
        target[key] = censor(target[key], pathWithKey);
      } else if (isCensorFct) {
        target[key] = censor(target[key]);
      } else {
        target[key] = censor;
      }
    }
    return { keys, values, target, flat: true };
  }
  function nestedRestore(instructions) {
    for (let i = 0;i < instructions.length; i++) {
      const { target, path, value } = instructions[i];
      let current = target;
      for (let i2 = path.length - 1;i2 > 0; i2--) {
        current = current[path[i2]];
      }
      current[path[0]] = value;
    }
  }
  function nestedRedact(store, o, path, ns, censor, isCensorFct, censorFctTakesPath) {
    const target = get(o, path);
    if (target == null)
      return;
    const keys = Object.keys(target);
    const keysLength = keys.length;
    for (var i = 0;i < keysLength; i++) {
      const key = keys[i];
      specialSet(store, target, key, path, ns, censor, isCensorFct, censorFctTakesPath);
    }
    return store;
  }
  function has(obj, prop) {
    return obj !== undefined && obj !== null ? "hasOwn" in Object ? Object.hasOwn(obj, prop) : Object.prototype.hasOwnProperty.call(obj, prop) : false;
  }
  function specialSet(store, o, k, path, afterPath, censor, isCensorFct, censorFctTakesPath) {
    const afterPathLen = afterPath.length;
    const lastPathIndex = afterPathLen - 1;
    const originalKey = k;
    var i = -1;
    var n;
    var nv;
    var ov;
    var oov = null;
    var wc = null;
    var kIsWc;
    var wcov;
    var consecutive = false;
    var level = 0;
    var depth = 0;
    var redactPathCurrent = tree();
    ov = n = o[k];
    if (typeof n !== "object")
      return;
    while (n != null && ++i < afterPathLen) {
      depth += 1;
      k = afterPath[i];
      oov = ov;
      if (k !== "*" && !wc && !(typeof n === "object" && (k in n))) {
        break;
      }
      if (k === "*") {
        if (wc === "*") {
          consecutive = true;
        }
        wc = k;
        if (i !== lastPathIndex) {
          continue;
        }
      }
      if (wc) {
        const wcKeys = Object.keys(n);
        for (var j = 0;j < wcKeys.length; j++) {
          const wck = wcKeys[j];
          wcov = n[wck];
          kIsWc = k === "*";
          if (consecutive) {
            redactPathCurrent = node(redactPathCurrent, wck, depth);
            level = i;
            ov = iterateNthLevel(wcov, level - 1, k, path, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n, nv, ov, kIsWc, wck, i, lastPathIndex, redactPathCurrent, store, o[originalKey], depth + 1);
          } else {
            if (kIsWc || typeof wcov === "object" && wcov !== null && k in wcov) {
              if (kIsWc) {
                ov = wcov;
              } else {
                ov = wcov[k];
              }
              nv = i !== lastPathIndex ? ov : isCensorFct ? censorFctTakesPath ? censor(ov, [...path, originalKey, ...afterPath]) : censor(ov) : censor;
              if (kIsWc) {
                const rv = restoreInstr(node(redactPathCurrent, wck, depth), ov, o[originalKey]);
                store.push(rv);
                n[wck] = nv;
              } else {
                if (wcov[k] === nv) {
                } else if (nv === undefined && censor !== undefined || has(wcov, k) && nv === ov) {
                  redactPathCurrent = node(redactPathCurrent, wck, depth);
                } else {
                  redactPathCurrent = node(redactPathCurrent, wck, depth);
                  const rv = restoreInstr(node(redactPathCurrent, k, depth + 1), ov, o[originalKey]);
                  store.push(rv);
                  wcov[k] = nv;
                }
              }
            }
          }
        }
        wc = null;
      } else {
        ov = n[k];
        redactPathCurrent = node(redactPathCurrent, k, depth);
        nv = i !== lastPathIndex ? ov : isCensorFct ? censorFctTakesPath ? censor(ov, [...path, originalKey, ...afterPath]) : censor(ov) : censor;
        if (has(n, k) && nv === ov || nv === undefined && censor !== undefined) {
        } else {
          const rv = restoreInstr(redactPathCurrent, ov, o[originalKey]);
          store.push(rv);
          n[k] = nv;
        }
        n = n[k];
      }
      if (typeof n !== "object")
        break;
      if (ov === oov || typeof ov === "undefined") {
      }
    }
  }
  function get(o, p) {
    var i = -1;
    var l = p.length;
    var n = o;
    while (n != null && ++i < l) {
      n = n[p[i]];
    }
    return n;
  }
  function iterateNthLevel(wcov, level, k, path, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n, nv, ov, kIsWc, wck, i, lastPathIndex, redactPathCurrent, store, parent, depth) {
    if (level === 0) {
      if (kIsWc || typeof wcov === "object" && wcov !== null && k in wcov) {
        if (kIsWc) {
          ov = wcov;
        } else {
          ov = wcov[k];
        }
        nv = i !== lastPathIndex ? ov : isCensorFct ? censorFctTakesPath ? censor(ov, [...path, originalKey, ...afterPath]) : censor(ov) : censor;
        if (kIsWc) {
          const rv = restoreInstr(redactPathCurrent, ov, parent);
          store.push(rv);
          n[wck] = nv;
        } else {
          if (wcov[k] === nv) {
          } else if (nv === undefined && censor !== undefined || has(wcov, k) && nv === ov) {
          } else {
            const rv = restoreInstr(node(redactPathCurrent, k, depth + 1), ov, parent);
            store.push(rv);
            wcov[k] = nv;
          }
        }
      }
    }
    for (const key in wcov) {
      if (typeof wcov[key] === "object") {
        redactPathCurrent = node(redactPathCurrent, key, depth);
        iterateNthLevel(wcov[key], level - 1, k, path, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n, nv, ov, kIsWc, wck, i, lastPathIndex, redactPathCurrent, store, parent, depth + 1);
      }
    }
  }
  function tree() {
    return { parent: null, key: null, children: [], depth: 0 };
  }
  function node(parent, key, depth) {
    if (parent.depth === depth) {
      return node(parent.parent, key, depth);
    }
    var child = {
      parent,
      key,
      depth,
      children: []
    };
    parent.children.push(child);
    return child;
  }
  function restoreInstr(node2, value, target) {
    let current = node2;
    const path = [];
    do {
      path.push(current.key);
      current = current.parent;
    } while (current.parent != null);
    return { path, value, target };
  }
});

// node_modules/fast-redact/lib/restorer.js
var require_restorer = __commonJS((exports, module) => {
  var { groupRestore, nestedRestore } = require_modifiers();
  module.exports = restorer;
  function restorer() {
    return function compileRestore() {
      if (this.restore) {
        this.restore.state.secret = this.secret;
        return;
      }
      const { secret, wcLen } = this;
      const paths = Object.keys(secret);
      const resetters = resetTmpl(secret, paths);
      const hasWildcards = wcLen > 0;
      const state = hasWildcards ? { secret, groupRestore, nestedRestore } : { secret };
      this.restore = Function("o", restoreTmpl(resetters, paths, hasWildcards)).bind(state);
      this.restore.state = state;
    };
  }
  function resetTmpl(secret, paths) {
    return paths.map((path) => {
      const { circle, escPath, leadingBracket } = secret[path];
      const delim = leadingBracket ? "" : ".";
      const reset = circle ? `o.${circle} = secret[${escPath}].val` : `o${delim}${path} = secret[${escPath}].val`;
      const clear = `secret[${escPath}].val = undefined`;
      return `
      if (secret[${escPath}].val !== undefined) {
        try { ${reset} } catch (e) {}
        ${clear}
      }
    `;
    }).join("");
  }
  function restoreTmpl(resetters, paths, hasWildcards) {
    const dynamicReset = hasWildcards === true ? `
    const keys = Object.keys(secret)
    const len = keys.length
    for (var i = len - 1; i >= ${paths.length}; i--) {
      const k = keys[i]
      const o = secret[k]
      if (o) {
        if (o.flat === true) this.groupRestore(o)
        else this.nestedRestore(o)
        secret[k] = null
      }
    }
  ` : "";
    return `
    const secret = this.secret
    ${dynamicReset}
    ${resetters}
    return o
  `;
  }
});

// node_modules/fast-redact/lib/state.js
var require_state = __commonJS((exports, module) => {
  module.exports = state;
  function state(o) {
    const {
      secret,
      censor,
      compileRestore,
      serialize,
      groupRedact,
      nestedRedact,
      wildcards,
      wcLen
    } = o;
    const builder = [{ secret, censor, compileRestore }];
    if (serialize !== false)
      builder.push({ serialize });
    if (wcLen > 0)
      builder.push({ groupRedact, nestedRedact, wildcards, wcLen });
    return Object.assign(...builder);
  }
});

// node_modules/fast-redact/index.js
var require_fast_redact = __commonJS((exports, module) => {
  var validator = require_validator();
  var parse = require_parse();
  var redactor = require_redactor();
  var restorer = require_restorer();
  var { groupRedact, nestedRedact } = require_modifiers();
  var state = require_state();
  var rx = require_rx();
  var validate = validator();
  var noop = (o) => o;
  noop.restore = noop;
  var DEFAULT_CENSOR = "[REDACTED]";
  fastRedact.rx = rx;
  fastRedact.validator = validator;
  module.exports = fastRedact;
  function fastRedact(opts = {}) {
    const paths = Array.from(new Set(opts.paths || []));
    const serialize = "serialize" in opts ? opts.serialize === false ? opts.serialize : typeof opts.serialize === "function" ? opts.serialize : JSON.stringify : JSON.stringify;
    const remove = opts.remove;
    if (remove === true && serialize !== JSON.stringify) {
      throw Error("fast-redact – remove option may only be set when serializer is JSON.stringify");
    }
    const censor = remove === true ? undefined : ("censor" in opts) ? opts.censor : DEFAULT_CENSOR;
    const isCensorFct = typeof censor === "function";
    const censorFctTakesPath = isCensorFct && censor.length > 1;
    if (paths.length === 0)
      return serialize || noop;
    validate({ paths, serialize, censor });
    const { wildcards, wcLen, secret } = parse({ paths, censor });
    const compileRestore = restorer();
    const strict = "strict" in opts ? opts.strict : true;
    return redactor({ secret, wcLen, serialize, strict, isCensorFct, censorFctTakesPath }, state({
      secret,
      censor,
      compileRestore,
      serialize,
      groupRedact,
      nestedRedact,
      wildcards,
      wcLen
    }));
  }
});

// node_modules/pino/lib/symbols.js
var require_symbols4 = __commonJS((exports, module) => {
  var setLevelSym = Symbol("pino.setLevel");
  var getLevelSym = Symbol("pino.getLevel");
  var levelValSym = Symbol("pino.levelVal");
  var levelCompSym = Symbol("pino.levelComp");
  var useLevelLabelsSym = Symbol("pino.useLevelLabels");
  var useOnlyCustomLevelsSym = Symbol("pino.useOnlyCustomLevels");
  var mixinSym = Symbol("pino.mixin");
  var lsCacheSym = Symbol("pino.lsCache");
  var chindingsSym = Symbol("pino.chindings");
  var asJsonSym = Symbol("pino.asJson");
  var writeSym = Symbol("pino.write");
  var redactFmtSym = Symbol("pino.redactFmt");
  var timeSym = Symbol("pino.time");
  var timeSliceIndexSym = Symbol("pino.timeSliceIndex");
  var streamSym = Symbol("pino.stream");
  var stringifySym = Symbol("pino.stringify");
  var stringifySafeSym = Symbol("pino.stringifySafe");
  var stringifiersSym = Symbol("pino.stringifiers");
  var endSym = Symbol("pino.end");
  var formatOptsSym = Symbol("pino.formatOpts");
  var messageKeySym = Symbol("pino.messageKey");
  var errorKeySym = Symbol("pino.errorKey");
  var nestedKeySym = Symbol("pino.nestedKey");
  var nestedKeyStrSym = Symbol("pino.nestedKeyStr");
  var mixinMergeStrategySym = Symbol("pino.mixinMergeStrategy");
  var msgPrefixSym = Symbol("pino.msgPrefix");
  var wildcardFirstSym = Symbol("pino.wildcardFirst");
  var serializersSym = Symbol.for("pino.serializers");
  var formattersSym = Symbol.for("pino.formatters");
  var hooksSym = Symbol.for("pino.hooks");
  var needsMetadataGsym = Symbol.for("pino.metadata");
  module.exports = {
    setLevelSym,
    getLevelSym,
    levelValSym,
    levelCompSym,
    useLevelLabelsSym,
    mixinSym,
    lsCacheSym,
    chindingsSym,
    asJsonSym,
    writeSym,
    serializersSym,
    redactFmtSym,
    timeSym,
    timeSliceIndexSym,
    streamSym,
    stringifySym,
    stringifySafeSym,
    stringifiersSym,
    endSym,
    formatOptsSym,
    messageKeySym,
    errorKeySym,
    nestedKeySym,
    wildcardFirstSym,
    needsMetadataGsym,
    useOnlyCustomLevelsSym,
    formattersSym,
    hooksSym,
    nestedKeyStrSym,
    mixinMergeStrategySym,
    msgPrefixSym
  };
});

// node_modules/pino/lib/redaction.js
var require_redaction = __commonJS((exports, module) => {
  var fastRedact = require_fast_redact();
  var { redactFmtSym, wildcardFirstSym } = require_symbols4();
  var { rx, validator } = fastRedact;
  var validate = validator({
    ERR_PATHS_MUST_BE_STRINGS: () => "pino – redacted paths must be strings",
    ERR_INVALID_PATH: (s) => `pino – redact paths array contains an invalid path (${s})`
  });
  var CENSOR = "[Redacted]";
  var strict = false;
  function redaction(opts, serialize) {
    const { paths, censor } = handle(opts);
    const shape = paths.reduce((o, str) => {
      rx.lastIndex = 0;
      const first = rx.exec(str);
      const next = rx.exec(str);
      let ns = first[1] !== undefined ? first[1].replace(/^(?:"|'|`)(.*)(?:"|'|`)$/, "$1") : first[0];
      if (ns === "*") {
        ns = wildcardFirstSym;
      }
      if (next === null) {
        o[ns] = null;
        return o;
      }
      if (o[ns] === null) {
        return o;
      }
      const { index } = next;
      const nextPath = `${str.substr(index, str.length - 1)}`;
      o[ns] = o[ns] || [];
      if (ns !== wildcardFirstSym && o[ns].length === 0) {
        o[ns].push(...o[wildcardFirstSym] || []);
      }
      if (ns === wildcardFirstSym) {
        Object.keys(o).forEach(function(k) {
          if (o[k]) {
            o[k].push(nextPath);
          }
        });
      }
      o[ns].push(nextPath);
      return o;
    }, {});
    const result = {
      [redactFmtSym]: fastRedact({ paths, censor, serialize, strict })
    };
    const topCensor = (...args) => {
      return typeof censor === "function" ? serialize(censor(...args)) : serialize(censor);
    };
    return [...Object.keys(shape), ...Object.getOwnPropertySymbols(shape)].reduce((o, k) => {
      if (shape[k] === null) {
        o[k] = (value) => topCensor(value, [k]);
      } else {
        const wrappedCensor = typeof censor === "function" ? (value, path) => {
          return censor(value, [k, ...path]);
        } : censor;
        o[k] = fastRedact({
          paths: shape[k],
          censor: wrappedCensor,
          serialize,
          strict
        });
      }
      return o;
    }, result);
  }
  function handle(opts) {
    if (Array.isArray(opts)) {
      opts = { paths: opts, censor: CENSOR };
      validate(opts);
      return opts;
    }
    let { paths, censor = CENSOR, remove } = opts;
    if (Array.isArray(paths) === false) {
      throw Error("pino – redact must contain an array of strings");
    }
    if (remove === true)
      censor = undefined;
    validate({ paths, censor });
    return { paths, censor };
  }
  module.exports = redaction;
});

// node_modules/pino/lib/time.js
var require_time = __commonJS((exports, module) => {
  var nullTime = () => "";
  var epochTime = () => `,"time":${Date.now()}`;
  var unixTime = () => `,"time":${Math.round(Date.now() / 1000)}`;
  var isoTime = () => `,"time":"${new Date(Date.now()).toISOString()}"`;
  module.exports = { nullTime, epochTime, unixTime, isoTime };
});

// node_modules/quick-format-unescaped/index.js
var require_quick_format_unescaped = __commonJS((exports, module) => {
  function tryStringify(o) {
    try {
      return JSON.stringify(o);
    } catch (e) {
      return '"[Circular]"';
    }
  }
  module.exports = format;
  function format(f, args, opts) {
    var ss = opts && opts.stringify || tryStringify;
    var offset = 1;
    if (typeof f === "object" && f !== null) {
      var len = args.length + offset;
      if (len === 1)
        return f;
      var objects = new Array(len);
      objects[0] = ss(f);
      for (var index = 1;index < len; index++) {
        objects[index] = ss(args[index]);
      }
      return objects.join(" ");
    }
    if (typeof f !== "string") {
      return f;
    }
    var argLen = args.length;
    if (argLen === 0)
      return f;
    var str = "";
    var a = 1 - offset;
    var lastPos = -1;
    var flen = f && f.length || 0;
    for (var i = 0;i < flen; ) {
      if (f.charCodeAt(i) === 37 && i + 1 < flen) {
        lastPos = lastPos > -1 ? lastPos : 0;
        switch (f.charCodeAt(i + 1)) {
          case 100:
          case 102:
            if (a >= argLen)
              break;
            if (args[a] == null)
              break;
            if (lastPos < i)
              str += f.slice(lastPos, i);
            str += Number(args[a]);
            lastPos = i + 2;
            i++;
            break;
          case 105:
            if (a >= argLen)
              break;
            if (args[a] == null)
              break;
            if (lastPos < i)
              str += f.slice(lastPos, i);
            str += Math.floor(Number(args[a]));
            lastPos = i + 2;
            i++;
            break;
          case 79:
          case 111:
          case 106:
            if (a >= argLen)
              break;
            if (args[a] === undefined)
              break;
            if (lastPos < i)
              str += f.slice(lastPos, i);
            var type = typeof args[a];
            if (type === "string") {
              str += "'" + args[a] + "'";
              lastPos = i + 2;
              i++;
              break;
            }
            if (type === "function") {
              str += args[a].name || "<anonymous>";
              lastPos = i + 2;
              i++;
              break;
            }
            str += ss(args[a]);
            lastPos = i + 2;
            i++;
            break;
          case 115:
            if (a >= argLen)
              break;
            if (lastPos < i)
              str += f.slice(lastPos, i);
            str += String(args[a]);
            lastPos = i + 2;
            i++;
            break;
          case 37:
            if (lastPos < i)
              str += f.slice(lastPos, i);
            str += "%";
            lastPos = i + 2;
            i++;
            a--;
            break;
        }
        ++a;
      }
      ++i;
    }
    if (lastPos === -1)
      return f;
    else if (lastPos < flen) {
      str += f.slice(lastPos);
    }
    return str;
  }
});

// node_modules/atomic-sleep/index.js
var require_atomic_sleep = __commonJS((exports, module) => {
  if (typeof SharedArrayBuffer !== "undefined" && typeof Atomics !== "undefined") {
    let sleep = function(ms) {
      const valid = ms > 0 && ms < Infinity;
      if (valid === false) {
        if (typeof ms !== "number" && typeof ms !== "bigint") {
          throw TypeError("sleep: ms must be a number");
        }
        throw RangeError("sleep: ms must be a number that is greater than 0 but less than Infinity");
      }
      Atomics.wait(nil, 0, 0, Number(ms));
    };
    const nil = new Int32Array(new SharedArrayBuffer(4));
    module.exports = sleep;
  } else {
    let sleep = function(ms) {
      const valid = ms > 0 && ms < Infinity;
      if (valid === false) {
        if (typeof ms !== "number" && typeof ms !== "bigint") {
          throw TypeError("sleep: ms must be a number");
        }
        throw RangeError("sleep: ms must be a number that is greater than 0 but less than Infinity");
      }
      const target = Date.now() + Number(ms);
      while (target > Date.now()) {
      }
    };
    module.exports = sleep;
  }
});

// node_modules/sonic-boom/index.js
var require_sonic_boom = __commonJS((exports, module) => {
  var fs = __require("fs");
  var EventEmitter = __require("events");
  var inherits = __require("util").inherits;
  var path = __require("path");
  var sleep = require_atomic_sleep();
  var assert = __require("assert");
  var BUSY_WRITE_TIMEOUT = 100;
  var kEmptyBuffer = Buffer.allocUnsafe(0);
  var MAX_WRITE = 16 * 1024;
  var kContentModeBuffer = "buffer";
  var kContentModeUtf8 = "utf8";
  var [major, minor] = (process.versions.node || "0.0").split(".").map(Number);
  var kCopyBuffer = major >= 22 && minor >= 7;
  function openFile(file, sonic) {
    sonic._opening = true;
    sonic._writing = true;
    sonic._asyncDrainScheduled = false;
    function fileOpened(err, fd) {
      if (err) {
        sonic._reopening = false;
        sonic._writing = false;
        sonic._opening = false;
        if (sonic.sync) {
          process.nextTick(() => {
            if (sonic.listenerCount("error") > 0) {
              sonic.emit("error", err);
            }
          });
        } else {
          sonic.emit("error", err);
        }
        return;
      }
      const reopening = sonic._reopening;
      sonic.fd = fd;
      sonic.file = file;
      sonic._reopening = false;
      sonic._opening = false;
      sonic._writing = false;
      if (sonic.sync) {
        process.nextTick(() => sonic.emit("ready"));
      } else {
        sonic.emit("ready");
      }
      if (sonic.destroyed) {
        return;
      }
      if (!sonic._writing && sonic._len > sonic.minLength || sonic._flushPending) {
        sonic._actualWrite();
      } else if (reopening) {
        process.nextTick(() => sonic.emit("drain"));
      }
    }
    const flags = sonic.append ? "a" : "w";
    const mode = sonic.mode;
    if (sonic.sync) {
      try {
        if (sonic.mkdir)
          fs.mkdirSync(path.dirname(file), { recursive: true });
        const fd = fs.openSync(file, flags, mode);
        fileOpened(null, fd);
      } catch (err) {
        fileOpened(err);
        throw err;
      }
    } else if (sonic.mkdir) {
      fs.mkdir(path.dirname(file), { recursive: true }, (err) => {
        if (err)
          return fileOpened(err);
        fs.open(file, flags, mode, fileOpened);
      });
    } else {
      fs.open(file, flags, mode, fileOpened);
    }
  }
  function SonicBoom(opts) {
    if (!(this instanceof SonicBoom)) {
      return new SonicBoom(opts);
    }
    let { fd, dest, minLength, maxLength, maxWrite, periodicFlush, sync, append = true, mkdir, retryEAGAIN, fsync, contentMode, mode } = opts || {};
    fd = fd || dest;
    this._len = 0;
    this.fd = -1;
    this._bufs = [];
    this._lens = [];
    this._writing = false;
    this._ending = false;
    this._reopening = false;
    this._asyncDrainScheduled = false;
    this._flushPending = false;
    this._hwm = Math.max(minLength || 0, 16387);
    this.file = null;
    this.destroyed = false;
    this.minLength = minLength || 0;
    this.maxLength = maxLength || 0;
    this.maxWrite = maxWrite || MAX_WRITE;
    this._periodicFlush = periodicFlush || 0;
    this._periodicFlushTimer = undefined;
    this.sync = sync || false;
    this.writable = true;
    this._fsync = fsync || false;
    this.append = append || false;
    this.mode = mode;
    this.retryEAGAIN = retryEAGAIN || (() => true);
    this.mkdir = mkdir || false;
    let fsWriteSync;
    let fsWrite;
    if (contentMode === kContentModeBuffer) {
      this._writingBuf = kEmptyBuffer;
      this.write = writeBuffer;
      this.flush = flushBuffer;
      this.flushSync = flushBufferSync;
      this._actualWrite = actualWriteBuffer;
      fsWriteSync = () => fs.writeSync(this.fd, this._writingBuf);
      fsWrite = () => fs.write(this.fd, this._writingBuf, this.release);
    } else if (contentMode === undefined || contentMode === kContentModeUtf8) {
      this._writingBuf = "";
      this.write = write;
      this.flush = flush;
      this.flushSync = flushSync;
      this._actualWrite = actualWrite;
      fsWriteSync = () => fs.writeSync(this.fd, this._writingBuf, "utf8");
      fsWrite = () => fs.write(this.fd, this._writingBuf, "utf8", this.release);
    } else {
      throw new Error(`SonicBoom supports "${kContentModeUtf8}" and "${kContentModeBuffer}", but passed ${contentMode}`);
    }
    if (typeof fd === "number") {
      this.fd = fd;
      process.nextTick(() => this.emit("ready"));
    } else if (typeof fd === "string") {
      openFile(fd, this);
    } else {
      throw new Error("SonicBoom supports only file descriptors and files");
    }
    if (this.minLength >= this.maxWrite) {
      throw new Error(`minLength should be smaller than maxWrite (${this.maxWrite})`);
    }
    this.release = (err, n) => {
      if (err) {
        if ((err.code === "EAGAIN" || err.code === "EBUSY") && this.retryEAGAIN(err, this._writingBuf.length, this._len - this._writingBuf.length)) {
          if (this.sync) {
            try {
              sleep(BUSY_WRITE_TIMEOUT);
              this.release(undefined, 0);
            } catch (err2) {
              this.release(err2);
            }
          } else {
            setTimeout(fsWrite, BUSY_WRITE_TIMEOUT);
          }
        } else {
          this._writing = false;
          this.emit("error", err);
        }
        return;
      }
      this.emit("write", n);
      const releasedBufObj = releaseWritingBuf(this._writingBuf, this._len, n);
      this._len = releasedBufObj.len;
      this._writingBuf = releasedBufObj.writingBuf;
      if (this._writingBuf.length) {
        if (!this.sync) {
          fsWrite();
          return;
        }
        try {
          do {
            const n2 = fsWriteSync();
            const releasedBufObj2 = releaseWritingBuf(this._writingBuf, this._len, n2);
            this._len = releasedBufObj2.len;
            this._writingBuf = releasedBufObj2.writingBuf;
          } while (this._writingBuf.length);
        } catch (err2) {
          this.release(err2);
          return;
        }
      }
      if (this._fsync) {
        fs.fsyncSync(this.fd);
      }
      const len = this._len;
      if (this._reopening) {
        this._writing = false;
        this._reopening = false;
        this.reopen();
      } else if (len > this.minLength) {
        this._actualWrite();
      } else if (this._ending) {
        if (len > 0) {
          this._actualWrite();
        } else {
          this._writing = false;
          actualClose(this);
        }
      } else {
        this._writing = false;
        if (this.sync) {
          if (!this._asyncDrainScheduled) {
            this._asyncDrainScheduled = true;
            process.nextTick(emitDrain, this);
          }
        } else {
          this.emit("drain");
        }
      }
    };
    this.on("newListener", function(name) {
      if (name === "drain") {
        this._asyncDrainScheduled = false;
      }
    });
    if (this._periodicFlush !== 0) {
      this._periodicFlushTimer = setInterval(() => this.flush(null), this._periodicFlush);
      this._periodicFlushTimer.unref();
    }
  }
  function releaseWritingBuf(writingBuf, len, n) {
    if (typeof writingBuf === "string" && Buffer.byteLength(writingBuf) !== n) {
      n = Buffer.from(writingBuf).subarray(0, n).toString().length;
    }
    len = Math.max(len - n, 0);
    writingBuf = writingBuf.slice(n);
    return { writingBuf, len };
  }
  function emitDrain(sonic) {
    const hasListeners = sonic.listenerCount("drain") > 0;
    if (!hasListeners)
      return;
    sonic._asyncDrainScheduled = false;
    sonic.emit("drain");
  }
  inherits(SonicBoom, EventEmitter);
  function mergeBuf(bufs, len) {
    if (bufs.length === 0) {
      return kEmptyBuffer;
    }
    if (bufs.length === 1) {
      return bufs[0];
    }
    return Buffer.concat(bufs, len);
  }
  function write(data) {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    const len = this._len + data.length;
    const bufs = this._bufs;
    if (this.maxLength && len > this.maxLength) {
      this.emit("drop", data);
      return this._len < this._hwm;
    }
    if (bufs.length === 0 || bufs[bufs.length - 1].length + data.length > this.maxWrite) {
      bufs.push("" + data);
    } else {
      bufs[bufs.length - 1] += data;
    }
    this._len = len;
    if (!this._writing && this._len >= this.minLength) {
      this._actualWrite();
    }
    return this._len < this._hwm;
  }
  function writeBuffer(data) {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    const len = this._len + data.length;
    const bufs = this._bufs;
    const lens = this._lens;
    if (this.maxLength && len > this.maxLength) {
      this.emit("drop", data);
      return this._len < this._hwm;
    }
    if (bufs.length === 0 || lens[lens.length - 1] + data.length > this.maxWrite) {
      bufs.push([data]);
      lens.push(data.length);
    } else {
      bufs[bufs.length - 1].push(data);
      lens[lens.length - 1] += data.length;
    }
    this._len = len;
    if (!this._writing && this._len >= this.minLength) {
      this._actualWrite();
    }
    return this._len < this._hwm;
  }
  function callFlushCallbackOnDrain(cb) {
    this._flushPending = true;
    const onDrain = () => {
      if (!this._fsync) {
        try {
          fs.fsync(this.fd, (err) => {
            this._flushPending = false;
            cb(err);
          });
        } catch (err) {
          cb(err);
        }
      } else {
        this._flushPending = false;
        cb();
      }
      this.off("error", onError);
    };
    const onError = (err) => {
      this._flushPending = false;
      cb(err);
      this.off("drain", onDrain);
    };
    this.once("drain", onDrain);
    this.once("error", onError);
  }
  function flush(cb) {
    if (cb != null && typeof cb !== "function") {
      throw new Error("flush cb must be a function");
    }
    if (this.destroyed) {
      const error = new Error("SonicBoom destroyed");
      if (cb) {
        cb(error);
        return;
      }
      throw error;
    }
    if (this.minLength <= 0) {
      cb?.();
      return;
    }
    if (cb) {
      callFlushCallbackOnDrain.call(this, cb);
    }
    if (this._writing) {
      return;
    }
    if (this._bufs.length === 0) {
      this._bufs.push("");
    }
    this._actualWrite();
  }
  function flushBuffer(cb) {
    if (cb != null && typeof cb !== "function") {
      throw new Error("flush cb must be a function");
    }
    if (this.destroyed) {
      const error = new Error("SonicBoom destroyed");
      if (cb) {
        cb(error);
        return;
      }
      throw error;
    }
    if (this.minLength <= 0) {
      cb?.();
      return;
    }
    if (cb) {
      callFlushCallbackOnDrain.call(this, cb);
    }
    if (this._writing) {
      return;
    }
    if (this._bufs.length === 0) {
      this._bufs.push([]);
      this._lens.push(0);
    }
    this._actualWrite();
  }
  SonicBoom.prototype.reopen = function(file) {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    if (this._opening) {
      this.once("ready", () => {
        this.reopen(file);
      });
      return;
    }
    if (this._ending) {
      return;
    }
    if (!this.file) {
      throw new Error("Unable to reopen a file descriptor, you must pass a file to SonicBoom");
    }
    if (file) {
      this.file = file;
    }
    this._reopening = true;
    if (this._writing) {
      return;
    }
    const fd = this.fd;
    this.once("ready", () => {
      if (fd !== this.fd) {
        fs.close(fd, (err) => {
          if (err) {
            return this.emit("error", err);
          }
        });
      }
    });
    openFile(this.file, this);
  };
  SonicBoom.prototype.end = function() {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    if (this._opening) {
      this.once("ready", () => {
        this.end();
      });
      return;
    }
    if (this._ending) {
      return;
    }
    this._ending = true;
    if (this._writing) {
      return;
    }
    if (this._len > 0 && this.fd >= 0) {
      this._actualWrite();
    } else {
      actualClose(this);
    }
  };
  function flushSync() {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    if (this.fd < 0) {
      throw new Error("sonic boom is not ready yet");
    }
    if (!this._writing && this._writingBuf.length > 0) {
      this._bufs.unshift(this._writingBuf);
      this._writingBuf = "";
    }
    let buf = "";
    while (this._bufs.length || buf) {
      if (buf.length <= 0) {
        buf = this._bufs[0];
      }
      try {
        const n = fs.writeSync(this.fd, buf, "utf8");
        const releasedBufObj = releaseWritingBuf(buf, this._len, n);
        buf = releasedBufObj.writingBuf;
        this._len = releasedBufObj.len;
        if (buf.length <= 0) {
          this._bufs.shift();
        }
      } catch (err) {
        const shouldRetry = err.code === "EAGAIN" || err.code === "EBUSY";
        if (shouldRetry && !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {
          throw err;
        }
        sleep(BUSY_WRITE_TIMEOUT);
      }
    }
    try {
      fs.fsyncSync(this.fd);
    } catch {
    }
  }
  function flushBufferSync() {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    if (this.fd < 0) {
      throw new Error("sonic boom is not ready yet");
    }
    if (!this._writing && this._writingBuf.length > 0) {
      this._bufs.unshift([this._writingBuf]);
      this._writingBuf = kEmptyBuffer;
    }
    let buf = kEmptyBuffer;
    while (this._bufs.length || buf.length) {
      if (buf.length <= 0) {
        buf = mergeBuf(this._bufs[0], this._lens[0]);
      }
      try {
        const n = fs.writeSync(this.fd, buf);
        buf = buf.subarray(n);
        this._len = Math.max(this._len - n, 0);
        if (buf.length <= 0) {
          this._bufs.shift();
          this._lens.shift();
        }
      } catch (err) {
        const shouldRetry = err.code === "EAGAIN" || err.code === "EBUSY";
        if (shouldRetry && !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {
          throw err;
        }
        sleep(BUSY_WRITE_TIMEOUT);
      }
    }
  }
  SonicBoom.prototype.destroy = function() {
    if (this.destroyed) {
      return;
    }
    actualClose(this);
  };
  function actualWrite() {
    const release = this.release;
    this._writing = true;
    this._writingBuf = this._writingBuf || this._bufs.shift() || "";
    if (this.sync) {
      try {
        const written = fs.writeSync(this.fd, this._writingBuf, "utf8");
        release(null, written);
      } catch (err) {
        release(err);
      }
    } else {
      fs.write(this.fd, this._writingBuf, "utf8", release);
    }
  }
  function actualWriteBuffer() {
    const release = this.release;
    this._writing = true;
    this._writingBuf = this._writingBuf.length ? this._writingBuf : mergeBuf(this._bufs.shift(), this._lens.shift());
    if (this.sync) {
      try {
        const written = fs.writeSync(this.fd, this._writingBuf);
        release(null, written);
      } catch (err) {
        release(err);
      }
    } else {
      if (kCopyBuffer) {
        this._writingBuf = Buffer.from(this._writingBuf);
      }
      fs.write(this.fd, this._writingBuf, release);
    }
  }
  function actualClose(sonic) {
    if (sonic.fd === -1) {
      sonic.once("ready", actualClose.bind(null, sonic));
      return;
    }
    if (sonic._periodicFlushTimer !== undefined) {
      clearInterval(sonic._periodicFlushTimer);
    }
    sonic.destroyed = true;
    sonic._bufs = [];
    sonic._lens = [];
    assert(typeof sonic.fd === "number", `sonic.fd must be a number, got ${typeof sonic.fd}`);
    try {
      fs.fsync(sonic.fd, closeWrapped);
    } catch {
    }
    function closeWrapped() {
      if (sonic.fd !== 1 && sonic.fd !== 2) {
        fs.close(sonic.fd, done);
      } else {
        done();
      }
    }
    function done(err) {
      if (err) {
        sonic.emit("error", err);
        return;
      }
      if (sonic._ending && !sonic._writing) {
        sonic.emit("finish");
      }
      sonic.emit("close");
    }
  }
  SonicBoom.SonicBoom = SonicBoom;
  SonicBoom.default = SonicBoom;
  module.exports = SonicBoom;
});

// node_modules/on-exit-leak-free/index.js
var require_on_exit_leak_free = __commonJS((exports, module) => {
  var refs = {
    exit: [],
    beforeExit: []
  };
  var functions = {
    exit: onExit,
    beforeExit: onBeforeExit
  };
  var registry;
  function ensureRegistry() {
    if (registry === undefined) {
      registry = new FinalizationRegistry(clear);
    }
  }
  function install(event) {
    if (refs[event].length > 0) {
      return;
    }
    process.on(event, functions[event]);
  }
  function uninstall(event) {
    if (refs[event].length > 0) {
      return;
    }
    process.removeListener(event, functions[event]);
    if (refs.exit.length === 0 && refs.beforeExit.length === 0) {
      registry = undefined;
    }
  }
  function onExit() {
    callRefs("exit");
  }
  function onBeforeExit() {
    callRefs("beforeExit");
  }
  function callRefs(event) {
    for (const ref of refs[event]) {
      const obj = ref.deref();
      const fn = ref.fn;
      if (obj !== undefined) {
        fn(obj, event);
      }
    }
    refs[event] = [];
  }
  function clear(ref) {
    for (const event of ["exit", "beforeExit"]) {
      const index = refs[event].indexOf(ref);
      refs[event].splice(index, index + 1);
      uninstall(event);
    }
  }
  function _register(event, obj, fn) {
    if (obj === undefined) {
      throw new Error("the object can't be undefined");
    }
    install(event);
    const ref = new WeakRef(obj);
    ref.fn = fn;
    ensureRegistry();
    registry.register(obj, ref);
    refs[event].push(ref);
  }
  function register(obj, fn) {
    _register("exit", obj, fn);
  }
  function registerBeforeExit(obj, fn) {
    _register("beforeExit", obj, fn);
  }
  function unregister(obj) {
    if (registry === undefined) {
      return;
    }
    registry.unregister(obj);
    for (const event of ["exit", "beforeExit"]) {
      refs[event] = refs[event].filter((ref) => {
        const _obj = ref.deref();
        return _obj && _obj !== obj;
      });
      uninstall(event);
    }
  }
  module.exports = {
    register,
    registerBeforeExit,
    unregister
  };
});

// node_modules/thread-stream/package.json
var require_package = __commonJS((exports, module) => {
  module.exports = {
    name: "thread-stream",
    version: "3.1.0",
    description: "A streaming way to send data to a Node.js Worker Thread",
    main: "index.js",
    types: "index.d.ts",
    dependencies: {
      "real-require": "^0.2.0"
    },
    devDependencies: {
      "@types/node": "^20.1.0",
      "@types/tap": "^15.0.0",
      "@yao-pkg/pkg": "^5.11.5",
      desm: "^1.3.0",
      fastbench: "^1.0.1",
      husky: "^9.0.6",
      "pino-elasticsearch": "^8.0.0",
      "sonic-boom": "^4.0.1",
      standard: "^17.0.0",
      tap: "^16.2.0",
      "ts-node": "^10.8.0",
      typescript: "^5.3.2",
      "why-is-node-running": "^2.2.2"
    },
    scripts: {
      build: "tsc --noEmit",
      test: 'standard && npm run build && npm run transpile && tap "test/**/*.test.*js" && tap --ts test/*.test.*ts',
      "test:ci": "standard && npm run transpile && npm run test:ci:js && npm run test:ci:ts",
      "test:ci:js": 'tap --no-check-coverage --timeout=120 --coverage-report=lcovonly "test/**/*.test.*js"',
      "test:ci:ts": 'tap --ts --no-check-coverage --coverage-report=lcovonly "test/**/*.test.*ts"',
      "test:yarn": 'npm run transpile && tap "test/**/*.test.js" --no-check-coverage',
      transpile: "sh ./test/ts/transpile.sh",
      prepare: "husky install"
    },
    standard: {
      ignore: [
        "test/ts/**/*",
        "test/syntax-error.mjs"
      ]
    },
    repository: {
      type: "git",
      url: "git+https://github.com/mcollina/thread-stream.git"
    },
    keywords: [
      "worker",
      "thread",
      "threads",
      "stream"
    ],
    author: "Matteo Collina <hello@matteocollina.com>",
    license: "MIT",
    bugs: {
      url: "https://github.com/mcollina/thread-stream/issues"
    },
    homepage: "https://github.com/mcollina/thread-stream#readme"
  };
});

// node_modules/thread-stream/lib/wait.js
var require_wait = __commonJS((exports, module) => {
  var MAX_TIMEOUT = 1000;
  function wait(state, index, expected, timeout, done) {
    const max = Date.now() + timeout;
    let current = Atomics.load(state, index);
    if (current === expected) {
      done(null, "ok");
      return;
    }
    let prior = current;
    const check = (backoff) => {
      if (Date.now() > max) {
        done(null, "timed-out");
      } else {
        setTimeout(() => {
          prior = current;
          current = Atomics.load(state, index);
          if (current === prior) {
            check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);
          } else {
            if (current === expected)
              done(null, "ok");
            else
              done(null, "not-equal");
          }
        }, backoff);
      }
    };
    check(1);
  }
  function waitDiff(state, index, expected, timeout, done) {
    const max = Date.now() + timeout;
    let current = Atomics.load(state, index);
    if (current !== expected) {
      done(null, "ok");
      return;
    }
    const check = (backoff) => {
      if (Date.now() > max) {
        done(null, "timed-out");
      } else {
        setTimeout(() => {
          current = Atomics.load(state, index);
          if (current !== expected) {
            done(null, "ok");
          } else {
            check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);
          }
        }, backoff);
      }
    };
    check(1);
  }
  module.exports = { wait, waitDiff };
});

// node_modules/thread-stream/lib/indexes.js
var require_indexes = __commonJS((exports, module) => {
  var WRITE_INDEX = 4;
  var READ_INDEX = 8;
  module.exports = {
    WRITE_INDEX,
    READ_INDEX
  };
});

// node_modules/thread-stream/index.js
var require_thread_stream = __commonJS((exports, module) => {
  var __dirname = "/Users/tabaza/Desktop/opencx/eval-mock-servers/node_modules/thread-stream";
  var { version } = require_package();
  var { EventEmitter } = __require("events");
  var { Worker } = __require("worker_threads");
  var { join } = __require("path");
  var { pathToFileURL } = __require("url");
  var { wait } = require_wait();
  var {
    WRITE_INDEX,
    READ_INDEX
  } = require_indexes();
  var buffer = __require("buffer");
  var assert = __require("assert");
  var kImpl = Symbol("kImpl");
  var MAX_STRING = buffer.constants.MAX_STRING_LENGTH;

  class FakeWeakRef {
    constructor(value) {
      this._value = value;
    }
    deref() {
      return this._value;
    }
  }

  class FakeFinalizationRegistry {
    register() {
    }
    unregister() {
    }
  }
  var FinalizationRegistry2 = process.env.NODE_V8_COVERAGE ? FakeFinalizationRegistry : global.FinalizationRegistry || FakeFinalizationRegistry;
  var WeakRef2 = process.env.NODE_V8_COVERAGE ? FakeWeakRef : global.WeakRef || FakeWeakRef;
  var registry = new FinalizationRegistry2((worker) => {
    if (worker.exited) {
      return;
    }
    worker.terminate();
  });
  function createWorker(stream, opts) {
    const { filename, workerData } = opts;
    const bundlerOverrides = "__bundlerPathsOverrides" in globalThis ? globalThis.__bundlerPathsOverrides : {};
    const toExecute = bundlerOverrides["thread-stream-worker"] || join(__dirname, "lib", "worker.js");
    const worker = new Worker(toExecute, {
      ...opts.workerOpts,
      trackUnmanagedFds: false,
      workerData: {
        filename: filename.indexOf("file://") === 0 ? filename : pathToFileURL(filename).href,
        dataBuf: stream[kImpl].dataBuf,
        stateBuf: stream[kImpl].stateBuf,
        workerData: {
          $context: {
            threadStreamVersion: version
          },
          ...workerData
        }
      }
    });
    worker.stream = new FakeWeakRef(stream);
    worker.on("message", onWorkerMessage);
    worker.on("exit", onWorkerExit);
    registry.register(stream, worker);
    return worker;
  }
  function drain(stream) {
    assert(!stream[kImpl].sync);
    if (stream[kImpl].needDrain) {
      stream[kImpl].needDrain = false;
      stream.emit("drain");
    }
  }
  function nextFlush(stream) {
    const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);
    let leftover = stream[kImpl].data.length - writeIndex;
    if (leftover > 0) {
      if (stream[kImpl].buf.length === 0) {
        stream[kImpl].flushing = false;
        if (stream[kImpl].ending) {
          end(stream);
        } else if (stream[kImpl].needDrain) {
          process.nextTick(drain, stream);
        }
        return;
      }
      let toWrite = stream[kImpl].buf.slice(0, leftover);
      let toWriteBytes = Buffer.byteLength(toWrite);
      if (toWriteBytes <= leftover) {
        stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
        write(stream, toWrite, nextFlush.bind(null, stream));
      } else {
        stream.flush(() => {
          if (stream.destroyed) {
            return;
          }
          Atomics.store(stream[kImpl].state, READ_INDEX, 0);
          Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
          while (toWriteBytes > stream[kImpl].data.length) {
            leftover = leftover / 2;
            toWrite = stream[kImpl].buf.slice(0, leftover);
            toWriteBytes = Buffer.byteLength(toWrite);
          }
          stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
          write(stream, toWrite, nextFlush.bind(null, stream));
        });
      }
    } else if (leftover === 0) {
      if (writeIndex === 0 && stream[kImpl].buf.length === 0) {
        return;
      }
      stream.flush(() => {
        Atomics.store(stream[kImpl].state, READ_INDEX, 0);
        Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
        nextFlush(stream);
      });
    } else {
      destroy(stream, new Error("overwritten"));
    }
  }
  function onWorkerMessage(msg) {
    const stream = this.stream.deref();
    if (stream === undefined) {
      this.exited = true;
      this.terminate();
      return;
    }
    switch (msg.code) {
      case "READY":
        this.stream = new WeakRef2(stream);
        stream.flush(() => {
          stream[kImpl].ready = true;
          stream.emit("ready");
        });
        break;
      case "ERROR":
        destroy(stream, msg.err);
        break;
      case "EVENT":
        if (Array.isArray(msg.args)) {
          stream.emit(msg.name, ...msg.args);
        } else {
          stream.emit(msg.name, msg.args);
        }
        break;
      case "WARNING":
        process.emitWarning(msg.err);
        break;
      default:
        destroy(stream, new Error("this should not happen: " + msg.code));
    }
  }
  function onWorkerExit(code) {
    const stream = this.stream.deref();
    if (stream === undefined) {
      return;
    }
    registry.unregister(stream);
    stream.worker.exited = true;
    stream.worker.off("exit", onWorkerExit);
    destroy(stream, code !== 0 ? new Error("the worker thread exited") : null);
  }

  class ThreadStream extends EventEmitter {
    constructor(opts = {}) {
      super();
      if (opts.bufferSize < 4) {
        throw new Error("bufferSize must at least fit a 4-byte utf-8 char");
      }
      this[kImpl] = {};
      this[kImpl].stateBuf = new SharedArrayBuffer(128);
      this[kImpl].state = new Int32Array(this[kImpl].stateBuf);
      this[kImpl].dataBuf = new SharedArrayBuffer(opts.bufferSize || 4 * 1024 * 1024);
      this[kImpl].data = Buffer.from(this[kImpl].dataBuf);
      this[kImpl].sync = opts.sync || false;
      this[kImpl].ending = false;
      this[kImpl].ended = false;
      this[kImpl].needDrain = false;
      this[kImpl].destroyed = false;
      this[kImpl].flushing = false;
      this[kImpl].ready = false;
      this[kImpl].finished = false;
      this[kImpl].errored = null;
      this[kImpl].closed = false;
      this[kImpl].buf = "";
      this.worker = createWorker(this, opts);
      this.on("message", (message, transferList) => {
        this.worker.postMessage(message, transferList);
      });
    }
    write(data) {
      if (this[kImpl].destroyed) {
        error(this, new Error("the worker has exited"));
        return false;
      }
      if (this[kImpl].ending) {
        error(this, new Error("the worker is ending"));
        return false;
      }
      if (this[kImpl].flushing && this[kImpl].buf.length + data.length >= MAX_STRING) {
        try {
          writeSync(this);
          this[kImpl].flushing = true;
        } catch (err) {
          destroy(this, err);
          return false;
        }
      }
      this[kImpl].buf += data;
      if (this[kImpl].sync) {
        try {
          writeSync(this);
          return true;
        } catch (err) {
          destroy(this, err);
          return false;
        }
      }
      if (!this[kImpl].flushing) {
        this[kImpl].flushing = true;
        setImmediate(nextFlush, this);
      }
      this[kImpl].needDrain = this[kImpl].data.length - this[kImpl].buf.length - Atomics.load(this[kImpl].state, WRITE_INDEX) <= 0;
      return !this[kImpl].needDrain;
    }
    end() {
      if (this[kImpl].destroyed) {
        return;
      }
      this[kImpl].ending = true;
      end(this);
    }
    flush(cb) {
      if (this[kImpl].destroyed) {
        if (typeof cb === "function") {
          process.nextTick(cb, new Error("the worker has exited"));
        }
        return;
      }
      const writeIndex = Atomics.load(this[kImpl].state, WRITE_INDEX);
      wait(this[kImpl].state, READ_INDEX, writeIndex, Infinity, (err, res) => {
        if (err) {
          destroy(this, err);
          process.nextTick(cb, err);
          return;
        }
        if (res === "not-equal") {
          this.flush(cb);
          return;
        }
        process.nextTick(cb);
      });
    }
    flushSync() {
      if (this[kImpl].destroyed) {
        return;
      }
      writeSync(this);
      flushSync(this);
    }
    unref() {
      this.worker.unref();
    }
    ref() {
      this.worker.ref();
    }
    get ready() {
      return this[kImpl].ready;
    }
    get destroyed() {
      return this[kImpl].destroyed;
    }
    get closed() {
      return this[kImpl].closed;
    }
    get writable() {
      return !this[kImpl].destroyed && !this[kImpl].ending;
    }
    get writableEnded() {
      return this[kImpl].ending;
    }
    get writableFinished() {
      return this[kImpl].finished;
    }
    get writableNeedDrain() {
      return this[kImpl].needDrain;
    }
    get writableObjectMode() {
      return false;
    }
    get writableErrored() {
      return this[kImpl].errored;
    }
  }
  function error(stream, err) {
    setImmediate(() => {
      stream.emit("error", err);
    });
  }
  function destroy(stream, err) {
    if (stream[kImpl].destroyed) {
      return;
    }
    stream[kImpl].destroyed = true;
    if (err) {
      stream[kImpl].errored = err;
      error(stream, err);
    }
    if (!stream.worker.exited) {
      stream.worker.terminate().catch(() => {
      }).then(() => {
        stream[kImpl].closed = true;
        stream.emit("close");
      });
    } else {
      setImmediate(() => {
        stream[kImpl].closed = true;
        stream.emit("close");
      });
    }
  }
  function write(stream, data, cb) {
    const current = Atomics.load(stream[kImpl].state, WRITE_INDEX);
    const length = Buffer.byteLength(data);
    stream[kImpl].data.write(data, current);
    Atomics.store(stream[kImpl].state, WRITE_INDEX, current + length);
    Atomics.notify(stream[kImpl].state, WRITE_INDEX);
    cb();
    return true;
  }
  function end(stream) {
    if (stream[kImpl].ended || !stream[kImpl].ending || stream[kImpl].flushing) {
      return;
    }
    stream[kImpl].ended = true;
    try {
      stream.flushSync();
      let readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);
      Atomics.store(stream[kImpl].state, WRITE_INDEX, -1);
      Atomics.notify(stream[kImpl].state, WRITE_INDEX);
      let spins = 0;
      while (readIndex !== -1) {
        Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1000);
        readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);
        if (readIndex === -2) {
          destroy(stream, new Error("end() failed"));
          return;
        }
        if (++spins === 10) {
          destroy(stream, new Error("end() took too long (10s)"));
          return;
        }
      }
      process.nextTick(() => {
        stream[kImpl].finished = true;
        stream.emit("finish");
      });
    } catch (err) {
      destroy(stream, err);
    }
  }
  function writeSync(stream) {
    const cb = () => {
      if (stream[kImpl].ending) {
        end(stream);
      } else if (stream[kImpl].needDrain) {
        process.nextTick(drain, stream);
      }
    };
    stream[kImpl].flushing = false;
    while (stream[kImpl].buf.length !== 0) {
      const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);
      let leftover = stream[kImpl].data.length - writeIndex;
      if (leftover === 0) {
        flushSync(stream);
        Atomics.store(stream[kImpl].state, READ_INDEX, 0);
        Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
        continue;
      } else if (leftover < 0) {
        throw new Error("overwritten");
      }
      let toWrite = stream[kImpl].buf.slice(0, leftover);
      let toWriteBytes = Buffer.byteLength(toWrite);
      if (toWriteBytes <= leftover) {
        stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
        write(stream, toWrite, cb);
      } else {
        flushSync(stream);
        Atomics.store(stream[kImpl].state, READ_INDEX, 0);
        Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
        while (toWriteBytes > stream[kImpl].buf.length) {
          leftover = leftover / 2;
          toWrite = stream[kImpl].buf.slice(0, leftover);
          toWriteBytes = Buffer.byteLength(toWrite);
        }
        stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
        write(stream, toWrite, cb);
      }
    }
  }
  function flushSync(stream) {
    if (stream[kImpl].flushing) {
      throw new Error("unable to flush while flushing");
    }
    const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);
    let spins = 0;
    while (true) {
      const readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);
      if (readIndex === -2) {
        throw Error("_flushSync failed");
      }
      if (readIndex !== writeIndex) {
        Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1000);
      } else {
        break;
      }
      if (++spins === 10) {
        throw new Error("_flushSync took too long (10s)");
      }
    }
  }
  module.exports = ThreadStream;
});

// node_modules/pino/lib/transport.js
var require_transport = __commonJS((exports, module) => {
  var __dirname = "/Users/tabaza/Desktop/opencx/eval-mock-servers/node_modules/pino/lib";
  var { createRequire: createRequire2 } = __require("module");
  var getCallers = require_caller();
  var { join, isAbsolute, sep } = __require("node:path");
  var sleep = require_atomic_sleep();
  var onExit = require_on_exit_leak_free();
  var ThreadStream = require_thread_stream();
  function setupOnExit(stream) {
    onExit.register(stream, autoEnd);
    onExit.registerBeforeExit(stream, flush);
    stream.on("close", function() {
      onExit.unregister(stream);
    });
  }
  function buildStream(filename, workerData, workerOpts, sync) {
    const stream = new ThreadStream({
      filename,
      workerData,
      workerOpts,
      sync
    });
    stream.on("ready", onReady);
    stream.on("close", function() {
      process.removeListener("exit", onExit2);
    });
    process.on("exit", onExit2);
    function onReady() {
      process.removeListener("exit", onExit2);
      stream.unref();
      if (workerOpts.autoEnd !== false) {
        setupOnExit(stream);
      }
    }
    function onExit2() {
      if (stream.closed) {
        return;
      }
      stream.flushSync();
      sleep(100);
      stream.end();
    }
    return stream;
  }
  function autoEnd(stream) {
    stream.ref();
    stream.flushSync();
    stream.end();
    stream.once("close", function() {
      stream.unref();
    });
  }
  function flush(stream) {
    stream.flushSync();
  }
  function transport(fullOptions) {
    const { pipeline, targets, levels, dedupe, worker = {}, caller = getCallers(), sync = false } = fullOptions;
    const options = {
      ...fullOptions.options
    };
    const callers = typeof caller === "string" ? [caller] : caller;
    const bundlerOverrides = "__bundlerPathsOverrides" in globalThis ? globalThis.__bundlerPathsOverrides : {};
    let target = fullOptions.target;
    if (target && targets) {
      throw new Error("only one of target or targets can be specified");
    }
    if (targets) {
      target = bundlerOverrides["pino-worker"] || join(__dirname, "worker.js");
      options.targets = targets.filter((dest) => dest.target).map((dest) => {
        return {
          ...dest,
          target: fixTarget(dest.target)
        };
      });
      options.pipelines = targets.filter((dest) => dest.pipeline).map((dest) => {
        return dest.pipeline.map((t) => {
          return {
            ...t,
            level: dest.level,
            target: fixTarget(t.target)
          };
        });
      });
    } else if (pipeline) {
      target = bundlerOverrides["pino-worker"] || join(__dirname, "worker.js");
      options.pipelines = [pipeline.map((dest) => {
        return {
          ...dest,
          target: fixTarget(dest.target)
        };
      })];
    }
    if (levels) {
      options.levels = levels;
    }
    if (dedupe) {
      options.dedupe = dedupe;
    }
    options.pinoWillSendConfig = true;
    return buildStream(fixTarget(target), options, worker, sync);
    function fixTarget(origin) {
      origin = bundlerOverrides[origin] || origin;
      if (isAbsolute(origin) || origin.indexOf("file://") === 0) {
        return origin;
      }
      if (origin === "pino/file") {
        return join(__dirname, "..", "file.js");
      }
      let fixTarget2;
      for (const filePath of callers) {
        try {
          const context = filePath === "node:repl" ? process.cwd() + sep : filePath;
          fixTarget2 = createRequire2(context).resolve(origin);
          break;
        } catch (err) {
          continue;
        }
      }
      if (!fixTarget2) {
        throw new Error(`unable to determine transport target for "${origin}"`);
      }
      return fixTarget2;
    }
  }
  module.exports = transport;
});

// node_modules/pino/lib/tools.js
var require_tools = __commonJS((exports, module) => {
  var format = require_quick_format_unescaped();
  var { mapHttpRequest, mapHttpResponse } = require_pino_std_serializers();
  var SonicBoom = require_sonic_boom();
  var onExit = require_on_exit_leak_free();
  var {
    lsCacheSym,
    chindingsSym,
    writeSym,
    serializersSym,
    formatOptsSym,
    endSym,
    stringifiersSym,
    stringifySym,
    stringifySafeSym,
    wildcardFirstSym,
    nestedKeySym,
    formattersSym,
    messageKeySym,
    errorKeySym,
    nestedKeyStrSym,
    msgPrefixSym
  } = require_symbols4();
  var { isMainThread } = __require("worker_threads");
  var transport = require_transport();
  function noop() {
  }
  function genLog(level, hook) {
    if (!hook)
      return LOG;
    return function hookWrappedLog(...args) {
      hook.call(this, args, LOG, level);
    };
    function LOG(o, ...n) {
      if (typeof o === "object") {
        let msg = o;
        if (o !== null) {
          if (o.method && o.headers && o.socket) {
            o = mapHttpRequest(o);
          } else if (typeof o.setHeader === "function") {
            o = mapHttpResponse(o);
          }
        }
        let formatParams;
        if (msg === null && n.length === 0) {
          formatParams = [null];
        } else {
          msg = n.shift();
          formatParams = n;
        }
        if (typeof this[msgPrefixSym] === "string" && msg !== undefined && msg !== null) {
          msg = this[msgPrefixSym] + msg;
        }
        this[writeSym](o, format(msg, formatParams, this[formatOptsSym]), level);
      } else {
        let msg = o === undefined ? n.shift() : o;
        if (typeof this[msgPrefixSym] === "string" && msg !== undefined && msg !== null) {
          msg = this[msgPrefixSym] + msg;
        }
        this[writeSym](null, format(msg, n, this[formatOptsSym]), level);
      }
    }
  }
  function asString(str) {
    let result = "";
    let last = 0;
    let found = false;
    let point = 255;
    const l = str.length;
    if (l > 100) {
      return JSON.stringify(str);
    }
    for (var i = 0;i < l && point >= 32; i++) {
      point = str.charCodeAt(i);
      if (point === 34 || point === 92) {
        result += str.slice(last, i) + "\\";
        last = i;
        found = true;
      }
    }
    if (!found) {
      result = str;
    } else {
      result += str.slice(last);
    }
    return point < 32 ? JSON.stringify(str) : '"' + result + '"';
  }
  function asJson(obj, msg, num, time) {
    const stringify2 = this[stringifySym];
    const stringifySafe = this[stringifySafeSym];
    const stringifiers = this[stringifiersSym];
    const end = this[endSym];
    const chindings = this[chindingsSym];
    const serializers = this[serializersSym];
    const formatters = this[formattersSym];
    const messageKey = this[messageKeySym];
    const errorKey = this[errorKeySym];
    let data = this[lsCacheSym][num] + time;
    data = data + chindings;
    let value;
    if (formatters.log) {
      obj = formatters.log(obj);
    }
    const wildcardStringifier = stringifiers[wildcardFirstSym];
    let propStr = "";
    for (const key in obj) {
      value = obj[key];
      if (Object.prototype.hasOwnProperty.call(obj, key) && value !== undefined) {
        if (serializers[key]) {
          value = serializers[key](value);
        } else if (key === errorKey && serializers.err) {
          value = serializers.err(value);
        }
        const stringifier = stringifiers[key] || wildcardStringifier;
        switch (typeof value) {
          case "undefined":
          case "function":
            continue;
          case "number":
            if (Number.isFinite(value) === false) {
              value = null;
            }
          case "boolean":
            if (stringifier)
              value = stringifier(value);
            break;
          case "string":
            value = (stringifier || asString)(value);
            break;
          default:
            value = (stringifier || stringify2)(value, stringifySafe);
        }
        if (value === undefined)
          continue;
        const strKey = asString(key);
        propStr += "," + strKey + ":" + value;
      }
    }
    let msgStr = "";
    if (msg !== undefined) {
      value = serializers[messageKey] ? serializers[messageKey](msg) : msg;
      const stringifier = stringifiers[messageKey] || wildcardStringifier;
      switch (typeof value) {
        case "function":
          break;
        case "number":
          if (Number.isFinite(value) === false) {
            value = null;
          }
        case "boolean":
          if (stringifier)
            value = stringifier(value);
          msgStr = ',"' + messageKey + '":' + value;
          break;
        case "string":
          value = (stringifier || asString)(value);
          msgStr = ',"' + messageKey + '":' + value;
          break;
        default:
          value = (stringifier || stringify2)(value, stringifySafe);
          msgStr = ',"' + messageKey + '":' + value;
      }
    }
    if (this[nestedKeySym] && propStr) {
      return data + this[nestedKeyStrSym] + propStr.slice(1) + "}" + msgStr + end;
    } else {
      return data + propStr + msgStr + end;
    }
  }
  function asChindings(instance, bindings) {
    let value;
    let data = instance[chindingsSym];
    const stringify2 = instance[stringifySym];
    const stringifySafe = instance[stringifySafeSym];
    const stringifiers = instance[stringifiersSym];
    const wildcardStringifier = stringifiers[wildcardFirstSym];
    const serializers = instance[serializersSym];
    const formatter = instance[formattersSym].bindings;
    bindings = formatter(bindings);
    for (const key in bindings) {
      value = bindings[key];
      const valid = key !== "level" && key !== "serializers" && key !== "formatters" && key !== "customLevels" && bindings.hasOwnProperty(key) && value !== undefined;
      if (valid === true) {
        value = serializers[key] ? serializers[key](value) : value;
        value = (stringifiers[key] || wildcardStringifier || stringify2)(value, stringifySafe);
        if (value === undefined)
          continue;
        data += ',"' + key + '":' + value;
      }
    }
    return data;
  }
  function hasBeenTampered(stream) {
    return stream.write !== stream.constructor.prototype.write;
  }
  var hasNodeCodeCoverage = process.env.NODE_V8_COVERAGE || process.env.V8_COVERAGE;
  function buildSafeSonicBoom(opts) {
    const stream = new SonicBoom(opts);
    stream.on("error", filterBrokenPipe);
    if (!hasNodeCodeCoverage && !opts.sync && isMainThread) {
      onExit.register(stream, autoEnd);
      stream.on("close", function() {
        onExit.unregister(stream);
      });
    }
    return stream;
    function filterBrokenPipe(err) {
      if (err.code === "EPIPE") {
        stream.write = noop;
        stream.end = noop;
        stream.flushSync = noop;
        stream.destroy = noop;
        return;
      }
      stream.removeListener("error", filterBrokenPipe);
      stream.emit("error", err);
    }
  }
  function autoEnd(stream, eventName) {
    if (stream.destroyed) {
      return;
    }
    if (eventName === "beforeExit") {
      stream.flush();
      stream.on("drain", function() {
        stream.end();
      });
    } else {
      stream.flushSync();
    }
  }
  function createArgsNormalizer(defaultOptions) {
    return function normalizeArgs(instance, caller, opts = {}, stream) {
      if (typeof opts === "string") {
        stream = buildSafeSonicBoom({ dest: opts });
        opts = {};
      } else if (typeof stream === "string") {
        if (opts && opts.transport) {
          throw Error("only one of option.transport or stream can be specified");
        }
        stream = buildSafeSonicBoom({ dest: stream });
      } else if (opts instanceof SonicBoom || opts.writable || opts._writableState) {
        stream = opts;
        opts = {};
      } else if (opts.transport) {
        if (opts.transport instanceof SonicBoom || opts.transport.writable || opts.transport._writableState) {
          throw Error("option.transport do not allow stream, please pass to option directly. e.g. pino(transport)");
        }
        if (opts.transport.targets && opts.transport.targets.length && opts.formatters && typeof opts.formatters.level === "function") {
          throw Error("option.transport.targets do not allow custom level formatters");
        }
        let customLevels;
        if (opts.customLevels) {
          customLevels = opts.useOnlyCustomLevels ? opts.customLevels : Object.assign({}, opts.levels, opts.customLevels);
        }
        stream = transport({ caller, ...opts.transport, levels: customLevels });
      }
      opts = Object.assign({}, defaultOptions, opts);
      opts.serializers = Object.assign({}, defaultOptions.serializers, opts.serializers);
      opts.formatters = Object.assign({}, defaultOptions.formatters, opts.formatters);
      if (opts.prettyPrint) {
        throw new Error("prettyPrint option is no longer supported, see the pino-pretty package (https://github.com/pinojs/pino-pretty)");
      }
      const { enabled, onChild } = opts;
      if (enabled === false)
        opts.level = "silent";
      if (!onChild)
        opts.onChild = noop;
      if (!stream) {
        if (!hasBeenTampered(process.stdout)) {
          stream = buildSafeSonicBoom({ fd: process.stdout.fd || 1 });
        } else {
          stream = process.stdout;
        }
      }
      return { opts, stream };
    };
  }
  function stringify(obj, stringifySafeFn) {
    try {
      return JSON.stringify(obj);
    } catch (_) {
      try {
        const stringify2 = stringifySafeFn || this[stringifySafeSym];
        return stringify2(obj);
      } catch (_2) {
        return '"[unable to serialize, circular reference is too complex to analyze]"';
      }
    }
  }
  function buildFormatters(level, bindings, log) {
    return {
      level,
      bindings,
      log
    };
  }
  function normalizeDestFileDescriptor(destination) {
    const fd = Number(destination);
    if (typeof destination === "string" && Number.isFinite(fd)) {
      return fd;
    }
    if (destination === undefined) {
      return 1;
    }
    return destination;
  }
  module.exports = {
    noop,
    buildSafeSonicBoom,
    asChindings,
    asJson,
    genLog,
    createArgsNormalizer,
    stringify,
    buildFormatters,
    normalizeDestFileDescriptor
  };
});

// node_modules/pino/lib/constants.js
var require_constants2 = __commonJS((exports, module) => {
  var DEFAULT_LEVELS = {
    trace: 10,
    debug: 20,
    info: 30,
    warn: 40,
    error: 50,
    fatal: 60
  };
  var SORTING_ORDER = {
    ASC: "ASC",
    DESC: "DESC"
  };
  module.exports = {
    DEFAULT_LEVELS,
    SORTING_ORDER
  };
});

// node_modules/pino/lib/levels.js
var require_levels = __commonJS((exports, module) => {
  var {
    lsCacheSym,
    levelValSym,
    useOnlyCustomLevelsSym,
    streamSym,
    formattersSym,
    hooksSym,
    levelCompSym
  } = require_symbols4();
  var { noop, genLog } = require_tools();
  var { DEFAULT_LEVELS, SORTING_ORDER } = require_constants2();
  var levelMethods = {
    fatal: (hook) => {
      const logFatal = genLog(DEFAULT_LEVELS.fatal, hook);
      return function(...args) {
        const stream = this[streamSym];
        logFatal.call(this, ...args);
        if (typeof stream.flushSync === "function") {
          try {
            stream.flushSync();
          } catch (e) {
          }
        }
      };
    },
    error: (hook) => genLog(DEFAULT_LEVELS.error, hook),
    warn: (hook) => genLog(DEFAULT_LEVELS.warn, hook),
    info: (hook) => genLog(DEFAULT_LEVELS.info, hook),
    debug: (hook) => genLog(DEFAULT_LEVELS.debug, hook),
    trace: (hook) => genLog(DEFAULT_LEVELS.trace, hook)
  };
  var nums = Object.keys(DEFAULT_LEVELS).reduce((o, k) => {
    o[DEFAULT_LEVELS[k]] = k;
    return o;
  }, {});
  var initialLsCache = Object.keys(nums).reduce((o, k) => {
    o[k] = '{"level":' + Number(k);
    return o;
  }, {});
  function genLsCache(instance) {
    const formatter = instance[formattersSym].level;
    const { labels } = instance.levels;
    const cache = {};
    for (const label in labels) {
      const level = formatter(labels[label], Number(label));
      cache[label] = JSON.stringify(level).slice(0, -1);
    }
    instance[lsCacheSym] = cache;
    return instance;
  }
  function isStandardLevel(level, useOnlyCustomLevels) {
    if (useOnlyCustomLevels) {
      return false;
    }
    switch (level) {
      case "fatal":
      case "error":
      case "warn":
      case "info":
      case "debug":
      case "trace":
        return true;
      default:
        return false;
    }
  }
  function setLevel(level) {
    const { labels, values } = this.levels;
    if (typeof level === "number") {
      if (labels[level] === undefined)
        throw Error("unknown level value" + level);
      level = labels[level];
    }
    if (values[level] === undefined)
      throw Error("unknown level " + level);
    const preLevelVal = this[levelValSym];
    const levelVal = this[levelValSym] = values[level];
    const useOnlyCustomLevelsVal = this[useOnlyCustomLevelsSym];
    const levelComparison = this[levelCompSym];
    const hook = this[hooksSym].logMethod;
    for (const key in values) {
      if (levelComparison(values[key], levelVal) === false) {
        this[key] = noop;
        continue;
      }
      this[key] = isStandardLevel(key, useOnlyCustomLevelsVal) ? levelMethods[key](hook) : genLog(values[key], hook);
    }
    this.emit("level-change", level, levelVal, labels[preLevelVal], preLevelVal, this);
  }
  function getLevel(level) {
    const { levels, levelVal } = this;
    return levels && levels.labels ? levels.labels[levelVal] : "";
  }
  function isLevelEnabled(logLevel) {
    const { values } = this.levels;
    const logLevelVal = values[logLevel];
    return logLevelVal !== undefined && this[levelCompSym](logLevelVal, this[levelValSym]);
  }
  function compareLevel(direction, current, expected) {
    if (direction === SORTING_ORDER.DESC) {
      return current <= expected;
    }
    return current >= expected;
  }
  function genLevelComparison(levelComparison) {
    if (typeof levelComparison === "string") {
      return compareLevel.bind(null, levelComparison);
    }
    return levelComparison;
  }
  function mappings(customLevels = null, useOnlyCustomLevels = false) {
    const customNums = customLevels ? Object.keys(customLevels).reduce((o, k) => {
      o[customLevels[k]] = k;
      return o;
    }, {}) : null;
    const labels = Object.assign(Object.create(Object.prototype, { Infinity: { value: "silent" } }), useOnlyCustomLevels ? null : nums, customNums);
    const values = Object.assign(Object.create(Object.prototype, { silent: { value: Infinity } }), useOnlyCustomLevels ? null : DEFAULT_LEVELS, customLevels);
    return { labels, values };
  }
  function assertDefaultLevelFound(defaultLevel, customLevels, useOnlyCustomLevels) {
    if (typeof defaultLevel === "number") {
      const values = [].concat(Object.keys(customLevels || {}).map((key) => customLevels[key]), useOnlyCustomLevels ? [] : Object.keys(nums).map((level) => +level), Infinity);
      if (!values.includes(defaultLevel)) {
        throw Error(`default level:${defaultLevel} must be included in custom levels`);
      }
      return;
    }
    const labels = Object.assign(Object.create(Object.prototype, { silent: { value: Infinity } }), useOnlyCustomLevels ? null : DEFAULT_LEVELS, customLevels);
    if (!(defaultLevel in labels)) {
      throw Error(`default level:${defaultLevel} must be included in custom levels`);
    }
  }
  function assertNoLevelCollisions(levels, customLevels) {
    const { labels, values } = levels;
    for (const k in customLevels) {
      if (k in values) {
        throw Error("levels cannot be overridden");
      }
      if (customLevels[k] in labels) {
        throw Error("pre-existing level values cannot be used for new levels");
      }
    }
  }
  function assertLevelComparison(levelComparison) {
    if (typeof levelComparison === "function") {
      return;
    }
    if (typeof levelComparison === "string" && Object.values(SORTING_ORDER).includes(levelComparison)) {
      return;
    }
    throw new Error('Levels comparison should be one of "ASC", "DESC" or "function" type');
  }
  module.exports = {
    initialLsCache,
    genLsCache,
    levelMethods,
    getLevel,
    setLevel,
    isLevelEnabled,
    mappings,
    assertNoLevelCollisions,
    assertDefaultLevelFound,
    genLevelComparison,
    assertLevelComparison
  };
});

// node_modules/pino/lib/meta.js
var require_meta = __commonJS((exports, module) => {
  module.exports = { version: "9.6.0" };
});

// node_modules/pino/lib/proto.js
var require_proto = __commonJS((exports, module) => {
  var { EventEmitter } = __require("node:events");
  var {
    lsCacheSym,
    levelValSym,
    setLevelSym,
    getLevelSym,
    chindingsSym,
    parsedChindingsSym,
    mixinSym,
    asJsonSym,
    writeSym,
    mixinMergeStrategySym,
    timeSym,
    timeSliceIndexSym,
    streamSym,
    serializersSym,
    formattersSym,
    errorKeySym,
    messageKeySym,
    useOnlyCustomLevelsSym,
    needsMetadataGsym,
    redactFmtSym,
    stringifySym,
    formatOptsSym,
    stringifiersSym,
    msgPrefixSym,
    hooksSym
  } = require_symbols4();
  var {
    getLevel,
    setLevel,
    isLevelEnabled,
    mappings,
    initialLsCache,
    genLsCache,
    assertNoLevelCollisions
  } = require_levels();
  var {
    asChindings,
    asJson,
    buildFormatters,
    stringify
  } = require_tools();
  var {
    version
  } = require_meta();
  var redaction = require_redaction();
  var constructor = class Pino {
  };
  var prototype = {
    constructor,
    child,
    bindings,
    setBindings,
    flush,
    isLevelEnabled,
    version,
    get level() {
      return this[getLevelSym]();
    },
    set level(lvl) {
      this[setLevelSym](lvl);
    },
    get levelVal() {
      return this[levelValSym];
    },
    set levelVal(n) {
      throw Error("levelVal is read-only");
    },
    [lsCacheSym]: initialLsCache,
    [writeSym]: write,
    [asJsonSym]: asJson,
    [getLevelSym]: getLevel,
    [setLevelSym]: setLevel
  };
  Object.setPrototypeOf(prototype, EventEmitter.prototype);
  module.exports = function() {
    return Object.create(prototype);
  };
  var resetChildingsFormatter = (bindings2) => bindings2;
  function child(bindings2, options) {
    if (!bindings2) {
      throw Error("missing bindings for child Pino");
    }
    options = options || {};
    const serializers = this[serializersSym];
    const formatters = this[formattersSym];
    const instance = Object.create(this);
    if (options.hasOwnProperty("serializers") === true) {
      instance[serializersSym] = Object.create(null);
      for (const k in serializers) {
        instance[serializersSym][k] = serializers[k];
      }
      const parentSymbols = Object.getOwnPropertySymbols(serializers);
      for (var i = 0;i < parentSymbols.length; i++) {
        const ks = parentSymbols[i];
        instance[serializersSym][ks] = serializers[ks];
      }
      for (const bk in options.serializers) {
        instance[serializersSym][bk] = options.serializers[bk];
      }
      const bindingsSymbols = Object.getOwnPropertySymbols(options.serializers);
      for (var bi = 0;bi < bindingsSymbols.length; bi++) {
        const bks = bindingsSymbols[bi];
        instance[serializersSym][bks] = options.serializers[bks];
      }
    } else
      instance[serializersSym] = serializers;
    if (options.hasOwnProperty("formatters")) {
      const { level, bindings: chindings, log } = options.formatters;
      instance[formattersSym] = buildFormatters(level || formatters.level, chindings || resetChildingsFormatter, log || formatters.log);
    } else {
      instance[formattersSym] = buildFormatters(formatters.level, resetChildingsFormatter, formatters.log);
    }
    if (options.hasOwnProperty("customLevels") === true) {
      assertNoLevelCollisions(this.levels, options.customLevels);
      instance.levels = mappings(options.customLevels, instance[useOnlyCustomLevelsSym]);
      genLsCache(instance);
    }
    if (typeof options.redact === "object" && options.redact !== null || Array.isArray(options.redact)) {
      instance.redact = options.redact;
      const stringifiers = redaction(instance.redact, stringify);
      const formatOpts = { stringify: stringifiers[redactFmtSym] };
      instance[stringifySym] = stringify;
      instance[stringifiersSym] = stringifiers;
      instance[formatOptsSym] = formatOpts;
    }
    if (typeof options.msgPrefix === "string") {
      instance[msgPrefixSym] = (this[msgPrefixSym] || "") + options.msgPrefix;
    }
    instance[chindingsSym] = asChindings(instance, bindings2);
    const childLevel = options.level || this.level;
    instance[setLevelSym](childLevel);
    this.onChild(instance);
    return instance;
  }
  function bindings() {
    const chindings = this[chindingsSym];
    const chindingsJson = `{${chindings.substr(1)}}`;
    const bindingsFromJson = JSON.parse(chindingsJson);
    delete bindingsFromJson.pid;
    delete bindingsFromJson.hostname;
    return bindingsFromJson;
  }
  function setBindings(newBindings) {
    const chindings = asChindings(this, newBindings);
    this[chindingsSym] = chindings;
    delete this[parsedChindingsSym];
  }
  function defaultMixinMergeStrategy(mergeObject, mixinObject) {
    return Object.assign(mixinObject, mergeObject);
  }
  function write(_obj, msg, num) {
    const t = this[timeSym]();
    const mixin = this[mixinSym];
    const errorKey = this[errorKeySym];
    const messageKey = this[messageKeySym];
    const mixinMergeStrategy = this[mixinMergeStrategySym] || defaultMixinMergeStrategy;
    let obj;
    const streamWriteHook = this[hooksSym].streamWrite;
    if (_obj === undefined || _obj === null) {
      obj = {};
    } else if (_obj instanceof Error) {
      obj = { [errorKey]: _obj };
      if (msg === undefined) {
        msg = _obj.message;
      }
    } else {
      obj = _obj;
      if (msg === undefined && _obj[messageKey] === undefined && _obj[errorKey]) {
        msg = _obj[errorKey].message;
      }
    }
    if (mixin) {
      obj = mixinMergeStrategy(obj, mixin(obj, num, this));
    }
    const s = this[asJsonSym](obj, msg, num, t);
    const stream = this[streamSym];
    if (stream[needsMetadataGsym] === true) {
      stream.lastLevel = num;
      stream.lastObj = obj;
      stream.lastMsg = msg;
      stream.lastTime = t.slice(this[timeSliceIndexSym]);
      stream.lastLogger = this;
    }
    stream.write(streamWriteHook ? streamWriteHook(s) : s);
  }
  function noop() {
  }
  function flush(cb) {
    if (cb != null && typeof cb !== "function") {
      throw Error("callback must be a function");
    }
    const stream = this[streamSym];
    if (typeof stream.flush === "function") {
      stream.flush(cb || noop);
    } else if (cb)
      cb();
  }
});

// node_modules/safe-stable-stringify/index.js
var require_safe_stable_stringify = __commonJS((exports, module) => {
  var { hasOwnProperty } = Object.prototype;
  var stringify = configure();
  stringify.configure = configure;
  stringify.stringify = stringify;
  stringify.default = stringify;
  exports.stringify = stringify;
  exports.configure = configure;
  module.exports = stringify;
  var strEscapeSequencesRegExp = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]/;
  function strEscape(str) {
    if (str.length < 5000 && !strEscapeSequencesRegExp.test(str)) {
      return `"${str}"`;
    }
    return JSON.stringify(str);
  }
  function sort(array, comparator) {
    if (array.length > 200 || comparator) {
      return array.sort(comparator);
    }
    for (let i = 1;i < array.length; i++) {
      const currentValue = array[i];
      let position = i;
      while (position !== 0 && array[position - 1] > currentValue) {
        array[position] = array[position - 1];
        position--;
      }
      array[position] = currentValue;
    }
    return array;
  }
  var typedArrayPrototypeGetSymbolToStringTag = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Object.getPrototypeOf(new Int8Array)), Symbol.toStringTag).get;
  function isTypedArrayWithEntries(value) {
    return typedArrayPrototypeGetSymbolToStringTag.call(value) !== undefined && value.length !== 0;
  }
  function stringifyTypedArray(array, separator, maximumBreadth) {
    if (array.length < maximumBreadth) {
      maximumBreadth = array.length;
    }
    const whitespace = separator === "," ? "" : " ";
    let res = `"0":${whitespace}${array[0]}`;
    for (let i = 1;i < maximumBreadth; i++) {
      res += `${separator}"${i}":${whitespace}${array[i]}`;
    }
    return res;
  }
  function getCircularValueOption(options) {
    if (hasOwnProperty.call(options, "circularValue")) {
      const circularValue = options.circularValue;
      if (typeof circularValue === "string") {
        return `"${circularValue}"`;
      }
      if (circularValue == null) {
        return circularValue;
      }
      if (circularValue === Error || circularValue === TypeError) {
        return {
          toString() {
            throw new TypeError("Converting circular structure to JSON");
          }
        };
      }
      throw new TypeError('The "circularValue" argument must be of type string or the value null or undefined');
    }
    return '"[Circular]"';
  }
  function getDeterministicOption(options) {
    let value;
    if (hasOwnProperty.call(options, "deterministic")) {
      value = options.deterministic;
      if (typeof value !== "boolean" && typeof value !== "function") {
        throw new TypeError('The "deterministic" argument must be of type boolean or comparator function');
      }
    }
    return value === undefined ? true : value;
  }
  function getBooleanOption(options, key) {
    let value;
    if (hasOwnProperty.call(options, key)) {
      value = options[key];
      if (typeof value !== "boolean") {
        throw new TypeError(`The "${key}" argument must be of type boolean`);
      }
    }
    return value === undefined ? true : value;
  }
  function getPositiveIntegerOption(options, key) {
    let value;
    if (hasOwnProperty.call(options, key)) {
      value = options[key];
      if (typeof value !== "number") {
        throw new TypeError(`The "${key}" argument must be of type number`);
      }
      if (!Number.isInteger(value)) {
        throw new TypeError(`The "${key}" argument must be an integer`);
      }
      if (value < 1) {
        throw new RangeError(`The "${key}" argument must be >= 1`);
      }
    }
    return value === undefined ? Infinity : value;
  }
  function getItemCount(number) {
    if (number === 1) {
      return "1 item";
    }
    return `${number} items`;
  }
  function getUniqueReplacerSet(replacerArray) {
    const replacerSet = new Set;
    for (const value of replacerArray) {
      if (typeof value === "string" || typeof value === "number") {
        replacerSet.add(String(value));
      }
    }
    return replacerSet;
  }
  function getStrictOption(options) {
    if (hasOwnProperty.call(options, "strict")) {
      const value = options.strict;
      if (typeof value !== "boolean") {
        throw new TypeError('The "strict" argument must be of type boolean');
      }
      if (value) {
        return (value2) => {
          let message = `Object can not safely be stringified. Received type ${typeof value2}`;
          if (typeof value2 !== "function")
            message += ` (${value2.toString()})`;
          throw new Error(message);
        };
      }
    }
  }
  function configure(options) {
    options = { ...options };
    const fail = getStrictOption(options);
    if (fail) {
      if (options.bigint === undefined) {
        options.bigint = false;
      }
      if (!("circularValue" in options)) {
        options.circularValue = Error;
      }
    }
    const circularValue = getCircularValueOption(options);
    const bigint = getBooleanOption(options, "bigint");
    const deterministic = getDeterministicOption(options);
    const comparator = typeof deterministic === "function" ? deterministic : undefined;
    const maximumDepth = getPositiveIntegerOption(options, "maximumDepth");
    const maximumBreadth = getPositiveIntegerOption(options, "maximumBreadth");
    function stringifyFnReplacer(key, parent, stack, replacer, spacer, indentation) {
      let value = parent[key];
      if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
        value = value.toJSON(key);
      }
      value = replacer.call(parent, key, value);
      switch (typeof value) {
        case "string":
          return strEscape(value);
        case "object": {
          if (value === null) {
            return "null";
          }
          if (stack.indexOf(value) !== -1) {
            return circularValue;
          }
          let res = "";
          let join = ",";
          const originalIndentation = indentation;
          if (Array.isArray(value)) {
            if (value.length === 0) {
              return "[]";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Array]"';
            }
            stack.push(value);
            if (spacer !== "") {
              indentation += spacer;
              res += `
${indentation}`;
              join = `,
${indentation}`;
            }
            const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
            let i = 0;
            for (;i < maximumValuesToStringify - 1; i++) {
              const tmp2 = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);
              res += tmp2 !== undefined ? tmp2 : "null";
              res += join;
            }
            const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);
            res += tmp !== undefined ? tmp : "null";
            if (value.length - 1 > maximumBreadth) {
              const removedKeys = value.length - maximumBreadth - 1;
              res += `${join}"... ${getItemCount(removedKeys)} not stringified"`;
            }
            if (spacer !== "") {
              res += `
${originalIndentation}`;
            }
            stack.pop();
            return `[${res}]`;
          }
          let keys = Object.keys(value);
          const keyLength = keys.length;
          if (keyLength === 0) {
            return "{}";
          }
          if (maximumDepth < stack.length + 1) {
            return '"[Object]"';
          }
          let whitespace = "";
          let separator = "";
          if (spacer !== "") {
            indentation += spacer;
            join = `,
${indentation}`;
            whitespace = " ";
          }
          const maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
          if (deterministic && !isTypedArrayWithEntries(value)) {
            keys = sort(keys, comparator);
          }
          stack.push(value);
          for (let i = 0;i < maximumPropertiesToStringify; i++) {
            const key2 = keys[i];
            const tmp = stringifyFnReplacer(key2, value, stack, replacer, spacer, indentation);
            if (tmp !== undefined) {
              res += `${separator}${strEscape(key2)}:${whitespace}${tmp}`;
              separator = join;
            }
          }
          if (keyLength > maximumBreadth) {
            const removedKeys = keyLength - maximumBreadth;
            res += `${separator}"...":${whitespace}"${getItemCount(removedKeys)} not stringified"`;
            separator = join;
          }
          if (spacer !== "" && separator.length > 1) {
            res = `
${indentation}${res}
${originalIndentation}`;
          }
          stack.pop();
          return `{${res}}`;
        }
        case "number":
          return isFinite(value) ? String(value) : fail ? fail(value) : "null";
        case "boolean":
          return value === true ? "true" : "false";
        case "undefined":
          return;
        case "bigint":
          if (bigint) {
            return String(value);
          }
        default:
          return fail ? fail(value) : undefined;
      }
    }
    function stringifyArrayReplacer(key, value, stack, replacer, spacer, indentation) {
      if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
        value = value.toJSON(key);
      }
      switch (typeof value) {
        case "string":
          return strEscape(value);
        case "object": {
          if (value === null) {
            return "null";
          }
          if (stack.indexOf(value) !== -1) {
            return circularValue;
          }
          const originalIndentation = indentation;
          let res = "";
          let join = ",";
          if (Array.isArray(value)) {
            if (value.length === 0) {
              return "[]";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Array]"';
            }
            stack.push(value);
            if (spacer !== "") {
              indentation += spacer;
              res += `
${indentation}`;
              join = `,
${indentation}`;
            }
            const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
            let i = 0;
            for (;i < maximumValuesToStringify - 1; i++) {
              const tmp2 = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);
              res += tmp2 !== undefined ? tmp2 : "null";
              res += join;
            }
            const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);
            res += tmp !== undefined ? tmp : "null";
            if (value.length - 1 > maximumBreadth) {
              const removedKeys = value.length - maximumBreadth - 1;
              res += `${join}"... ${getItemCount(removedKeys)} not stringified"`;
            }
            if (spacer !== "") {
              res += `
${originalIndentation}`;
            }
            stack.pop();
            return `[${res}]`;
          }
          stack.push(value);
          let whitespace = "";
          if (spacer !== "") {
            indentation += spacer;
            join = `,
${indentation}`;
            whitespace = " ";
          }
          let separator = "";
          for (const key2 of replacer) {
            const tmp = stringifyArrayReplacer(key2, value[key2], stack, replacer, spacer, indentation);
            if (tmp !== undefined) {
              res += `${separator}${strEscape(key2)}:${whitespace}${tmp}`;
              separator = join;
            }
          }
          if (spacer !== "" && separator.length > 1) {
            res = `
${indentation}${res}
${originalIndentation}`;
          }
          stack.pop();
          return `{${res}}`;
        }
        case "number":
          return isFinite(value) ? String(value) : fail ? fail(value) : "null";
        case "boolean":
          return value === true ? "true" : "false";
        case "undefined":
          return;
        case "bigint":
          if (bigint) {
            return String(value);
          }
        default:
          return fail ? fail(value) : undefined;
      }
    }
    function stringifyIndent(key, value, stack, spacer, indentation) {
      switch (typeof value) {
        case "string":
          return strEscape(value);
        case "object": {
          if (value === null) {
            return "null";
          }
          if (typeof value.toJSON === "function") {
            value = value.toJSON(key);
            if (typeof value !== "object") {
              return stringifyIndent(key, value, stack, spacer, indentation);
            }
            if (value === null) {
              return "null";
            }
          }
          if (stack.indexOf(value) !== -1) {
            return circularValue;
          }
          const originalIndentation = indentation;
          if (Array.isArray(value)) {
            if (value.length === 0) {
              return "[]";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Array]"';
            }
            stack.push(value);
            indentation += spacer;
            let res2 = `
${indentation}`;
            const join2 = `,
${indentation}`;
            const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
            let i = 0;
            for (;i < maximumValuesToStringify - 1; i++) {
              const tmp2 = stringifyIndent(String(i), value[i], stack, spacer, indentation);
              res2 += tmp2 !== undefined ? tmp2 : "null";
              res2 += join2;
            }
            const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation);
            res2 += tmp !== undefined ? tmp : "null";
            if (value.length - 1 > maximumBreadth) {
              const removedKeys = value.length - maximumBreadth - 1;
              res2 += `${join2}"... ${getItemCount(removedKeys)} not stringified"`;
            }
            res2 += `
${originalIndentation}`;
            stack.pop();
            return `[${res2}]`;
          }
          let keys = Object.keys(value);
          const keyLength = keys.length;
          if (keyLength === 0) {
            return "{}";
          }
          if (maximumDepth < stack.length + 1) {
            return '"[Object]"';
          }
          indentation += spacer;
          const join = `,
${indentation}`;
          let res = "";
          let separator = "";
          let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
          if (isTypedArrayWithEntries(value)) {
            res += stringifyTypedArray(value, join, maximumBreadth);
            keys = keys.slice(value.length);
            maximumPropertiesToStringify -= value.length;
            separator = join;
          }
          if (deterministic) {
            keys = sort(keys, comparator);
          }
          stack.push(value);
          for (let i = 0;i < maximumPropertiesToStringify; i++) {
            const key2 = keys[i];
            const tmp = stringifyIndent(key2, value[key2], stack, spacer, indentation);
            if (tmp !== undefined) {
              res += `${separator}${strEscape(key2)}: ${tmp}`;
              separator = join;
            }
          }
          if (keyLength > maximumBreadth) {
            const removedKeys = keyLength - maximumBreadth;
            res += `${separator}"...": "${getItemCount(removedKeys)} not stringified"`;
            separator = join;
          }
          if (separator !== "") {
            res = `
${indentation}${res}
${originalIndentation}`;
          }
          stack.pop();
          return `{${res}}`;
        }
        case "number":
          return isFinite(value) ? String(value) : fail ? fail(value) : "null";
        case "boolean":
          return value === true ? "true" : "false";
        case "undefined":
          return;
        case "bigint":
          if (bigint) {
            return String(value);
          }
        default:
          return fail ? fail(value) : undefined;
      }
    }
    function stringifySimple(key, value, stack) {
      switch (typeof value) {
        case "string":
          return strEscape(value);
        case "object": {
          if (value === null) {
            return "null";
          }
          if (typeof value.toJSON === "function") {
            value = value.toJSON(key);
            if (typeof value !== "object") {
              return stringifySimple(key, value, stack);
            }
            if (value === null) {
              return "null";
            }
          }
          if (stack.indexOf(value) !== -1) {
            return circularValue;
          }
          let res = "";
          const hasLength = value.length !== undefined;
          if (hasLength && Array.isArray(value)) {
            if (value.length === 0) {
              return "[]";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Array]"';
            }
            stack.push(value);
            const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
            let i = 0;
            for (;i < maximumValuesToStringify - 1; i++) {
              const tmp2 = stringifySimple(String(i), value[i], stack);
              res += tmp2 !== undefined ? tmp2 : "null";
              res += ",";
            }
            const tmp = stringifySimple(String(i), value[i], stack);
            res += tmp !== undefined ? tmp : "null";
            if (value.length - 1 > maximumBreadth) {
              const removedKeys = value.length - maximumBreadth - 1;
              res += `,"... ${getItemCount(removedKeys)} not stringified"`;
            }
            stack.pop();
            return `[${res}]`;
          }
          let keys = Object.keys(value);
          const keyLength = keys.length;
          if (keyLength === 0) {
            return "{}";
          }
          if (maximumDepth < stack.length + 1) {
            return '"[Object]"';
          }
          let separator = "";
          let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
          if (hasLength && isTypedArrayWithEntries(value)) {
            res += stringifyTypedArray(value, ",", maximumBreadth);
            keys = keys.slice(value.length);
            maximumPropertiesToStringify -= value.length;
            separator = ",";
          }
          if (deterministic) {
            keys = sort(keys, comparator);
          }
          stack.push(value);
          for (let i = 0;i < maximumPropertiesToStringify; i++) {
            const key2 = keys[i];
            const tmp = stringifySimple(key2, value[key2], stack);
            if (tmp !== undefined) {
              res += `${separator}${strEscape(key2)}:${tmp}`;
              separator = ",";
            }
          }
          if (keyLength > maximumBreadth) {
            const removedKeys = keyLength - maximumBreadth;
            res += `${separator}"...":"${getItemCount(removedKeys)} not stringified"`;
          }
          stack.pop();
          return `{${res}}`;
        }
        case "number":
          return isFinite(value) ? String(value) : fail ? fail(value) : "null";
        case "boolean":
          return value === true ? "true" : "false";
        case "undefined":
          return;
        case "bigint":
          if (bigint) {
            return String(value);
          }
        default:
          return fail ? fail(value) : undefined;
      }
    }
    function stringify2(value, replacer, space) {
      if (arguments.length > 1) {
        let spacer = "";
        if (typeof space === "number") {
          spacer = " ".repeat(Math.min(space, 10));
        } else if (typeof space === "string") {
          spacer = space.slice(0, 10);
        }
        if (replacer != null) {
          if (typeof replacer === "function") {
            return stringifyFnReplacer("", { "": value }, [], replacer, spacer, "");
          }
          if (Array.isArray(replacer)) {
            return stringifyArrayReplacer("", value, [], getUniqueReplacerSet(replacer), spacer, "");
          }
        }
        if (spacer.length !== 0) {
          return stringifyIndent("", value, [], spacer, "");
        }
      }
      return stringifySimple("", value, []);
    }
    return stringify2;
  }
});

// node_modules/pino/lib/multistream.js
var require_multistream = __commonJS((exports, module) => {
  var metadata = Symbol.for("pino.metadata");
  var { DEFAULT_LEVELS } = require_constants2();
  var DEFAULT_INFO_LEVEL = DEFAULT_LEVELS.info;
  function multistream(streamsArray, opts) {
    let counter = 0;
    streamsArray = streamsArray || [];
    opts = opts || { dedupe: false };
    const streamLevels = Object.create(DEFAULT_LEVELS);
    streamLevels.silent = Infinity;
    if (opts.levels && typeof opts.levels === "object") {
      Object.keys(opts.levels).forEach((i) => {
        streamLevels[i] = opts.levels[i];
      });
    }
    const res = {
      write,
      add,
      emit,
      flushSync,
      end,
      minLevel: 0,
      streams: [],
      clone,
      [metadata]: true,
      streamLevels
    };
    if (Array.isArray(streamsArray)) {
      streamsArray.forEach(add, res);
    } else {
      add.call(res, streamsArray);
    }
    streamsArray = null;
    return res;
    function write(data) {
      let dest;
      const level = this.lastLevel;
      const { streams } = this;
      let recordedLevel = 0;
      let stream;
      for (let i = initLoopVar(streams.length, opts.dedupe);checkLoopVar(i, streams.length, opts.dedupe); i = adjustLoopVar(i, opts.dedupe)) {
        dest = streams[i];
        if (dest.level <= level) {
          if (recordedLevel !== 0 && recordedLevel !== dest.level) {
            break;
          }
          stream = dest.stream;
          if (stream[metadata]) {
            const { lastTime, lastMsg, lastObj, lastLogger } = this;
            stream.lastLevel = level;
            stream.lastTime = lastTime;
            stream.lastMsg = lastMsg;
            stream.lastObj = lastObj;
            stream.lastLogger = lastLogger;
          }
          stream.write(data);
          if (opts.dedupe) {
            recordedLevel = dest.level;
          }
        } else if (!opts.dedupe) {
          break;
        }
      }
    }
    function emit(...args) {
      for (const { stream } of this.streams) {
        if (typeof stream.emit === "function") {
          stream.emit(...args);
        }
      }
    }
    function flushSync() {
      for (const { stream } of this.streams) {
        if (typeof stream.flushSync === "function") {
          stream.flushSync();
        }
      }
    }
    function add(dest) {
      if (!dest) {
        return res;
      }
      const isStream = typeof dest.write === "function" || dest.stream;
      const stream_ = dest.write ? dest : dest.stream;
      if (!isStream) {
        throw Error("stream object needs to implement either StreamEntry or DestinationStream interface");
      }
      const { streams, streamLevels: streamLevels2 } = this;
      let level;
      if (typeof dest.levelVal === "number") {
        level = dest.levelVal;
      } else if (typeof dest.level === "string") {
        level = streamLevels2[dest.level];
      } else if (typeof dest.level === "number") {
        level = dest.level;
      } else {
        level = DEFAULT_INFO_LEVEL;
      }
      const dest_ = {
        stream: stream_,
        level,
        levelVal: undefined,
        id: counter++
      };
      streams.unshift(dest_);
      streams.sort(compareByLevel);
      this.minLevel = streams[0].level;
      return res;
    }
    function end() {
      for (const { stream } of this.streams) {
        if (typeof stream.flushSync === "function") {
          stream.flushSync();
        }
        stream.end();
      }
    }
    function clone(level) {
      const streams = new Array(this.streams.length);
      for (let i = 0;i < streams.length; i++) {
        streams[i] = {
          level,
          stream: this.streams[i].stream
        };
      }
      return {
        write,
        add,
        minLevel: level,
        streams,
        clone,
        emit,
        flushSync,
        [metadata]: true
      };
    }
  }
  function compareByLevel(a, b) {
    return a.level - b.level;
  }
  function initLoopVar(length, dedupe) {
    return dedupe ? length - 1 : 0;
  }
  function adjustLoopVar(i, dedupe) {
    return dedupe ? i - 1 : i + 1;
  }
  function checkLoopVar(i, length, dedupe) {
    return dedupe ? i >= 0 : i < length;
  }
  module.exports = multistream;
});

// node_modules/pino/pino.js
var require_pino = __commonJS((exports, module) => {
  var os = __require("node:os");
  var stdSerializers = require_pino_std_serializers();
  var caller = require_caller();
  var redaction = require_redaction();
  var time = require_time();
  var proto = require_proto();
  var symbols = require_symbols4();
  var { configure } = require_safe_stable_stringify();
  var { assertDefaultLevelFound, mappings, genLsCache, genLevelComparison, assertLevelComparison } = require_levels();
  var { DEFAULT_LEVELS, SORTING_ORDER } = require_constants2();
  var {
    createArgsNormalizer,
    asChindings,
    buildSafeSonicBoom,
    buildFormatters,
    stringify,
    normalizeDestFileDescriptor,
    noop
  } = require_tools();
  var { version } = require_meta();
  var {
    chindingsSym,
    redactFmtSym,
    serializersSym,
    timeSym,
    timeSliceIndexSym,
    streamSym,
    stringifySym,
    stringifySafeSym,
    stringifiersSym,
    setLevelSym,
    endSym,
    formatOptsSym,
    messageKeySym,
    errorKeySym,
    nestedKeySym,
    mixinSym,
    levelCompSym,
    useOnlyCustomLevelsSym,
    formattersSym,
    hooksSym,
    nestedKeyStrSym,
    mixinMergeStrategySym,
    msgPrefixSym
  } = symbols;
  var { epochTime, nullTime } = time;
  var { pid } = process;
  var hostname = os.hostname();
  var defaultErrorSerializer = stdSerializers.err;
  var defaultOptions = {
    level: "info",
    levelComparison: SORTING_ORDER.ASC,
    levels: DEFAULT_LEVELS,
    messageKey: "msg",
    errorKey: "err",
    nestedKey: null,
    enabled: true,
    base: { pid, hostname },
    serializers: Object.assign(Object.create(null), {
      err: defaultErrorSerializer
    }),
    formatters: Object.assign(Object.create(null), {
      bindings(bindings) {
        return bindings;
      },
      level(label, number) {
        return { level: number };
      }
    }),
    hooks: {
      logMethod: undefined,
      streamWrite: undefined
    },
    timestamp: epochTime,
    name: undefined,
    redact: null,
    customLevels: null,
    useOnlyCustomLevels: false,
    depthLimit: 5,
    edgeLimit: 100
  };
  var normalize = createArgsNormalizer(defaultOptions);
  var serializers = Object.assign(Object.create(null), stdSerializers);
  function pino(...args) {
    const instance = {};
    const { opts, stream } = normalize(instance, caller(), ...args);
    if (opts.level && typeof opts.level === "string" && DEFAULT_LEVELS[opts.level.toLowerCase()] !== undefined)
      opts.level = opts.level.toLowerCase();
    const {
      redact,
      crlf,
      serializers: serializers2,
      timestamp,
      messageKey,
      errorKey,
      nestedKey,
      base,
      name,
      level,
      customLevels,
      levelComparison,
      mixin,
      mixinMergeStrategy,
      useOnlyCustomLevels,
      formatters,
      hooks,
      depthLimit,
      edgeLimit,
      onChild,
      msgPrefix
    } = opts;
    const stringifySafe = configure({
      maximumDepth: depthLimit,
      maximumBreadth: edgeLimit
    });
    const allFormatters = buildFormatters(formatters.level, formatters.bindings, formatters.log);
    const stringifyFn = stringify.bind({
      [stringifySafeSym]: stringifySafe
    });
    const stringifiers = redact ? redaction(redact, stringifyFn) : {};
    const formatOpts = redact ? { stringify: stringifiers[redactFmtSym] } : { stringify: stringifyFn };
    const end = "}" + (crlf ? `\r
` : `
`);
    const coreChindings = asChindings.bind(null, {
      [chindingsSym]: "",
      [serializersSym]: serializers2,
      [stringifiersSym]: stringifiers,
      [stringifySym]: stringify,
      [stringifySafeSym]: stringifySafe,
      [formattersSym]: allFormatters
    });
    let chindings = "";
    if (base !== null) {
      if (name === undefined) {
        chindings = coreChindings(base);
      } else {
        chindings = coreChindings(Object.assign({}, base, { name }));
      }
    }
    const time2 = timestamp instanceof Function ? timestamp : timestamp ? epochTime : nullTime;
    const timeSliceIndex = time2().indexOf(":") + 1;
    if (useOnlyCustomLevels && !customLevels)
      throw Error("customLevels is required if useOnlyCustomLevels is set true");
    if (mixin && typeof mixin !== "function")
      throw Error(`Unknown mixin type "${typeof mixin}" - expected "function"`);
    if (msgPrefix && typeof msgPrefix !== "string")
      throw Error(`Unknown msgPrefix type "${typeof msgPrefix}" - expected "string"`);
    assertDefaultLevelFound(level, customLevels, useOnlyCustomLevels);
    const levels = mappings(customLevels, useOnlyCustomLevels);
    if (typeof stream.emit === "function") {
      stream.emit("message", { code: "PINO_CONFIG", config: { levels, messageKey, errorKey } });
    }
    assertLevelComparison(levelComparison);
    const levelCompFunc = genLevelComparison(levelComparison);
    Object.assign(instance, {
      levels,
      [levelCompSym]: levelCompFunc,
      [useOnlyCustomLevelsSym]: useOnlyCustomLevels,
      [streamSym]: stream,
      [timeSym]: time2,
      [timeSliceIndexSym]: timeSliceIndex,
      [stringifySym]: stringify,
      [stringifySafeSym]: stringifySafe,
      [stringifiersSym]: stringifiers,
      [endSym]: end,
      [formatOptsSym]: formatOpts,
      [messageKeySym]: messageKey,
      [errorKeySym]: errorKey,
      [nestedKeySym]: nestedKey,
      [nestedKeyStrSym]: nestedKey ? `,${JSON.stringify(nestedKey)}:{` : "",
      [serializersSym]: serializers2,
      [mixinSym]: mixin,
      [mixinMergeStrategySym]: mixinMergeStrategy,
      [chindingsSym]: chindings,
      [formattersSym]: allFormatters,
      [hooksSym]: hooks,
      silent: noop,
      onChild,
      [msgPrefixSym]: msgPrefix
    });
    Object.setPrototypeOf(instance, proto());
    genLsCache(instance);
    instance[setLevelSym](level);
    return instance;
  }
  module.exports = pino;
  module.exports.destination = (dest = process.stdout.fd) => {
    if (typeof dest === "object") {
      dest.dest = normalizeDestFileDescriptor(dest.dest || process.stdout.fd);
      return buildSafeSonicBoom(dest);
    } else {
      return buildSafeSonicBoom({ dest: normalizeDestFileDescriptor(dest), minLength: 0 });
    }
  };
  module.exports.transport = require_transport();
  module.exports.multistream = require_multistream();
  module.exports.levels = mappings();
  module.exports.stdSerializers = serializers;
  module.exports.stdTimeFunctions = Object.assign({}, time);
  module.exports.symbols = symbols;
  module.exports.version = version;
  module.exports.default = pino;
  module.exports.pino = pino;
});

// node_modules/fastify/lib/logger-pino.js
var require_logger_pino = __commonJS((exports, module) => {
  var pino = require_pino();
  var { serializersSym } = pino.symbols;
  var {
    FST_ERR_LOG_INVALID_DESTINATION
  } = require_errors4();
  function createPinoLogger(opts) {
    if (opts.stream && opts.file) {
      throw new FST_ERR_LOG_INVALID_DESTINATION;
    } else if (opts.file) {
      opts.stream = pino.destination(opts.file);
      delete opts.file;
    }
    const prevLogger = opts.logger;
    const prevGenReqId = opts.genReqId;
    let logger = null;
    if (prevLogger) {
      opts.logger = undefined;
      opts.genReqId = undefined;
      if (prevLogger[serializersSym]) {
        opts.serializers = Object.assign({}, opts.serializers, prevLogger[serializersSym]);
      }
      logger = prevLogger.child({}, opts);
      opts.logger = prevLogger;
      opts.genReqId = prevGenReqId;
    } else {
      logger = pino(opts, opts.stream);
    }
    return logger;
  }
  var serializers = {
    req: function asReqValue(req) {
      return {
        method: req.method,
        url: req.url,
        version: req.headers && req.headers["accept-version"],
        host: req.host,
        remoteAddress: req.ip,
        remotePort: req.socket ? req.socket.remotePort : undefined
      };
    },
    err: pino.stdSerializers.err,
    res: function asResValue(reply) {
      return {
        statusCode: reply.statusCode
      };
    }
  };
  module.exports = {
    serializers,
    createPinoLogger
  };
});

// node_modules/fastify/lib/logger-factory.js
var require_logger_factory = __commonJS((exports, module) => {
  var {
    FST_ERR_LOG_LOGGER_AND_LOGGER_INSTANCE_PROVIDED,
    FST_ERR_LOG_INVALID_LOGGER_CONFIG,
    FST_ERR_LOG_INVALID_LOGGER_INSTANCE,
    FST_ERR_LOG_INVALID_LOGGER
  } = require_errors4();
  function createChildLogger(context, logger, req, reqId, loggerOpts) {
    const loggerBindings = {
      [context.requestIdLogLabel]: reqId
    };
    const child = context.childLoggerFactory.call(context.server, logger, loggerBindings, loggerOpts || {}, req);
    if (context.childLoggerFactory !== defaultChildLoggerFactory) {
      validateLogger(child, true);
    }
    return child;
  }
  function defaultChildLoggerFactory(logger, bindings, opts) {
    return logger.child(bindings, opts);
  }
  function validateLogger(logger, strict) {
    const methods = ["info", "error", "debug", "fatal", "warn", "trace", "child"];
    const missingMethods = logger ? methods.filter((method) => !logger[method] || typeof logger[method] !== "function") : methods;
    if (!missingMethods.length) {
      return true;
    } else if (missingMethods.length === methods.length && !strict) {
      return false;
    } else {
      throw FST_ERR_LOG_INVALID_LOGGER(missingMethods.join(","));
    }
  }
  function createLogger(options) {
    if (options.logger && options.loggerInstance) {
      throw new FST_ERR_LOG_LOGGER_AND_LOGGER_INSTANCE_PROVIDED;
    }
    if (!options.loggerInstance && !options.logger) {
      const nullLogger = require_abstract_logging();
      const logger2 = nullLogger;
      logger2.child = () => logger2;
      return { logger: logger2, hasLogger: false };
    }
    const { createPinoLogger, serializers } = require_logger_pino();
    if (validateLogger(options.loggerInstance)) {
      const logger2 = createPinoLogger({
        logger: options.loggerInstance,
        serializers: Object.assign({}, serializers, options.loggerInstance.serializers)
      });
      return { logger: logger2, hasLogger: true };
    }
    if (validateLogger(options.logger)) {
      throw FST_ERR_LOG_INVALID_LOGGER_CONFIG();
    }
    if (options.loggerInstance) {
      throw FST_ERR_LOG_INVALID_LOGGER_INSTANCE();
    }
    const localLoggerOptions = {};
    if (Object.prototype.toString.call(options.logger) === "[object Object]") {
      Reflect.ownKeys(options.logger).forEach((prop) => {
        Object.defineProperty(localLoggerOptions, prop, {
          value: options.logger[prop],
          writable: true,
          enumerable: true,
          configurable: true
        });
      });
    }
    localLoggerOptions.level = localLoggerOptions.level || "info";
    localLoggerOptions.serializers = Object.assign({}, serializers, localLoggerOptions.serializers);
    options.logger = localLoggerOptions;
    const logger = createPinoLogger(options.logger);
    return { logger, hasLogger: true };
  }
  function now() {
    const ts = process.hrtime();
    return ts[0] * 1000 + ts[1] / 1e6;
  }
  module.exports = {
    createChildLogger,
    defaultChildLoggerFactory,
    createLogger,
    validateLogger,
    now
  };
});

// node_modules/fastify/lib/schemas.js
var require_schemas = __commonJS((exports, module) => {
  var fastClone = require_rfdc()({ circles: false, proto: true });
  var { kSchemaVisited, kSchemaResponse } = require_symbols3();
  var kFluentSchema = Symbol.for("fluent-schema-object");
  var {
    FST_ERR_SCH_MISSING_ID,
    FST_ERR_SCH_ALREADY_PRESENT,
    FST_ERR_SCH_DUPLICATE,
    FST_ERR_SCH_CONTENT_MISSING_SCHEMA
  } = require_errors4();
  var SCHEMAS_SOURCE = ["params", "body", "querystring", "query", "headers"];
  function Schemas(initStore) {
    this.store = initStore || {};
  }
  Schemas.prototype.add = function(inputSchema) {
    const schema = fastClone(inputSchema.isFluentSchema || inputSchema.isFluentJSONSchema || inputSchema[kFluentSchema] ? inputSchema.valueOf() : inputSchema);
    const id = schema.$id;
    if (!id) {
      throw new FST_ERR_SCH_MISSING_ID;
    }
    if (this.store[id]) {
      throw new FST_ERR_SCH_ALREADY_PRESENT(id);
    }
    this.store[id] = schema;
  };
  Schemas.prototype.getSchemas = function() {
    return Object.assign({}, this.store);
  };
  Schemas.prototype.getSchema = function(schemaId) {
    return this.store[schemaId];
  };
  function isCustomSchemaPrototype(schema) {
    return typeof schema === "object" && Object.getPrototypeOf(schema) !== Object.prototype;
  }
  function normalizeSchema(routeSchemas, serverOptions) {
    if (routeSchemas[kSchemaVisited]) {
      return routeSchemas;
    }
    if (routeSchemas.query) {
      if (routeSchemas.querystring) {
        throw new FST_ERR_SCH_DUPLICATE("querystring");
      }
      routeSchemas.querystring = routeSchemas.query;
    }
    generateFluentSchema(routeSchemas);
    for (const key of SCHEMAS_SOURCE) {
      const schema = routeSchemas[key];
      if (schema && !isCustomSchemaPrototype(schema)) {
        if (key === "body" && schema.content) {
          const contentProperty = schema.content;
          const keys = Object.keys(contentProperty);
          for (let i = 0;i < keys.length; i++) {
            const contentType = keys[i];
            const contentSchema = contentProperty[contentType].schema;
            if (!contentSchema) {
              throw new FST_ERR_SCH_CONTENT_MISSING_SCHEMA(contentType);
            }
          }
          continue;
        }
      }
    }
    if (routeSchemas.response) {
      const httpCodes = Object.keys(routeSchemas.response);
      for (const code of httpCodes) {
        if (isCustomSchemaPrototype(routeSchemas.response[code])) {
          continue;
        }
        const contentProperty = routeSchemas.response[code].content;
        if (contentProperty) {
          const keys = Object.keys(contentProperty);
          for (let i = 0;i < keys.length; i++) {
            const mediaName = keys[i];
            if (!contentProperty[mediaName].schema) {
              throw new FST_ERR_SCH_CONTENT_MISSING_SCHEMA(mediaName);
            }
          }
        }
      }
    }
    routeSchemas[kSchemaVisited] = true;
    return routeSchemas;
  }
  function generateFluentSchema(schema) {
    for (const key of SCHEMAS_SOURCE) {
      if (schema[key] && (schema[key].isFluentSchema || schema[key][kFluentSchema])) {
        schema[key] = schema[key].valueOf();
      }
    }
    if (schema.response) {
      const httpCodes = Object.keys(schema.response);
      for (const code of httpCodes) {
        if (schema.response[code].isFluentSchema || schema.response[code][kFluentSchema]) {
          schema.response[code] = schema.response[code].valueOf();
        }
      }
    }
  }
  function getSchemaSerializer(context, statusCode, contentType) {
    const responseSchemaDef = context[kSchemaResponse];
    if (!responseSchemaDef) {
      return false;
    }
    if (responseSchemaDef[statusCode]) {
      if (responseSchemaDef[statusCode].constructor === Object && contentType) {
        const mediaName = contentType.split(";", 1)[0];
        if (responseSchemaDef[statusCode][mediaName]) {
          return responseSchemaDef[statusCode][mediaName];
        }
        if (responseSchemaDef[statusCode]["*/*"]) {
          return responseSchemaDef[statusCode]["*/*"];
        }
        return false;
      }
      return responseSchemaDef[statusCode];
    }
    const fallbackStatusCode = (statusCode + "")[0] + "xx";
    if (responseSchemaDef[fallbackStatusCode]) {
      if (responseSchemaDef[fallbackStatusCode].constructor === Object && contentType) {
        const mediaName = contentType.split(";", 1)[0];
        if (responseSchemaDef[fallbackStatusCode][mediaName]) {
          return responseSchemaDef[fallbackStatusCode][mediaName];
        }
        if (responseSchemaDef[fallbackStatusCode]["*/*"]) {
          return responseSchemaDef[fallbackStatusCode]["*/*"];
        }
        return false;
      }
      return responseSchemaDef[fallbackStatusCode];
    }
    if (responseSchemaDef.default) {
      if (responseSchemaDef.default.constructor === Object && contentType) {
        const mediaName = contentType.split(";", 1)[0];
        if (responseSchemaDef.default[mediaName]) {
          return responseSchemaDef.default[mediaName];
        }
        if (responseSchemaDef.default["*/*"]) {
          return responseSchemaDef.default["*/*"];
        }
        return false;
      }
      return responseSchemaDef.default;
    }
    return false;
  }
  module.exports = {
    buildSchemas(initStore) {
      return new Schemas(initStore);
    },
    getSchemaSerializer,
    normalizeSchema
  };
});

// node_modules/fast-json-stringify/lib/serializer.js
var require_serializer = __commonJS((exports, module) => {
  var STR_ESCAPE = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]/;
  module.exports = class Serializer {
    constructor(options) {
      switch (options && options.rounding) {
        case "floor":
          this.parseInteger = Math.floor;
          break;
        case "ceil":
          this.parseInteger = Math.ceil;
          break;
        case "round":
          this.parseInteger = Math.round;
          break;
        case "trunc":
        default:
          this.parseInteger = Math.trunc;
          break;
      }
      this._options = options;
    }
    asInteger(i) {
      if (Number.isInteger(i)) {
        return "" + i;
      } else if (typeof i === "bigint") {
        return i.toString();
      }
      const integer = this.parseInteger(i);
      if (integer === Infinity || integer === -Infinity || integer !== integer) {
        throw new Error(`The value "${i}" cannot be converted to an integer.`);
      }
      return "" + integer;
    }
    asNumber(i) {
      const num = Number(i);
      if (num !== num) {
        throw new Error(`The value "${i}" cannot be converted to a number.`);
      } else if (num === Infinity || num === -Infinity) {
        return "null";
      } else {
        return "" + num;
      }
    }
    asBoolean(bool) {
      return bool && "true" || "false";
    }
    asDateTime(date) {
      if (date === null)
        return '""';
      if (date instanceof Date) {
        return '"' + date.toISOString() + '"';
      }
      if (typeof date === "string") {
        return '"' + date + '"';
      }
      throw new Error(`The value "${date}" cannot be converted to a date-time.`);
    }
    asDate(date) {
      if (date === null)
        return '""';
      if (date instanceof Date) {
        return '"' + new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().slice(0, 10) + '"';
      }
      if (typeof date === "string") {
        return '"' + date + '"';
      }
      throw new Error(`The value "${date}" cannot be converted to a date.`);
    }
    asTime(date) {
      if (date === null)
        return '""';
      if (date instanceof Date) {
        return '"' + new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().slice(11, 19) + '"';
      }
      if (typeof date === "string") {
        return '"' + date + '"';
      }
      throw new Error(`The value "${date}" cannot be converted to a time.`);
    }
    asString(str) {
      const len = str.length;
      if (len < 42) {
        let result = "";
        let last = -1;
        let point = 255;
        for (let i = 0;i < len; i++) {
          point = str.charCodeAt(i);
          if (point === 34 || point === 92) {
            last === -1 && (last = 0);
            result += str.slice(last, i) + "\\";
            last = i;
          } else if (point < 32 || point >= 55296 && point <= 57343) {
            return JSON.stringify(str);
          }
        }
        return last === -1 && '"' + str + '"' || '"' + result + str.slice(last) + '"';
      } else if (len < 5000 && STR_ESCAPE.test(str) === false) {
        return '"' + str + '"';
      } else {
        return JSON.stringify(str);
      }
    }
    asUnsafeString(str) {
      return '"' + str + '"';
    }
    getState() {
      return this._options;
    }
    static restoreFromState(state) {
      return new Serializer(state);
    }
  };
});

// node_modules/fastify/lib/error-serializer.js
var require_error_serializer = __commonJS((exports, module) => {
  var Serializer = require_serializer();
  var serializerState = { mode: "standalone" };
  var serializer = Serializer.restoreFromState(serializerState);
  var validator = null;
  module.exports = function anonymous(validator2, serializer2) {
    const JSON_STR_BEGIN_OBJECT = "{";
    const JSON_STR_END_OBJECT = "}";
    const JSON_STR_BEGIN_ARRAY = "[";
    const JSON_STR_END_ARRAY = "]";
    const JSON_STR_COMMA = ",";
    const JSON_STR_COLONS = ":";
    const JSON_STR_QUOTE = '"';
    const JSON_STR_EMPTY_OBJECT = JSON_STR_BEGIN_OBJECT + JSON_STR_END_OBJECT;
    const JSON_STR_EMPTY_ARRAY = JSON_STR_BEGIN_ARRAY + JSON_STR_END_ARRAY;
    const JSON_STR_EMPTY_STRING = JSON_STR_QUOTE + JSON_STR_QUOTE;
    const JSON_STR_NULL = "null";
    function anonymous0(input) {
      const obj = input && typeof input.toJSON === "function" ? input.toJSON() : input;
      if (obj === null)
        return JSON_STR_EMPTY_OBJECT;
      let value;
      let json = JSON_STR_BEGIN_OBJECT;
      let addComma = false;
      value = obj["statusCode"];
      if (value !== undefined) {
        !addComma && (addComma = true) || (json += JSON_STR_COMMA);
        json += '"statusCode":';
        json += serializer2.asNumber(value);
      }
      value = obj["code"];
      if (value !== undefined) {
        !addComma && (addComma = true) || (json += JSON_STR_COMMA);
        json += '"code":';
        if (typeof value !== "string") {
          if (value === null) {
            json += JSON_STR_EMPTY_STRING;
          } else if (value instanceof Date) {
            json += JSON_STR_QUOTE + value.toISOString() + JSON_STR_QUOTE;
          } else if (value instanceof RegExp) {
            json += serializer2.asString(value.source);
          } else {
            json += serializer2.asString(value.toString());
          }
        } else {
          json += serializer2.asString(value);
        }
      }
      value = obj["error"];
      if (value !== undefined) {
        !addComma && (addComma = true) || (json += JSON_STR_COMMA);
        json += '"error":';
        if (typeof value !== "string") {
          if (value === null) {
            json += JSON_STR_EMPTY_STRING;
          } else if (value instanceof Date) {
            json += JSON_STR_QUOTE + value.toISOString() + JSON_STR_QUOTE;
          } else if (value instanceof RegExp) {
            json += serializer2.asString(value.source);
          } else {
            json += serializer2.asString(value.toString());
          }
        } else {
          json += serializer2.asString(value);
        }
      }
      value = obj["message"];
      if (value !== undefined) {
        !addComma && (addComma = true) || (json += JSON_STR_COMMA);
        json += '"message":';
        if (typeof value !== "string") {
          if (value === null) {
            json += JSON_STR_EMPTY_STRING;
          } else if (value instanceof Date) {
            json += JSON_STR_QUOTE + value.toISOString() + JSON_STR_QUOTE;
          } else if (value instanceof RegExp) {
            json += serializer2.asString(value.source);
          } else {
            json += serializer2.asString(value.toString());
          }
        } else {
          json += serializer2.asString(value);
        }
      }
      return json + JSON_STR_END_OBJECT;
    }
    const main = anonymous0;
    return main;
  }(validator, serializer);
});

// node_modules/fastify/lib/error-handler.js
var require_error_handler = __commonJS((exports, module) => {
  var statusCodes = __require("node:http").STATUS_CODES;
  var wrapThenable = require_wrapThenable();
  var {
    kReplyHeaders,
    kReplyNextErrorHandler,
    kReplyIsRunningOnErrorHook,
    kReplyHasStatusCode,
    kRouteContext,
    kDisableRequestLogging
  } = require_symbols3();
  var {
    FST_ERR_REP_INVALID_PAYLOAD_TYPE,
    FST_ERR_FAILED_ERROR_SERIALIZATION
  } = require_errors4();
  var { getSchemaSerializer } = require_schemas();
  var serializeError = require_error_serializer();
  var rootErrorHandler = {
    func: defaultErrorHandler,
    toJSON() {
      return this.func.name.toString() + "()";
    }
  };
  function handleError(reply, error, cb) {
    reply[kReplyIsRunningOnErrorHook] = false;
    const context = reply[kRouteContext];
    if (reply[kReplyNextErrorHandler] === false) {
      fallbackErrorHandler(error, reply, function(reply2, payload) {
        try {
          reply2.raw.writeHead(reply2.raw.statusCode, reply2[kReplyHeaders]);
        } catch (error2) {
          if (!reply2.log[kDisableRequestLogging]) {
            reply2.log.warn({ req: reply2.request, res: reply2, err: error2 }, error2 && error2.message);
          }
          reply2.raw.writeHead(reply2.raw.statusCode);
        }
        reply2.raw.end(payload);
      });
      return;
    }
    const errorHandler = reply[kReplyNextErrorHandler] || context.errorHandler;
    reply[kReplyNextErrorHandler] = Object.getPrototypeOf(errorHandler);
    delete reply[kReplyHeaders]["content-type"];
    delete reply[kReplyHeaders]["content-length"];
    const func = errorHandler.func;
    if (!func) {
      reply[kReplyNextErrorHandler] = false;
      fallbackErrorHandler(error, reply, cb);
      return;
    }
    try {
      const result = func(error, reply.request, reply);
      if (result !== undefined) {
        if (result !== null && typeof result.then === "function") {
          wrapThenable(result, reply);
        } else {
          reply.send(result);
        }
      }
    } catch (err) {
      reply.send(err);
    }
  }
  function defaultErrorHandler(error, request, reply) {
    setErrorHeaders(error, reply);
    if (!reply[kReplyHasStatusCode] || reply.statusCode === 200) {
      const statusCode = error.statusCode || error.status;
      reply.code(statusCode >= 400 ? statusCode : 500);
    }
    if (reply.statusCode < 500) {
      if (!reply.log[kDisableRequestLogging]) {
        reply.log.info({ res: reply, err: error }, error && error.message);
      }
    } else {
      if (!reply.log[kDisableRequestLogging]) {
        reply.log.error({ req: request, res: reply, err: error }, error && error.message);
      }
    }
    reply.send(error);
  }
  function fallbackErrorHandler(error, reply, cb) {
    const res = reply.raw;
    const statusCode = reply.statusCode;
    reply[kReplyHeaders]["content-type"] = reply[kReplyHeaders]["content-type"] ?? "application/json; charset=utf-8";
    let payload;
    try {
      const serializerFn = getSchemaSerializer(reply[kRouteContext], statusCode, reply[kReplyHeaders]["content-type"]);
      if (serializerFn === false) {
        payload = serializeError({
          error: statusCodes[statusCode + ""],
          code: error.code,
          message: error.message,
          statusCode
        });
      } else {
        payload = serializerFn(Object.create(error, {
          error: { value: statusCodes[statusCode + ""] },
          message: { value: error.message },
          statusCode: { value: statusCode }
        }));
      }
    } catch (err) {
      if (!reply.log[kDisableRequestLogging]) {
        reply.log.error({ err, statusCode: res.statusCode }, "The serializer for the given status code failed");
      }
      reply.code(500);
      payload = serializeError(new FST_ERR_FAILED_ERROR_SERIALIZATION(err.message, error.message));
    }
    if (typeof payload !== "string" && !Buffer.isBuffer(payload)) {
      payload = serializeError(new FST_ERR_REP_INVALID_PAYLOAD_TYPE(typeof payload));
    }
    reply[kReplyHeaders]["content-length"] = "" + Buffer.byteLength(payload);
    cb(reply, payload);
  }
  function buildErrorHandler(parent = rootErrorHandler, func) {
    if (!func) {
      return parent;
    }
    const errorHandler = Object.create(parent);
    errorHandler.func = func;
    return errorHandler;
  }
  function setErrorHeaders(error, reply) {
    const res = reply.raw;
    let statusCode = res.statusCode;
    statusCode = statusCode >= 400 ? statusCode : 500;
    if (error != null) {
      if (error.headers !== undefined) {
        reply.headers(error.headers);
      }
      if (error.status >= 400) {
        statusCode = error.status;
      } else if (error.statusCode >= 400) {
        statusCode = error.statusCode;
      }
    }
    res.statusCode = statusCode;
  }
  module.exports = {
    buildErrorHandler,
    handleError
  };
});

// node_modules/fastify/lib/reply.js
var require_reply = __commonJS((exports, module) => {
  var eos = __require("node:stream").finished;
  var Readable = __require("node:stream").Readable;
  var {
    kFourOhFourContext,
    kReplyErrorHandlerCalled,
    kReplyHijacked,
    kReplyStartTime,
    kReplyEndTime,
    kReplySerializer,
    kReplySerializerDefault,
    kReplyIsError,
    kReplyHeaders,
    kReplyTrailers,
    kReplyHasStatusCode,
    kReplyIsRunningOnErrorHook,
    kReplyNextErrorHandler,
    kDisableRequestLogging,
    kSchemaResponse,
    kReplyCacheSerializeFns,
    kSchemaController,
    kOptions,
    kRouteContext
  } = require_symbols3();
  var {
    onSendHookRunner,
    onResponseHookRunner,
    preHandlerHookRunner,
    preSerializationHookRunner
  } = require_hooks();
  var internals = require_handleRequest()[Symbol.for("internals")];
  var loggerUtils = require_logger_factory();
  var now = loggerUtils.now;
  var { handleError } = require_error_handler();
  var { getSchemaSerializer } = require_schemas();
  var CONTENT_TYPE = {
    JSON: "application/json; charset=utf-8",
    PLAIN: "text/plain; charset=utf-8",
    OCTET: "application/octet-stream"
  };
  var {
    FST_ERR_REP_INVALID_PAYLOAD_TYPE,
    FST_ERR_REP_RESPONSE_BODY_CONSUMED,
    FST_ERR_REP_READABLE_STREAM_LOCKED,
    FST_ERR_REP_ALREADY_SENT,
    FST_ERR_SEND_INSIDE_ONERR,
    FST_ERR_BAD_STATUS_CODE,
    FST_ERR_BAD_TRAILER_NAME,
    FST_ERR_BAD_TRAILER_VALUE,
    FST_ERR_MISSING_SERIALIZATION_FN,
    FST_ERR_MISSING_CONTENTTYPE_SERIALIZATION_FN
  } = require_errors4();
  var toString = Object.prototype.toString;
  function Reply(res, request, log) {
    this.raw = res;
    this[kReplySerializer] = null;
    this[kReplyErrorHandlerCalled] = false;
    this[kReplyIsError] = false;
    this[kReplyIsRunningOnErrorHook] = false;
    this.request = request;
    this[kReplyHeaders] = {};
    this[kReplyTrailers] = null;
    this[kReplyHasStatusCode] = false;
    this[kReplyStartTime] = undefined;
    this.log = log;
  }
  Reply.props = [];
  Object.defineProperties(Reply.prototype, {
    [kRouteContext]: {
      get() {
        return this.request[kRouteContext];
      }
    },
    elapsedTime: {
      get() {
        if (this[kReplyStartTime] === undefined) {
          return 0;
        }
        return (this[kReplyEndTime] || now()) - this[kReplyStartTime];
      }
    },
    server: {
      get() {
        return this.request[kRouteContext].server;
      }
    },
    sent: {
      enumerable: true,
      get() {
        return (this[kReplyHijacked] || this.raw.writableEnded) === true;
      }
    },
    statusCode: {
      get() {
        return this.raw.statusCode;
      },
      set(value) {
        this.code(value);
      }
    },
    routeOptions: {
      get() {
        return this.request.routeOptions;
      }
    }
  });
  Reply.prototype.writeEarlyHints = function(hints, callback) {
    this.raw.writeEarlyHints(hints, callback);
    return this;
  };
  Reply.prototype.hijack = function() {
    this[kReplyHijacked] = true;
    return this;
  };
  Reply.prototype.send = function(payload) {
    if (this[kReplyIsRunningOnErrorHook] === true) {
      throw new FST_ERR_SEND_INSIDE_ONERR;
    }
    if (this.sent) {
      this.log.warn({ err: new FST_ERR_REP_ALREADY_SENT(this.request.url, this.request.method) });
      return this;
    }
    if (payload instanceof Error || this[kReplyIsError] === true) {
      this[kReplyIsError] = false;
      onErrorHook(this, payload, onSendHook);
      return this;
    }
    if (payload === undefined) {
      onSendHook(this, payload);
      return this;
    }
    const contentType = this.getHeader("content-type");
    const hasContentType = contentType !== undefined;
    if (payload !== null) {
      if (typeof payload.pipe === "function" || typeof payload.getReader === "function" || toString.call(payload) === "[object Response]") {
        onSendHook(this, payload);
        return this;
      }
      if (payload?.buffer instanceof ArrayBuffer) {
        if (hasContentType === false) {
          this[kReplyHeaders]["content-type"] = CONTENT_TYPE.OCTET;
        }
        const payloadToSend = Buffer.isBuffer(payload) ? payload : Buffer.from(payload.buffer, payload.byteOffset, payload.byteLength);
        onSendHook(this, payloadToSend);
        return this;
      }
      if (hasContentType === false && typeof payload === "string") {
        this[kReplyHeaders]["content-type"] = CONTENT_TYPE.PLAIN;
        onSendHook(this, payload);
        return this;
      }
    }
    if (this[kReplySerializer] !== null) {
      if (typeof payload !== "string") {
        preSerializationHook(this, payload);
        return this;
      } else {
        payload = this[kReplySerializer](payload);
      }
    } else if (hasContentType === false || contentType.indexOf("json") > -1) {
      if (hasContentType === false) {
        this[kReplyHeaders]["content-type"] = CONTENT_TYPE.JSON;
      } else {
        if (contentType.indexOf("charset") === -1) {
          const customContentType = contentType.trim();
          if (customContentType.endsWith(";")) {
            this[kReplyHeaders]["content-type"] = `${customContentType} charset=utf-8`;
          } else {
            this[kReplyHeaders]["content-type"] = `${customContentType}; charset=utf-8`;
          }
        }
      }
      if (typeof payload !== "string") {
        preSerializationHook(this, payload);
        return this;
      }
    }
    onSendHook(this, payload);
    return this;
  };
  Reply.prototype.getHeader = function(key) {
    key = key.toLowerCase();
    const res = this.raw;
    let value = this[kReplyHeaders][key];
    if (value === undefined && res.hasHeader(key)) {
      value = res.getHeader(key);
    }
    return value;
  };
  Reply.prototype.getHeaders = function() {
    return {
      ...this.raw.getHeaders(),
      ...this[kReplyHeaders]
    };
  };
  Reply.prototype.hasHeader = function(key) {
    key = key.toLowerCase();
    return this[kReplyHeaders][key] !== undefined || this.raw.hasHeader(key);
  };
  Reply.prototype.removeHeader = function(key) {
    delete this[kReplyHeaders][key.toLowerCase()];
    return this;
  };
  Reply.prototype.header = function(key, value = "") {
    key = key.toLowerCase();
    if (this[kReplyHeaders][key] && key === "set-cookie") {
      if (typeof this[kReplyHeaders][key] === "string") {
        this[kReplyHeaders][key] = [this[kReplyHeaders][key]];
      }
      if (Array.isArray(value)) {
        Array.prototype.push.apply(this[kReplyHeaders][key], value);
      } else {
        this[kReplyHeaders][key].push(value);
      }
    } else {
      this[kReplyHeaders][key] = value;
    }
    return this;
  };
  Reply.prototype.headers = function(headers) {
    const keys = Object.keys(headers);
    for (let i = 0;i !== keys.length; ++i) {
      const key = keys[i];
      this.header(key, headers[key]);
    }
    return this;
  };
  var INVALID_TRAILERS = new Set([
    "transfer-encoding",
    "content-length",
    "host",
    "cache-control",
    "max-forwards",
    "te",
    "authorization",
    "set-cookie",
    "content-encoding",
    "content-type",
    "content-range",
    "trailer"
  ]);
  Reply.prototype.trailer = function(key, fn) {
    key = key.toLowerCase();
    if (INVALID_TRAILERS.has(key)) {
      throw new FST_ERR_BAD_TRAILER_NAME(key);
    }
    if (typeof fn !== "function") {
      throw new FST_ERR_BAD_TRAILER_VALUE(key, typeof fn);
    }
    if (this[kReplyTrailers] === null)
      this[kReplyTrailers] = {};
    this[kReplyTrailers][key] = fn;
    return this;
  };
  Reply.prototype.hasTrailer = function(key) {
    return this[kReplyTrailers]?.[key.toLowerCase()] !== undefined;
  };
  Reply.prototype.removeTrailer = function(key) {
    if (this[kReplyTrailers] === null)
      return this;
    this[kReplyTrailers][key.toLowerCase()] = undefined;
    return this;
  };
  Reply.prototype.code = function(code) {
    const intValue = Number(code);
    if (isNaN(intValue) || intValue < 100 || intValue > 599) {
      throw new FST_ERR_BAD_STATUS_CODE(code || String(code));
    }
    this.raw.statusCode = intValue;
    this[kReplyHasStatusCode] = true;
    return this;
  };
  Reply.prototype.status = Reply.prototype.code;
  Reply.prototype.getSerializationFunction = function(schemaOrStatus, contentType) {
    let serialize2;
    if (typeof schemaOrStatus === "string" || typeof schemaOrStatus === "number") {
      if (typeof contentType === "string") {
        serialize2 = this[kRouteContext][kSchemaResponse]?.[schemaOrStatus]?.[contentType];
      } else {
        serialize2 = this[kRouteContext][kSchemaResponse]?.[schemaOrStatus];
      }
    } else if (typeof schemaOrStatus === "object") {
      serialize2 = this[kRouteContext][kReplyCacheSerializeFns]?.get(schemaOrStatus);
    }
    return serialize2;
  };
  Reply.prototype.compileSerializationSchema = function(schema, httpStatus = null, contentType = null) {
    const { request } = this;
    const { method, url } = request;
    if (this[kRouteContext][kReplyCacheSerializeFns]?.has(schema)) {
      return this[kRouteContext][kReplyCacheSerializeFns].get(schema);
    }
    const serializerCompiler = this[kRouteContext].serializerCompiler || this.server[kSchemaController].serializerCompiler || (this.server[kSchemaController].setupSerializer(this.server[kOptions]) || this.server[kSchemaController].serializerCompiler);
    const serializeFn = serializerCompiler({
      schema,
      method,
      url,
      httpStatus,
      contentType
    });
    if (this[kRouteContext][kReplyCacheSerializeFns] == null) {
      this[kRouteContext][kReplyCacheSerializeFns] = new WeakMap;
    }
    this[kRouteContext][kReplyCacheSerializeFns].set(schema, serializeFn);
    return serializeFn;
  };
  Reply.prototype.serializeInput = function(input, schema, httpStatus, contentType) {
    const possibleContentType = httpStatus;
    let serialize2;
    httpStatus = typeof schema === "string" || typeof schema === "number" ? schema : httpStatus;
    contentType = httpStatus && possibleContentType !== httpStatus ? possibleContentType : contentType;
    if (httpStatus != null) {
      if (contentType != null) {
        serialize2 = this[kRouteContext][kSchemaResponse]?.[httpStatus]?.[contentType];
      } else {
        serialize2 = this[kRouteContext][kSchemaResponse]?.[httpStatus];
      }
      if (serialize2 == null) {
        if (contentType)
          throw new FST_ERR_MISSING_CONTENTTYPE_SERIALIZATION_FN(httpStatus, contentType);
        throw new FST_ERR_MISSING_SERIALIZATION_FN(httpStatus);
      }
    } else {
      if (this[kRouteContext][kReplyCacheSerializeFns]?.has(schema)) {
        serialize2 = this[kRouteContext][kReplyCacheSerializeFns].get(schema);
      } else {
        serialize2 = this.compileSerializationSchema(schema, httpStatus, contentType);
      }
    }
    return serialize2(input);
  };
  Reply.prototype.serialize = function(payload) {
    if (this[kReplySerializer] !== null) {
      return this[kReplySerializer](payload);
    } else {
      if (this[kRouteContext] && this[kRouteContext][kReplySerializerDefault]) {
        return this[kRouteContext][kReplySerializerDefault](payload, this.raw.statusCode);
      } else {
        return serialize(this[kRouteContext], payload, this.raw.statusCode);
      }
    }
  };
  Reply.prototype.serializer = function(fn) {
    this[kReplySerializer] = fn;
    return this;
  };
  Reply.prototype.type = function(type) {
    this[kReplyHeaders]["content-type"] = type;
    return this;
  };
  Reply.prototype.redirect = function(url, code) {
    if (!code) {
      code = this[kReplyHasStatusCode] ? this.raw.statusCode : 302;
    }
    return this.header("location", url).code(code).send();
  };
  Reply.prototype.callNotFound = function() {
    notFound(this);
    return this;
  };
  Reply.prototype.then = function(fulfilled, rejected) {
    if (this.sent) {
      fulfilled();
      return;
    }
    eos(this.raw, (err) => {
      if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        if (rejected) {
          rejected(err);
        } else {
          this.log && this.log.warn("unhandled rejection on reply.then");
        }
      } else {
        fulfilled();
      }
    });
  };
  function preSerializationHook(reply, payload) {
    if (reply[kRouteContext].preSerialization !== null) {
      preSerializationHookRunner(reply[kRouteContext].preSerialization, reply.request, reply, payload, preSerializationHookEnd);
    } else {
      preSerializationHookEnd(null, reply.request, reply, payload);
    }
  }
  function preSerializationHookEnd(err, request, reply, payload) {
    if (err != null) {
      onErrorHook(reply, err);
      return;
    }
    try {
      if (reply[kReplySerializer] !== null) {
        payload = reply[kReplySerializer](payload);
      } else if (reply[kRouteContext] && reply[kRouteContext][kReplySerializerDefault]) {
        payload = reply[kRouteContext][kReplySerializerDefault](payload, reply.raw.statusCode);
      } else {
        payload = serialize(reply[kRouteContext], payload, reply.raw.statusCode, reply[kReplyHeaders]["content-type"]);
      }
    } catch (e) {
      wrapSerializationError(e, reply);
      onErrorHook(reply, e);
      return;
    }
    onSendHook(reply, payload);
  }
  function wrapSerializationError(error, reply) {
    error.serialization = reply[kRouteContext].config;
  }
  function onSendHook(reply, payload) {
    if (reply[kRouteContext].onSend !== null) {
      onSendHookRunner(reply[kRouteContext].onSend, reply.request, reply, payload, wrapOnSendEnd);
    } else {
      onSendEnd(reply, payload);
    }
  }
  function wrapOnSendEnd(err, request, reply, payload) {
    if (err != null) {
      onErrorHook(reply, err);
    } else {
      onSendEnd(reply, payload);
    }
  }
  function safeWriteHead(reply, statusCode) {
    const res = reply.raw;
    try {
      res.writeHead(statusCode, reply[kReplyHeaders]);
    } catch (err) {
      if (err.code === "ERR_HTTP_HEADERS_SENT") {
        reply.log.warn(`Reply was already sent, did you forget to "return reply" in the "${reply.request.raw.url}" (${reply.request.raw.method}) route?`);
      }
      throw err;
    }
  }
  function onSendEnd(reply, payload) {
    const res = reply.raw;
    const req = reply.request;
    if (reply[kReplyTrailers] !== null) {
      const trailerHeaders = Object.keys(reply[kReplyTrailers]);
      let header = "";
      for (const trailerName of trailerHeaders) {
        if (typeof reply[kReplyTrailers][trailerName] !== "function")
          continue;
        header += " ";
        header += trailerName;
      }
      reply.header("Transfer-Encoding", "chunked");
      reply.header("Trailer", header.trim());
    }
    if (toString.call(payload) === "[object Response]") {
      if (typeof payload.status === "number") {
        reply.code(payload.status);
      }
      if (typeof payload.headers === "object" && typeof payload.headers.forEach === "function") {
        for (const [headerName, headerValue] of payload.headers) {
          reply.header(headerName, headerValue);
        }
      }
      if (payload.body !== null) {
        if (payload.bodyUsed) {
          throw new FST_ERR_REP_RESPONSE_BODY_CONSUMED;
        }
      }
      payload = payload.body;
    }
    const statusCode = res.statusCode;
    if (payload === undefined || payload === null) {
      if (statusCode >= 200 && statusCode !== 204 && statusCode !== 304 && req.method !== "HEAD" && reply[kReplyTrailers] === null) {
        reply[kReplyHeaders]["content-length"] = "0";
      }
      safeWriteHead(reply, statusCode);
      sendTrailer(payload, res, reply);
      return;
    }
    if (statusCode >= 100 && statusCode < 200 || statusCode === 204) {
      reply.removeHeader("content-type");
      reply.removeHeader("content-length");
      safeWriteHead(reply, statusCode);
      sendTrailer(undefined, res, reply);
      if (typeof payload.resume === "function") {
        payload.on("error", noop);
        payload.resume();
      }
      return;
    }
    if (typeof payload.pipe === "function") {
      sendStream(payload, res, reply);
      return;
    }
    if (typeof payload.getReader === "function") {
      sendWebStream(payload, res, reply);
      return;
    }
    if (typeof payload !== "string" && !Buffer.isBuffer(payload)) {
      throw new FST_ERR_REP_INVALID_PAYLOAD_TYPE(typeof payload);
    }
    if (reply[kReplyTrailers] === null) {
      const contentLength = reply[kReplyHeaders]["content-length"];
      if (!contentLength || req.raw.method !== "HEAD" && Number(contentLength) !== Buffer.byteLength(payload)) {
        reply[kReplyHeaders]["content-length"] = "" + Buffer.byteLength(payload);
      }
    }
    safeWriteHead(reply, statusCode);
    res.write(payload);
    sendTrailer(payload, res, reply);
  }
  function logStreamError(logger, err, res) {
    if (err.code === "ERR_STREAM_PREMATURE_CLOSE") {
      if (!logger[kDisableRequestLogging]) {
        logger.info({ res }, "stream closed prematurely");
      }
    } else {
      logger.warn({ err }, "response terminated with an error with headers already sent");
    }
  }
  function sendWebStream(payload, res, reply) {
    if (payload.locked) {
      throw FST_ERR_REP_READABLE_STREAM_LOCKED();
    }
    const nodeStream = Readable.fromWeb(payload);
    sendStream(nodeStream, res, reply);
  }
  function sendStream(payload, res, reply) {
    let sourceOpen = true;
    let errorLogged = false;
    sendStreamTrailer(payload, res, reply);
    eos(payload, { readable: true, writable: false }, function(err) {
      sourceOpen = false;
      if (err != null) {
        if (res.headersSent || reply.request.raw.aborted === true) {
          if (!errorLogged) {
            errorLogged = true;
            logStreamError(reply.log, err, reply);
          }
          res.destroy();
        } else {
          onErrorHook(reply, err);
        }
      }
    });
    eos(res, function(err) {
      if (sourceOpen) {
        if (err != null && res.headersSent && !errorLogged) {
          errorLogged = true;
          logStreamError(reply.log, err, res);
        }
        if (typeof payload.destroy === "function") {
          payload.destroy();
        } else if (typeof payload.close === "function") {
          payload.close(noop);
        } else if (typeof payload.abort === "function") {
          payload.abort();
        } else {
          reply.log.warn("stream payload does not end properly");
        }
      }
    });
    if (!res.headersSent) {
      for (const key in reply[kReplyHeaders]) {
        res.setHeader(key, reply[kReplyHeaders][key]);
      }
    } else {
      reply.log.warn("response will send, but you shouldn't use res.writeHead in stream mode");
    }
    payload.pipe(res);
  }
  function sendTrailer(payload, res, reply) {
    if (reply[kReplyTrailers] === null) {
      res.end(null, null, null);
      return;
    }
    const trailerHeaders = Object.keys(reply[kReplyTrailers]);
    const trailers = {};
    let handled = 0;
    let skipped = true;
    function send() {
      if (handled === 0) {
        res.addTrailers(trailers);
        res.end(null, null, null);
      }
    }
    for (const trailerName of trailerHeaders) {
      let cb = function(err, value) {
        handled++;
        if (err)
          reply.log.debug(err);
        else
          trailers[trailerName] = value;
        process.nextTick(send);
      };
      if (typeof reply[kReplyTrailers][trailerName] !== "function")
        continue;
      skipped = false;
      handled--;
      const result = reply[kReplyTrailers][trailerName](reply, payload, cb);
      if (typeof result === "object" && typeof result.then === "function") {
        result.then((v) => cb(null, v), cb);
      }
    }
    if (skipped)
      res.end(null, null, null);
  }
  function sendStreamTrailer(payload, res, reply) {
    if (reply[kReplyTrailers] === null)
      return;
    payload.on("end", () => sendTrailer(null, res, reply));
  }
  function onErrorHook(reply, error, cb) {
    if (reply[kRouteContext].onError !== null && !reply[kReplyNextErrorHandler]) {
      reply[kReplyIsRunningOnErrorHook] = true;
      onSendHookRunner(reply[kRouteContext].onError, reply.request, reply, error, () => handleError(reply, error, cb));
    } else {
      handleError(reply, error, cb);
    }
  }
  function setupResponseListeners(reply) {
    reply[kReplyStartTime] = now();
    const onResFinished = (err) => {
      reply[kReplyEndTime] = now();
      reply.raw.removeListener("finish", onResFinished);
      reply.raw.removeListener("error", onResFinished);
      const ctx = reply[kRouteContext];
      if (ctx && ctx.onResponse !== null) {
        onResponseHookRunner(ctx.onResponse, reply.request, reply, onResponseCallback);
      } else {
        onResponseCallback(err, reply.request, reply);
      }
    };
    reply.raw.on("finish", onResFinished);
    reply.raw.on("error", onResFinished);
  }
  function onResponseCallback(err, request, reply) {
    if (reply.log[kDisableRequestLogging]) {
      return;
    }
    const responseTime = reply.elapsedTime;
    if (err != null) {
      reply.log.error({
        res: reply,
        err,
        responseTime
      }, "request errored");
      return;
    }
    reply.log.info({
      res: reply,
      responseTime
    }, "request completed");
  }
  function buildReply(R) {
    const props = R.props.slice();
    function _Reply(res, request, log) {
      this.raw = res;
      this[kReplyIsError] = false;
      this[kReplyErrorHandlerCalled] = false;
      this[kReplyHijacked] = false;
      this[kReplySerializer] = null;
      this.request = request;
      this[kReplyHeaders] = {};
      this[kReplyTrailers] = null;
      this[kReplyStartTime] = undefined;
      this[kReplyEndTime] = undefined;
      this.log = log;
      let prop;
      for (let i = 0;i < props.length; i++) {
        prop = props[i];
        this[prop.key] = prop.value;
      }
    }
    Object.setPrototypeOf(_Reply.prototype, R.prototype);
    Object.setPrototypeOf(_Reply, R);
    _Reply.parent = R;
    _Reply.props = props;
    return _Reply;
  }
  function notFound(reply) {
    if (reply[kRouteContext][kFourOhFourContext] === null) {
      reply.log.warn("Trying to send a NotFound error inside a 404 handler. Sending basic 404 response.");
      reply.code(404).send("404 Not Found");
      return;
    }
    reply.request[kRouteContext] = reply[kRouteContext][kFourOhFourContext];
    if (reply[kRouteContext].preHandler !== null) {
      preHandlerHookRunner(reply[kRouteContext].preHandler, reply.request, reply, internals.preHandlerCallback);
    } else {
      internals.preHandlerCallback(null, reply.request, reply);
    }
  }
  function serialize(context, data, statusCode, contentType) {
    const fnSerialize = getSchemaSerializer(context, statusCode, contentType);
    if (fnSerialize) {
      return fnSerialize(data);
    }
    return JSON.stringify(data);
  }
  function noop() {
  }
  module.exports = Reply;
  module.exports.buildReply = buildReply;
  module.exports.setupResponseListeners = setupResponseListeners;
});

// node_modules/@fastify/forwarded/index.js
var require_forwarded = __commonJS((exports, module) => {
  /*!
   * forwarded
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  function forwarded(req) {
    if (!req) {
      throw new TypeError("argument req is required");
    }
    const header = req.headers["x-forwarded-for"];
    const socketAddr = req.socket.remoteAddress;
    if (!header || typeof header !== "string") {
      return [socketAddr];
    } else if (header.indexOf(",") === -1) {
      const remote = header.trim();
      return remote.length ? [socketAddr, remote] : [socketAddr];
    } else {
      return parse(header, socketAddr);
    }
  }
  function parse(header, socketAddr) {
    const result = [socketAddr];
    let end = header.length;
    let start = end;
    let char;
    let i;
    for (i = end - 1;i >= 0; --i) {
      char = header[i];
      if (char === " ") {
        start === end && (start = end = i);
      } else if (char === ",") {
        start !== end && result.push(header.slice(start, end));
        start = end = i;
      } else {
        start = i;
      }
    }
    start !== end && result.push(header.substring(start, end));
    return result;
  }
  module.exports = forwarded;
  module.exports.default = forwarded;
  module.exports.forwarded = forwarded;
});

// node_modules/ipaddr.js/lib/ipaddr.js
var require_ipaddr = __commonJS((exports, module) => {
  (function(root) {
    const ipv4Part = "(0?\\d+|0x[a-f0-9]+)";
    const ipv4Regexes = {
      fourOctet: new RegExp(`^${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}$`, "i"),
      threeOctet: new RegExp(`^${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}$`, "i"),
      twoOctet: new RegExp(`^${ipv4Part}\\.${ipv4Part}$`, "i"),
      longValue: new RegExp(`^${ipv4Part}$`, "i")
    };
    const octalRegex = new RegExp(`^0[0-7]+$`, "i");
    const hexRegex = new RegExp(`^0x[a-f0-9]+$`, "i");
    const zoneIndex = "%[0-9a-z]{1,}";
    const ipv6Part = "(?:[0-9a-f]+::?)+";
    const ipv6Regexes = {
      zoneIndex: new RegExp(zoneIndex, "i"),
      native: new RegExp(`^(::)?(${ipv6Part})?([0-9a-f]+)?(::)?(${zoneIndex})?$`, "i"),
      deprecatedTransitional: new RegExp(`^(?:::)(${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}(${zoneIndex})?)$`, "i"),
      transitional: new RegExp(`^((?:${ipv6Part})|(?:::)(?:${ipv6Part})?)${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}(${zoneIndex})?$`, "i")
    };
    function expandIPv6(string, parts) {
      if (string.indexOf("::") !== string.lastIndexOf("::")) {
        return null;
      }
      let colonCount = 0;
      let lastColon = -1;
      let zoneId = (string.match(ipv6Regexes.zoneIndex) || [])[0];
      let replacement, replacementCount;
      if (zoneId) {
        zoneId = zoneId.substring(1);
        string = string.replace(/%.+$/, "");
      }
      while ((lastColon = string.indexOf(":", lastColon + 1)) >= 0) {
        colonCount++;
      }
      if (string.substr(0, 2) === "::") {
        colonCount--;
      }
      if (string.substr(-2, 2) === "::") {
        colonCount--;
      }
      if (colonCount > parts) {
        return null;
      }
      replacementCount = parts - colonCount;
      replacement = ":";
      while (replacementCount--) {
        replacement += "0:";
      }
      string = string.replace("::", replacement);
      if (string[0] === ":") {
        string = string.slice(1);
      }
      if (string[string.length - 1] === ":") {
        string = string.slice(0, -1);
      }
      parts = function() {
        const ref = string.split(":");
        const results = [];
        for (let i = 0;i < ref.length; i++) {
          results.push(parseInt(ref[i], 16));
        }
        return results;
      }();
      return {
        parts,
        zoneId
      };
    }
    function matchCIDR(first, second, partSize, cidrBits) {
      if (first.length !== second.length) {
        throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
      }
      let part = 0;
      let shift;
      while (cidrBits > 0) {
        shift = partSize - cidrBits;
        if (shift < 0) {
          shift = 0;
        }
        if (first[part] >> shift !== second[part] >> shift) {
          return false;
        }
        cidrBits -= partSize;
        part += 1;
      }
      return true;
    }
    function parseIntAuto(string) {
      if (hexRegex.test(string)) {
        return parseInt(string, 16);
      }
      if (string[0] === "0" && !isNaN(parseInt(string[1], 10))) {
        if (octalRegex.test(string)) {
          return parseInt(string, 8);
        }
        throw new Error(`ipaddr: cannot parse ${string} as octal`);
      }
      return parseInt(string, 10);
    }
    function padPart(part, length) {
      while (part.length < length) {
        part = `0${part}`;
      }
      return part;
    }
    const ipaddr = {};
    ipaddr.IPv4 = function() {
      function IPv4(octets) {
        if (octets.length !== 4) {
          throw new Error("ipaddr: ipv4 octet count should be 4");
        }
        let i, octet;
        for (i = 0;i < octets.length; i++) {
          octet = octets[i];
          if (!(0 <= octet && octet <= 255)) {
            throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
          }
        }
        this.octets = octets;
      }
      IPv4.prototype.SpecialRanges = {
        unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
        broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
        multicast: [[new IPv4([224, 0, 0, 0]), 4]],
        linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
        loopback: [[new IPv4([127, 0, 0, 0]), 8]],
        carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],
        private: [
          [new IPv4([10, 0, 0, 0]), 8],
          [new IPv4([172, 16, 0, 0]), 12],
          [new IPv4([192, 168, 0, 0]), 16]
        ],
        reserved: [
          [new IPv4([192, 0, 0, 0]), 24],
          [new IPv4([192, 0, 2, 0]), 24],
          [new IPv4([192, 88, 99, 0]), 24],
          [new IPv4([198, 18, 0, 0]), 15],
          [new IPv4([198, 51, 100, 0]), 24],
          [new IPv4([203, 0, 113, 0]), 24],
          [new IPv4([240, 0, 0, 0]), 4]
        ],
        as112: [
          [new IPv4([192, 175, 48, 0]), 24],
          [new IPv4([192, 31, 196, 0]), 24]
        ],
        amt: [
          [new IPv4([192, 52, 193, 0]), 24]
        ]
      };
      IPv4.prototype.kind = function() {
        return "ipv4";
      };
      IPv4.prototype.match = function(other, cidrRange) {
        let ref;
        if (cidrRange === undefined) {
          ref = other;
          other = ref[0];
          cidrRange = ref[1];
        }
        if (other.kind() !== "ipv4") {
          throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
        }
        return matchCIDR(this.octets, other.octets, 8, cidrRange);
      };
      IPv4.prototype.prefixLengthFromSubnetMask = function() {
        let cidr = 0;
        let stop = false;
        const zerotable = {
          0: 8,
          128: 7,
          192: 6,
          224: 5,
          240: 4,
          248: 3,
          252: 2,
          254: 1,
          255: 0
        };
        let i, octet, zeros;
        for (i = 3;i >= 0; i -= 1) {
          octet = this.octets[i];
          if (octet in zerotable) {
            zeros = zerotable[octet];
            if (stop && zeros !== 0) {
              return null;
            }
            if (zeros !== 8) {
              stop = true;
            }
            cidr += zeros;
          } else {
            return null;
          }
        }
        return 32 - cidr;
      };
      IPv4.prototype.range = function() {
        return ipaddr.subnetMatch(this, this.SpecialRanges);
      };
      IPv4.prototype.toByteArray = function() {
        return this.octets.slice(0);
      };
      IPv4.prototype.toIPv4MappedAddress = function() {
        return ipaddr.IPv6.parse(`::ffff:${this.toString()}`);
      };
      IPv4.prototype.toNormalizedString = function() {
        return this.toString();
      };
      IPv4.prototype.toString = function() {
        return this.octets.join(".");
      };
      return IPv4;
    }();
    ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {
      try {
        const cidr = this.parseCIDR(string);
        const ipInterfaceOctets = cidr[0].toByteArray();
        const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        const octets = [];
        let i = 0;
        while (i < 4) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
          i++;
        }
        return new this(octets);
      } catch (e) {
        throw new Error("ipaddr: the address does not have IPv4 CIDR format");
      }
    };
    ipaddr.IPv4.isIPv4 = function(string) {
      return this.parser(string) !== null;
    };
    ipaddr.IPv4.isValid = function(string) {
      try {
        new this(this.parser(string));
        return true;
      } catch (e) {
        return false;
      }
    };
    ipaddr.IPv4.isValidCIDR = function(string) {
      try {
        this.parseCIDR(string);
        return true;
      } catch (e) {
        return false;
      }
    };
    ipaddr.IPv4.isValidFourPartDecimal = function(string) {
      if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/)) {
        return true;
      } else {
        return false;
      }
    };
    ipaddr.IPv4.networkAddressFromCIDR = function(string) {
      let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;
      try {
        cidr = this.parseCIDR(string);
        ipInterfaceOctets = cidr[0].toByteArray();
        subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        octets = [];
        i = 0;
        while (i < 4) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
          i++;
        }
        return new this(octets);
      } catch (e) {
        throw new Error("ipaddr: the address does not have IPv4 CIDR format");
      }
    };
    ipaddr.IPv4.parse = function(string) {
      const parts = this.parser(string);
      if (parts === null) {
        throw new Error("ipaddr: string is not formatted like an IPv4 Address");
      }
      return new this(parts);
    };
    ipaddr.IPv4.parseCIDR = function(string) {
      let match;
      if (match = string.match(/^(.+)\/(\d+)$/)) {
        const maskLength = parseInt(match[2]);
        if (maskLength >= 0 && maskLength <= 32) {
          const parsed = [this.parse(match[1]), maskLength];
          Object.defineProperty(parsed, "toString", {
            value: function() {
              return this.join("/");
            }
          });
          return parsed;
        }
      }
      throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
    };
    ipaddr.IPv4.parser = function(string) {
      let match, part, value;
      if (match = string.match(ipv4Regexes.fourOctet)) {
        return function() {
          const ref = match.slice(1, 6);
          const results = [];
          for (let i = 0;i < ref.length; i++) {
            part = ref[i];
            results.push(parseIntAuto(part));
          }
          return results;
        }();
      } else if (match = string.match(ipv4Regexes.longValue)) {
        value = parseIntAuto(match[1]);
        if (value > 4294967295 || value < 0) {
          throw new Error("ipaddr: address outside defined range");
        }
        return function() {
          const results = [];
          let shift;
          for (shift = 0;shift <= 24; shift += 8) {
            results.push(value >> shift & 255);
          }
          return results;
        }().reverse();
      } else if (match = string.match(ipv4Regexes.twoOctet)) {
        return function() {
          const ref = match.slice(1, 4);
          const results = [];
          value = parseIntAuto(ref[1]);
          if (value > 16777215 || value < 0) {
            throw new Error("ipaddr: address outside defined range");
          }
          results.push(parseIntAuto(ref[0]));
          results.push(value >> 16 & 255);
          results.push(value >> 8 & 255);
          results.push(value & 255);
          return results;
        }();
      } else if (match = string.match(ipv4Regexes.threeOctet)) {
        return function() {
          const ref = match.slice(1, 5);
          const results = [];
          value = parseIntAuto(ref[2]);
          if (value > 65535 || value < 0) {
            throw new Error("ipaddr: address outside defined range");
          }
          results.push(parseIntAuto(ref[0]));
          results.push(parseIntAuto(ref[1]));
          results.push(value >> 8 & 255);
          results.push(value & 255);
          return results;
        }();
      } else {
        return null;
      }
    };
    ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {
      prefix = parseInt(prefix);
      if (prefix < 0 || prefix > 32) {
        throw new Error("ipaddr: invalid IPv4 prefix length");
      }
      const octets = [0, 0, 0, 0];
      let j = 0;
      const filledOctetCount = Math.floor(prefix / 8);
      while (j < filledOctetCount) {
        octets[j] = 255;
        j++;
      }
      if (filledOctetCount < 4) {
        octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;
      }
      return new this(octets);
    };
    ipaddr.IPv6 = function() {
      function IPv6(parts, zoneId) {
        let i, part;
        if (parts.length === 16) {
          this.parts = [];
          for (i = 0;i <= 14; i += 2) {
            this.parts.push(parts[i] << 8 | parts[i + 1]);
          }
        } else if (parts.length === 8) {
          this.parts = parts;
        } else {
          throw new Error("ipaddr: ipv6 part count should be 8 or 16");
        }
        for (i = 0;i < this.parts.length; i++) {
          part = this.parts[i];
          if (!(0 <= part && part <= 65535)) {
            throw new Error("ipaddr: ipv6 part should fit in 16 bits");
          }
        }
        if (zoneId) {
          this.zoneId = zoneId;
        }
      }
      IPv6.prototype.SpecialRanges = {
        unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
        linkLocal: [new IPv6([65152, 0, 0, 0, 0, 0, 0, 0]), 10],
        multicast: [new IPv6([65280, 0, 0, 0, 0, 0, 0, 0]), 8],
        loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
        uniqueLocal: [new IPv6([64512, 0, 0, 0, 0, 0, 0, 0]), 7],
        ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 65535, 0, 0]), 96],
        discard: [new IPv6([256, 0, 0, 0, 0, 0, 0, 0]), 64],
        rfc6145: [new IPv6([0, 0, 0, 0, 65535, 0, 0, 0]), 96],
        rfc6052: [new IPv6([100, 65435, 0, 0, 0, 0, 0, 0]), 96],
        "6to4": [new IPv6([8194, 0, 0, 0, 0, 0, 0, 0]), 16],
        teredo: [new IPv6([8193, 0, 0, 0, 0, 0, 0, 0]), 32],
        benchmarking: [new IPv6([8193, 2, 0, 0, 0, 0, 0, 0]), 48],
        amt: [new IPv6([8193, 3, 0, 0, 0, 0, 0, 0]), 32],
        as112v6: [
          [new IPv6([8193, 4, 274, 0, 0, 0, 0, 0]), 48],
          [new IPv6([9760, 79, 32768, 0, 0, 0, 0, 0]), 48]
        ],
        deprecated: [new IPv6([8193, 16, 0, 0, 0, 0, 0, 0]), 28],
        orchid2: [new IPv6([8193, 32, 0, 0, 0, 0, 0, 0]), 28],
        droneRemoteIdProtocolEntityTags: [new IPv6([8193, 48, 0, 0, 0, 0, 0, 0]), 28],
        reserved: [
          [new IPv6([8193, 0, 0, 0, 0, 0, 0, 0]), 23],
          [new IPv6([8193, 3512, 0, 0, 0, 0, 0, 0]), 32]
        ]
      };
      IPv6.prototype.isIPv4MappedAddress = function() {
        return this.range() === "ipv4Mapped";
      };
      IPv6.prototype.kind = function() {
        return "ipv6";
      };
      IPv6.prototype.match = function(other, cidrRange) {
        let ref;
        if (cidrRange === undefined) {
          ref = other;
          other = ref[0];
          cidrRange = ref[1];
        }
        if (other.kind() !== "ipv6") {
          throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
        }
        return matchCIDR(this.parts, other.parts, 16, cidrRange);
      };
      IPv6.prototype.prefixLengthFromSubnetMask = function() {
        let cidr = 0;
        let stop = false;
        const zerotable = {
          0: 16,
          32768: 15,
          49152: 14,
          57344: 13,
          61440: 12,
          63488: 11,
          64512: 10,
          65024: 9,
          65280: 8,
          65408: 7,
          65472: 6,
          65504: 5,
          65520: 4,
          65528: 3,
          65532: 2,
          65534: 1,
          65535: 0
        };
        let part, zeros;
        for (let i = 7;i >= 0; i -= 1) {
          part = this.parts[i];
          if (part in zerotable) {
            zeros = zerotable[part];
            if (stop && zeros !== 0) {
              return null;
            }
            if (zeros !== 16) {
              stop = true;
            }
            cidr += zeros;
          } else {
            return null;
          }
        }
        return 128 - cidr;
      };
      IPv6.prototype.range = function() {
        return ipaddr.subnetMatch(this, this.SpecialRanges);
      };
      IPv6.prototype.toByteArray = function() {
        let part;
        const bytes = [];
        const ref = this.parts;
        for (let i = 0;i < ref.length; i++) {
          part = ref[i];
          bytes.push(part >> 8);
          bytes.push(part & 255);
        }
        return bytes;
      };
      IPv6.prototype.toFixedLengthString = function() {
        const addr = function() {
          const results = [];
          for (let i = 0;i < this.parts.length; i++) {
            results.push(padPart(this.parts[i].toString(16), 4));
          }
          return results;
        }.call(this).join(":");
        let suffix = "";
        if (this.zoneId) {
          suffix = `%${this.zoneId}`;
        }
        return addr + suffix;
      };
      IPv6.prototype.toIPv4Address = function() {
        if (!this.isIPv4MappedAddress()) {
          throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
        }
        const ref = this.parts.slice(-2);
        const high = ref[0];
        const low = ref[1];
        return new ipaddr.IPv4([high >> 8, high & 255, low >> 8, low & 255]);
      };
      IPv6.prototype.toNormalizedString = function() {
        const addr = function() {
          const results = [];
          for (let i = 0;i < this.parts.length; i++) {
            results.push(this.parts[i].toString(16));
          }
          return results;
        }.call(this).join(":");
        let suffix = "";
        if (this.zoneId) {
          suffix = `%${this.zoneId}`;
        }
        return addr + suffix;
      };
      IPv6.prototype.toRFC5952String = function() {
        const regex = /((^|:)(0(:|$)){2,})/g;
        const string = this.toNormalizedString();
        let bestMatchIndex = 0;
        let bestMatchLength = -1;
        let match;
        while (match = regex.exec(string)) {
          if (match[0].length > bestMatchLength) {
            bestMatchIndex = match.index;
            bestMatchLength = match[0].length;
          }
        }
        if (bestMatchLength < 0) {
          return string;
        }
        return `${string.substring(0, bestMatchIndex)}::${string.substring(bestMatchIndex + bestMatchLength)}`;
      };
      IPv6.prototype.toString = function() {
        return this.toRFC5952String();
      };
      return IPv6;
    }();
    ipaddr.IPv6.broadcastAddressFromCIDR = function(string) {
      try {
        const cidr = this.parseCIDR(string);
        const ipInterfaceOctets = cidr[0].toByteArray();
        const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        const octets = [];
        let i = 0;
        while (i < 16) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
          i++;
        }
        return new this(octets);
      } catch (e) {
        throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);
      }
    };
    ipaddr.IPv6.isIPv6 = function(string) {
      return this.parser(string) !== null;
    };
    ipaddr.IPv6.isValid = function(string) {
      if (typeof string === "string" && string.indexOf(":") === -1) {
        return false;
      }
      try {
        const addr = this.parser(string);
        new this(addr.parts, addr.zoneId);
        return true;
      } catch (e) {
        return false;
      }
    };
    ipaddr.IPv6.isValidCIDR = function(string) {
      if (typeof string === "string" && string.indexOf(":") === -1) {
        return false;
      }
      try {
        this.parseCIDR(string);
        return true;
      } catch (e) {
        return false;
      }
    };
    ipaddr.IPv6.networkAddressFromCIDR = function(string) {
      let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;
      try {
        cidr = this.parseCIDR(string);
        ipInterfaceOctets = cidr[0].toByteArray();
        subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        octets = [];
        i = 0;
        while (i < 16) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
          i++;
        }
        return new this(octets);
      } catch (e) {
        throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);
      }
    };
    ipaddr.IPv6.parse = function(string) {
      const addr = this.parser(string);
      if (addr.parts === null) {
        throw new Error("ipaddr: string is not formatted like an IPv6 Address");
      }
      return new this(addr.parts, addr.zoneId);
    };
    ipaddr.IPv6.parseCIDR = function(string) {
      let maskLength, match, parsed;
      if (match = string.match(/^(.+)\/(\d+)$/)) {
        maskLength = parseInt(match[2]);
        if (maskLength >= 0 && maskLength <= 128) {
          parsed = [this.parse(match[1]), maskLength];
          Object.defineProperty(parsed, "toString", {
            value: function() {
              return this.join("/");
            }
          });
          return parsed;
        }
      }
      throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
    };
    ipaddr.IPv6.parser = function(string) {
      let addr, i, match, octet, octets, zoneId;
      if (match = string.match(ipv6Regexes.deprecatedTransitional)) {
        return this.parser(`::ffff:${match[1]}`);
      }
      if (ipv6Regexes.native.test(string)) {
        return expandIPv6(string, 8);
      }
      if (match = string.match(ipv6Regexes.transitional)) {
        zoneId = match[6] || "";
        addr = match[1];
        if (!match[1].endsWith("::")) {
          addr = addr.slice(0, -1);
        }
        addr = expandIPv6(addr + zoneId, 6);
        if (addr.parts) {
          octets = [
            parseInt(match[2]),
            parseInt(match[3]),
            parseInt(match[4]),
            parseInt(match[5])
          ];
          for (i = 0;i < octets.length; i++) {
            octet = octets[i];
            if (!(0 <= octet && octet <= 255)) {
              return null;
            }
          }
          addr.parts.push(octets[0] << 8 | octets[1]);
          addr.parts.push(octets[2] << 8 | octets[3]);
          return {
            parts: addr.parts,
            zoneId: addr.zoneId
          };
        }
      }
      return null;
    };
    ipaddr.IPv6.subnetMaskFromPrefixLength = function(prefix) {
      prefix = parseInt(prefix);
      if (prefix < 0 || prefix > 128) {
        throw new Error("ipaddr: invalid IPv6 prefix length");
      }
      const octets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      let j = 0;
      const filledOctetCount = Math.floor(prefix / 8);
      while (j < filledOctetCount) {
        octets[j] = 255;
        j++;
      }
      if (filledOctetCount < 16) {
        octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;
      }
      return new this(octets);
    };
    ipaddr.fromByteArray = function(bytes) {
      const length = bytes.length;
      if (length === 4) {
        return new ipaddr.IPv4(bytes);
      } else if (length === 16) {
        return new ipaddr.IPv6(bytes);
      } else {
        throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
      }
    };
    ipaddr.isValid = function(string) {
      return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
    };
    ipaddr.isValidCIDR = function(string) {
      return ipaddr.IPv6.isValidCIDR(string) || ipaddr.IPv4.isValidCIDR(string);
    };
    ipaddr.parse = function(string) {
      if (ipaddr.IPv6.isValid(string)) {
        return ipaddr.IPv6.parse(string);
      } else if (ipaddr.IPv4.isValid(string)) {
        return ipaddr.IPv4.parse(string);
      } else {
        throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
      }
    };
    ipaddr.parseCIDR = function(string) {
      try {
        return ipaddr.IPv6.parseCIDR(string);
      } catch (e) {
        try {
          return ipaddr.IPv4.parseCIDR(string);
        } catch (e2) {
          throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
        }
      }
    };
    ipaddr.process = function(string) {
      const addr = this.parse(string);
      if (addr.kind() === "ipv6" && addr.isIPv4MappedAddress()) {
        return addr.toIPv4Address();
      } else {
        return addr;
      }
    };
    ipaddr.subnetMatch = function(address, rangeList, defaultName) {
      let i, rangeName, rangeSubnets, subnet;
      if (defaultName === undefined || defaultName === null) {
        defaultName = "unicast";
      }
      for (rangeName in rangeList) {
        if (Object.prototype.hasOwnProperty.call(rangeList, rangeName)) {
          rangeSubnets = rangeList[rangeName];
          if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
            rangeSubnets = [rangeSubnets];
          }
          for (i = 0;i < rangeSubnets.length; i++) {
            subnet = rangeSubnets[i];
            if (address.kind() === subnet[0].kind() && address.match.apply(address, subnet)) {
              return rangeName;
            }
          }
        }
      }
      return defaultName;
    };
    if (typeof module !== "undefined" && module.exports) {
      module.exports = ipaddr;
    } else {
      root.ipaddr = ipaddr;
    }
  })(exports);
});

// node_modules/@fastify/proxy-addr/index.js
var require_proxy_addr = __commonJS((exports, module) => {
  /*!
   * proxy-addr
   * Copyright(c) 2021 Fastify collaborators
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = proxyaddr;
  module.exports.default = proxyaddr;
  module.exports.proxyaddr = proxyaddr;
  module.exports.all = alladdrs;
  module.exports.compile = compile;
  var forwarded = require_forwarded();
  var ipaddr = require_ipaddr();
  var DIGIT_REGEXP = /^\d+$/u;
  var isip = ipaddr.isValid;
  var parseip = ipaddr.parse;
  var IP_RANGES = {
    linklocal: ["169.254.0.0/16", "fe80::/10"],
    loopback: ["127.0.0.1/8", "::1/128"],
    uniquelocal: ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7"]
  };
  function alladdrs(req, trust) {
    const addrs = forwarded(req);
    if (!trust) {
      return addrs;
    }
    if (typeof trust !== "function") {
      trust = compile(trust);
    }
    for (var i = 0;i < addrs.length - 1; i++) {
      if (trust(addrs[i], i))
        continue;
      addrs.length = i + 1;
    }
    return addrs;
  }
  function compile(val) {
    if (!val) {
      throw new TypeError("argument is required");
    }
    let trust;
    if (typeof val === "string") {
      trust = [val];
    } else if (Array.isArray(val)) {
      trust = val.slice();
    } else {
      throw new TypeError("unsupported trust argument");
    }
    for (var i = 0;i < trust.length; i++) {
      val = trust[i];
      if (!Object.prototype.hasOwnProperty.call(IP_RANGES, val)) {
        continue;
      }
      val = IP_RANGES[val];
      trust.splice.apply(trust, [i, 1].concat(val));
      i += val.length - 1;
    }
    return compileTrust(compileRangeSubnets(trust));
  }
  function compileRangeSubnets(arr) {
    const rangeSubnets = new Array(arr.length);
    for (var i = 0;i < arr.length; i++) {
      rangeSubnets[i] = parseipNotation(arr[i]);
    }
    return rangeSubnets;
  }
  function compileTrust(rangeSubnets) {
    const len = rangeSubnets.length;
    return len === 0 ? trustNone : len === 1 ? trustSingle(rangeSubnets[0]) : trustMulti(rangeSubnets);
  }
  function parseipNotation(note) {
    const pos = note.lastIndexOf("/");
    const str = pos !== -1 ? note.substring(0, pos) : note;
    if (!isip(str)) {
      throw new TypeError("invalid IP address: " + str);
    }
    let ip = parseip(str);
    if (pos === -1 && ip.kind() === "ipv6" && ip.isIPv4MappedAddress()) {
      ip = ip.toIPv4Address();
    }
    const max = ip.kind() === "ipv6" ? 128 : 32;
    let range = pos !== -1 ? note.substring(pos + 1, note.length) : null;
    if (range === null) {
      range = max;
    } else if (DIGIT_REGEXP.test(range)) {
      range = parseInt(range, 10);
    } else if (ip.kind() === "ipv4" && isip(range)) {
      range = parseNetmask(range);
    } else {
      range = null;
    }
    if (range <= 0 || range > max) {
      throw new TypeError("invalid range on address: " + note);
    }
    return [ip, range];
  }
  function parseNetmask(netmask) {
    const ip = parseip(netmask);
    const kind = ip.kind();
    return kind === "ipv4" ? ip.prefixLengthFromSubnetMask() : null;
  }
  function proxyaddr(req, trust) {
    if (!req) {
      throw new TypeError("req argument is required");
    }
    if (!trust) {
      throw new TypeError("trust argument is required");
    }
    const addrs = alladdrs(req, trust);
    const addr = addrs[addrs.length - 1];
    return addr;
  }
  function trustNone() {
    return false;
  }
  function trustMulti(subnets) {
    return function trust(addr) {
      if (!isip(addr))
        return false;
      const ip = parseip(addr);
      let ipconv;
      const kind = ip.kind();
      for (var i = 0;i < subnets.length; i++) {
        const subnet = subnets[i];
        const subnetip = subnet[0];
        const subnetkind = subnetip.kind();
        const subnetrange = subnet[1];
        let trusted = ip;
        if (kind !== subnetkind) {
          if (subnetkind === "ipv4" && !ip.isIPv4MappedAddress()) {
            continue;
          }
          if (!ipconv) {
            ipconv = subnetkind === "ipv4" ? ip.toIPv4Address() : ip.toIPv4MappedAddress();
          }
          trusted = ipconv;
        }
        if (trusted.match(subnetip, subnetrange)) {
          return true;
        }
      }
      return false;
    };
  }
  function trustSingle(subnet) {
    const subnetip = subnet[0];
    const subnetkind = subnetip.kind();
    const subnetisipv4 = subnetkind === "ipv4";
    const subnetrange = subnet[1];
    return function trust(addr) {
      if (!isip(addr))
        return false;
      let ip = parseip(addr);
      const kind = ip.kind();
      if (kind !== subnetkind) {
        if (subnetisipv4 && !ip.isIPv4MappedAddress()) {
          return false;
        }
        ip = subnetisipv4 ? ip.toIPv4Address() : ip.toIPv4MappedAddress();
      }
      return ip.match(subnetip, subnetrange);
    };
  }
});

// node_modules/fastify/lib/request.js
var require_request = __commonJS((exports, module) => {
  var proxyAddr = require_proxy_addr();
  var {
    kHasBeenDecorated,
    kSchemaBody,
    kSchemaHeaders,
    kSchemaParams,
    kSchemaQuerystring,
    kSchemaController,
    kOptions,
    kRequestCacheValidateFns,
    kRouteContext,
    kRequestOriginalUrl
  } = require_symbols3();
  var { FST_ERR_REQ_INVALID_VALIDATION_INVOCATION } = require_errors4();
  var HTTP_PART_SYMBOL_MAP = {
    body: kSchemaBody,
    headers: kSchemaHeaders,
    params: kSchemaParams,
    querystring: kSchemaQuerystring,
    query: kSchemaQuerystring
  };
  function Request(id, params, req, query, log, context) {
    this.id = id;
    this[kRouteContext] = context;
    this.params = params;
    this.raw = req;
    this.query = query;
    this.log = log;
    this.body = undefined;
  }
  Request.props = [];
  function getTrustProxyFn(tp) {
    if (typeof tp === "function") {
      return tp;
    }
    if (tp === true) {
      return null;
    }
    if (typeof tp === "number") {
      return function(a, i) {
        return i < tp;
      };
    }
    if (typeof tp === "string") {
      const values = tp.split(",").map((it) => it.trim());
      return proxyAddr.compile(values);
    }
    return proxyAddr.compile(tp);
  }
  function buildRequest(R, trustProxy) {
    if (trustProxy) {
      return buildRequestWithTrustProxy(R, trustProxy);
    }
    return buildRegularRequest(R);
  }
  function buildRegularRequest(R) {
    const props = R.props.slice();
    function _Request(id, params, req, query, log, context) {
      this.id = id;
      this[kRouteContext] = context;
      this.params = params;
      this.raw = req;
      this.query = query;
      this.log = log;
      this.body = undefined;
      let prop;
      for (let i = 0;i < props.length; i++) {
        prop = props[i];
        this[prop.key] = prop.value;
      }
    }
    Object.setPrototypeOf(_Request.prototype, R.prototype);
    Object.setPrototypeOf(_Request, R);
    _Request.props = props;
    _Request.parent = R;
    return _Request;
  }
  function getLastEntryInMultiHeaderValue(headerValue) {
    const lastIndex = headerValue.lastIndexOf(",");
    return lastIndex === -1 ? headerValue.trim() : headerValue.slice(lastIndex + 1).trim();
  }
  function buildRequestWithTrustProxy(R, trustProxy) {
    const _Request = buildRegularRequest(R);
    const proxyFn = getTrustProxyFn(trustProxy);
    _Request[kHasBeenDecorated] = true;
    Object.defineProperties(_Request.prototype, {
      ip: {
        get() {
          const addrs = proxyAddr.all(this.raw, proxyFn);
          return addrs[addrs.length - 1];
        }
      },
      ips: {
        get() {
          return proxyAddr.all(this.raw, proxyFn);
        }
      },
      host: {
        get() {
          if (this.ip !== undefined && this.headers["x-forwarded-host"]) {
            return getLastEntryInMultiHeaderValue(this.headers["x-forwarded-host"]);
          }
          return this.headers.host ?? this.headers[":authority"] ?? "";
        }
      },
      protocol: {
        get() {
          if (this.headers["x-forwarded-proto"]) {
            return getLastEntryInMultiHeaderValue(this.headers["x-forwarded-proto"]);
          }
          if (this.socket) {
            return this.socket.encrypted ? "https" : "http";
          }
        }
      }
    });
    return _Request;
  }
  Object.defineProperties(Request.prototype, {
    server: {
      get() {
        return this[kRouteContext].server;
      }
    },
    url: {
      get() {
        return this.raw.url;
      }
    },
    originalUrl: {
      get() {
        if (!this[kRequestOriginalUrl]) {
          this[kRequestOriginalUrl] = this.raw.originalUrl || this.raw.url;
        }
        return this[kRequestOriginalUrl];
      }
    },
    method: {
      get() {
        return this.raw.method;
      }
    },
    routeOptions: {
      get() {
        const context = this[kRouteContext];
        const routeLimit = context._parserOptions.limit;
        const serverLimit = context.server.initialConfig.bodyLimit;
        const version = context.server.hasConstraintStrategy("version") ? this.raw.headers["accept-version"] : undefined;
        const options = {
          method: context.config?.method,
          url: context.config?.url,
          bodyLimit: routeLimit || serverLimit,
          attachValidation: context.attachValidation,
          logLevel: context.logLevel,
          exposeHeadRoute: context.exposeHeadRoute,
          prefixTrailingSlash: context.prefixTrailingSlash,
          handler: context.handler,
          version
        };
        Object.defineProperties(options, {
          config: {
            get: () => context.config
          },
          schema: {
            get: () => context.schema
          }
        });
        return Object.freeze(options);
      }
    },
    is404: {
      get() {
        return this[kRouteContext].config?.url === undefined;
      }
    },
    socket: {
      get() {
        return this.raw.socket;
      }
    },
    ip: {
      get() {
        if (this.socket) {
          return this.socket.remoteAddress;
        }
      }
    },
    host: {
      get() {
        return this.raw.headers.host ?? this.raw.headers[":authority"] ?? "";
      }
    },
    hostname: {
      get() {
        return this.host.split(":", 1)[0];
      }
    },
    port: {
      get() {
        const portFromHost = parseInt(this.host.split(":").slice(-1)[0]);
        if (!isNaN(portFromHost)) {
          return portFromHost;
        }
        const host = this.headers.host ?? this.headers[":authority"] ?? "";
        const portFromHeader = parseInt(host.split(":").slice(-1)[0]);
        if (!isNaN(portFromHeader)) {
          return portFromHeader;
        }
        return null;
      }
    },
    protocol: {
      get() {
        if (this.socket) {
          return this.socket.encrypted ? "https" : "http";
        }
      }
    },
    headers: {
      get() {
        if (this.additionalHeaders) {
          return Object.assign({}, this.raw.headers, this.additionalHeaders);
        }
        return this.raw.headers;
      },
      set(headers) {
        this.additionalHeaders = headers;
      }
    },
    getValidationFunction: {
      value: function(httpPartOrSchema) {
        if (typeof httpPartOrSchema === "string") {
          const symbol = HTTP_PART_SYMBOL_MAP[httpPartOrSchema];
          return this[kRouteContext][symbol];
        } else if (typeof httpPartOrSchema === "object") {
          return this[kRouteContext][kRequestCacheValidateFns]?.get(httpPartOrSchema);
        }
      }
    },
    compileValidationSchema: {
      value: function(schema, httpPart = null) {
        const { method, url } = this;
        if (this[kRouteContext][kRequestCacheValidateFns]?.has(schema)) {
          return this[kRouteContext][kRequestCacheValidateFns].get(schema);
        }
        const validatorCompiler = this[kRouteContext].validatorCompiler || this.server[kSchemaController].validatorCompiler || (this.server[kSchemaController].setupValidator(this.server[kOptions]) || this.server[kSchemaController].validatorCompiler);
        const validateFn = validatorCompiler({
          schema,
          method,
          url,
          httpPart
        });
        if (this[kRouteContext][kRequestCacheValidateFns] == null) {
          this[kRouteContext][kRequestCacheValidateFns] = new WeakMap;
        }
        this[kRouteContext][kRequestCacheValidateFns].set(schema, validateFn);
        return validateFn;
      }
    },
    validateInput: {
      value: function(input, schema, httpPart) {
        httpPart = typeof schema === "string" ? schema : httpPart;
        const symbol = httpPart != null && typeof httpPart === "string" && HTTP_PART_SYMBOL_MAP[httpPart];
        let validate;
        if (symbol) {
          validate = this[kRouteContext][symbol];
        }
        if (validate == null && (schema == null || typeof schema !== "object" || Array.isArray(schema))) {
          throw new FST_ERR_REQ_INVALID_VALIDATION_INVOCATION(httpPart);
        }
        if (validate == null) {
          if (this[kRouteContext][kRequestCacheValidateFns]?.has(schema)) {
            validate = this[kRouteContext][kRequestCacheValidateFns].get(schema);
          } else {
            validate = this.compileValidationSchema(schema, httpPart);
          }
        }
        return validate(input);
      }
    }
  });
  module.exports = Request;
  module.exports.buildRequest = buildRequest;
});

// node_modules/fastify/lib/context.js
var require_context = __commonJS((exports, module) => {
  var {
    kFourOhFourContext,
    kReplySerializerDefault,
    kSchemaErrorFormatter,
    kErrorHandler,
    kChildLoggerFactory,
    kOptions,
    kReply,
    kRequest,
    kBodyLimit,
    kLogLevel,
    kContentTypeParser,
    kRouteByFastify,
    kRequestCacheValidateFns,
    kReplyCacheSerializeFns
  } = require_symbols3();
  function Context({
    schema,
    handler,
    config,
    requestIdLogLabel,
    childLoggerFactory,
    errorHandler,
    bodyLimit,
    logLevel,
    logSerializers,
    attachValidation,
    validatorCompiler,
    serializerCompiler,
    replySerializer,
    schemaErrorFormatter,
    exposeHeadRoute,
    prefixTrailingSlash,
    server,
    isFastify
  }) {
    this.schema = schema;
    this.handler = handler;
    this.Reply = server[kReply];
    this.Request = server[kRequest];
    this.contentTypeParser = server[kContentTypeParser];
    this.onRequest = null;
    this.onSend = null;
    this.onError = null;
    this.onTimeout = null;
    this.preHandler = null;
    this.onResponse = null;
    this.preSerialization = null;
    this.onRequestAbort = null;
    this.config = config;
    this.errorHandler = errorHandler || server[kErrorHandler];
    this.requestIdLogLabel = requestIdLogLabel || server[kOptions].requestIdLogLabel;
    this.childLoggerFactory = childLoggerFactory || server[kChildLoggerFactory];
    this._middie = null;
    this._parserOptions = {
      limit: bodyLimit || server[kBodyLimit]
    };
    this.exposeHeadRoute = exposeHeadRoute;
    this.prefixTrailingSlash = prefixTrailingSlash;
    this.logLevel = logLevel || server[kLogLevel];
    this.logSerializers = logSerializers;
    this[kFourOhFourContext] = null;
    this.attachValidation = attachValidation;
    this[kReplySerializerDefault] = replySerializer;
    this.schemaErrorFormatter = schemaErrorFormatter || server[kSchemaErrorFormatter] || defaultSchemaErrorFormatter;
    this[kRouteByFastify] = isFastify;
    this[kRequestCacheValidateFns] = null;
    this[kReplyCacheSerializeFns] = null;
    this.validatorCompiler = validatorCompiler || null;
    this.serializerCompiler = serializerCompiler || null;
    this.server = server;
  }
  function defaultSchemaErrorFormatter(errors, dataVar) {
    let text = "";
    const separator = ", ";
    for (let i = 0;i !== errors.length; ++i) {
      const e = errors[i];
      text += dataVar + (e.instancePath || "") + " " + e.message + separator;
    }
    return new Error(text.slice(0, -separator.length));
  }
  module.exports = Context;
});

// node_modules/fastify/lib/decorate.js
var require_decorate = __commonJS((exports, module) => {
  var {
    kReply,
    kRequest,
    kState,
    kHasBeenDecorated
  } = require_symbols3();
  var {
    FST_ERR_DEC_ALREADY_PRESENT,
    FST_ERR_DEC_MISSING_DEPENDENCY,
    FST_ERR_DEC_AFTER_START,
    FST_ERR_DEC_REFERENCE_TYPE,
    FST_ERR_DEC_DEPENDENCY_INVALID_TYPE
  } = require_errors4();
  function decorate(instance, name, fn, dependencies) {
    if (Object.hasOwn(instance, name)) {
      throw new FST_ERR_DEC_ALREADY_PRESENT(name);
    }
    checkDependencies(instance, name, dependencies);
    if (fn && (typeof fn.getter === "function" || typeof fn.setter === "function")) {
      Object.defineProperty(instance, name, {
        get: fn.getter,
        set: fn.setter
      });
    } else {
      instance[name] = fn;
    }
  }
  function decorateConstructor(konstructor, name, fn, dependencies) {
    const instance = konstructor.prototype;
    if (Object.hasOwn(instance, name) || hasKey(konstructor, name)) {
      throw new FST_ERR_DEC_ALREADY_PRESENT(name);
    }
    konstructor[kHasBeenDecorated] = true;
    checkDependencies(konstructor, name, dependencies);
    if (fn && (typeof fn.getter === "function" || typeof fn.setter === "function")) {
      Object.defineProperty(instance, name, {
        get: fn.getter,
        set: fn.setter
      });
    } else if (typeof fn === "function") {
      instance[name] = fn;
    } else {
      konstructor.props.push({ key: name, value: fn });
    }
  }
  function checkReferenceType(name, fn) {
    if (typeof fn === "object" && fn && !(typeof fn.getter === "function" || typeof fn.setter === "function")) {
      throw new FST_ERR_DEC_REFERENCE_TYPE(name, typeof fn);
    }
  }
  function decorateFastify(name, fn, dependencies) {
    assertNotStarted(this, name);
    decorate(this, name, fn, dependencies);
    return this;
  }
  function checkExistence(instance, name) {
    if (name) {
      return name in instance || instance.prototype && name in instance.prototype || hasKey(instance, name);
    }
    return instance in this;
  }
  function hasKey(fn, name) {
    if (fn.props) {
      return fn.props.find(({ key }) => key === name);
    }
    return false;
  }
  function checkRequestExistence(name) {
    if (name && hasKey(this[kRequest], name))
      return true;
    return checkExistence(this[kRequest].prototype, name);
  }
  function checkReplyExistence(name) {
    if (name && hasKey(this[kReply], name))
      return true;
    return checkExistence(this[kReply].prototype, name);
  }
  function checkDependencies(instance, name, deps) {
    if (deps === undefined || deps === null) {
      return;
    }
    if (!Array.isArray(deps)) {
      throw new FST_ERR_DEC_DEPENDENCY_INVALID_TYPE(name);
    }
    for (let i = 0;i !== deps.length; ++i) {
      if (!checkExistence(instance, deps[i])) {
        throw new FST_ERR_DEC_MISSING_DEPENDENCY(deps[i]);
      }
    }
  }
  function decorateReply(name, fn, dependencies) {
    assertNotStarted(this, name);
    checkReferenceType(name, fn);
    decorateConstructor(this[kReply], name, fn, dependencies);
    return this;
  }
  function decorateRequest(name, fn, dependencies) {
    assertNotStarted(this, name);
    checkReferenceType(name, fn);
    decorateConstructor(this[kRequest], name, fn, dependencies);
    return this;
  }
  function assertNotStarted(instance, name) {
    if (instance[kState].started) {
      throw new FST_ERR_DEC_AFTER_START(name);
    }
  }
  module.exports = {
    add: decorateFastify,
    exist: checkExistence,
    existRequest: checkRequestExistence,
    existReply: checkReplyExistence,
    dependencies: checkDependencies,
    decorateReply,
    decorateRequest
  };
});

// node_modules/toad-cache/dist/toad-cache.cjs
var require_toad_cache = __commonJS((exports) => {
  class FifoMap {
    constructor(max = 1000, ttlInMsecs = 0) {
      if (isNaN(max) || max < 0) {
        throw new Error("Invalid max value");
      }
      if (isNaN(ttlInMsecs) || ttlInMsecs < 0) {
        throw new Error("Invalid ttl value");
      }
      this.first = null;
      this.items = new Map;
      this.last = null;
      this.max = max;
      this.ttl = ttlInMsecs;
    }
    get size() {
      return this.items.size;
    }
    clear() {
      this.items = new Map;
      this.first = null;
      this.last = null;
    }
    delete(key) {
      if (this.items.has(key)) {
        const deletedItem = this.items.get(key);
        this.items.delete(key);
        if (deletedItem.prev !== null) {
          deletedItem.prev.next = deletedItem.next;
        }
        if (deletedItem.next !== null) {
          deletedItem.next.prev = deletedItem.prev;
        }
        if (this.first === deletedItem) {
          this.first = deletedItem.next;
        }
        if (this.last === deletedItem) {
          this.last = deletedItem.prev;
        }
      }
    }
    deleteMany(keys) {
      for (var i = 0;i < keys.length; i++) {
        this.delete(keys[i]);
      }
    }
    evict() {
      if (this.size > 0) {
        const item = this.first;
        this.items.delete(item.key);
        if (this.size === 0) {
          this.first = null;
          this.last = null;
        } else {
          this.first = item.next;
          this.first.prev = null;
        }
      }
    }
    expiresAt(key) {
      if (this.items.has(key)) {
        return this.items.get(key).expiry;
      }
    }
    get(key) {
      if (this.items.has(key)) {
        const item = this.items.get(key);
        if (this.ttl > 0 && item.expiry <= Date.now()) {
          this.delete(key);
          return;
        }
        return item.value;
      }
    }
    getMany(keys) {
      const result = [];
      for (var i = 0;i < keys.length; i++) {
        result.push(this.get(keys[i]));
      }
      return result;
    }
    keys() {
      return this.items.keys();
    }
    set(key, value) {
      if (this.items.has(key)) {
        const item2 = this.items.get(key);
        item2.value = value;
        item2.expiry = this.ttl > 0 ? Date.now() + this.ttl : this.ttl;
        return;
      }
      if (this.max > 0 && this.size === this.max) {
        this.evict();
      }
      const item = {
        expiry: this.ttl > 0 ? Date.now() + this.ttl : this.ttl,
        key,
        prev: this.last,
        next: null,
        value
      };
      this.items.set(key, item);
      if (this.size === 1) {
        this.first = item;
      } else {
        this.last.next = item;
      }
      this.last = item;
    }
  }

  class LruMap {
    constructor(max = 1000, ttlInMsecs = 0) {
      if (isNaN(max) || max < 0) {
        throw new Error("Invalid max value");
      }
      if (isNaN(ttlInMsecs) || ttlInMsecs < 0) {
        throw new Error("Invalid ttl value");
      }
      this.first = null;
      this.items = new Map;
      this.last = null;
      this.max = max;
      this.ttl = ttlInMsecs;
    }
    get size() {
      return this.items.size;
    }
    bumpLru(item) {
      if (this.last === item) {
        return;
      }
      const last = this.last;
      const next = item.next;
      const prev = item.prev;
      if (this.first === item) {
        this.first = next;
      }
      item.next = null;
      item.prev = last;
      last.next = item;
      if (prev !== null) {
        prev.next = next;
      }
      if (next !== null) {
        next.prev = prev;
      }
      this.last = item;
    }
    clear() {
      this.items = new Map;
      this.first = null;
      this.last = null;
    }
    delete(key) {
      if (this.items.has(key)) {
        const item = this.items.get(key);
        this.items.delete(key);
        if (item.prev !== null) {
          item.prev.next = item.next;
        }
        if (item.next !== null) {
          item.next.prev = item.prev;
        }
        if (this.first === item) {
          this.first = item.next;
        }
        if (this.last === item) {
          this.last = item.prev;
        }
      }
    }
    deleteMany(keys) {
      for (var i = 0;i < keys.length; i++) {
        this.delete(keys[i]);
      }
    }
    evict() {
      if (this.size > 0) {
        const item = this.first;
        this.items.delete(item.key);
        if (this.size === 0) {
          this.first = null;
          this.last = null;
        } else {
          this.first = item.next;
          this.first.prev = null;
        }
      }
    }
    expiresAt(key) {
      if (this.items.has(key)) {
        return this.items.get(key).expiry;
      }
    }
    get(key) {
      if (this.items.has(key)) {
        const item = this.items.get(key);
        if (this.ttl > 0 && item.expiry <= Date.now()) {
          this.delete(key);
          return;
        }
        this.bumpLru(item);
        return item.value;
      }
    }
    getMany(keys) {
      const result = [];
      for (var i = 0;i < keys.length; i++) {
        result.push(this.get(keys[i]));
      }
      return result;
    }
    keys() {
      return this.items.keys();
    }
    set(key, value) {
      if (this.items.has(key)) {
        const item2 = this.items.get(key);
        item2.value = value;
        item2.expiry = this.ttl > 0 ? Date.now() + this.ttl : this.ttl;
        if (this.last !== item2) {
          this.bumpLru(item2);
        }
        return;
      }
      if (this.max > 0 && this.size === this.max) {
        this.evict();
      }
      const item = {
        expiry: this.ttl > 0 ? Date.now() + this.ttl : this.ttl,
        key,
        prev: this.last,
        next: null,
        value
      };
      this.items.set(key, item);
      if (this.size === 1) {
        this.first = item;
      } else {
        this.last.next = item;
      }
      this.last = item;
    }
  }

  class LruObject {
    constructor(max = 1000, ttlInMsecs = 0) {
      if (isNaN(max) || max < 0) {
        throw new Error("Invalid max value");
      }
      if (isNaN(ttlInMsecs) || ttlInMsecs < 0) {
        throw new Error("Invalid ttl value");
      }
      this.first = null;
      this.items = Object.create(null);
      this.last = null;
      this.size = 0;
      this.max = max;
      this.ttl = ttlInMsecs;
    }
    bumpLru(item) {
      if (this.last === item) {
        return;
      }
      const last = this.last;
      const next = item.next;
      const prev = item.prev;
      if (this.first === item) {
        this.first = next;
      }
      item.next = null;
      item.prev = last;
      last.next = item;
      if (prev !== null) {
        prev.next = next;
      }
      if (next !== null) {
        next.prev = prev;
      }
      this.last = item;
    }
    clear() {
      this.items = Object.create(null);
      this.first = null;
      this.last = null;
      this.size = 0;
    }
    delete(key) {
      if (Object.prototype.hasOwnProperty.call(this.items, key)) {
        const item = this.items[key];
        delete this.items[key];
        this.size--;
        if (item.prev !== null) {
          item.prev.next = item.next;
        }
        if (item.next !== null) {
          item.next.prev = item.prev;
        }
        if (this.first === item) {
          this.first = item.next;
        }
        if (this.last === item) {
          this.last = item.prev;
        }
      }
    }
    deleteMany(keys) {
      for (var i = 0;i < keys.length; i++) {
        this.delete(keys[i]);
      }
    }
    evict() {
      if (this.size > 0) {
        const item = this.first;
        delete this.items[item.key];
        if (--this.size === 0) {
          this.first = null;
          this.last = null;
        } else {
          this.first = item.next;
          this.first.prev = null;
        }
      }
    }
    expiresAt(key) {
      if (Object.prototype.hasOwnProperty.call(this.items, key)) {
        return this.items[key].expiry;
      }
    }
    get(key) {
      if (Object.prototype.hasOwnProperty.call(this.items, key)) {
        const item = this.items[key];
        if (this.ttl > 0 && item.expiry <= Date.now()) {
          this.delete(key);
          return;
        }
        this.bumpLru(item);
        return item.value;
      }
    }
    getMany(keys) {
      const result = [];
      for (var i = 0;i < keys.length; i++) {
        result.push(this.get(keys[i]));
      }
      return result;
    }
    keys() {
      return Object.keys(this.items);
    }
    set(key, value) {
      if (Object.prototype.hasOwnProperty.call(this.items, key)) {
        const item2 = this.items[key];
        item2.value = value;
        item2.expiry = this.ttl > 0 ? Date.now() + this.ttl : this.ttl;
        if (this.last !== item2) {
          this.bumpLru(item2);
        }
        return;
      }
      if (this.max > 0 && this.size === this.max) {
        this.evict();
      }
      const item = {
        expiry: this.ttl > 0 ? Date.now() + this.ttl : this.ttl,
        key,
        prev: this.last,
        next: null,
        value
      };
      this.items[key] = item;
      if (++this.size === 1) {
        this.first = item;
      } else {
        this.last.next = item;
      }
      this.last = item;
    }
  }

  class HitStatisticsRecord {
    constructor() {
      this.records = {};
    }
    initForCache(cacheId, currentTimeStamp) {
      this.records[cacheId] = {
        [currentTimeStamp]: {
          cacheSize: 0,
          hits: 0,
          falsyHits: 0,
          emptyHits: 0,
          misses: 0,
          expirations: 0,
          evictions: 0,
          invalidateOne: 0,
          invalidateAll: 0,
          sets: 0
        }
      };
    }
    resetForCache(cacheId) {
      for (let key of Object.keys(this.records[cacheId])) {
        this.records[cacheId][key] = {
          cacheSize: 0,
          hits: 0,
          falsyHits: 0,
          emptyHits: 0,
          misses: 0,
          expirations: 0,
          evictions: 0,
          invalidateOne: 0,
          invalidateAll: 0,
          sets: 0
        };
      }
    }
    getStatistics() {
      return this.records;
    }
  }
  function getTimestamp(date) {
    return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, "0")}-${date.getDate().toString().padStart(2, "0")}`;
  }

  class HitStatistics {
    constructor(cacheId, statisticTtlInHours, globalStatisticsRecord) {
      this.cacheId = cacheId;
      this.statisticTtlInHours = statisticTtlInHours;
      this.collectionStart = new Date;
      this.currentTimeStamp = getTimestamp(this.collectionStart);
      this.records = globalStatisticsRecord || new HitStatisticsRecord;
      this.records.initForCache(this.cacheId, this.currentTimeStamp);
    }
    get currentRecord() {
      if (!this.records.records[this.cacheId][this.currentTimeStamp]) {
        this.records.records[this.cacheId][this.currentTimeStamp] = {
          cacheSize: 0,
          hits: 0,
          falsyHits: 0,
          emptyHits: 0,
          misses: 0,
          expirations: 0,
          evictions: 0,
          sets: 0,
          invalidateOne: 0,
          invalidateAll: 0
        };
      }
      return this.records.records[this.cacheId][this.currentTimeStamp];
    }
    hoursPassed() {
      return (Date.now() - this.collectionStart) / 1000 / 60 / 60;
    }
    addHit() {
      this.archiveIfNeeded();
      this.currentRecord.hits++;
    }
    addFalsyHit() {
      this.archiveIfNeeded();
      this.currentRecord.falsyHits++;
    }
    addEmptyHit() {
      this.archiveIfNeeded();
      this.currentRecord.emptyHits++;
    }
    addMiss() {
      this.archiveIfNeeded();
      this.currentRecord.misses++;
    }
    addEviction() {
      this.archiveIfNeeded();
      this.currentRecord.evictions++;
    }
    setCacheSize(currentSize) {
      this.archiveIfNeeded();
      this.currentRecord.cacheSize = currentSize;
    }
    addExpiration() {
      this.archiveIfNeeded();
      this.currentRecord.expirations++;
    }
    addSet() {
      this.archiveIfNeeded();
      this.currentRecord.sets++;
    }
    addInvalidateOne() {
      this.archiveIfNeeded();
      this.currentRecord.invalidateOne++;
    }
    addInvalidateAll() {
      this.archiveIfNeeded();
      this.currentRecord.invalidateAll++;
    }
    getStatistics() {
      return this.records.getStatistics();
    }
    archiveIfNeeded() {
      if (this.hoursPassed() >= this.statisticTtlInHours) {
        this.collectionStart = new Date;
        this.currentTimeStamp = getTimestamp(this.collectionStart);
        this.records.initForCache(this.cacheId, this.currentTimeStamp);
      }
    }
  }

  class LruObjectHitStatistics extends LruObject {
    constructor(max, ttlInMsecs, cacheId, globalStatisticsRecord, statisticTtlInHours) {
      super(max || 1000, ttlInMsecs || 0);
      if (!cacheId) {
        throw new Error("Cache id is mandatory");
      }
      this.hitStatistics = new HitStatistics(cacheId, statisticTtlInHours !== undefined ? statisticTtlInHours : 24, globalStatisticsRecord);
    }
    getStatistics() {
      return this.hitStatistics.getStatistics();
    }
    set(key, value) {
      super.set(key, value);
      this.hitStatistics.addSet();
      this.hitStatistics.setCacheSize(this.size);
    }
    evict() {
      super.evict();
      this.hitStatistics.addEviction();
      this.hitStatistics.setCacheSize(this.size);
    }
    delete(key, isExpiration = false) {
      super.delete(key);
      if (!isExpiration) {
        this.hitStatistics.addInvalidateOne();
      }
      this.hitStatistics.setCacheSize(this.size);
    }
    clear() {
      super.clear();
      this.hitStatistics.addInvalidateAll();
      this.hitStatistics.setCacheSize(this.size);
    }
    get(key) {
      if (Object.prototype.hasOwnProperty.call(this.items, key)) {
        const item = this.items[key];
        if (this.ttl > 0 && item.expiry <= Date.now()) {
          this.delete(key, true);
          this.hitStatistics.addExpiration();
          return;
        }
        this.bumpLru(item);
        if (!item.value) {
          this.hitStatistics.addFalsyHit();
        }
        if (item.value === undefined || item.value === null || item.value === "") {
          this.hitStatistics.addEmptyHit();
        }
        this.hitStatistics.addHit();
        return item.value;
      }
      this.hitStatistics.addMiss();
    }
  }

  class FifoObject {
    constructor(max = 1000, ttlInMsecs = 0) {
      if (isNaN(max) || max < 0) {
        throw new Error("Invalid max value");
      }
      if (isNaN(ttlInMsecs) || ttlInMsecs < 0) {
        throw new Error("Invalid ttl value");
      }
      this.first = null;
      this.items = Object.create(null);
      this.last = null;
      this.size = 0;
      this.max = max;
      this.ttl = ttlInMsecs;
    }
    clear() {
      this.items = Object.create(null);
      this.first = null;
      this.last = null;
      this.size = 0;
    }
    delete(key) {
      if (Object.prototype.hasOwnProperty.call(this.items, key)) {
        const deletedItem = this.items[key];
        delete this.items[key];
        this.size--;
        if (deletedItem.prev !== null) {
          deletedItem.prev.next = deletedItem.next;
        }
        if (deletedItem.next !== null) {
          deletedItem.next.prev = deletedItem.prev;
        }
        if (this.first === deletedItem) {
          this.first = deletedItem.next;
        }
        if (this.last === deletedItem) {
          this.last = deletedItem.prev;
        }
      }
    }
    deleteMany(keys) {
      for (var i = 0;i < keys.length; i++) {
        this.delete(keys[i]);
      }
    }
    evict() {
      if (this.size > 0) {
        const item = this.first;
        delete this.items[item.key];
        if (--this.size === 0) {
          this.first = null;
          this.last = null;
        } else {
          this.first = item.next;
          this.first.prev = null;
        }
      }
    }
    expiresAt(key) {
      if (Object.prototype.hasOwnProperty.call(this.items, key)) {
        return this.items[key].expiry;
      }
    }
    get(key) {
      if (Object.prototype.hasOwnProperty.call(this.items, key)) {
        const item = this.items[key];
        if (this.ttl > 0 && item.expiry <= Date.now()) {
          this.delete(key);
          return;
        }
        return item.value;
      }
    }
    getMany(keys) {
      const result = [];
      for (var i = 0;i < keys.length; i++) {
        result.push(this.get(keys[i]));
      }
      return result;
    }
    keys() {
      return Object.keys(this.items);
    }
    set(key, value) {
      if (Object.prototype.hasOwnProperty.call(this.items, key)) {
        const item2 = this.items[key];
        item2.value = value;
        item2.expiry = this.ttl > 0 ? Date.now() + this.ttl : this.ttl;
        return;
      }
      if (this.max > 0 && this.size === this.max) {
        this.evict();
      }
      const item = {
        expiry: this.ttl > 0 ? Date.now() + this.ttl : this.ttl,
        key,
        prev: this.last,
        next: null,
        value
      };
      this.items[key] = item;
      if (++this.size === 1) {
        this.first = item;
      } else {
        this.last.next = item;
      }
      this.last = item;
    }
  }
  exports.Fifo = FifoObject;
  exports.FifoMap = FifoMap;
  exports.FifoObject = FifoObject;
  exports.HitStatisticsRecord = HitStatisticsRecord;
  exports.Lru = LruObject;
  exports.LruHitStatistics = LruObjectHitStatistics;
  exports.LruMap = LruMap;
  exports.LruObject = LruObject;
  exports.LruObjectHitStatistics = LruObjectHitStatistics;
});

// node_modules/secure-json-parse/index.js
var require_secure_json_parse = __commonJS((exports, module) => {
  var hasBuffer = typeof Buffer !== "undefined";
  var suspectProtoRx = /"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*:/;
  var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
  function _parse(text, reviver, options) {
    if (options == null) {
      if (reviver !== null && typeof reviver === "object") {
        options = reviver;
        reviver = undefined;
      }
    }
    if (hasBuffer && Buffer.isBuffer(text)) {
      text = text.toString();
    }
    if (text && text.charCodeAt(0) === 65279) {
      text = text.slice(1);
    }
    const obj = JSON.parse(text, reviver);
    if (obj === null || typeof obj !== "object") {
      return obj;
    }
    const protoAction = options && options.protoAction || "error";
    const constructorAction = options && options.constructorAction || "error";
    if (protoAction === "ignore" && constructorAction === "ignore") {
      return obj;
    }
    if (protoAction !== "ignore" && constructorAction !== "ignore") {
      if (suspectProtoRx.test(text) === false && suspectConstructorRx.test(text) === false) {
        return obj;
      }
    } else if (protoAction !== "ignore" && constructorAction === "ignore") {
      if (suspectProtoRx.test(text) === false) {
        return obj;
      }
    } else {
      if (suspectConstructorRx.test(text) === false) {
        return obj;
      }
    }
    return filter(obj, { protoAction, constructorAction, safe: options && options.safe });
  }
  function filter(obj, { protoAction = "error", constructorAction = "error", safe } = {}) {
    let next = [obj];
    while (next.length) {
      const nodes = next;
      next = [];
      for (const node of nodes) {
        if (protoAction !== "ignore" && Object.prototype.hasOwnProperty.call(node, "__proto__")) {
          if (safe === true) {
            return null;
          } else if (protoAction === "error") {
            throw new SyntaxError("Object contains forbidden prototype property");
          }
          delete node.__proto__;
        }
        if (constructorAction !== "ignore" && Object.prototype.hasOwnProperty.call(node, "constructor") && Object.prototype.hasOwnProperty.call(node.constructor, "prototype")) {
          if (safe === true) {
            return null;
          } else if (constructorAction === "error") {
            throw new SyntaxError("Object contains forbidden prototype property");
          }
          delete node.constructor;
        }
        for (const key in node) {
          const value = node[key];
          if (value && typeof value === "object") {
            next.push(value);
          }
        }
      }
    }
    return obj;
  }
  function parse(text, reviver, options) {
    const { stackTraceLimit } = Error;
    Error.stackTraceLimit = 0;
    try {
      return _parse(text, reviver, options);
    } finally {
      Error.stackTraceLimit = stackTraceLimit;
    }
  }
  function safeParse(text, reviver) {
    const { stackTraceLimit } = Error;
    Error.stackTraceLimit = 0;
    try {
      return _parse(text, reviver, { safe: true });
    } catch (_e) {
      return null;
    } finally {
      Error.stackTraceLimit = stackTraceLimit;
    }
  }
  module.exports = parse;
  module.exports.default = parse;
  module.exports.parse = parse;
  module.exports.safeParse = safeParse;
  module.exports.scan = filter;
});

// node_modules/fastify/lib/contentTypeParser.js
var require_contentTypeParser = __commonJS((exports, module) => {
  var { AsyncResource } = __require("node:async_hooks");
  var { FifoMap: Fifo } = require_toad_cache();
  var { parse: secureJsonParse } = require_secure_json_parse();
  var {
    kDefaultJsonParse,
    kContentTypeParser,
    kBodyLimit,
    kRequestPayloadStream,
    kState,
    kTestInternals,
    kReplyIsError,
    kRouteContext
  } = require_symbols3();
  var {
    FST_ERR_CTP_INVALID_TYPE,
    FST_ERR_CTP_EMPTY_TYPE,
    FST_ERR_CTP_ALREADY_PRESENT,
    FST_ERR_CTP_INVALID_HANDLER,
    FST_ERR_CTP_INVALID_PARSE_TYPE,
    FST_ERR_CTP_BODY_TOO_LARGE,
    FST_ERR_CTP_INVALID_MEDIA_TYPE,
    FST_ERR_CTP_INVALID_CONTENT_LENGTH,
    FST_ERR_CTP_EMPTY_JSON_BODY,
    FST_ERR_CTP_INSTANCE_ALREADY_STARTED
  } = require_errors4();
  var { FSTSEC001 } = require_warnings();
  function ContentTypeParser(bodyLimit, onProtoPoisoning, onConstructorPoisoning) {
    this[kDefaultJsonParse] = getDefaultJsonParser(onProtoPoisoning, onConstructorPoisoning);
    this.customParsers = new Map;
    this.customParsers.set("application/json", new Parser(true, false, bodyLimit, this[kDefaultJsonParse]));
    this.customParsers.set("text/plain", new Parser(true, false, bodyLimit, defaultPlainTextParser));
    this.parserList = ["application/json", "text/plain"];
    this.parserRegExpList = [];
    this.cache = new Fifo(100);
  }
  ContentTypeParser.prototype.add = function(contentType, opts, parserFn) {
    const contentTypeIsString = typeof contentType === "string";
    if (contentTypeIsString) {
      contentType = contentType.trim().toLowerCase();
      if (contentType.length === 0)
        throw new FST_ERR_CTP_EMPTY_TYPE;
    } else if (!(contentType instanceof RegExp)) {
      throw new FST_ERR_CTP_INVALID_TYPE;
    }
    if (typeof parserFn !== "function") {
      throw new FST_ERR_CTP_INVALID_HANDLER;
    }
    if (this.existingParser(contentType)) {
      throw new FST_ERR_CTP_ALREADY_PRESENT(contentType);
    }
    if (opts.parseAs !== undefined) {
      if (opts.parseAs !== "string" && opts.parseAs !== "buffer") {
        throw new FST_ERR_CTP_INVALID_PARSE_TYPE(opts.parseAs);
      }
    }
    const parser = new Parser(opts.parseAs === "string", opts.parseAs === "buffer", opts.bodyLimit, parserFn);
    if (contentType === "*") {
      this.customParsers.set("", parser);
    } else {
      if (contentTypeIsString) {
        this.parserList.unshift(contentType);
        this.customParsers.set(contentType, parser);
      } else {
        validateRegExp(contentType);
        this.parserRegExpList.unshift(contentType);
        this.customParsers.set(contentType.toString(), parser);
      }
    }
  };
  ContentTypeParser.prototype.hasParser = function(contentType) {
    if (typeof contentType === "string") {
      contentType = contentType.trim().toLowerCase();
    } else {
      if (!(contentType instanceof RegExp))
        throw new FST_ERR_CTP_INVALID_TYPE;
      contentType = contentType.toString();
    }
    return this.customParsers.has(contentType);
  };
  ContentTypeParser.prototype.existingParser = function(contentType) {
    if (contentType === "application/json" && this.customParsers.has(contentType)) {
      return this.customParsers.get(contentType).fn !== this[kDefaultJsonParse];
    }
    if (contentType === "text/plain" && this.customParsers.has(contentType)) {
      return this.customParsers.get(contentType).fn !== defaultPlainTextParser;
    }
    return this.hasParser(contentType);
  };
  ContentTypeParser.prototype.getParser = function(contentType) {
    let parser = this.customParsers.get(contentType);
    if (parser !== undefined)
      return parser;
    parser = this.cache.get(contentType);
    if (parser !== undefined)
      return parser;
    const caseInsensitiveContentType = contentType.toLowerCase();
    for (let i = 0;i !== this.parserList.length; ++i) {
      const parserListItem = this.parserList[i];
      if (caseInsensitiveContentType.slice(0, parserListItem.length) === parserListItem && (caseInsensitiveContentType.length === parserListItem.length || caseInsensitiveContentType.charCodeAt(parserListItem.length) === 59 || caseInsensitiveContentType.charCodeAt(parserListItem.length) === 32)) {
        parser = this.customParsers.get(parserListItem);
        this.cache.set(contentType, parser);
        return parser;
      }
    }
    for (let j = 0;j !== this.parserRegExpList.length; ++j) {
      const parserRegExp = this.parserRegExpList[j];
      if (parserRegExp.test(contentType)) {
        parser = this.customParsers.get(parserRegExp.toString());
        this.cache.set(contentType, parser);
        return parser;
      }
    }
    return this.customParsers.get("");
  };
  ContentTypeParser.prototype.removeAll = function() {
    this.customParsers = new Map;
    this.parserRegExpList = [];
    this.parserList = [];
    this.cache = new Fifo(100);
  };
  ContentTypeParser.prototype.remove = function(contentType) {
    let parsers;
    if (typeof contentType === "string") {
      contentType = contentType.trim().toLowerCase();
      parsers = this.parserList;
    } else {
      if (!(contentType instanceof RegExp))
        throw new FST_ERR_CTP_INVALID_TYPE;
      contentType = contentType.toString();
      parsers = this.parserRegExpList;
    }
    const removed = this.customParsers.delete(contentType);
    const idx = parsers.findIndex((ct) => ct.toString() === contentType);
    if (idx > -1) {
      parsers.splice(idx, 1);
    }
    return removed || idx > -1;
  };
  ContentTypeParser.prototype.run = function(contentType, handler, request, reply) {
    const parser = this.getParser(contentType);
    if (parser === undefined) {
      if (request.is404) {
        handler(request, reply);
      } else {
        reply.send(new FST_ERR_CTP_INVALID_MEDIA_TYPE(contentType || undefined));
      }
      return;
    }
    const resource = new AsyncResource("content-type-parser:run", request);
    if (parser.asString === true || parser.asBuffer === true) {
      rawBody(request, reply, reply[kRouteContext]._parserOptions, parser, done);
    } else {
      const result = parser.fn(request, request[kRequestPayloadStream], done);
      if (result && typeof result.then === "function") {
        result.then((body) => done(null, body), done);
      }
    }
    function done(error, body) {
      resource.runInAsyncScope(() => {
        resource.emitDestroy();
        if (error) {
          reply[kReplyIsError] = true;
          reply.send(error);
        } else {
          request.body = body;
          handler(request, reply);
        }
      });
    }
  };
  function rawBody(request, reply, options, parser, done) {
    const asString = parser.asString;
    const limit = options.limit === null ? parser.bodyLimit : options.limit;
    const contentLength = Number(request.headers["content-length"]);
    if (contentLength > limit) {
      reply.header("connection", "close");
      reply.send(new FST_ERR_CTP_BODY_TOO_LARGE);
      return;
    }
    let receivedLength = 0;
    let body = asString === true ? "" : [];
    const payload = request[kRequestPayloadStream] || request.raw;
    if (asString === true) {
      payload.setEncoding("utf8");
    }
    payload.on("data", onData);
    payload.on("end", onEnd);
    payload.on("error", onEnd);
    payload.resume();
    function onData(chunk) {
      receivedLength += chunk.length;
      const { receivedEncodedLength = 0 } = payload;
      if (receivedLength > limit || receivedEncodedLength > limit) {
        payload.removeListener("data", onData);
        payload.removeListener("end", onEnd);
        payload.removeListener("error", onEnd);
        reply.send(new FST_ERR_CTP_BODY_TOO_LARGE);
        return;
      }
      if (asString === true) {
        body += chunk;
      } else {
        body.push(chunk);
      }
    }
    function onEnd(err) {
      payload.removeListener("data", onData);
      payload.removeListener("end", onEnd);
      payload.removeListener("error", onEnd);
      if (err !== undefined) {
        if (!(typeof err.statusCode === "number" && err.statusCode >= 400)) {
          err.statusCode = 400;
        }
        reply[kReplyIsError] = true;
        reply.code(err.statusCode).send(err);
        return;
      }
      if (asString === true) {
        receivedLength = Buffer.byteLength(body);
      }
      if (!Number.isNaN(contentLength) && (payload.receivedEncodedLength || receivedLength) !== contentLength) {
        reply.header("connection", "close");
        reply.send(new FST_ERR_CTP_INVALID_CONTENT_LENGTH);
        return;
      }
      if (asString === false) {
        body = Buffer.concat(body);
      }
      const result = parser.fn(request, body, done);
      if (result && typeof result.then === "function") {
        result.then((body2) => done(null, body2), done);
      }
    }
  }
  function getDefaultJsonParser(onProtoPoisoning, onConstructorPoisoning) {
    return defaultJsonParser;
    function defaultJsonParser(req, body, done) {
      if (body.length === 0) {
        done(new FST_ERR_CTP_EMPTY_JSON_BODY, undefined);
        return;
      }
      try {
        done(null, secureJsonParse(body, { protoAction: onProtoPoisoning, constructorAction: onConstructorPoisoning }));
      } catch (err) {
        err.statusCode = 400;
        done(err, undefined);
      }
    }
  }
  function defaultPlainTextParser(req, body, done) {
    done(null, body);
  }
  function Parser(asString, asBuffer, bodyLimit, fn) {
    this.asString = asString;
    this.asBuffer = asBuffer;
    this.bodyLimit = bodyLimit;
    this.fn = fn;
  }
  function buildContentTypeParser(c) {
    const contentTypeParser = new ContentTypeParser;
    contentTypeParser[kDefaultJsonParse] = c[kDefaultJsonParse];
    contentTypeParser.customParsers = new Map(c.customParsers.entries());
    contentTypeParser.parserList = c.parserList.slice();
    contentTypeParser.parserRegExpList = c.parserRegExpList.slice();
    return contentTypeParser;
  }
  function addContentTypeParser(contentType, opts, parser) {
    if (this[kState].started) {
      throw new FST_ERR_CTP_INSTANCE_ALREADY_STARTED("addContentTypeParser");
    }
    if (typeof opts === "function") {
      parser = opts;
      opts = {};
    }
    if (!opts)
      opts = {};
    if (!opts.bodyLimit)
      opts.bodyLimit = this[kBodyLimit];
    if (Array.isArray(contentType)) {
      contentType.forEach((type) => this[kContentTypeParser].add(type, opts, parser));
    } else {
      this[kContentTypeParser].add(contentType, opts, parser);
    }
    return this;
  }
  function hasContentTypeParser(contentType) {
    return this[kContentTypeParser].hasParser(contentType);
  }
  function removeContentTypeParser(contentType) {
    if (this[kState].started) {
      throw new FST_ERR_CTP_INSTANCE_ALREADY_STARTED("removeContentTypeParser");
    }
    if (Array.isArray(contentType)) {
      for (const type of contentType) {
        this[kContentTypeParser].remove(type);
      }
    } else {
      this[kContentTypeParser].remove(contentType);
    }
  }
  function removeAllContentTypeParsers() {
    if (this[kState].started) {
      throw new FST_ERR_CTP_INSTANCE_ALREADY_STARTED("removeAllContentTypeParsers");
    }
    this[kContentTypeParser].removeAll();
  }
  function validateRegExp(regexp) {
    if (regexp.source[0] !== "^" && regexp.source.includes(";?") === false) {
      FSTSEC001(regexp.source);
    }
  }
  module.exports = ContentTypeParser;
  module.exports.helpers = {
    buildContentTypeParser,
    addContentTypeParser,
    hasContentTypeParser,
    removeContentTypeParser,
    removeAllContentTypeParsers
  };
  module.exports.defaultParsers = {
    getDefaultJsonParser,
    defaultTextParser: defaultPlainTextParser
  };
  module.exports[kTestInternals] = { rawBody };
});

// node_modules/dequal/dist/index.js
var require_dist3 = __commonJS((exports) => {
  var has = Object.prototype.hasOwnProperty;
  function find(iter, tar, key) {
    for (key of iter.keys()) {
      if (dequal(key, tar))
        return key;
    }
  }
  function dequal(foo, bar) {
    var ctor, len, tmp;
    if (foo === bar)
      return true;
    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
      if (ctor === Date)
        return foo.getTime() === bar.getTime();
      if (ctor === RegExp)
        return foo.toString() === bar.toString();
      if (ctor === Array) {
        if ((len = foo.length) === bar.length) {
          while (len-- && dequal(foo[len], bar[len]))
            ;
        }
        return len === -1;
      }
      if (ctor === Set) {
        if (foo.size !== bar.size) {
          return false;
        }
        for (len of foo) {
          tmp = len;
          if (tmp && typeof tmp === "object") {
            tmp = find(bar, tmp);
            if (!tmp)
              return false;
          }
          if (!bar.has(tmp))
            return false;
        }
        return true;
      }
      if (ctor === Map) {
        if (foo.size !== bar.size) {
          return false;
        }
        for (len of foo) {
          tmp = len[0];
          if (tmp && typeof tmp === "object") {
            tmp = find(bar, tmp);
            if (!tmp)
              return false;
          }
          if (!dequal(len[1], bar.get(tmp))) {
            return false;
          }
        }
        return true;
      }
      if (ctor === ArrayBuffer) {
        foo = new Uint8Array(foo);
        bar = new Uint8Array(bar);
      } else if (ctor === DataView) {
        if ((len = foo.byteLength) === bar.byteLength) {
          while (len-- && foo.getInt8(len) === bar.getInt8(len))
            ;
        }
        return len === -1;
      }
      if (ArrayBuffer.isView(foo)) {
        if ((len = foo.byteLength) === bar.byteLength) {
          while (len-- && foo[len] === bar[len])
            ;
        }
        return len === -1;
      }
      if (!ctor || typeof foo === "object") {
        len = 0;
        for (ctor in foo) {
          if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))
            return false;
          if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))
            return false;
        }
        return Object.keys(bar).length === len;
      }
    }
    return foo !== foo && bar !== bar;
  }
  exports.dequal = dequal;
});

// node_modules/json-schema-ref-resolver/index.js
var require_json_schema_ref_resolver = __commonJS((exports, module) => {
  var { dequal: deepEqual } = require_dist3();
  var jsonSchemaRefSymbol = Symbol.for("json-schema-ref");

  class RefResolver {
    #schemas;
    #derefSchemas;
    #insertRefSymbol;
    #allowEqualDuplicates;
    #cloneSchemaWithoutRefs;
    constructor(opts = {}) {
      this.#schemas = {};
      this.#derefSchemas = {};
      this.#insertRefSymbol = opts.insertRefSymbol ?? false;
      this.#allowEqualDuplicates = opts.allowEqualDuplicates ?? true;
      this.#cloneSchemaWithoutRefs = opts.cloneSchemaWithoutRefs ?? false;
    }
    addSchema(schema, rootSchemaId, isRootSchema = true) {
      if (isRootSchema) {
        if (schema.$id !== undefined && schema.$id.charAt(0) !== "#") {
          rootSchemaId = schema.$id;
        } else {
          this.#insertSchemaBySchemaId(schema, rootSchemaId);
        }
      }
      const schemaId = schema.$id;
      if (schemaId !== undefined && typeof schemaId === "string") {
        if (schemaId.charAt(0) === "#") {
          this.#insertSchemaByAnchor(schema, rootSchemaId, schemaId);
        } else {
          this.#insertSchemaBySchemaId(schema, schemaId);
          rootSchemaId = schemaId;
        }
      }
      const ref = schema.$ref;
      if (ref !== undefined && typeof ref === "string") {
        const { refSchemaId, refJsonPointer } = this.#parseSchemaRef(ref, rootSchemaId);
        this.#schemas[rootSchemaId].refs.push({
          schemaId: refSchemaId,
          jsonPointer: refJsonPointer
        });
      }
      for (const key in schema) {
        if (typeof schema[key] === "object" && schema[key] !== null) {
          this.addSchema(schema[key], rootSchemaId, false);
        }
      }
    }
    getSchema(schemaId, jsonPointer = "#") {
      const schema = this.#schemas[schemaId];
      if (schema === undefined) {
        throw new Error(`Cannot resolve ref "${schemaId}${jsonPointer}". Schema with id "${schemaId}" is not found.`);
      }
      if (schema.anchors[jsonPointer] !== undefined) {
        return schema.anchors[jsonPointer];
      }
      return getDataByJSONPointer(schema.schema, jsonPointer);
    }
    hasSchema(schemaId) {
      return this.#schemas[schemaId] !== undefined;
    }
    getSchemaRefs(schemaId) {
      const schema = this.#schemas[schemaId];
      if (schema === undefined) {
        throw new Error(`Schema with id "${schemaId}" is not found.`);
      }
      return schema.refs;
    }
    getSchemaDependencies(schemaId, dependencies = {}) {
      const schema = this.#schemas[schemaId];
      for (const ref of schema.refs) {
        const dependencySchemaId = ref.schemaId;
        if (dependencySchemaId === schemaId || dependencies[dependencySchemaId] !== undefined)
          continue;
        dependencies[dependencySchemaId] = this.getSchema(dependencySchemaId);
        this.getSchemaDependencies(dependencySchemaId, dependencies);
      }
      return dependencies;
    }
    derefSchema(schemaId) {
      if (this.#derefSchemas[schemaId] !== undefined)
        return;
      const schema = this.#schemas[schemaId];
      if (schema === undefined) {
        throw new Error(`Schema with id "${schemaId}" is not found.`);
      }
      if (!this.#cloneSchemaWithoutRefs && schema.refs.length === 0) {
        this.#derefSchemas[schemaId] = {
          schema: schema.schema,
          anchors: schema.anchors
        };
      }
      const refs = [];
      this.#addDerefSchema(schema.schema, schemaId, true, refs);
      const dependencies = this.getSchemaDependencies(schemaId);
      for (const schemaId2 in dependencies) {
        const schema2 = dependencies[schemaId2];
        this.#addDerefSchema(schema2, schemaId2, true, refs);
      }
      for (const ref of refs) {
        const {
          refSchemaId,
          refJsonPointer
        } = this.#parseSchemaRef(ref.ref, ref.sourceSchemaId);
        const targetSchema = this.getDerefSchema(refSchemaId, refJsonPointer);
        if (targetSchema === null) {
          throw new Error(`Cannot resolve ref "${ref.ref}". Ref "${refJsonPointer}" is not found in schema "${refSchemaId}".`);
        }
        ref.targetSchema = targetSchema;
        ref.targetSchemaId = refSchemaId;
      }
      for (const ref of refs) {
        this.#resolveRef(ref, refs);
      }
    }
    getDerefSchema(schemaId, jsonPointer = "#") {
      let derefSchema = this.#derefSchemas[schemaId];
      if (derefSchema === undefined) {
        this.derefSchema(schemaId);
        derefSchema = this.#derefSchemas[schemaId];
      }
      if (derefSchema.anchors[jsonPointer] !== undefined) {
        return derefSchema.anchors[jsonPointer];
      }
      return getDataByJSONPointer(derefSchema.schema, jsonPointer);
    }
    #parseSchemaRef(ref, schemaId) {
      const sharpIndex = ref.indexOf("#");
      if (sharpIndex === -1) {
        return { refSchemaId: ref, refJsonPointer: "#" };
      }
      if (sharpIndex === 0) {
        return { refSchemaId: schemaId, refJsonPointer: ref };
      }
      return {
        refSchemaId: ref.slice(0, sharpIndex),
        refJsonPointer: ref.slice(sharpIndex)
      };
    }
    #addDerefSchema(schema, rootSchemaId, isRootSchema, refs = []) {
      const derefSchema = Array.isArray(schema) ? [...schema] : { ...schema };
      if (isRootSchema) {
        if (schema.$id !== undefined && schema.$id.charAt(0) !== "#") {
          rootSchemaId = schema.$id;
        } else {
          this.#insertDerefSchemaBySchemaId(derefSchema, rootSchemaId);
        }
      }
      const schemaId = derefSchema.$id;
      if (schemaId !== undefined && typeof schemaId === "string") {
        if (schemaId.charAt(0) === "#") {
          this.#insertDerefSchemaByAnchor(derefSchema, rootSchemaId, schemaId);
        } else {
          this.#insertDerefSchemaBySchemaId(derefSchema, schemaId);
          rootSchemaId = schemaId;
        }
      }
      if (derefSchema.$ref !== undefined) {
        refs.push({
          ref: derefSchema.$ref,
          sourceSchemaId: rootSchemaId,
          sourceSchema: derefSchema
        });
      }
      for (const key in derefSchema) {
        const value = derefSchema[key];
        if (typeof value === "object" && value !== null) {
          derefSchema[key] = this.#addDerefSchema(value, rootSchemaId, false, refs);
        }
      }
      return derefSchema;
    }
    #resolveRef(ref, refs) {
      const { sourceSchema, targetSchema } = ref;
      if (!sourceSchema.$ref)
        return;
      if (this.#insertRefSymbol) {
        sourceSchema[jsonSchemaRefSymbol] = sourceSchema.$ref;
      }
      delete sourceSchema.$ref;
      if (targetSchema.$ref) {
        const targetSchemaRef = refs.find((ref2) => ref2.sourceSchema === targetSchema);
        this.#resolveRef(targetSchemaRef, refs);
      }
      for (const key in targetSchema) {
        if (key === "$id")
          continue;
        if (sourceSchema[key] !== undefined) {
          if (deepEqual(sourceSchema[key], targetSchema[key]))
            continue;
          throw new Error(`Cannot resolve ref "${ref.ref}". Property "${key}" already exists in schema "${ref.sourceSchemaId}".`);
        }
        sourceSchema[key] = targetSchema[key];
      }
      ref.isResolved = true;
    }
    #insertSchemaBySchemaId(schema, schemaId) {
      const foundSchema = this.#schemas[schemaId];
      if (foundSchema !== undefined) {
        if (this.#allowEqualDuplicates && deepEqual(schema, foundSchema.schema))
          return;
        throw new Error(`There is already another schema with id "${schemaId}".`);
      }
      this.#schemas[schemaId] = { schema, anchors: {}, refs: [] };
    }
    #insertSchemaByAnchor(schema, schemaId, anchor) {
      const { anchors } = this.#schemas[schemaId];
      if (anchors[anchor] !== undefined) {
        throw new Error(`There is already another anchor "${anchor}" in schema "${schemaId}".`);
      }
      anchors[anchor] = schema;
    }
    #insertDerefSchemaBySchemaId(schema, schemaId) {
      const foundSchema = this.#derefSchemas[schemaId];
      if (foundSchema !== undefined)
        return;
      this.#derefSchemas[schemaId] = { schema, anchors: {} };
    }
    #insertDerefSchemaByAnchor(schema, schemaId, anchor) {
      const { anchors } = this.#derefSchemas[schemaId];
      anchors[anchor] = schema;
    }
  }
  function getDataByJSONPointer(data, jsonPointer) {
    const parts = jsonPointer.split("/");
    let current = data;
    for (const part of parts) {
      if (part === "" || part === "#")
        continue;
      if (typeof current !== "object" || current === null) {
        return null;
      }
      current = current[part];
    }
    return current ?? null;
  }
  module.exports = { RefResolver };
});

// node_modules/ajv/dist/compile/codegen/code.js
var require_code = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = undefined;

  class _CodeOrName {
  }
  exports._CodeOrName = _CodeOrName;
  exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;

  class Name extends _CodeOrName {
    constructor(s) {
      super();
      if (!exports.IDENTIFIER.test(s))
        throw new Error("CodeGen: name must be a valid identifier");
      this.str = s;
    }
    toString() {
      return this.str;
    }
    emptyStr() {
      return false;
    }
    get names() {
      return { [this.str]: 1 };
    }
  }
  exports.Name = Name;

  class _Code extends _CodeOrName {
    constructor(code) {
      super();
      this._items = typeof code === "string" ? [code] : code;
    }
    toString() {
      return this.str;
    }
    emptyStr() {
      if (this._items.length > 1)
        return false;
      const item = this._items[0];
      return item === "" || item === '""';
    }
    get str() {
      var _a;
      return (_a = this._str) !== null && _a !== undefined ? _a : this._str = this._items.reduce((s, c) => `${s}${c}`, "");
    }
    get names() {
      var _a;
      return (_a = this._names) !== null && _a !== undefined ? _a : this._names = this._items.reduce((names, c) => {
        if (c instanceof Name)
          names[c.str] = (names[c.str] || 0) + 1;
        return names;
      }, {});
    }
  }
  exports._Code = _Code;
  exports.nil = new _Code("");
  function _(strs, ...args) {
    const code = [strs[0]];
    let i = 0;
    while (i < args.length) {
      addCodeArg(code, args[i]);
      code.push(strs[++i]);
    }
    return new _Code(code);
  }
  exports._ = _;
  var plus = new _Code("+");
  function str(strs, ...args) {
    const expr = [safeStringify(strs[0])];
    let i = 0;
    while (i < args.length) {
      expr.push(plus);
      addCodeArg(expr, args[i]);
      expr.push(plus, safeStringify(strs[++i]));
    }
    optimize(expr);
    return new _Code(expr);
  }
  exports.str = str;
  function addCodeArg(code, arg) {
    if (arg instanceof _Code)
      code.push(...arg._items);
    else if (arg instanceof Name)
      code.push(arg);
    else
      code.push(interpolate(arg));
  }
  exports.addCodeArg = addCodeArg;
  function optimize(expr) {
    let i = 1;
    while (i < expr.length - 1) {
      if (expr[i] === plus) {
        const res = mergeExprItems(expr[i - 1], expr[i + 1]);
        if (res !== undefined) {
          expr.splice(i - 1, 3, res);
          continue;
        }
        expr[i++] = "+";
      }
      i++;
    }
  }
  function mergeExprItems(a, b) {
    if (b === '""')
      return a;
    if (a === '""')
      return b;
    if (typeof a == "string") {
      if (b instanceof Name || a[a.length - 1] !== '"')
        return;
      if (typeof b != "string")
        return `${a.slice(0, -1)}${b}"`;
      if (b[0] === '"')
        return a.slice(0, -1) + b.slice(1);
      return;
    }
    if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
      return `"${a}${b.slice(1)}`;
    return;
  }
  function strConcat(c1, c2) {
    return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;
  }
  exports.strConcat = strConcat;
  function interpolate(x) {
    return typeof x == "number" || typeof x == "boolean" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(",") : x);
  }
  function stringify(x) {
    return new _Code(safeStringify(x));
  }
  exports.stringify = stringify;
  function safeStringify(x) {
    return JSON.stringify(x).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
  }
  exports.safeStringify = safeStringify;
  function getProperty(key) {
    return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _`[${key}]`;
  }
  exports.getProperty = getProperty;
  function getEsmExportName(key) {
    if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
      return new _Code(`${key}`);
    }
    throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
  }
  exports.getEsmExportName = getEsmExportName;
  function regexpCode(rx) {
    return new _Code(rx.toString());
  }
  exports.regexpCode = regexpCode;
});

// node_modules/ajv/dist/compile/codegen/scope.js
var require_scope = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = undefined;
  var code_1 = require_code();

  class ValueError extends Error {
    constructor(name) {
      super(`CodeGen: "code" for ${name} not defined`);
      this.value = name.value;
    }
  }
  var UsedValueState;
  (function(UsedValueState2) {
    UsedValueState2[UsedValueState2["Started"] = 0] = "Started";
    UsedValueState2[UsedValueState2["Completed"] = 1] = "Completed";
  })(UsedValueState || (exports.UsedValueState = UsedValueState = {}));
  exports.varKinds = {
    const: new code_1.Name("const"),
    let: new code_1.Name("let"),
    var: new code_1.Name("var")
  };

  class Scope {
    constructor({ prefixes, parent } = {}) {
      this._names = {};
      this._prefixes = prefixes;
      this._parent = parent;
    }
    toName(nameOrPrefix) {
      return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
    }
    name(prefix) {
      return new code_1.Name(this._newName(prefix));
    }
    _newName(prefix) {
      const ng = this._names[prefix] || this._nameGroup(prefix);
      return `${prefix}${ng.index++}`;
    }
    _nameGroup(prefix) {
      var _a, _b;
      if (((_b = (_a = this._parent) === null || _a === undefined ? undefined : _a._prefixes) === null || _b === undefined ? undefined : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) {
        throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
      }
      return this._names[prefix] = { prefix, index: 0 };
    }
  }
  exports.Scope = Scope;

  class ValueScopeName extends code_1.Name {
    constructor(prefix, nameStr) {
      super(nameStr);
      this.prefix = prefix;
    }
    setValue(value, { property, itemIndex }) {
      this.value = value;
      this.scopePath = (0, code_1._)`.${new code_1.Name(property)}[${itemIndex}]`;
    }
  }
  exports.ValueScopeName = ValueScopeName;
  var line = (0, code_1._)`\n`;

  class ValueScope extends Scope {
    constructor(opts) {
      super(opts);
      this._values = {};
      this._scope = opts.scope;
      this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
    }
    get() {
      return this._scope;
    }
    name(prefix) {
      return new ValueScopeName(prefix, this._newName(prefix));
    }
    value(nameOrPrefix, value) {
      var _a;
      if (value.ref === undefined)
        throw new Error("CodeGen: ref must be passed in value");
      const name = this.toName(nameOrPrefix);
      const { prefix } = name;
      const valueKey = (_a = value.key) !== null && _a !== undefined ? _a : value.ref;
      let vs = this._values[prefix];
      if (vs) {
        const _name = vs.get(valueKey);
        if (_name)
          return _name;
      } else {
        vs = this._values[prefix] = new Map;
      }
      vs.set(valueKey, name);
      const s = this._scope[prefix] || (this._scope[prefix] = []);
      const itemIndex = s.length;
      s[itemIndex] = value.ref;
      name.setValue(value, { property: prefix, itemIndex });
      return name;
    }
    getValue(prefix, keyOrRef) {
      const vs = this._values[prefix];
      if (!vs)
        return;
      return vs.get(keyOrRef);
    }
    scopeRefs(scopeName, values = this._values) {
      return this._reduceValues(values, (name) => {
        if (name.scopePath === undefined)
          throw new Error(`CodeGen: name "${name}" has no value`);
        return (0, code_1._)`${scopeName}${name.scopePath}`;
      });
    }
    scopeCode(values = this._values, usedValues, getCode) {
      return this._reduceValues(values, (name) => {
        if (name.value === undefined)
          throw new Error(`CodeGen: name "${name}" has no value`);
        return name.value.code;
      }, usedValues, getCode);
    }
    _reduceValues(values, valueCode, usedValues = {}, getCode) {
      let code = code_1.nil;
      for (const prefix in values) {
        const vs = values[prefix];
        if (!vs)
          continue;
        const nameSet = usedValues[prefix] = usedValues[prefix] || new Map;
        vs.forEach((name) => {
          if (nameSet.has(name))
            return;
          nameSet.set(name, UsedValueState.Started);
          let c = valueCode(name);
          if (c) {
            const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
            code = (0, code_1._)`${code}${def} ${name} = ${c};${this.opts._n}`;
          } else if (c = getCode === null || getCode === undefined ? undefined : getCode(name)) {
            code = (0, code_1._)`${code}${c}${this.opts._n}`;
          } else {
            throw new ValueError(name);
          }
          nameSet.set(name, UsedValueState.Completed);
        });
      }
      return code;
    }
  }
  exports.ValueScope = ValueScope;
});

// node_modules/ajv/dist/compile/codegen/index.js
var require_codegen = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = undefined;
  var code_1 = require_code();
  var scope_1 = require_scope();
  var code_2 = require_code();
  Object.defineProperty(exports, "_", { enumerable: true, get: function() {
    return code_2._;
  } });
  Object.defineProperty(exports, "str", { enumerable: true, get: function() {
    return code_2.str;
  } });
  Object.defineProperty(exports, "strConcat", { enumerable: true, get: function() {
    return code_2.strConcat;
  } });
  Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
    return code_2.nil;
  } });
  Object.defineProperty(exports, "getProperty", { enumerable: true, get: function() {
    return code_2.getProperty;
  } });
  Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
    return code_2.stringify;
  } });
  Object.defineProperty(exports, "regexpCode", { enumerable: true, get: function() {
    return code_2.regexpCode;
  } });
  Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
    return code_2.Name;
  } });
  var scope_2 = require_scope();
  Object.defineProperty(exports, "Scope", { enumerable: true, get: function() {
    return scope_2.Scope;
  } });
  Object.defineProperty(exports, "ValueScope", { enumerable: true, get: function() {
    return scope_2.ValueScope;
  } });
  Object.defineProperty(exports, "ValueScopeName", { enumerable: true, get: function() {
    return scope_2.ValueScopeName;
  } });
  Object.defineProperty(exports, "varKinds", { enumerable: true, get: function() {
    return scope_2.varKinds;
  } });
  exports.operators = {
    GT: new code_1._Code(">"),
    GTE: new code_1._Code(">="),
    LT: new code_1._Code("<"),
    LTE: new code_1._Code("<="),
    EQ: new code_1._Code("==="),
    NEQ: new code_1._Code("!=="),
    NOT: new code_1._Code("!"),
    OR: new code_1._Code("||"),
    AND: new code_1._Code("&&"),
    ADD: new code_1._Code("+")
  };

  class Node {
    optimizeNodes() {
      return this;
    }
    optimizeNames(_names, _constants) {
      return this;
    }
  }

  class Def extends Node {
    constructor(varKind, name, rhs) {
      super();
      this.varKind = varKind;
      this.name = name;
      this.rhs = rhs;
    }
    render({ es5, _n }) {
      const varKind = es5 ? scope_1.varKinds.var : this.varKind;
      const rhs = this.rhs === undefined ? "" : ` = ${this.rhs}`;
      return `${varKind} ${this.name}${rhs};` + _n;
    }
    optimizeNames(names, constants) {
      if (!names[this.name.str])
        return;
      if (this.rhs)
        this.rhs = optimizeExpr(this.rhs, names, constants);
      return this;
    }
    get names() {
      return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
    }
  }

  class Assign extends Node {
    constructor(lhs, rhs, sideEffects) {
      super();
      this.lhs = lhs;
      this.rhs = rhs;
      this.sideEffects = sideEffects;
    }
    render({ _n }) {
      return `${this.lhs} = ${this.rhs};` + _n;
    }
    optimizeNames(names, constants) {
      if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
        return;
      this.rhs = optimizeExpr(this.rhs, names, constants);
      return this;
    }
    get names() {
      const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
      return addExprNames(names, this.rhs);
    }
  }

  class AssignOp extends Assign {
    constructor(lhs, op, rhs, sideEffects) {
      super(lhs, rhs, sideEffects);
      this.op = op;
    }
    render({ _n }) {
      return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
    }
  }

  class Label extends Node {
    constructor(label) {
      super();
      this.label = label;
      this.names = {};
    }
    render({ _n }) {
      return `${this.label}:` + _n;
    }
  }

  class Break extends Node {
    constructor(label) {
      super();
      this.label = label;
      this.names = {};
    }
    render({ _n }) {
      const label = this.label ? ` ${this.label}` : "";
      return `break${label};` + _n;
    }
  }

  class Throw2 extends Node {
    constructor(error) {
      super();
      this.error = error;
    }
    render({ _n }) {
      return `throw ${this.error};` + _n;
    }
    get names() {
      return this.error.names;
    }
  }

  class AnyCode extends Node {
    constructor(code) {
      super();
      this.code = code;
    }
    render({ _n }) {
      return `${this.code};` + _n;
    }
    optimizeNodes() {
      return `${this.code}` ? this : undefined;
    }
    optimizeNames(names, constants) {
      this.code = optimizeExpr(this.code, names, constants);
      return this;
    }
    get names() {
      return this.code instanceof code_1._CodeOrName ? this.code.names : {};
    }
  }

  class ParentNode extends Node {
    constructor(nodes = []) {
      super();
      this.nodes = nodes;
    }
    render(opts) {
      return this.nodes.reduce((code, n) => code + n.render(opts), "");
    }
    optimizeNodes() {
      const { nodes } = this;
      let i = nodes.length;
      while (i--) {
        const n = nodes[i].optimizeNodes();
        if (Array.isArray(n))
          nodes.splice(i, 1, ...n);
        else if (n)
          nodes[i] = n;
        else
          nodes.splice(i, 1);
      }
      return nodes.length > 0 ? this : undefined;
    }
    optimizeNames(names, constants) {
      const { nodes } = this;
      let i = nodes.length;
      while (i--) {
        const n = nodes[i];
        if (n.optimizeNames(names, constants))
          continue;
        subtractNames(names, n.names);
        nodes.splice(i, 1);
      }
      return nodes.length > 0 ? this : undefined;
    }
    get names() {
      return this.nodes.reduce((names, n) => addNames(names, n.names), {});
    }
  }

  class BlockNode extends ParentNode {
    render(opts) {
      return "{" + opts._n + super.render(opts) + "}" + opts._n;
    }
  }

  class Root extends ParentNode {
  }

  class Else extends BlockNode {
  }
  Else.kind = "else";

  class If extends BlockNode {
    constructor(condition, nodes) {
      super(nodes);
      this.condition = condition;
    }
    render(opts) {
      let code = `if(${this.condition})` + super.render(opts);
      if (this.else)
        code += "else " + this.else.render(opts);
      return code;
    }
    optimizeNodes() {
      super.optimizeNodes();
      const cond = this.condition;
      if (cond === true)
        return this.nodes;
      let e = this.else;
      if (e) {
        const ns = e.optimizeNodes();
        e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
      }
      if (e) {
        if (cond === false)
          return e instanceof If ? e : e.nodes;
        if (this.nodes.length)
          return this;
        return new If(not(cond), e instanceof If ? [e] : e.nodes);
      }
      if (cond === false || !this.nodes.length)
        return;
      return this;
    }
    optimizeNames(names, constants) {
      var _a;
      this.else = (_a = this.else) === null || _a === undefined ? undefined : _a.optimizeNames(names, constants);
      if (!(super.optimizeNames(names, constants) || this.else))
        return;
      this.condition = optimizeExpr(this.condition, names, constants);
      return this;
    }
    get names() {
      const names = super.names;
      addExprNames(names, this.condition);
      if (this.else)
        addNames(names, this.else.names);
      return names;
    }
  }
  If.kind = "if";

  class For extends BlockNode {
  }
  For.kind = "for";

  class ForLoop extends For {
    constructor(iteration) {
      super();
      this.iteration = iteration;
    }
    render(opts) {
      return `for(${this.iteration})` + super.render(opts);
    }
    optimizeNames(names, constants) {
      if (!super.optimizeNames(names, constants))
        return;
      this.iteration = optimizeExpr(this.iteration, names, constants);
      return this;
    }
    get names() {
      return addNames(super.names, this.iteration.names);
    }
  }

  class ForRange extends For {
    constructor(varKind, name, from, to) {
      super();
      this.varKind = varKind;
      this.name = name;
      this.from = from;
      this.to = to;
    }
    render(opts) {
      const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
      const { name, from, to } = this;
      return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
    }
    get names() {
      const names = addExprNames(super.names, this.from);
      return addExprNames(names, this.to);
    }
  }

  class ForIter extends For {
    constructor(loop, varKind, name, iterable) {
      super();
      this.loop = loop;
      this.varKind = varKind;
      this.name = name;
      this.iterable = iterable;
    }
    render(opts) {
      return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
    }
    optimizeNames(names, constants) {
      if (!super.optimizeNames(names, constants))
        return;
      this.iterable = optimizeExpr(this.iterable, names, constants);
      return this;
    }
    get names() {
      return addNames(super.names, this.iterable.names);
    }
  }

  class Func extends BlockNode {
    constructor(name, args, async) {
      super();
      this.name = name;
      this.args = args;
      this.async = async;
    }
    render(opts) {
      const _async = this.async ? "async " : "";
      return `${_async}function ${this.name}(${this.args})` + super.render(opts);
    }
  }
  Func.kind = "func";

  class Return extends ParentNode {
    render(opts) {
      return "return " + super.render(opts);
    }
  }
  Return.kind = "return";

  class Try extends BlockNode {
    render(opts) {
      let code = "try" + super.render(opts);
      if (this.catch)
        code += this.catch.render(opts);
      if (this.finally)
        code += this.finally.render(opts);
      return code;
    }
    optimizeNodes() {
      var _a, _b;
      super.optimizeNodes();
      (_a = this.catch) === null || _a === undefined || _a.optimizeNodes();
      (_b = this.finally) === null || _b === undefined || _b.optimizeNodes();
      return this;
    }
    optimizeNames(names, constants) {
      var _a, _b;
      super.optimizeNames(names, constants);
      (_a = this.catch) === null || _a === undefined || _a.optimizeNames(names, constants);
      (_b = this.finally) === null || _b === undefined || _b.optimizeNames(names, constants);
      return this;
    }
    get names() {
      const names = super.names;
      if (this.catch)
        addNames(names, this.catch.names);
      if (this.finally)
        addNames(names, this.finally.names);
      return names;
    }
  }

  class Catch extends BlockNode {
    constructor(error) {
      super();
      this.error = error;
    }
    render(opts) {
      return `catch(${this.error})` + super.render(opts);
    }
  }
  Catch.kind = "catch";

  class Finally extends BlockNode {
    render(opts) {
      return "finally" + super.render(opts);
    }
  }
  Finally.kind = "finally";

  class CodeGen {
    constructor(extScope, opts = {}) {
      this._values = {};
      this._blockStarts = [];
      this._constants = {};
      this.opts = { ...opts, _n: opts.lines ? `
` : "" };
      this._extScope = extScope;
      this._scope = new scope_1.Scope({ parent: extScope });
      this._nodes = [new Root];
    }
    toString() {
      return this._root.render(this.opts);
    }
    name(prefix) {
      return this._scope.name(prefix);
    }
    scopeName(prefix) {
      return this._extScope.name(prefix);
    }
    scopeValue(prefixOrName, value) {
      const name = this._extScope.value(prefixOrName, value);
      const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set);
      vs.add(name);
      return name;
    }
    getScopeValue(prefix, keyOrRef) {
      return this._extScope.getValue(prefix, keyOrRef);
    }
    scopeRefs(scopeName) {
      return this._extScope.scopeRefs(scopeName, this._values);
    }
    scopeCode() {
      return this._extScope.scopeCode(this._values);
    }
    _def(varKind, nameOrPrefix, rhs, constant) {
      const name = this._scope.toName(nameOrPrefix);
      if (rhs !== undefined && constant)
        this._constants[name.str] = rhs;
      this._leafNode(new Def(varKind, name, rhs));
      return name;
    }
    const(nameOrPrefix, rhs, _constant) {
      return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
    }
    let(nameOrPrefix, rhs, _constant) {
      return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
    }
    var(nameOrPrefix, rhs, _constant) {
      return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
    }
    assign(lhs, rhs, sideEffects) {
      return this._leafNode(new Assign(lhs, rhs, sideEffects));
    }
    add(lhs, rhs) {
      return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
    }
    code(c) {
      if (typeof c == "function")
        c();
      else if (c !== code_1.nil)
        this._leafNode(new AnyCode(c));
      return this;
    }
    object(...keyValues) {
      const code = ["{"];
      for (const [key, value] of keyValues) {
        if (code.length > 1)
          code.push(",");
        code.push(key);
        if (key !== value || this.opts.es5) {
          code.push(":");
          (0, code_1.addCodeArg)(code, value);
        }
      }
      code.push("}");
      return new code_1._Code(code);
    }
    if(condition, thenBody, elseBody) {
      this._blockNode(new If(condition));
      if (thenBody && elseBody) {
        this.code(thenBody).else().code(elseBody).endIf();
      } else if (thenBody) {
        this.code(thenBody).endIf();
      } else if (elseBody) {
        throw new Error('CodeGen: "else" body without "then" body');
      }
      return this;
    }
    elseIf(condition) {
      return this._elseNode(new If(condition));
    }
    else() {
      return this._elseNode(new Else);
    }
    endIf() {
      return this._endBlockNode(If, Else);
    }
    _for(node, forBody) {
      this._blockNode(node);
      if (forBody)
        this.code(forBody).endFor();
      return this;
    }
    for(iteration, forBody) {
      return this._for(new ForLoop(iteration), forBody);
    }
    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
      const name = this._scope.toName(nameOrPrefix);
      return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
    }
    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
      const name = this._scope.toName(nameOrPrefix);
      if (this.opts.es5) {
        const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
        return this.forRange("_i", 0, (0, code_1._)`${arr}.length`, (i) => {
          this.var(name, (0, code_1._)`${arr}[${i}]`);
          forBody(name);
        });
      }
      return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
    }
    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
      if (this.opts.ownProperties) {
        return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);
      }
      const name = this._scope.toName(nameOrPrefix);
      return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
    }
    endFor() {
      return this._endBlockNode(For);
    }
    label(label) {
      return this._leafNode(new Label(label));
    }
    break(label) {
      return this._leafNode(new Break(label));
    }
    return(value) {
      const node = new Return;
      this._blockNode(node);
      this.code(value);
      if (node.nodes.length !== 1)
        throw new Error('CodeGen: "return" should have one node');
      return this._endBlockNode(Return);
    }
    try(tryBody, catchCode, finallyCode) {
      if (!catchCode && !finallyCode)
        throw new Error('CodeGen: "try" without "catch" and "finally"');
      const node = new Try;
      this._blockNode(node);
      this.code(tryBody);
      if (catchCode) {
        const error = this.name("e");
        this._currNode = node.catch = new Catch(error);
        catchCode(error);
      }
      if (finallyCode) {
        this._currNode = node.finally = new Finally;
        this.code(finallyCode);
      }
      return this._endBlockNode(Catch, Finally);
    }
    throw(error) {
      return this._leafNode(new Throw2(error));
    }
    block(body, nodeCount) {
      this._blockStarts.push(this._nodes.length);
      if (body)
        this.code(body).endBlock(nodeCount);
      return this;
    }
    endBlock(nodeCount) {
      const len = this._blockStarts.pop();
      if (len === undefined)
        throw new Error("CodeGen: not in self-balancing block");
      const toClose = this._nodes.length - len;
      if (toClose < 0 || nodeCount !== undefined && toClose !== nodeCount) {
        throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
      }
      this._nodes.length = len;
      return this;
    }
    func(name, args = code_1.nil, async, funcBody) {
      this._blockNode(new Func(name, args, async));
      if (funcBody)
        this.code(funcBody).endFunc();
      return this;
    }
    endFunc() {
      return this._endBlockNode(Func);
    }
    optimize(n = 1) {
      while (n-- > 0) {
        this._root.optimizeNodes();
        this._root.optimizeNames(this._root.names, this._constants);
      }
    }
    _leafNode(node) {
      this._currNode.nodes.push(node);
      return this;
    }
    _blockNode(node) {
      this._currNode.nodes.push(node);
      this._nodes.push(node);
    }
    _endBlockNode(N1, N2) {
      const n = this._currNode;
      if (n instanceof N1 || N2 && n instanceof N2) {
        this._nodes.pop();
        return this;
      }
      throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
    }
    _elseNode(node) {
      const n = this._currNode;
      if (!(n instanceof If)) {
        throw new Error('CodeGen: "else" without "if"');
      }
      this._currNode = n.else = node;
      return this;
    }
    get _root() {
      return this._nodes[0];
    }
    get _currNode() {
      const ns = this._nodes;
      return ns[ns.length - 1];
    }
    set _currNode(node) {
      const ns = this._nodes;
      ns[ns.length - 1] = node;
    }
  }
  exports.CodeGen = CodeGen;
  function addNames(names, from) {
    for (const n in from)
      names[n] = (names[n] || 0) + (from[n] || 0);
    return names;
  }
  function addExprNames(names, from) {
    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
  }
  function optimizeExpr(expr, names, constants) {
    if (expr instanceof code_1.Name)
      return replaceName(expr);
    if (!canOptimize(expr))
      return expr;
    return new code_1._Code(expr._items.reduce((items, c) => {
      if (c instanceof code_1.Name)
        c = replaceName(c);
      if (c instanceof code_1._Code)
        items.push(...c._items);
      else
        items.push(c);
      return items;
    }, []));
    function replaceName(n) {
      const c = constants[n.str];
      if (c === undefined || names[n.str] !== 1)
        return n;
      delete names[n.str];
      return c;
    }
    function canOptimize(e) {
      return e instanceof code_1._Code && e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined);
    }
  }
  function subtractNames(names, from) {
    for (const n in from)
      names[n] = (names[n] || 0) - (from[n] || 0);
  }
  function not(x) {
    return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._)`!${par(x)}`;
  }
  exports.not = not;
  var andCode = mappend(exports.operators.AND);
  function and(...args) {
    return args.reduce(andCode);
  }
  exports.and = and;
  var orCode = mappend(exports.operators.OR);
  function or(...args) {
    return args.reduce(orCode);
  }
  exports.or = or;
  function mappend(op) {
    return (x, y) => x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)`${par(x)} ${op} ${par(y)}`;
  }
  function par(x) {
    return x instanceof code_1.Name ? x : (0, code_1._)`(${x})`;
  }
});

// node_modules/ajv/dist/compile/util.js
var require_util = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = undefined;
  var codegen_1 = require_codegen();
  var code_1 = require_code();
  function toHash(arr) {
    const hash = {};
    for (const item of arr)
      hash[item] = true;
    return hash;
  }
  exports.toHash = toHash;
  function alwaysValidSchema(it, schema) {
    if (typeof schema == "boolean")
      return schema;
    if (Object.keys(schema).length === 0)
      return true;
    checkUnknownRules(it, schema);
    return !schemaHasRules(schema, it.self.RULES.all);
  }
  exports.alwaysValidSchema = alwaysValidSchema;
  function checkUnknownRules(it, schema = it.schema) {
    const { opts, self } = it;
    if (!opts.strictSchema)
      return;
    if (typeof schema === "boolean")
      return;
    const rules = self.RULES.keywords;
    for (const key in schema) {
      if (!rules[key])
        checkStrictMode(it, `unknown keyword: "${key}"`);
    }
  }
  exports.checkUnknownRules = checkUnknownRules;
  function schemaHasRules(schema, rules) {
    if (typeof schema == "boolean")
      return !schema;
    for (const key in schema)
      if (rules[key])
        return true;
    return false;
  }
  exports.schemaHasRules = schemaHasRules;
  function schemaHasRulesButRef(schema, RULES) {
    if (typeof schema == "boolean")
      return !schema;
    for (const key in schema)
      if (key !== "$ref" && RULES.all[key])
        return true;
    return false;
  }
  exports.schemaHasRulesButRef = schemaHasRulesButRef;
  function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
    if (!$data) {
      if (typeof schema == "number" || typeof schema == "boolean")
        return schema;
      if (typeof schema == "string")
        return (0, codegen_1._)`${schema}`;
    }
    return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
  }
  exports.schemaRefOrVal = schemaRefOrVal;
  function unescapeFragment(str) {
    return unescapeJsonPointer(decodeURIComponent(str));
  }
  exports.unescapeFragment = unescapeFragment;
  function escapeFragment(str) {
    return encodeURIComponent(escapeJsonPointer(str));
  }
  exports.escapeFragment = escapeFragment;
  function escapeJsonPointer(str) {
    if (typeof str == "number")
      return `${str}`;
    return str.replace(/~/g, "~0").replace(/\//g, "~1");
  }
  exports.escapeJsonPointer = escapeJsonPointer;
  function unescapeJsonPointer(str) {
    return str.replace(/~1/g, "/").replace(/~0/g, "~");
  }
  exports.unescapeJsonPointer = unescapeJsonPointer;
  function eachItem(xs, f) {
    if (Array.isArray(xs)) {
      for (const x of xs)
        f(x);
    } else {
      f(xs);
    }
  }
  exports.eachItem = eachItem;
  function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName }) {
    return (gen, from, to, toName) => {
      const res = to === undefined ? from : to instanceof codegen_1.Name ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to) : from instanceof codegen_1.Name ? (mergeToName(gen, to, from), from) : mergeValues(from, to);
      return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
    };
  }
  exports.mergeEvaluated = {
    props: makeMergeEvaluated({
      mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => {
        gen.if((0, codegen_1._)`${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._)`${to} || {}`).code((0, codegen_1._)`Object.assign(${to}, ${from})`));
      }),
      mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => {
        if (from === true) {
          gen.assign(to, true);
        } else {
          gen.assign(to, (0, codegen_1._)`${to} || {}`);
          setEvaluated(gen, to, from);
        }
      }),
      mergeValues: (from, to) => from === true ? true : { ...from, ...to },
      resultToName: evaluatedPropsToName
    }),
    items: makeMergeEvaluated({
      mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._)`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
      mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._)`${to} > ${from} ? ${to} : ${from}`)),
      mergeValues: (from, to) => from === true ? true : Math.max(from, to),
      resultToName: (gen, items) => gen.var("items", items)
    })
  };
  function evaluatedPropsToName(gen, ps) {
    if (ps === true)
      return gen.var("props", true);
    const props = gen.var("props", (0, codegen_1._)`{}`);
    if (ps !== undefined)
      setEvaluated(gen, props, ps);
    return props;
  }
  exports.evaluatedPropsToName = evaluatedPropsToName;
  function setEvaluated(gen, props, ps) {
    Object.keys(ps).forEach((p) => gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p)}`, true));
  }
  exports.setEvaluated = setEvaluated;
  var snippets = {};
  function useFunc(gen, f) {
    return gen.scopeValue("func", {
      ref: f,
      code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code))
    });
  }
  exports.useFunc = useFunc;
  var Type2;
  (function(Type3) {
    Type3[Type3["Num"] = 0] = "Num";
    Type3[Type3["Str"] = 1] = "Str";
  })(Type2 || (exports.Type = Type2 = {}));
  function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
    if (dataProp instanceof codegen_1.Name) {
      const isNumber = dataPropType === Type2.Num;
      return jsPropertySyntax ? isNumber ? (0, codegen_1._)`"[" + ${dataProp} + "]"` : (0, codegen_1._)`"['" + ${dataProp} + "']"` : isNumber ? (0, codegen_1._)`"/" + ${dataProp}` : (0, codegen_1._)`"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`;
    }
    return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
  }
  exports.getErrorPath = getErrorPath;
  function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
    if (!mode)
      return;
    msg = `strict mode: ${msg}`;
    if (mode === true)
      throw new Error(msg);
    it.self.logger.warn(msg);
  }
  exports.checkStrictMode = checkStrictMode;
});

// node_modules/ajv/dist/compile/names.js
var require_names = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var names = {
    data: new codegen_1.Name("data"),
    valCxt: new codegen_1.Name("valCxt"),
    instancePath: new codegen_1.Name("instancePath"),
    parentData: new codegen_1.Name("parentData"),
    parentDataProperty: new codegen_1.Name("parentDataProperty"),
    rootData: new codegen_1.Name("rootData"),
    dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
    vErrors: new codegen_1.Name("vErrors"),
    errors: new codegen_1.Name("errors"),
    this: new codegen_1.Name("this"),
    self: new codegen_1.Name("self"),
    scope: new codegen_1.Name("scope"),
    json: new codegen_1.Name("json"),
    jsonPos: new codegen_1.Name("jsonPos"),
    jsonLen: new codegen_1.Name("jsonLen"),
    jsonPart: new codegen_1.Name("jsonPart")
  };
  exports.default = names;
});

// node_modules/ajv/dist/compile/errors.js
var require_errors5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = undefined;
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var names_1 = require_names();
  exports.keywordError = {
    message: ({ keyword }) => (0, codegen_1.str)`must pass "${keyword}" keyword validation`
  };
  exports.keyword$DataError = {
    message: ({ keyword, schemaType }) => schemaType ? (0, codegen_1.str)`"${keyword}" keyword must be ${schemaType} ($data)` : (0, codegen_1.str)`"${keyword}" keyword is invalid ($data)`
  };
  function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
    const { it } = cxt;
    const { gen, compositeRule, allErrors } = it;
    const errObj = errorObjectCode(cxt, error, errorPaths);
    if (overrideAllErrors !== null && overrideAllErrors !== undefined ? overrideAllErrors : compositeRule || allErrors) {
      addError(gen, errObj);
    } else {
      returnErrors(it, (0, codegen_1._)`[${errObj}]`);
    }
  }
  exports.reportError = reportError;
  function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
    const { it } = cxt;
    const { gen, compositeRule, allErrors } = it;
    const errObj = errorObjectCode(cxt, error, errorPaths);
    addError(gen, errObj);
    if (!(compositeRule || allErrors)) {
      returnErrors(it, names_1.default.vErrors);
    }
  }
  exports.reportExtraError = reportExtraError;
  function resetErrorsCount(gen, errsCount) {
    gen.assign(names_1.default.errors, errsCount);
    gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._)`${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
  }
  exports.resetErrorsCount = resetErrorsCount;
  function extendErrors({ gen, keyword, schemaValue, data, errsCount, it }) {
    if (errsCount === undefined)
      throw new Error("ajv implementation error");
    const err = gen.name("err");
    gen.forRange("i", errsCount, names_1.default.errors, (i) => {
      gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i}]`);
      gen.if((0, codegen_1._)`${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._)`${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
      gen.assign((0, codegen_1._)`${err}.schemaPath`, (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`);
      if (it.opts.verbose) {
        gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);
        gen.assign((0, codegen_1._)`${err}.data`, data);
      }
    });
  }
  exports.extendErrors = extendErrors;
  function addError(gen, errObj) {
    const err = gen.const("err", errObj);
    gen.if((0, codegen_1._)`${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`), (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`);
    gen.code((0, codegen_1._)`${names_1.default.errors}++`);
  }
  function returnErrors(it, errs) {
    const { gen, validateName, schemaEnv } = it;
    if (schemaEnv.$async) {
      gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);
    } else {
      gen.assign((0, codegen_1._)`${validateName}.errors`, errs);
      gen.return(false);
    }
  }
  var E = {
    keyword: new codegen_1.Name("keyword"),
    schemaPath: new codegen_1.Name("schemaPath"),
    params: new codegen_1.Name("params"),
    propertyName: new codegen_1.Name("propertyName"),
    message: new codegen_1.Name("message"),
    schema: new codegen_1.Name("schema"),
    parentSchema: new codegen_1.Name("parentSchema")
  };
  function errorObjectCode(cxt, error, errorPaths) {
    const { createErrors } = cxt.it;
    if (createErrors === false)
      return (0, codegen_1._)`{}`;
    return errorObject(cxt, error, errorPaths);
  }
  function errorObject(cxt, error, errorPaths = {}) {
    const { gen, it } = cxt;
    const keyValues = [
      errorInstancePath(it, errorPaths),
      errorSchemaPath(cxt, errorPaths)
    ];
    extraErrorProps(cxt, error, keyValues);
    return gen.object(...keyValues);
  }
  function errorInstancePath({ errorPath }, { instancePath }) {
    const instPath = instancePath ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}` : errorPath;
    return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
  }
  function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
    let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;
    if (schemaPath) {
      schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
    }
    return [E.schemaPath, schPath];
  }
  function extraErrorProps(cxt, { params, message }, keyValues) {
    const { keyword, data, schemaValue, it } = cxt;
    const { opts, propertyName, topSchemaRef, schemaPath } = it;
    keyValues.push([E.keyword, keyword], [E.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._)`{}`]);
    if (opts.messages) {
      keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
    }
    if (opts.verbose) {
      keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._)`${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
    }
    if (propertyName)
      keyValues.push([E.propertyName, propertyName]);
  }
});

// node_modules/ajv/dist/compile/validate/boolSchema.js
var require_boolSchema = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = undefined;
  var errors_1 = require_errors5();
  var codegen_1 = require_codegen();
  var names_1 = require_names();
  var boolError = {
    message: "boolean schema is false"
  };
  function topBoolOrEmptySchema(it) {
    const { gen, schema, validateName } = it;
    if (schema === false) {
      falseSchemaError(it, false);
    } else if (typeof schema == "object" && schema.$async === true) {
      gen.return(names_1.default.data);
    } else {
      gen.assign((0, codegen_1._)`${validateName}.errors`, null);
      gen.return(true);
    }
  }
  exports.topBoolOrEmptySchema = topBoolOrEmptySchema;
  function boolOrEmptySchema(it, valid) {
    const { gen, schema } = it;
    if (schema === false) {
      gen.var(valid, false);
      falseSchemaError(it);
    } else {
      gen.var(valid, true);
    }
  }
  exports.boolOrEmptySchema = boolOrEmptySchema;
  function falseSchemaError(it, overrideAllErrors) {
    const { gen, data } = it;
    const cxt = {
      gen,
      keyword: "false schema",
      data,
      schema: false,
      schemaCode: false,
      schemaValue: false,
      params: {},
      it
    };
    (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);
  }
});

// node_modules/ajv/dist/compile/rules.js
var require_rules = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRules = exports.isJSONType = undefined;
  var _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
  var jsonTypes = new Set(_jsonTypes);
  function isJSONType(x) {
    return typeof x == "string" && jsonTypes.has(x);
  }
  exports.isJSONType = isJSONType;
  function getRules() {
    const groups = {
      number: { type: "number", rules: [] },
      string: { type: "string", rules: [] },
      array: { type: "array", rules: [] },
      object: { type: "object", rules: [] }
    };
    return {
      types: { ...groups, integer: true, boolean: true, null: true },
      rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
      post: { rules: [] },
      all: {},
      keywords: {}
    };
  }
  exports.getRules = getRules;
});

// node_modules/ajv/dist/compile/validate/applicability.js
var require_applicability = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = undefined;
  function schemaHasRulesForType({ schema, self }, type) {
    const group = self.RULES.types[type];
    return group && group !== true && shouldUseGroup(schema, group);
  }
  exports.schemaHasRulesForType = schemaHasRulesForType;
  function shouldUseGroup(schema, group) {
    return group.rules.some((rule) => shouldUseRule(schema, rule));
  }
  exports.shouldUseGroup = shouldUseGroup;
  function shouldUseRule(schema, rule) {
    var _a;
    return schema[rule.keyword] !== undefined || ((_a = rule.definition.implements) === null || _a === undefined ? undefined : _a.some((kwd) => schema[kwd] !== undefined));
  }
  exports.shouldUseRule = shouldUseRule;
});

// node_modules/ajv/dist/compile/validate/dataType.js
var require_dataType = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = undefined;
  var rules_1 = require_rules();
  var applicability_1 = require_applicability();
  var errors_1 = require_errors5();
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var DataType;
  (function(DataType2) {
    DataType2[DataType2["Correct"] = 0] = "Correct";
    DataType2[DataType2["Wrong"] = 1] = "Wrong";
  })(DataType || (exports.DataType = DataType = {}));
  function getSchemaTypes(schema) {
    const types = getJSONTypes(schema.type);
    const hasNull = types.includes("null");
    if (hasNull) {
      if (schema.nullable === false)
        throw new Error("type: null contradicts nullable: false");
    } else {
      if (!types.length && schema.nullable !== undefined) {
        throw new Error('"nullable" cannot be used without "type"');
      }
      if (schema.nullable === true)
        types.push("null");
    }
    return types;
  }
  exports.getSchemaTypes = getSchemaTypes;
  function getJSONTypes(ts) {
    const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
    if (types.every(rules_1.isJSONType))
      return types;
    throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
  }
  exports.getJSONTypes = getJSONTypes;
  function coerceAndCheckDataType(it, types) {
    const { gen, data, opts } = it;
    const coerceTo = coerceToTypes(types, opts.coerceTypes);
    const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
    if (checkTypes) {
      const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
      gen.if(wrongType, () => {
        if (coerceTo.length)
          coerceData(it, types, coerceTo);
        else
          reportTypeError(it);
      });
    }
    return checkTypes;
  }
  exports.coerceAndCheckDataType = coerceAndCheckDataType;
  var COERCIBLE = new Set(["string", "number", "integer", "boolean", "null"]);
  function coerceToTypes(types, coerceTypes) {
    return coerceTypes ? types.filter((t) => COERCIBLE.has(t) || coerceTypes === "array" && t === "array") : [];
  }
  function coerceData(it, types, coerceTo) {
    const { gen, data, opts } = it;
    const dataType = gen.let("dataType", (0, codegen_1._)`typeof ${data}`);
    const coerced = gen.let("coerced", (0, codegen_1._)`undefined`);
    if (opts.coerceTypes === "array") {
      gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
    }
    gen.if((0, codegen_1._)`${coerced} !== undefined`);
    for (const t of coerceTo) {
      if (COERCIBLE.has(t) || t === "array" && opts.coerceTypes === "array") {
        coerceSpecificType(t);
      }
    }
    gen.else();
    reportTypeError(it);
    gen.endIf();
    gen.if((0, codegen_1._)`${coerced} !== undefined`, () => {
      gen.assign(data, coerced);
      assignParentData(it, coerced);
    });
    function coerceSpecificType(t) {
      switch (t) {
        case "string":
          gen.elseIf((0, codegen_1._)`${dataType} == "number" || ${dataType} == "boolean"`).assign(coerced, (0, codegen_1._)`"" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`""`);
          return;
        case "number":
          gen.elseIf((0, codegen_1._)`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);
          return;
        case "integer":
          gen.elseIf((0, codegen_1._)`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);
          return;
        case "boolean":
          gen.elseIf((0, codegen_1._)`${data} === "false" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === "true" || ${data} === 1`).assign(coerced, true);
          return;
        case "null":
          gen.elseIf((0, codegen_1._)`${data} === "" || ${data} === 0 || ${data} === false`);
          gen.assign(coerced, null);
          return;
        case "array":
          gen.elseIf((0, codegen_1._)`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);
      }
    }
  }
  function assignParentData({ gen, parentData, parentDataProperty }, expr) {
    gen.if((0, codegen_1._)`${parentData} !== undefined`, () => gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));
  }
  function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
    let cond;
    switch (dataType) {
      case "null":
        return (0, codegen_1._)`${data} ${EQ} null`;
      case "array":
        cond = (0, codegen_1._)`Array.isArray(${data})`;
        break;
      case "object":
        cond = (0, codegen_1._)`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
        break;
      case "integer":
        cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);
        break;
      case "number":
        cond = numCond();
        break;
      default:
        return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;
    }
    return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
    function numCond(_cond = codegen_1.nil) {
      return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);
    }
  }
  exports.checkDataType = checkDataType;
  function checkDataTypes(dataTypes, data, strictNums, correct) {
    if (dataTypes.length === 1) {
      return checkDataType(dataTypes[0], data, strictNums, correct);
    }
    let cond;
    const types = (0, util_1.toHash)(dataTypes);
    if (types.array && types.object) {
      const notObj = (0, codegen_1._)`typeof ${data} != "object"`;
      cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;
      delete types.null;
      delete types.array;
      delete types.object;
    } else {
      cond = codegen_1.nil;
    }
    if (types.number)
      delete types.integer;
    for (const t in types)
      cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
    return cond;
  }
  exports.checkDataTypes = checkDataTypes;
  var typeError = {
    message: ({ schema }) => `must be ${schema}`,
    params: ({ schema, schemaValue }) => typeof schema == "string" ? (0, codegen_1._)`{type: ${schema}}` : (0, codegen_1._)`{type: ${schemaValue}}`
  };
  function reportTypeError(it) {
    const cxt = getTypeErrorContext(it);
    (0, errors_1.reportError)(cxt, typeError);
  }
  exports.reportTypeError = reportTypeError;
  function getTypeErrorContext(it) {
    const { gen, data, schema } = it;
    const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
    return {
      gen,
      keyword: "type",
      data,
      schema: schema.type,
      schemaCode,
      schemaValue: schemaCode,
      parentSchema: schema,
      params: {},
      it
    };
  }
});

// node_modules/ajv/dist/compile/validate/defaults.js
var require_defaults = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.assignDefaults = undefined;
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  function assignDefaults(it, ty) {
    const { properties, items } = it.schema;
    if (ty === "object" && properties) {
      for (const key in properties) {
        assignDefault(it, key, properties[key].default);
      }
    } else if (ty === "array" && Array.isArray(items)) {
      items.forEach((sch, i) => assignDefault(it, i, sch.default));
    }
  }
  exports.assignDefaults = assignDefaults;
  function assignDefault(it, prop, defaultValue) {
    const { gen, compositeRule, data, opts } = it;
    if (defaultValue === undefined)
      return;
    const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(prop)}`;
    if (compositeRule) {
      (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
      return;
    }
    let condition = (0, codegen_1._)`${childData} === undefined`;
    if (opts.useDefaults === "empty") {
      condition = (0, codegen_1._)`${condition} || ${childData} === null || ${childData} === ""`;
    }
    gen.if(condition, (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
  }
});

// node_modules/ajv/dist/vocabularies/code.js
var require_code2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = undefined;
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var names_1 = require_names();
  var util_2 = require_util();
  function checkReportMissingProp(cxt, prop) {
    const { gen, data, it } = cxt;
    gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
      cxt.setParams({ missingProperty: (0, codegen_1._)`${prop}` }, true);
      cxt.error();
    });
  }
  exports.checkReportMissingProp = checkReportMissingProp;
  function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
    return (0, codegen_1.or)(...properties.map((prop) => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._)`${missing} = ${prop}`)));
  }
  exports.checkMissingProp = checkMissingProp;
  function reportMissingProp(cxt, missing) {
    cxt.setParams({ missingProperty: missing }, true);
    cxt.error();
  }
  exports.reportMissingProp = reportMissingProp;
  function hasPropFunc(gen) {
    return gen.scopeValue("func", {
      ref: Object.prototype.hasOwnProperty,
      code: (0, codegen_1._)`Object.prototype.hasOwnProperty`
    });
  }
  exports.hasPropFunc = hasPropFunc;
  function isOwnProperty(gen, data, property) {
    return (0, codegen_1._)`${hasPropFunc(gen)}.call(${data}, ${property})`;
  }
  exports.isOwnProperty = isOwnProperty;
  function propertyInData(gen, data, property, ownProperties) {
    const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} !== undefined`;
    return ownProperties ? (0, codegen_1._)`${cond} && ${isOwnProperty(gen, data, property)}` : cond;
  }
  exports.propertyInData = propertyInData;
  function noPropertyInData(gen, data, property, ownProperties) {
    const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} === undefined`;
    return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
  }
  exports.noPropertyInData = noPropertyInData;
  function allSchemaProperties(schemaMap) {
    return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
  }
  exports.allSchemaProperties = allSchemaProperties;
  function schemaProperties(it, schemaMap) {
    return allSchemaProperties(schemaMap).filter((p) => !(0, util_1.alwaysValidSchema)(it, schemaMap[p]));
  }
  exports.schemaProperties = schemaProperties;
  function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
    const dataAndSchema = passSchema ? (0, codegen_1._)`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
    const valCxt = [
      [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)],
      [names_1.default.parentData, it.parentData],
      [names_1.default.parentDataProperty, it.parentDataProperty],
      [names_1.default.rootData, names_1.default.rootData]
    ];
    if (it.opts.dynamicRef)
      valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
    const args = (0, codegen_1._)`${dataAndSchema}, ${gen.object(...valCxt)}`;
    return context !== codegen_1.nil ? (0, codegen_1._)`${func}.call(${context}, ${args})` : (0, codegen_1._)`${func}(${args})`;
  }
  exports.callValidateCode = callValidateCode;
  var newRegExp = (0, codegen_1._)`new RegExp`;
  function usePattern({ gen, it: { opts } }, pattern) {
    const u = opts.unicodeRegExp ? "u" : "";
    const { regExp } = opts.code;
    const rx = regExp(pattern, u);
    return gen.scopeValue("pattern", {
      key: rx.toString(),
      ref: rx,
      code: (0, codegen_1._)`${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`
    });
  }
  exports.usePattern = usePattern;
  function validateArray(cxt) {
    const { gen, data, keyword, it } = cxt;
    const valid = gen.name("valid");
    if (it.allErrors) {
      const validArr = gen.let("valid", true);
      validateItems(() => gen.assign(validArr, false));
      return validArr;
    }
    gen.var(valid, true);
    validateItems(() => gen.break());
    return valid;
    function validateItems(notValid) {
      const len = gen.const("len", (0, codegen_1._)`${data}.length`);
      gen.forRange("i", 0, len, (i) => {
        cxt.subschema({
          keyword,
          dataProp: i,
          dataPropType: util_1.Type.Num
        }, valid);
        gen.if((0, codegen_1.not)(valid), notValid);
      });
    }
  }
  exports.validateArray = validateArray;
  function validateUnion(cxt) {
    const { gen, schema, keyword, it } = cxt;
    if (!Array.isArray(schema))
      throw new Error("ajv implementation error");
    const alwaysValid = schema.some((sch) => (0, util_1.alwaysValidSchema)(it, sch));
    if (alwaysValid && !it.opts.unevaluated)
      return;
    const valid = gen.let("valid", false);
    const schValid = gen.name("_valid");
    gen.block(() => schema.forEach((_sch, i) => {
      const schCxt = cxt.subschema({
        keyword,
        schemaProp: i,
        compositeRule: true
      }, schValid);
      gen.assign(valid, (0, codegen_1._)`${valid} || ${schValid}`);
      const merged = cxt.mergeValidEvaluated(schCxt, schValid);
      if (!merged)
        gen.if((0, codegen_1.not)(valid));
    }));
    cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
  }
  exports.validateUnion = validateUnion;
});

// node_modules/ajv/dist/compile/validate/keyword.js
var require_keyword = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.validateKeywordUsage = exports.validSchemaType = exports.funcKeywordCode = exports.macroKeywordCode = undefined;
  var codegen_1 = require_codegen();
  var names_1 = require_names();
  var code_1 = require_code2();
  var errors_1 = require_errors5();
  function macroKeywordCode(cxt, def) {
    const { gen, keyword, schema, parentSchema, it } = cxt;
    const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
    const schemaRef = useKeyword(gen, keyword, macroSchema);
    if (it.opts.validateSchema !== false)
      it.self.validateSchema(macroSchema, true);
    const valid = gen.name("valid");
    cxt.subschema({
      schema: macroSchema,
      schemaPath: codegen_1.nil,
      errSchemaPath: `${it.errSchemaPath}/${keyword}`,
      topSchemaRef: schemaRef,
      compositeRule: true
    }, valid);
    cxt.pass(valid, () => cxt.error(true));
  }
  exports.macroKeywordCode = macroKeywordCode;
  function funcKeywordCode(cxt, def) {
    var _a;
    const { gen, keyword, schema, parentSchema, $data, it } = cxt;
    checkAsyncKeyword(it, def);
    const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
    const validateRef = useKeyword(gen, keyword, validate);
    const valid = gen.let("valid");
    cxt.block$data(valid, validateKeyword);
    cxt.ok((_a = def.valid) !== null && _a !== undefined ? _a : valid);
    function validateKeyword() {
      if (def.errors === false) {
        assignValid();
        if (def.modifying)
          modifyData(cxt);
        reportErrs(() => cxt.error());
      } else {
        const ruleErrs = def.async ? validateAsync() : validateSync();
        if (def.modifying)
          modifyData(cxt);
        reportErrs(() => addErrs(cxt, ruleErrs));
      }
    }
    function validateAsync() {
      const ruleErrs = gen.let("ruleErrs", null);
      gen.try(() => assignValid((0, codegen_1._)`await `), (e) => gen.assign(valid, false).if((0, codegen_1._)`${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._)`${e}.errors`), () => gen.throw(e)));
      return ruleErrs;
    }
    function validateSync() {
      const validateErrs = (0, codegen_1._)`${validateRef}.errors`;
      gen.assign(validateErrs, null);
      assignValid(codegen_1.nil);
      return validateErrs;
    }
    function assignValid(_await = def.async ? (0, codegen_1._)`await ` : codegen_1.nil) {
      const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
      const passSchema = !(("compile" in def) && !$data || def.schema === false);
      gen.assign(valid, (0, codegen_1._)`${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
    }
    function reportErrs(errors) {
      var _a2;
      gen.if((0, codegen_1.not)((_a2 = def.valid) !== null && _a2 !== undefined ? _a2 : valid), errors);
    }
  }
  exports.funcKeywordCode = funcKeywordCode;
  function modifyData(cxt) {
    const { gen, data, it } = cxt;
    gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._)`${it.parentData}[${it.parentDataProperty}]`));
  }
  function addErrs(cxt, errs) {
    const { gen } = cxt;
    gen.if((0, codegen_1._)`Array.isArray(${errs})`, () => {
      gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`).assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
      (0, errors_1.extendErrors)(cxt);
    }, () => cxt.error());
  }
  function checkAsyncKeyword({ schemaEnv }, def) {
    if (def.async && !schemaEnv.$async)
      throw new Error("async keyword in sync schema");
  }
  function useKeyword(gen, keyword, result) {
    if (result === undefined)
      throw new Error(`keyword "${keyword}" failed to compile`);
    return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1.stringify)(result) });
  }
  function validSchemaType(schema, schemaType, allowUndefined = false) {
    return !schemaType.length || schemaType.some((st) => st === "array" ? Array.isArray(schema) : st === "object" ? schema && typeof schema == "object" && !Array.isArray(schema) : typeof schema == st || allowUndefined && typeof schema == "undefined");
  }
  exports.validSchemaType = validSchemaType;
  function validateKeywordUsage({ schema, opts, self, errSchemaPath }, def, keyword) {
    if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
      throw new Error("ajv implementation error");
    }
    const deps = def.dependencies;
    if (deps === null || deps === undefined ? undefined : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
      throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
    }
    if (def.validateSchema) {
      const valid = def.validateSchema(schema[keyword]);
      if (!valid) {
        const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` + self.errorsText(def.validateSchema.errors);
        if (opts.validateSchema === "log")
          self.logger.error(msg);
        else
          throw new Error(msg);
      }
    }
  }
  exports.validateKeywordUsage = validateKeywordUsage;
});

// node_modules/ajv/dist/compile/validate/subschema.js
var require_subschema = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = undefined;
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
    if (keyword !== undefined && schema !== undefined) {
      throw new Error('both "keyword" and "schema" passed, only one allowed');
    }
    if (keyword !== undefined) {
      const sch = it.schema[keyword];
      return schemaProp === undefined ? {
        schema: sch,
        schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
        errSchemaPath: `${it.errSchemaPath}/${keyword}`
      } : {
        schema: sch[schemaProp],
        schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
        errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`
      };
    }
    if (schema !== undefined) {
      if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {
        throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
      }
      return {
        schema,
        schemaPath,
        topSchemaRef,
        errSchemaPath
      };
    }
    throw new Error('either "keyword" or "schema" must be passed');
  }
  exports.getSubschema = getSubschema;
  function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
    if (data !== undefined && dataProp !== undefined) {
      throw new Error('both "data" and "dataProp" passed, only one allowed');
    }
    const { gen } = it;
    if (dataProp !== undefined) {
      const { errorPath, dataPathArr, opts } = it;
      const nextData = gen.let("data", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
      dataContextProps(nextData);
      subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
      subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;
      subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
    }
    if (data !== undefined) {
      const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true);
      dataContextProps(nextData);
      if (propertyName !== undefined)
        subschema.propertyName = propertyName;
    }
    if (dataTypes)
      subschema.dataTypes = dataTypes;
    function dataContextProps(_nextData) {
      subschema.data = _nextData;
      subschema.dataLevel = it.dataLevel + 1;
      subschema.dataTypes = [];
      it.definedProperties = new Set;
      subschema.parentData = it.data;
      subschema.dataNames = [...it.dataNames, _nextData];
    }
  }
  exports.extendSubschemaData = extendSubschemaData;
  function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
    if (compositeRule !== undefined)
      subschema.compositeRule = compositeRule;
    if (createErrors !== undefined)
      subschema.createErrors = createErrors;
    if (allErrors !== undefined)
      subschema.allErrors = allErrors;
    subschema.jtdDiscriminator = jtdDiscriminator;
    subschema.jtdMetadata = jtdMetadata;
  }
  exports.extendSubschemaMode = extendSubschemaMode;
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS((exports, module) => {
  module.exports = function equal(a, b) {
    if (a === b)
      return true;
    if (a && b && typeof a == "object" && typeof b == "object") {
      if (a.constructor !== b.constructor)
        return false;
      var length, i, keys;
      if (Array.isArray(a)) {
        length = a.length;
        if (length != b.length)
          return false;
        for (i = length;i-- !== 0; )
          if (!equal(a[i], b[i]))
            return false;
        return true;
      }
      if (a.constructor === RegExp)
        return a.source === b.source && a.flags === b.flags;
      if (a.valueOf !== Object.prototype.valueOf)
        return a.valueOf() === b.valueOf();
      if (a.toString !== Object.prototype.toString)
        return a.toString() === b.toString();
      keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length)
        return false;
      for (i = length;i-- !== 0; )
        if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
          return false;
      for (i = length;i-- !== 0; ) {
        var key = keys[i];
        if (!equal(a[key], b[key]))
          return false;
      }
      return true;
    }
    return a !== a && b !== b;
  };
});

// node_modules/json-schema-traverse/index.js
var require_json_schema_traverse = __commonJS((exports, module) => {
  var traverse = module.exports = function(schema, opts, cb) {
    if (typeof opts == "function") {
      cb = opts;
      opts = {};
    }
    cb = opts.cb || cb;
    var pre = typeof cb == "function" ? cb : cb.pre || function() {
    };
    var post = cb.post || function() {
    };
    _traverse(opts, pre, post, schema, "", schema);
  };
  traverse.keywords = {
    additionalItems: true,
    items: true,
    contains: true,
    additionalProperties: true,
    propertyNames: true,
    not: true,
    if: true,
    then: true,
    else: true
  };
  traverse.arrayKeywords = {
    items: true,
    allOf: true,
    anyOf: true,
    oneOf: true
  };
  traverse.propsKeywords = {
    $defs: true,
    definitions: true,
    properties: true,
    patternProperties: true,
    dependencies: true
  };
  traverse.skipKeywords = {
    default: true,
    enum: true,
    const: true,
    required: true,
    maximum: true,
    minimum: true,
    exclusiveMaximum: true,
    exclusiveMinimum: true,
    multipleOf: true,
    maxLength: true,
    minLength: true,
    pattern: true,
    format: true,
    maxItems: true,
    minItems: true,
    uniqueItems: true,
    maxProperties: true,
    minProperties: true
  };
  function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    if (schema && typeof schema == "object" && !Array.isArray(schema)) {
      pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      for (var key in schema) {
        var sch = schema[key];
        if (Array.isArray(sch)) {
          if (key in traverse.arrayKeywords) {
            for (var i = 0;i < sch.length; i++)
              _traverse(opts, pre, post, sch[i], jsonPtr + "/" + key + "/" + i, rootSchema, jsonPtr, key, schema, i);
          }
        } else if (key in traverse.propsKeywords) {
          if (sch && typeof sch == "object") {
            for (var prop in sch)
              _traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
          }
        } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
          _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema);
        }
      }
      post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    }
  }
  function escapeJsonPtr(str) {
    return str.replace(/~/g, "~0").replace(/\//g, "~1");
  }
});

// node_modules/ajv/dist/compile/resolve.js
var require_resolve = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = undefined;
  var util_1 = require_util();
  var equal = require_fast_deep_equal();
  var traverse = require_json_schema_traverse();
  var SIMPLE_INLINED = new Set([
    "type",
    "format",
    "pattern",
    "maxLength",
    "minLength",
    "maxProperties",
    "minProperties",
    "maxItems",
    "minItems",
    "maximum",
    "minimum",
    "uniqueItems",
    "multipleOf",
    "required",
    "enum",
    "const"
  ]);
  function inlineRef(schema, limit = true) {
    if (typeof schema == "boolean")
      return true;
    if (limit === true)
      return !hasRef(schema);
    if (!limit)
      return false;
    return countKeys(schema) <= limit;
  }
  exports.inlineRef = inlineRef;
  var REF_KEYWORDS = new Set([
    "$ref",
    "$recursiveRef",
    "$recursiveAnchor",
    "$dynamicRef",
    "$dynamicAnchor"
  ]);
  function hasRef(schema) {
    for (const key in schema) {
      if (REF_KEYWORDS.has(key))
        return true;
      const sch = schema[key];
      if (Array.isArray(sch) && sch.some(hasRef))
        return true;
      if (typeof sch == "object" && hasRef(sch))
        return true;
    }
    return false;
  }
  function countKeys(schema) {
    let count = 0;
    for (const key in schema) {
      if (key === "$ref")
        return Infinity;
      count++;
      if (SIMPLE_INLINED.has(key))
        continue;
      if (typeof schema[key] == "object") {
        (0, util_1.eachItem)(schema[key], (sch) => count += countKeys(sch));
      }
      if (count === Infinity)
        return Infinity;
    }
    return count;
  }
  function getFullPath(resolver, id = "", normalize) {
    if (normalize !== false)
      id = normalizeId(id);
    const p = resolver.parse(id);
    return _getFullPath(resolver, p);
  }
  exports.getFullPath = getFullPath;
  function _getFullPath(resolver, p) {
    const serialized = resolver.serialize(p);
    return serialized.split("#")[0] + "#";
  }
  exports._getFullPath = _getFullPath;
  var TRAILING_SLASH_HASH = /#\/?$/;
  function normalizeId(id) {
    return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
  }
  exports.normalizeId = normalizeId;
  function resolveUrl(resolver, baseId, id) {
    id = normalizeId(id);
    return resolver.resolve(baseId, id);
  }
  exports.resolveUrl = resolveUrl;
  var ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
  function getSchemaRefs(schema, baseId) {
    if (typeof schema == "boolean")
      return {};
    const { schemaId, uriResolver } = this.opts;
    const schId = normalizeId(schema[schemaId] || baseId);
    const baseIds = { "": schId };
    const pathPrefix = getFullPath(uriResolver, schId, false);
    const localRefs = {};
    const schemaRefs = new Set;
    traverse(schema, { allKeys: true }, (sch, jsonPtr, _, parentJsonPtr) => {
      if (parentJsonPtr === undefined)
        return;
      const fullPath = pathPrefix + jsonPtr;
      let innerBaseId = baseIds[parentJsonPtr];
      if (typeof sch[schemaId] == "string")
        innerBaseId = addRef.call(this, sch[schemaId]);
      addAnchor.call(this, sch.$anchor);
      addAnchor.call(this, sch.$dynamicAnchor);
      baseIds[jsonPtr] = innerBaseId;
      function addRef(ref) {
        const _resolve = this.opts.uriResolver.resolve;
        ref = normalizeId(innerBaseId ? _resolve(innerBaseId, ref) : ref);
        if (schemaRefs.has(ref))
          throw ambiguos(ref);
        schemaRefs.add(ref);
        let schOrRef = this.refs[ref];
        if (typeof schOrRef == "string")
          schOrRef = this.refs[schOrRef];
        if (typeof schOrRef == "object") {
          checkAmbiguosRef(sch, schOrRef.schema, ref);
        } else if (ref !== normalizeId(fullPath)) {
          if (ref[0] === "#") {
            checkAmbiguosRef(sch, localRefs[ref], ref);
            localRefs[ref] = sch;
          } else {
            this.refs[ref] = fullPath;
          }
        }
        return ref;
      }
      function addAnchor(anchor) {
        if (typeof anchor == "string") {
          if (!ANCHOR.test(anchor))
            throw new Error(`invalid anchor "${anchor}"`);
          addRef.call(this, `#${anchor}`);
        }
      }
    });
    return localRefs;
    function checkAmbiguosRef(sch1, sch2, ref) {
      if (sch2 !== undefined && !equal(sch1, sch2))
        throw ambiguos(ref);
    }
    function ambiguos(ref) {
      return new Error(`reference "${ref}" resolves to more than one schema`);
    }
  }
  exports.getSchemaRefs = getSchemaRefs;
});

// node_modules/ajv/dist/compile/validate/index.js
var require_validate = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getData = exports.KeywordCxt = exports.validateFunctionCode = undefined;
  var boolSchema_1 = require_boolSchema();
  var dataType_1 = require_dataType();
  var applicability_1 = require_applicability();
  var dataType_2 = require_dataType();
  var defaults_1 = require_defaults();
  var keyword_1 = require_keyword();
  var subschema_1 = require_subschema();
  var codegen_1 = require_codegen();
  var names_1 = require_names();
  var resolve_1 = require_resolve();
  var util_1 = require_util();
  var errors_1 = require_errors5();
  function validateFunctionCode(it) {
    if (isSchemaObj(it)) {
      checkKeywords(it);
      if (schemaCxtHasRules(it)) {
        topSchemaObjCode(it);
        return;
      }
    }
    validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
  }
  exports.validateFunctionCode = validateFunctionCode;
  function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {
    if (opts.code.es5) {
      gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
        gen.code((0, codegen_1._)`"use strict"; ${funcSourceUrl(schema, opts)}`);
        destructureValCxtES5(gen, opts);
        gen.code(body);
      });
    } else {
      gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));
    }
  }
  function destructureValCxt(opts) {
    return (0, codegen_1._)`{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
  }
  function destructureValCxtES5(gen, opts) {
    gen.if(names_1.default.valCxt, () => {
      gen.var(names_1.default.instancePath, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`);
      gen.var(names_1.default.parentData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`);
      gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
      gen.var(names_1.default.rootData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`);
      if (opts.dynamicRef)
        gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
    }, () => {
      gen.var(names_1.default.instancePath, (0, codegen_1._)`""`);
      gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);
      gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`undefined`);
      gen.var(names_1.default.rootData, names_1.default.data);
      if (opts.dynamicRef)
        gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);
    });
  }
  function topSchemaObjCode(it) {
    const { schema, opts, gen } = it;
    validateFunction(it, () => {
      if (opts.$comment && schema.$comment)
        commentKeyword(it);
      checkNoDefault(it);
      gen.let(names_1.default.vErrors, null);
      gen.let(names_1.default.errors, 0);
      if (opts.unevaluated)
        resetEvaluated(it);
      typeAndKeywords(it);
      returnResults(it);
    });
    return;
  }
  function resetEvaluated(it) {
    const { gen, validateName } = it;
    it.evaluated = gen.const("evaluated", (0, codegen_1._)`${validateName}.evaluated`);
    gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._)`${it.evaluated}.props`, (0, codegen_1._)`undefined`));
    gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._)`${it.evaluated}.items`, (0, codegen_1._)`undefined`));
  }
  function funcSourceUrl(schema, opts) {
    const schId = typeof schema == "object" && schema[opts.schemaId];
    return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._)`/*# sourceURL=${schId} */` : codegen_1.nil;
  }
  function subschemaCode(it, valid) {
    if (isSchemaObj(it)) {
      checkKeywords(it);
      if (schemaCxtHasRules(it)) {
        subSchemaObjCode(it, valid);
        return;
      }
    }
    (0, boolSchema_1.boolOrEmptySchema)(it, valid);
  }
  function schemaCxtHasRules({ schema, self }) {
    if (typeof schema == "boolean")
      return !schema;
    for (const key in schema)
      if (self.RULES.all[key])
        return true;
    return false;
  }
  function isSchemaObj(it) {
    return typeof it.schema != "boolean";
  }
  function subSchemaObjCode(it, valid) {
    const { schema, gen, opts } = it;
    if (opts.$comment && schema.$comment)
      commentKeyword(it);
    updateContext(it);
    checkAsyncSchema(it);
    const errsCount = gen.const("_errs", names_1.default.errors);
    typeAndKeywords(it, errsCount);
    gen.var(valid, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
  }
  function checkKeywords(it) {
    (0, util_1.checkUnknownRules)(it);
    checkRefsAndKeywords(it);
  }
  function typeAndKeywords(it, errsCount) {
    if (it.opts.jtd)
      return schemaKeywords(it, [], false, errsCount);
    const types = (0, dataType_1.getSchemaTypes)(it.schema);
    const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
    schemaKeywords(it, types, !checkedTypes, errsCount);
  }
  function checkRefsAndKeywords(it) {
    const { schema, errSchemaPath, opts, self } = it;
    if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self.RULES)) {
      self.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
    }
  }
  function checkNoDefault(it) {
    const { schema, opts } = it;
    if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {
      (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
    }
  }
  function updateContext(it) {
    const schId = it.schema[it.opts.schemaId];
    if (schId)
      it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
  }
  function checkAsyncSchema(it) {
    if (it.schema.$async && !it.schemaEnv.$async)
      throw new Error("async schema in sync schema");
  }
  function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
    const msg = schema.$comment;
    if (opts.$comment === true) {
      gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);
    } else if (typeof opts.$comment == "function") {
      const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;
      const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
      gen.code((0, codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
    }
  }
  function returnResults(it) {
    const { gen, schemaEnv, validateName, ValidationError, opts } = it;
    if (schemaEnv.$async) {
      gen.if((0, codegen_1._)`${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`));
    } else {
      gen.assign((0, codegen_1._)`${validateName}.errors`, names_1.default.vErrors);
      if (opts.unevaluated)
        assignEvaluated(it);
      gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);
    }
  }
  function assignEvaluated({ gen, evaluated, props, items }) {
    if (props instanceof codegen_1.Name)
      gen.assign((0, codegen_1._)`${evaluated}.props`, props);
    if (items instanceof codegen_1.Name)
      gen.assign((0, codegen_1._)`${evaluated}.items`, items);
  }
  function schemaKeywords(it, types, typeErrors, errsCount) {
    const { gen, schema, data, allErrors, opts, self } = it;
    const { RULES } = self;
    if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {
      gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition));
      return;
    }
    if (!opts.jtd)
      checkStrictTypes(it, types);
    gen.block(() => {
      for (const group of RULES.rules)
        groupKeywords(group);
      groupKeywords(RULES.post);
    });
    function groupKeywords(group) {
      if (!(0, applicability_1.shouldUseGroup)(schema, group))
        return;
      if (group.type) {
        gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
        iterateKeywords(it, group);
        if (types.length === 1 && types[0] === group.type && typeErrors) {
          gen.else();
          (0, dataType_2.reportTypeError)(it);
        }
        gen.endIf();
      } else {
        iterateKeywords(it, group);
      }
      if (!allErrors)
        gen.if((0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`);
    }
  }
  function iterateKeywords(it, group) {
    const { gen, schema, opts: { useDefaults } } = it;
    if (useDefaults)
      (0, defaults_1.assignDefaults)(it, group.type);
    gen.block(() => {
      for (const rule of group.rules) {
        if ((0, applicability_1.shouldUseRule)(schema, rule)) {
          keywordCode(it, rule.keyword, rule.definition, group.type);
        }
      }
    });
  }
  function checkStrictTypes(it, types) {
    if (it.schemaEnv.meta || !it.opts.strictTypes)
      return;
    checkContextTypes(it, types);
    if (!it.opts.allowUnionTypes)
      checkMultipleTypes(it, types);
    checkKeywordTypes(it, it.dataTypes);
  }
  function checkContextTypes(it, types) {
    if (!types.length)
      return;
    if (!it.dataTypes.length) {
      it.dataTypes = types;
      return;
    }
    types.forEach((t) => {
      if (!includesType(it.dataTypes, t)) {
        strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
      }
    });
    narrowSchemaTypes(it, types);
  }
  function checkMultipleTypes(it, ts) {
    if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
      strictTypesError(it, "use allowUnionTypes to allow union type keyword");
    }
  }
  function checkKeywordTypes(it, ts) {
    const rules = it.self.RULES.all;
    for (const keyword in rules) {
      const rule = rules[keyword];
      if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
        const { type } = rule.definition;
        if (type.length && !type.some((t) => hasApplicableType(ts, t))) {
          strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
        }
      }
    }
  }
  function hasApplicableType(schTs, kwdT) {
    return schTs.includes(kwdT) || kwdT === "number" && schTs.includes("integer");
  }
  function includesType(ts, t) {
    return ts.includes(t) || t === "integer" && ts.includes("number");
  }
  function narrowSchemaTypes(it, withTypes) {
    const ts = [];
    for (const t of it.dataTypes) {
      if (includesType(withTypes, t))
        ts.push(t);
      else if (withTypes.includes("integer") && t === "number")
        ts.push("integer");
    }
    it.dataTypes = ts;
  }
  function strictTypesError(it, msg) {
    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
    msg += ` at "${schemaPath}" (strictTypes)`;
    (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
  }

  class KeywordCxt {
    constructor(it, def, keyword) {
      (0, keyword_1.validateKeywordUsage)(it, def, keyword);
      this.gen = it.gen;
      this.allErrors = it.allErrors;
      this.keyword = keyword;
      this.data = it.data;
      this.schema = it.schema[keyword];
      this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
      this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
      this.schemaType = def.schemaType;
      this.parentSchema = it.schema;
      this.params = {};
      this.it = it;
      this.def = def;
      if (this.$data) {
        this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
      } else {
        this.schemaCode = this.schemaValue;
        if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
          throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
        }
      }
      if ("code" in def ? def.trackErrors : def.errors !== false) {
        this.errsCount = it.gen.const("_errs", names_1.default.errors);
      }
    }
    result(condition, successAction, failAction) {
      this.failResult((0, codegen_1.not)(condition), successAction, failAction);
    }
    failResult(condition, successAction, failAction) {
      this.gen.if(condition);
      if (failAction)
        failAction();
      else
        this.error();
      if (successAction) {
        this.gen.else();
        successAction();
        if (this.allErrors)
          this.gen.endIf();
      } else {
        if (this.allErrors)
          this.gen.endIf();
        else
          this.gen.else();
      }
    }
    pass(condition, failAction) {
      this.failResult((0, codegen_1.not)(condition), undefined, failAction);
    }
    fail(condition) {
      if (condition === undefined) {
        this.error();
        if (!this.allErrors)
          this.gen.if(false);
        return;
      }
      this.gen.if(condition);
      this.error();
      if (this.allErrors)
        this.gen.endIf();
      else
        this.gen.else();
    }
    fail$data(condition) {
      if (!this.$data)
        return this.fail(condition);
      const { schemaCode } = this;
      this.fail((0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
    }
    error(append, errorParams, errorPaths) {
      if (errorParams) {
        this.setParams(errorParams);
        this._error(append, errorPaths);
        this.setParams({});
        return;
      }
      this._error(append, errorPaths);
    }
    _error(append, errorPaths) {
      (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
    }
    $dataError() {
      (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
    }
    reset() {
      if (this.errsCount === undefined)
        throw new Error('add "trackErrors" to keyword definition');
      (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
    }
    ok(cond) {
      if (!this.allErrors)
        this.gen.if(cond);
    }
    setParams(obj, assign) {
      if (assign)
        Object.assign(this.params, obj);
      else
        this.params = obj;
    }
    block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
      this.gen.block(() => {
        this.check$data(valid, $dataValid);
        codeBlock();
      });
    }
    check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
      if (!this.$data)
        return;
      const { gen, schemaCode, schemaType, def } = this;
      gen.if((0, codegen_1.or)((0, codegen_1._)`${schemaCode} === undefined`, $dataValid));
      if (valid !== codegen_1.nil)
        gen.assign(valid, true);
      if (schemaType.length || def.validateSchema) {
        gen.elseIf(this.invalid$data());
        this.$dataError();
        if (valid !== codegen_1.nil)
          gen.assign(valid, false);
      }
      gen.else();
    }
    invalid$data() {
      const { gen, schemaCode, schemaType, def, it } = this;
      return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
      function wrong$DataType() {
        if (schemaType.length) {
          if (!(schemaCode instanceof codegen_1.Name))
            throw new Error("ajv implementation error");
          const st = Array.isArray(schemaType) ? schemaType : [schemaType];
          return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
        }
        return codegen_1.nil;
      }
      function invalid$DataSchema() {
        if (def.validateSchema) {
          const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema });
          return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;
        }
        return codegen_1.nil;
      }
    }
    subschema(appl, valid) {
      const subschema = (0, subschema_1.getSubschema)(this.it, appl);
      (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
      (0, subschema_1.extendSubschemaMode)(subschema, appl);
      const nextContext = { ...this.it, ...subschema, items: undefined, props: undefined };
      subschemaCode(nextContext, valid);
      return nextContext;
    }
    mergeEvaluated(schemaCxt, toName) {
      const { it, gen } = this;
      if (!it.opts.unevaluated)
        return;
      if (it.props !== true && schemaCxt.props !== undefined) {
        it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
      }
      if (it.items !== true && schemaCxt.items !== undefined) {
        it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
      }
    }
    mergeValidEvaluated(schemaCxt, valid) {
      const { it, gen } = this;
      if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
        gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
        return true;
      }
    }
  }
  exports.KeywordCxt = KeywordCxt;
  function keywordCode(it, keyword, def, ruleType) {
    const cxt = new KeywordCxt(it, def, keyword);
    if ("code" in def) {
      def.code(cxt, ruleType);
    } else if (cxt.$data && def.validate) {
      (0, keyword_1.funcKeywordCode)(cxt, def);
    } else if ("macro" in def) {
      (0, keyword_1.macroKeywordCode)(cxt, def);
    } else if (def.compile || def.validate) {
      (0, keyword_1.funcKeywordCode)(cxt, def);
    }
  }
  var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
  var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
  function getData($data, { dataLevel, dataNames, dataPathArr }) {
    let jsonPointer;
    let data;
    if ($data === "")
      return names_1.default.rootData;
    if ($data[0] === "/") {
      if (!JSON_POINTER.test($data))
        throw new Error(`Invalid JSON-pointer: ${$data}`);
      jsonPointer = $data;
      data = names_1.default.rootData;
    } else {
      const matches = RELATIVE_JSON_POINTER.exec($data);
      if (!matches)
        throw new Error(`Invalid JSON-pointer: ${$data}`);
      const up = +matches[1];
      jsonPointer = matches[2];
      if (jsonPointer === "#") {
        if (up >= dataLevel)
          throw new Error(errorMsg("property/index", up));
        return dataPathArr[dataLevel - up];
      }
      if (up > dataLevel)
        throw new Error(errorMsg("data", up));
      data = dataNames[dataLevel - up];
      if (!jsonPointer)
        return data;
    }
    let expr = data;
    const segments = jsonPointer.split("/");
    for (const segment of segments) {
      if (segment) {
        data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
        expr = (0, codegen_1._)`${expr} && ${data}`;
      }
    }
    return expr;
    function errorMsg(pointerType, up) {
      return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
    }
  }
  exports.getData = getData;
});

// node_modules/ajv/dist/runtime/validation_error.js
var require_validation_error = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });

  class ValidationError extends Error {
    constructor(errors) {
      super("validation failed");
      this.errors = errors;
      this.ajv = this.validation = true;
    }
  }
  exports.default = ValidationError;
});

// node_modules/ajv/dist/compile/ref_error.js
var require_ref_error = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var resolve_1 = require_resolve();

  class MissingRefError extends Error {
    constructor(resolver, baseId, ref, msg) {
      super(msg || `can't resolve reference ${ref} from id ${baseId}`);
      this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
      this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
    }
  }
  exports.default = MissingRefError;
});

// node_modules/ajv/dist/compile/index.js
var require_compile = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveSchema = exports.getCompilingSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = undefined;
  var codegen_1 = require_codegen();
  var validation_error_1 = require_validation_error();
  var names_1 = require_names();
  var resolve_1 = require_resolve();
  var util_1 = require_util();
  var validate_1 = require_validate();

  class SchemaEnv {
    constructor(env) {
      var _a;
      this.refs = {};
      this.dynamicAnchors = {};
      let schema;
      if (typeof env.schema == "object")
        schema = env.schema;
      this.schema = env.schema;
      this.schemaId = env.schemaId;
      this.root = env.root || this;
      this.baseId = (_a = env.baseId) !== null && _a !== undefined ? _a : (0, resolve_1.normalizeId)(schema === null || schema === undefined ? undefined : schema[env.schemaId || "$id"]);
      this.schemaPath = env.schemaPath;
      this.localRefs = env.localRefs;
      this.meta = env.meta;
      this.$async = schema === null || schema === undefined ? undefined : schema.$async;
      this.refs = {};
    }
  }
  exports.SchemaEnv = SchemaEnv;
  function compileSchema(sch) {
    const _sch = getCompilingSchema.call(this, sch);
    if (_sch)
      return _sch;
    const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId);
    const { es5, lines } = this.opts.code;
    const { ownProperties } = this.opts;
    const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
    let _ValidationError;
    if (sch.$async) {
      _ValidationError = gen.scopeValue("Error", {
        ref: validation_error_1.default,
        code: (0, codegen_1._)`require("ajv/dist/runtime/validation_error").default`
      });
    }
    const validateName = gen.scopeName("validate");
    sch.validateName = validateName;
    const schemaCxt = {
      gen,
      allErrors: this.opts.allErrors,
      data: names_1.default.data,
      parentData: names_1.default.parentData,
      parentDataProperty: names_1.default.parentDataProperty,
      dataNames: [names_1.default.data],
      dataPathArr: [codegen_1.nil],
      dataLevel: 0,
      dataTypes: [],
      definedProperties: new Set,
      topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true ? { ref: sch.schema, code: (0, codegen_1.stringify)(sch.schema) } : { ref: sch.schema }),
      validateName,
      ValidationError: _ValidationError,
      schema: sch.schema,
      schemaEnv: sch,
      rootId,
      baseId: sch.baseId || rootId,
      schemaPath: codegen_1.nil,
      errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
      errorPath: (0, codegen_1._)`""`,
      opts: this.opts,
      self: this
    };
    let sourceCode;
    try {
      this._compilations.add(sch);
      (0, validate_1.validateFunctionCode)(schemaCxt);
      gen.optimize(this.opts.code.optimize);
      const validateCode = gen.toString();
      sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
      if (this.opts.code.process)
        sourceCode = this.opts.code.process(sourceCode, sch);
      const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
      const validate = makeValidate(this, this.scope.get());
      this.scope.value(validateName, { ref: validate });
      validate.errors = null;
      validate.schema = sch.schema;
      validate.schemaEnv = sch;
      if (sch.$async)
        validate.$async = true;
      if (this.opts.code.source === true) {
        validate.source = { validateName, validateCode, scopeValues: gen._values };
      }
      if (this.opts.unevaluated) {
        const { props, items } = schemaCxt;
        validate.evaluated = {
          props: props instanceof codegen_1.Name ? undefined : props,
          items: items instanceof codegen_1.Name ? undefined : items,
          dynamicProps: props instanceof codegen_1.Name,
          dynamicItems: items instanceof codegen_1.Name
        };
        if (validate.source)
          validate.source.evaluated = (0, codegen_1.stringify)(validate.evaluated);
      }
      sch.validate = validate;
      return sch;
    } catch (e) {
      delete sch.validate;
      delete sch.validateName;
      if (sourceCode)
        this.logger.error("Error compiling schema, function code:", sourceCode);
      throw e;
    } finally {
      this._compilations.delete(sch);
    }
  }
  exports.compileSchema = compileSchema;
  function resolveRef(root, baseId, ref) {
    var _a;
    ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
    const schOrFunc = root.refs[ref];
    if (schOrFunc)
      return schOrFunc;
    let _sch = resolve.call(this, root, ref);
    if (_sch === undefined) {
      const schema = (_a = root.localRefs) === null || _a === undefined ? undefined : _a[ref];
      const { schemaId } = this.opts;
      if (schema)
        _sch = new SchemaEnv({ schema, schemaId, root, baseId });
    }
    if (_sch === undefined)
      return;
    return root.refs[ref] = inlineOrCompile.call(this, _sch);
  }
  exports.resolveRef = resolveRef;
  function inlineOrCompile(sch) {
    if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))
      return sch.schema;
    return sch.validate ? sch : compileSchema.call(this, sch);
  }
  function getCompilingSchema(schEnv) {
    for (const sch of this._compilations) {
      if (sameSchemaEnv(sch, schEnv))
        return sch;
    }
  }
  exports.getCompilingSchema = getCompilingSchema;
  function sameSchemaEnv(s1, s2) {
    return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
  }
  function resolve(root, ref) {
    let sch;
    while (typeof (sch = this.refs[ref]) == "string")
      ref = sch;
    return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
  }
  function resolveSchema(root, ref) {
    const p = this.opts.uriResolver.parse(ref);
    const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
    let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, undefined);
    if (Object.keys(root.schema).length > 0 && refPath === baseId) {
      return getJsonPointer.call(this, p, root);
    }
    const id = (0, resolve_1.normalizeId)(refPath);
    const schOrRef = this.refs[id] || this.schemas[id];
    if (typeof schOrRef == "string") {
      const sch = resolveSchema.call(this, root, schOrRef);
      if (typeof (sch === null || sch === undefined ? undefined : sch.schema) !== "object")
        return;
      return getJsonPointer.call(this, p, sch);
    }
    if (typeof (schOrRef === null || schOrRef === undefined ? undefined : schOrRef.schema) !== "object")
      return;
    if (!schOrRef.validate)
      compileSchema.call(this, schOrRef);
    if (id === (0, resolve_1.normalizeId)(ref)) {
      const { schema } = schOrRef;
      const { schemaId } = this.opts;
      const schId = schema[schemaId];
      if (schId)
        baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
      return new SchemaEnv({ schema, schemaId, root, baseId });
    }
    return getJsonPointer.call(this, p, schOrRef);
  }
  exports.resolveSchema = resolveSchema;
  var PREVENT_SCOPE_CHANGE = new Set([
    "properties",
    "patternProperties",
    "enum",
    "dependencies",
    "definitions"
  ]);
  function getJsonPointer(parsedRef, { baseId, schema, root }) {
    var _a;
    if (((_a = parsedRef.fragment) === null || _a === undefined ? undefined : _a[0]) !== "/")
      return;
    for (const part of parsedRef.fragment.slice(1).split("/")) {
      if (typeof schema === "boolean")
        return;
      const partSchema = schema[(0, util_1.unescapeFragment)(part)];
      if (partSchema === undefined)
        return;
      schema = partSchema;
      const schId = typeof schema === "object" && schema[this.opts.schemaId];
      if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
        baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
      }
    }
    let env;
    if (typeof schema != "boolean" && schema.$ref && !(0, util_1.schemaHasRulesButRef)(schema, this.RULES)) {
      const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
      env = resolveSchema.call(this, root, $ref);
    }
    const { schemaId } = this.opts;
    env = env || new SchemaEnv({ schema, schemaId, root, baseId });
    if (env.schema !== env.root.schema)
      return env;
    return;
  }
});

// node_modules/ajv/dist/refs/data.json
var require_data = __commonJS((exports, module) => {
  module.exports = {
    $id: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
    description: "Meta-schema for $data reference (JSON AnySchema extension proposal)",
    type: "object",
    required: ["$data"],
    properties: {
      $data: {
        type: "string",
        anyOf: [{ format: "relative-json-pointer" }, { format: "json-pointer" }]
      }
    },
    additionalProperties: false
  };
});

// node_modules/ajv/dist/runtime/uri.js
var require_uri = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var uri = require_fast_uri();
  uri.code = 'require("ajv/dist/runtime/uri").default';
  exports.default = uri;
});

// node_modules/ajv/dist/core.js
var require_core = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = undefined;
  var validate_1 = require_validate();
  Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function() {
    return validate_1.KeywordCxt;
  } });
  var codegen_1 = require_codegen();
  Object.defineProperty(exports, "_", { enumerable: true, get: function() {
    return codegen_1._;
  } });
  Object.defineProperty(exports, "str", { enumerable: true, get: function() {
    return codegen_1.str;
  } });
  Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
    return codegen_1.stringify;
  } });
  Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
    return codegen_1.nil;
  } });
  Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
    return codegen_1.Name;
  } });
  Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function() {
    return codegen_1.CodeGen;
  } });
  var validation_error_1 = require_validation_error();
  var ref_error_1 = require_ref_error();
  var rules_1 = require_rules();
  var compile_1 = require_compile();
  var codegen_2 = require_codegen();
  var resolve_1 = require_resolve();
  var dataType_1 = require_dataType();
  var util_1 = require_util();
  var $dataRefSchema = require_data();
  var uri_1 = require_uri();
  var defaultRegExp = (str, flags) => new RegExp(str, flags);
  defaultRegExp.code = "new RegExp";
  var META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
  var EXT_SCOPE_NAMES = new Set([
    "validate",
    "serialize",
    "parse",
    "wrapper",
    "root",
    "schema",
    "keyword",
    "pattern",
    "formats",
    "validate$data",
    "func",
    "obj",
    "Error"
  ]);
  var removedOptions = {
    errorDataPath: "",
    format: "`validateFormats: false` can be used instead.",
    nullable: '"nullable" keyword is supported by default.',
    jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
    extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
    missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
    processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
    sourceCode: "Use option `code: {source: true}`",
    strictDefaults: "It is default now, see option `strict`.",
    strictKeywords: "It is default now, see option `strict`.",
    uniqueItems: '"uniqueItems" keyword is always validated.',
    unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
    cache: "Map is used as cache, schema object as key.",
    serialize: "Map is used as cache, schema object as key.",
    ajvErrors: "It is default now."
  };
  var deprecatedOptions = {
    ignoreKeywordsWithRef: "",
    jsPropertySyntax: "",
    unicode: '"minLength"/"maxLength" account for unicode characters by default.'
  };
  var MAX_EXPRESSION = 200;
  function requiredOptions(o) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
    const s = o.strict;
    const _optz = (_a = o.code) === null || _a === undefined ? undefined : _a.optimize;
    const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;
    const regExp = (_c = (_b = o.code) === null || _b === undefined ? undefined : _b.regExp) !== null && _c !== undefined ? _c : defaultRegExp;
    const uriResolver = (_d = o.uriResolver) !== null && _d !== undefined ? _d : uri_1.default;
    return {
      strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== undefined ? _e : s) !== null && _f !== undefined ? _f : true,
      strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== undefined ? _g : s) !== null && _h !== undefined ? _h : true,
      strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== undefined ? _j : s) !== null && _k !== undefined ? _k : "log",
      strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== undefined ? _l : s) !== null && _m !== undefined ? _m : "log",
      strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== undefined ? _o : s) !== null && _p !== undefined ? _p : false,
      code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },
      loopRequired: (_q = o.loopRequired) !== null && _q !== undefined ? _q : MAX_EXPRESSION,
      loopEnum: (_r = o.loopEnum) !== null && _r !== undefined ? _r : MAX_EXPRESSION,
      meta: (_s = o.meta) !== null && _s !== undefined ? _s : true,
      messages: (_t = o.messages) !== null && _t !== undefined ? _t : true,
      inlineRefs: (_u = o.inlineRefs) !== null && _u !== undefined ? _u : true,
      schemaId: (_v = o.schemaId) !== null && _v !== undefined ? _v : "$id",
      addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== undefined ? _w : true,
      validateSchema: (_x = o.validateSchema) !== null && _x !== undefined ? _x : true,
      validateFormats: (_y = o.validateFormats) !== null && _y !== undefined ? _y : true,
      unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== undefined ? _z : true,
      int32range: (_0 = o.int32range) !== null && _0 !== undefined ? _0 : true,
      uriResolver
    };
  }

  class Ajv {
    constructor(opts = {}) {
      this.schemas = {};
      this.refs = {};
      this.formats = {};
      this._compilations = new Set;
      this._loading = {};
      this._cache = new Map;
      opts = this.opts = { ...opts, ...requiredOptions(opts) };
      const { es5, lines } = this.opts.code;
      this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
      this.logger = getLogger(opts.logger);
      const formatOpt = opts.validateFormats;
      opts.validateFormats = false;
      this.RULES = (0, rules_1.getRules)();
      checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
      checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
      this._metaOpts = getMetaSchemaOptions.call(this);
      if (opts.formats)
        addInitialFormats.call(this);
      this._addVocabularies();
      this._addDefaultMetaSchema();
      if (opts.keywords)
        addInitialKeywords.call(this, opts.keywords);
      if (typeof opts.meta == "object")
        this.addMetaSchema(opts.meta);
      addInitialSchemas.call(this);
      opts.validateFormats = formatOpt;
    }
    _addVocabularies() {
      this.addKeyword("$async");
    }
    _addDefaultMetaSchema() {
      const { $data, meta, schemaId } = this.opts;
      let _dataRefSchema = $dataRefSchema;
      if (schemaId === "id") {
        _dataRefSchema = { ...$dataRefSchema };
        _dataRefSchema.id = _dataRefSchema.$id;
        delete _dataRefSchema.$id;
      }
      if (meta && $data)
        this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
    }
    defaultMeta() {
      const { meta, schemaId } = this.opts;
      return this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : undefined;
    }
    validate(schemaKeyRef, data) {
      let v;
      if (typeof schemaKeyRef == "string") {
        v = this.getSchema(schemaKeyRef);
        if (!v)
          throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
      } else {
        v = this.compile(schemaKeyRef);
      }
      const valid = v(data);
      if (!("$async" in v))
        this.errors = v.errors;
      return valid;
    }
    compile(schema, _meta) {
      const sch = this._addSchema(schema, _meta);
      return sch.validate || this._compileSchemaEnv(sch);
    }
    compileAsync(schema, meta) {
      if (typeof this.opts.loadSchema != "function") {
        throw new Error("options.loadSchema should be a function");
      }
      const { loadSchema } = this.opts;
      return runCompileAsync.call(this, schema, meta);
      async function runCompileAsync(_schema, _meta) {
        await loadMetaSchema.call(this, _schema.$schema);
        const sch = this._addSchema(_schema, _meta);
        return sch.validate || _compileAsync.call(this, sch);
      }
      async function loadMetaSchema($ref) {
        if ($ref && !this.getSchema($ref)) {
          await runCompileAsync.call(this, { $ref }, true);
        }
      }
      async function _compileAsync(sch) {
        try {
          return this._compileSchemaEnv(sch);
        } catch (e) {
          if (!(e instanceof ref_error_1.default))
            throw e;
          checkLoaded.call(this, e);
          await loadMissingSchema.call(this, e.missingSchema);
          return _compileAsync.call(this, sch);
        }
      }
      function checkLoaded({ missingSchema: ref, missingRef }) {
        if (this.refs[ref]) {
          throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
        }
      }
      async function loadMissingSchema(ref) {
        const _schema = await _loadSchema.call(this, ref);
        if (!this.refs[ref])
          await loadMetaSchema.call(this, _schema.$schema);
        if (!this.refs[ref])
          this.addSchema(_schema, ref, meta);
      }
      async function _loadSchema(ref) {
        const p = this._loading[ref];
        if (p)
          return p;
        try {
          return await (this._loading[ref] = loadSchema(ref));
        } finally {
          delete this._loading[ref];
        }
      }
    }
    addSchema(schema, key, _meta, _validateSchema = this.opts.validateSchema) {
      if (Array.isArray(schema)) {
        for (const sch of schema)
          this.addSchema(sch, undefined, _meta, _validateSchema);
        return this;
      }
      let id;
      if (typeof schema === "object") {
        const { schemaId } = this.opts;
        id = schema[schemaId];
        if (id !== undefined && typeof id != "string") {
          throw new Error(`schema ${schemaId} must be string`);
        }
      }
      key = (0, resolve_1.normalizeId)(key || id);
      this._checkUnique(key);
      this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
      return this;
    }
    addMetaSchema(schema, key, _validateSchema = this.opts.validateSchema) {
      this.addSchema(schema, key, true, _validateSchema);
      return this;
    }
    validateSchema(schema, throwOrLogError) {
      if (typeof schema == "boolean")
        return true;
      let $schema;
      $schema = schema.$schema;
      if ($schema !== undefined && typeof $schema != "string") {
        throw new Error("$schema must be a string");
      }
      $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
      if (!$schema) {
        this.logger.warn("meta-schema not available");
        this.errors = null;
        return true;
      }
      const valid = this.validate($schema, schema);
      if (!valid && throwOrLogError) {
        const message = "schema is invalid: " + this.errorsText();
        if (this.opts.validateSchema === "log")
          this.logger.error(message);
        else
          throw new Error(message);
      }
      return valid;
    }
    getSchema(keyRef) {
      let sch;
      while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
        keyRef = sch;
      if (sch === undefined) {
        const { schemaId } = this.opts;
        const root = new compile_1.SchemaEnv({ schema: {}, schemaId });
        sch = compile_1.resolveSchema.call(this, root, keyRef);
        if (!sch)
          return;
        this.refs[keyRef] = sch;
      }
      return sch.validate || this._compileSchemaEnv(sch);
    }
    removeSchema(schemaKeyRef) {
      if (schemaKeyRef instanceof RegExp) {
        this._removeAllSchemas(this.schemas, schemaKeyRef);
        this._removeAllSchemas(this.refs, schemaKeyRef);
        return this;
      }
      switch (typeof schemaKeyRef) {
        case "undefined":
          this._removeAllSchemas(this.schemas);
          this._removeAllSchemas(this.refs);
          this._cache.clear();
          return this;
        case "string": {
          const sch = getSchEnv.call(this, schemaKeyRef);
          if (typeof sch == "object")
            this._cache.delete(sch.schema);
          delete this.schemas[schemaKeyRef];
          delete this.refs[schemaKeyRef];
          return this;
        }
        case "object": {
          const cacheKey = schemaKeyRef;
          this._cache.delete(cacheKey);
          let id = schemaKeyRef[this.opts.schemaId];
          if (id) {
            id = (0, resolve_1.normalizeId)(id);
            delete this.schemas[id];
            delete this.refs[id];
          }
          return this;
        }
        default:
          throw new Error("ajv.removeSchema: invalid parameter");
      }
    }
    addVocabulary(definitions) {
      for (const def of definitions)
        this.addKeyword(def);
      return this;
    }
    addKeyword(kwdOrDef, def) {
      let keyword;
      if (typeof kwdOrDef == "string") {
        keyword = kwdOrDef;
        if (typeof def == "object") {
          this.logger.warn("these parameters are deprecated, see docs for addKeyword");
          def.keyword = keyword;
        }
      } else if (typeof kwdOrDef == "object" && def === undefined) {
        def = kwdOrDef;
        keyword = def.keyword;
        if (Array.isArray(keyword) && !keyword.length) {
          throw new Error("addKeywords: keyword must be string or non-empty array");
        }
      } else {
        throw new Error("invalid addKeywords parameters");
      }
      checkKeyword.call(this, keyword, def);
      if (!def) {
        (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
        return this;
      }
      keywordMetaschema.call(this, def);
      const definition = {
        ...def,
        type: (0, dataType_1.getJSONTypes)(def.type),
        schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)
      };
      (0, util_1.eachItem)(keyword, definition.type.length === 0 ? (k) => addRule.call(this, k, definition) : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
      return this;
    }
    getKeyword(keyword) {
      const rule = this.RULES.all[keyword];
      return typeof rule == "object" ? rule.definition : !!rule;
    }
    removeKeyword(keyword) {
      const { RULES } = this;
      delete RULES.keywords[keyword];
      delete RULES.all[keyword];
      for (const group of RULES.rules) {
        const i = group.rules.findIndex((rule) => rule.keyword === keyword);
        if (i >= 0)
          group.rules.splice(i, 1);
      }
      return this;
    }
    addFormat(name, format) {
      if (typeof format == "string")
        format = new RegExp(format);
      this.formats[name] = format;
      return this;
    }
    errorsText(errors = this.errors, { separator = ", ", dataVar = "data" } = {}) {
      if (!errors || errors.length === 0)
        return "No errors";
      return errors.map((e) => `${dataVar}${e.instancePath} ${e.message}`).reduce((text, msg) => text + separator + msg);
    }
    $dataMetaSchema(metaSchema, keywordsJsonPointers) {
      const rules = this.RULES.all;
      metaSchema = JSON.parse(JSON.stringify(metaSchema));
      for (const jsonPointer of keywordsJsonPointers) {
        const segments = jsonPointer.split("/").slice(1);
        let keywords = metaSchema;
        for (const seg of segments)
          keywords = keywords[seg];
        for (const key in rules) {
          const rule = rules[key];
          if (typeof rule != "object")
            continue;
          const { $data } = rule.definition;
          const schema = keywords[key];
          if ($data && schema)
            keywords[key] = schemaOrData(schema);
        }
      }
      return metaSchema;
    }
    _removeAllSchemas(schemas, regex) {
      for (const keyRef in schemas) {
        const sch = schemas[keyRef];
        if (!regex || regex.test(keyRef)) {
          if (typeof sch == "string") {
            delete schemas[keyRef];
          } else if (sch && !sch.meta) {
            this._cache.delete(sch.schema);
            delete schemas[keyRef];
          }
        }
      }
    }
    _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
      let id;
      const { schemaId } = this.opts;
      if (typeof schema == "object") {
        id = schema[schemaId];
      } else {
        if (this.opts.jtd)
          throw new Error("schema must be object");
        else if (typeof schema != "boolean")
          throw new Error("schema must be object or boolean");
      }
      let sch = this._cache.get(schema);
      if (sch !== undefined)
        return sch;
      baseId = (0, resolve_1.normalizeId)(id || baseId);
      const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
      sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });
      this._cache.set(sch.schema, sch);
      if (addSchema && !baseId.startsWith("#")) {
        if (baseId)
          this._checkUnique(baseId);
        this.refs[baseId] = sch;
      }
      if (validateSchema)
        this.validateSchema(schema, true);
      return sch;
    }
    _checkUnique(id) {
      if (this.schemas[id] || this.refs[id]) {
        throw new Error(`schema with key or id "${id}" already exists`);
      }
    }
    _compileSchemaEnv(sch) {
      if (sch.meta)
        this._compileMetaSchema(sch);
      else
        compile_1.compileSchema.call(this, sch);
      if (!sch.validate)
        throw new Error("ajv implementation error");
      return sch.validate;
    }
    _compileMetaSchema(sch) {
      const currentOpts = this.opts;
      this.opts = this._metaOpts;
      try {
        compile_1.compileSchema.call(this, sch);
      } finally {
        this.opts = currentOpts;
      }
    }
  }
  Ajv.ValidationError = validation_error_1.default;
  Ajv.MissingRefError = ref_error_1.default;
  exports.default = Ajv;
  function checkOptions(checkOpts, options, msg, log = "error") {
    for (const key in checkOpts) {
      const opt = key;
      if (opt in options)
        this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
    }
  }
  function getSchEnv(keyRef) {
    keyRef = (0, resolve_1.normalizeId)(keyRef);
    return this.schemas[keyRef] || this.refs[keyRef];
  }
  function addInitialSchemas() {
    const optsSchemas = this.opts.schemas;
    if (!optsSchemas)
      return;
    if (Array.isArray(optsSchemas))
      this.addSchema(optsSchemas);
    else
      for (const key in optsSchemas)
        this.addSchema(optsSchemas[key], key);
  }
  function addInitialFormats() {
    for (const name in this.opts.formats) {
      const format = this.opts.formats[name];
      if (format)
        this.addFormat(name, format);
    }
  }
  function addInitialKeywords(defs) {
    if (Array.isArray(defs)) {
      this.addVocabulary(defs);
      return;
    }
    this.logger.warn("keywords option as map is deprecated, pass array");
    for (const keyword in defs) {
      const def = defs[keyword];
      if (!def.keyword)
        def.keyword = keyword;
      this.addKeyword(def);
    }
  }
  function getMetaSchemaOptions() {
    const metaOpts = { ...this.opts };
    for (const opt of META_IGNORE_OPTIONS)
      delete metaOpts[opt];
    return metaOpts;
  }
  var noLogs = { log() {
  }, warn() {
  }, error() {
  } };
  function getLogger(logger) {
    if (logger === false)
      return noLogs;
    if (logger === undefined)
      return console;
    if (logger.log && logger.warn && logger.error)
      return logger;
    throw new Error("logger must implement log, warn and error methods");
  }
  var KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
  function checkKeyword(keyword, def) {
    const { RULES } = this;
    (0, util_1.eachItem)(keyword, (kwd) => {
      if (RULES.keywords[kwd])
        throw new Error(`Keyword ${kwd} is already defined`);
      if (!KEYWORD_NAME.test(kwd))
        throw new Error(`Keyword ${kwd} has invalid name`);
    });
    if (!def)
      return;
    if (def.$data && !(("code" in def) || ("validate" in def))) {
      throw new Error('$data keyword must have "code" or "validate" function');
    }
  }
  function addRule(keyword, definition, dataType) {
    var _a;
    const post = definition === null || definition === undefined ? undefined : definition.post;
    if (dataType && post)
      throw new Error('keyword with "post" flag cannot have "type"');
    const { RULES } = this;
    let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
    if (!ruleGroup) {
      ruleGroup = { type: dataType, rules: [] };
      RULES.rules.push(ruleGroup);
    }
    RULES.keywords[keyword] = true;
    if (!definition)
      return;
    const rule = {
      keyword,
      definition: {
        ...definition,
        type: (0, dataType_1.getJSONTypes)(definition.type),
        schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)
      }
    };
    if (definition.before)
      addBeforeRule.call(this, ruleGroup, rule, definition.before);
    else
      ruleGroup.rules.push(rule);
    RULES.all[keyword] = rule;
    (_a = definition.implements) === null || _a === undefined || _a.forEach((kwd) => this.addKeyword(kwd));
  }
  function addBeforeRule(ruleGroup, rule, before) {
    const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
    if (i >= 0) {
      ruleGroup.rules.splice(i, 0, rule);
    } else {
      ruleGroup.rules.push(rule);
      this.logger.warn(`rule ${before} is not defined`);
    }
  }
  function keywordMetaschema(def) {
    let { metaSchema } = def;
    if (metaSchema === undefined)
      return;
    if (def.$data && this.opts.$data)
      metaSchema = schemaOrData(metaSchema);
    def.validateSchema = this.compile(metaSchema, true);
  }
  var $dataRef = {
    $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
  };
  function schemaOrData(schema) {
    return { anyOf: [schema, $dataRef] };
  }
});

// node_modules/ajv/dist/vocabularies/core/id.js
var require_id = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var def = {
    keyword: "id",
    code() {
      throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/core/ref.js
var require_ref = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.callRef = exports.getValidate = undefined;
  var ref_error_1 = require_ref_error();
  var code_1 = require_code2();
  var codegen_1 = require_codegen();
  var names_1 = require_names();
  var compile_1 = require_compile();
  var util_1 = require_util();
  var def = {
    keyword: "$ref",
    schemaType: "string",
    code(cxt) {
      const { gen, schema: $ref, it } = cxt;
      const { baseId, schemaEnv: env, validateName, opts, self } = it;
      const { root } = env;
      if (($ref === "#" || $ref === "#/") && baseId === root.baseId)
        return callRootRef();
      const schOrEnv = compile_1.resolveRef.call(self, root, baseId, $ref);
      if (schOrEnv === undefined)
        throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
      if (schOrEnv instanceof compile_1.SchemaEnv)
        return callValidate(schOrEnv);
      return inlineRefSchema(schOrEnv);
      function callRootRef() {
        if (env === root)
          return callRef(cxt, validateName, env, env.$async);
        const rootName = gen.scopeValue("root", { ref: root });
        return callRef(cxt, (0, codegen_1._)`${rootName}.validate`, root, root.$async);
      }
      function callValidate(sch) {
        const v = getValidate(cxt, sch);
        callRef(cxt, v, sch, sch.$async);
      }
      function inlineRefSchema(sch) {
        const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1.stringify)(sch) } : { ref: sch });
        const valid = gen.name("valid");
        const schCxt = cxt.subschema({
          schema: sch,
          dataTypes: [],
          schemaPath: codegen_1.nil,
          topSchemaRef: schName,
          errSchemaPath: $ref
        }, valid);
        cxt.mergeEvaluated(schCxt);
        cxt.ok(valid);
      }
    }
  };
  function getValidate(cxt, sch) {
    const { gen } = cxt;
    return sch.validate ? gen.scopeValue("validate", { ref: sch.validate }) : (0, codegen_1._)`${gen.scopeValue("wrapper", { ref: sch })}.validate`;
  }
  exports.getValidate = getValidate;
  function callRef(cxt, v, sch, $async) {
    const { gen, it } = cxt;
    const { allErrors, schemaEnv: env, opts } = it;
    const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
    if ($async)
      callAsyncRef();
    else
      callSyncRef();
    function callAsyncRef() {
      if (!env.$async)
        throw new Error("async schema referenced by sync schema");
      const valid = gen.let("valid");
      gen.try(() => {
        gen.code((0, codegen_1._)`await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);
        addEvaluatedFrom(v);
        if (!allErrors)
          gen.assign(valid, true);
      }, (e) => {
        gen.if((0, codegen_1._)`!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
        addErrorsFrom(e);
        if (!allErrors)
          gen.assign(valid, false);
      });
      cxt.ok(valid);
    }
    function callSyncRef() {
      cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
    }
    function addErrorsFrom(source) {
      const errs = (0, codegen_1._)`${source}.errors`;
      gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`);
      gen.assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
    }
    function addEvaluatedFrom(source) {
      var _a;
      if (!it.opts.unevaluated)
        return;
      const schEvaluated = (_a = sch === null || sch === undefined ? undefined : sch.validate) === null || _a === undefined ? undefined : _a.evaluated;
      if (it.props !== true) {
        if (schEvaluated && !schEvaluated.dynamicProps) {
          if (schEvaluated.props !== undefined) {
            it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
          }
        } else {
          const props = gen.var("props", (0, codegen_1._)`${source}.evaluated.props`);
          it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
        }
      }
      if (it.items !== true) {
        if (schEvaluated && !schEvaluated.dynamicItems) {
          if (schEvaluated.items !== undefined) {
            it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
          }
        } else {
          const items = gen.var("items", (0, codegen_1._)`${source}.evaluated.items`);
          it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
        }
      }
    }
  }
  exports.callRef = callRef;
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/core/index.js
var require_core2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var id_1 = require_id();
  var ref_1 = require_ref();
  var core = [
    "$schema",
    "$id",
    "$defs",
    "$vocabulary",
    { keyword: "$comment" },
    "definitions",
    id_1.default,
    ref_1.default
  ];
  exports.default = core;
});

// node_modules/ajv/dist/vocabularies/validation/limitNumber.js
var require_limitNumber = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var ops = codegen_1.operators;
  var KWDs = {
    maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
    minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
    exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
    exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE }
  };
  var error = {
    message: ({ keyword, schemaCode }) => (0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,
    params: ({ keyword, schemaCode }) => (0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
  };
  var def = {
    keyword: Object.keys(KWDs),
    type: "number",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
      const { keyword, data, schemaCode } = cxt;
      cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/validation/multipleOf.js
var require_multipleOf = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var error = {
    message: ({ schemaCode }) => (0, codegen_1.str)`must be multiple of ${schemaCode}`,
    params: ({ schemaCode }) => (0, codegen_1._)`{multipleOf: ${schemaCode}}`
  };
  var def = {
    keyword: "multipleOf",
    type: "number",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
      const { gen, data, schemaCode, it } = cxt;
      const prec = it.opts.multipleOfPrecision;
      const res = gen.let("res");
      const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;
      cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/runtime/ucs2length.js
var require_ucs2length = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  function ucs2length(str) {
    const len = str.length;
    let length = 0;
    let pos = 0;
    let value;
    while (pos < len) {
      length++;
      value = str.charCodeAt(pos++);
      if (value >= 55296 && value <= 56319 && pos < len) {
        value = str.charCodeAt(pos);
        if ((value & 64512) === 56320)
          pos++;
      }
    }
    return length;
  }
  exports.default = ucs2length;
  ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';
});

// node_modules/ajv/dist/vocabularies/validation/limitLength.js
var require_limitLength = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var ucs2length_1 = require_ucs2length();
  var error = {
    message({ keyword, schemaCode }) {
      const comp = keyword === "maxLength" ? "more" : "fewer";
      return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;
    },
    params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
  };
  var def = {
    keyword: ["maxLength", "minLength"],
    type: "string",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
      const { keyword, data, schemaCode, it } = cxt;
      const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
      const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
      cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/validation/pattern.js
var require_pattern2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var code_1 = require_code2();
  var codegen_1 = require_codegen();
  var error = {
    message: ({ schemaCode }) => (0, codegen_1.str)`must match pattern "${schemaCode}"`,
    params: ({ schemaCode }) => (0, codegen_1._)`{pattern: ${schemaCode}}`
  };
  var def = {
    keyword: "pattern",
    type: "string",
    schemaType: "string",
    $data: true,
    error,
    code(cxt) {
      const { data, $data, schema, schemaCode, it } = cxt;
      const u = it.opts.unicodeRegExp ? "u" : "";
      const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);
      cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/validation/limitProperties.js
var require_limitProperties = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var error = {
    message({ keyword, schemaCode }) {
      const comp = keyword === "maxProperties" ? "more" : "fewer";
      return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} properties`;
    },
    params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
  };
  var def = {
    keyword: ["maxProperties", "minProperties"],
    type: "object",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
      const { keyword, data, schemaCode } = cxt;
      const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
      cxt.fail$data((0, codegen_1._)`Object.keys(${data}).length ${op} ${schemaCode}`);
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/validation/required.js
var require_required = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var code_1 = require_code2();
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var error = {
    message: ({ params: { missingProperty } }) => (0, codegen_1.str)`must have required property '${missingProperty}'`,
    params: ({ params: { missingProperty } }) => (0, codegen_1._)`{missingProperty: ${missingProperty}}`
  };
  var def = {
    keyword: "required",
    type: "object",
    schemaType: "array",
    $data: true,
    error,
    code(cxt) {
      const { gen, schema, schemaCode, data, $data, it } = cxt;
      const { opts } = it;
      if (!$data && schema.length === 0)
        return;
      const useLoop = schema.length >= opts.loopRequired;
      if (it.allErrors)
        allErrorsMode();
      else
        exitOnErrorMode();
      if (opts.strictRequired) {
        const props = cxt.parentSchema.properties;
        const { definedProperties } = cxt.it;
        for (const requiredKey of schema) {
          if ((props === null || props === undefined ? undefined : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {
            const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
            const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
            (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
          }
        }
      }
      function allErrorsMode() {
        if (useLoop || $data) {
          cxt.block$data(codegen_1.nil, loopAllRequired);
        } else {
          for (const prop of schema) {
            (0, code_1.checkReportMissingProp)(cxt, prop);
          }
        }
      }
      function exitOnErrorMode() {
        const missing = gen.let("missing");
        if (useLoop || $data) {
          const valid = gen.let("valid", true);
          cxt.block$data(valid, () => loopUntilMissing(missing, valid));
          cxt.ok(valid);
        } else {
          gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));
          (0, code_1.reportMissingProp)(cxt, missing);
          gen.else();
        }
      }
      function loopAllRequired() {
        gen.forOf("prop", schemaCode, (prop) => {
          cxt.setParams({ missingProperty: prop });
          gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
        });
      }
      function loopUntilMissing(missing, valid) {
        cxt.setParams({ missingProperty: missing });
        gen.forOf(missing, schemaCode, () => {
          gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));
          gen.if((0, codegen_1.not)(valid), () => {
            cxt.error();
            gen.break();
          });
        }, codegen_1.nil);
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/validation/limitItems.js
var require_limitItems = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var error = {
    message({ keyword, schemaCode }) {
      const comp = keyword === "maxItems" ? "more" : "fewer";
      return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;
    },
    params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
  };
  var def = {
    keyword: ["maxItems", "minItems"],
    type: "array",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
      const { keyword, data, schemaCode } = cxt;
      const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
      cxt.fail$data((0, codegen_1._)`${data}.length ${op} ${schemaCode}`);
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/runtime/equal.js
var require_equal = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var equal = require_fast_deep_equal();
  equal.code = 'require("ajv/dist/runtime/equal").default';
  exports.default = equal;
});

// node_modules/ajv/dist/vocabularies/validation/uniqueItems.js
var require_uniqueItems = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var dataType_1 = require_dataType();
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var equal_1 = require_equal();
  var error = {
    message: ({ params: { i, j } }) => (0, codegen_1.str)`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
    params: ({ params: { i, j } }) => (0, codegen_1._)`{i: ${i}, j: ${j}}`
  };
  var def = {
    keyword: "uniqueItems",
    type: "array",
    schemaType: "boolean",
    $data: true,
    error,
    code(cxt) {
      const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
      if (!$data && !schema)
        return;
      const valid = gen.let("valid");
      const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
      cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)`${schemaCode} === false`);
      cxt.ok(valid);
      function validateUniqueItems() {
        const i = gen.let("i", (0, codegen_1._)`${data}.length`);
        const j = gen.let("j");
        cxt.setParams({ i, j });
        gen.assign(valid, true);
        gen.if((0, codegen_1._)`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
      }
      function canOptimize() {
        return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
      }
      function loopN(i, j) {
        const item = gen.name("item");
        const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
        const indices = gen.const("indices", (0, codegen_1._)`{}`);
        gen.for((0, codegen_1._)`;${i}--;`, () => {
          gen.let(item, (0, codegen_1._)`${data}[${i}]`);
          gen.if(wrongType, (0, codegen_1._)`continue`);
          if (itemTypes.length > 1)
            gen.if((0, codegen_1._)`typeof ${item} == "string"`, (0, codegen_1._)`${item} += "_"`);
          gen.if((0, codegen_1._)`typeof ${indices}[${item}] == "number"`, () => {
            gen.assign(j, (0, codegen_1._)`${indices}[${item}]`);
            cxt.error();
            gen.assign(valid, false).break();
          }).code((0, codegen_1._)`${indices}[${item}] = ${i}`);
        });
      }
      function loopN2(i, j) {
        const eql = (0, util_1.useFunc)(gen, equal_1.default);
        const outer = gen.name("outer");
        gen.label(outer).for((0, codegen_1._)`;${i}--;`, () => gen.for((0, codegen_1._)`${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1._)`${eql}(${data}[${i}], ${data}[${j}])`, () => {
          cxt.error();
          gen.assign(valid, false).break(outer);
        })));
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/validation/const.js
var require_const = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var equal_1 = require_equal();
  var error = {
    message: "must be equal to constant",
    params: ({ schemaCode }) => (0, codegen_1._)`{allowedValue: ${schemaCode}}`
  };
  var def = {
    keyword: "const",
    $data: true,
    error,
    code(cxt) {
      const { gen, data, $data, schemaCode, schema } = cxt;
      if ($data || schema && typeof schema == "object") {
        cxt.fail$data((0, codegen_1._)`!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);
      } else {
        cxt.fail((0, codegen_1._)`${schema} !== ${data}`);
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/validation/enum.js
var require_enum = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var equal_1 = require_equal();
  var error = {
    message: "must be equal to one of the allowed values",
    params: ({ schemaCode }) => (0, codegen_1._)`{allowedValues: ${schemaCode}}`
  };
  var def = {
    keyword: "enum",
    schemaType: "array",
    $data: true,
    error,
    code(cxt) {
      const { gen, data, $data, schema, schemaCode, it } = cxt;
      if (!$data && schema.length === 0)
        throw new Error("enum must have non-empty array");
      const useLoop = schema.length >= it.opts.loopEnum;
      let eql;
      const getEql = () => eql !== null && eql !== undefined ? eql : eql = (0, util_1.useFunc)(gen, equal_1.default);
      let valid;
      if (useLoop || $data) {
        valid = gen.let("valid");
        cxt.block$data(valid, loopEnum);
      } else {
        if (!Array.isArray(schema))
          throw new Error("ajv implementation error");
        const vSchema = gen.const("vSchema", schemaCode);
        valid = (0, codegen_1.or)(...schema.map((_x, i) => equalCode(vSchema, i)));
      }
      cxt.pass(valid);
      function loopEnum() {
        gen.assign(valid, false);
        gen.forOf("v", schemaCode, (v) => gen.if((0, codegen_1._)`${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));
      }
      function equalCode(vSchema, i) {
        const sch = schema[i];
        return typeof sch === "object" && sch !== null ? (0, codegen_1._)`${getEql()}(${data}, ${vSchema}[${i}])` : (0, codegen_1._)`${data} === ${sch}`;
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/validation/index.js
var require_validation2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var limitNumber_1 = require_limitNumber();
  var multipleOf_1 = require_multipleOf();
  var limitLength_1 = require_limitLength();
  var pattern_1 = require_pattern2();
  var limitProperties_1 = require_limitProperties();
  var required_1 = require_required();
  var limitItems_1 = require_limitItems();
  var uniqueItems_1 = require_uniqueItems();
  var const_1 = require_const();
  var enum_1 = require_enum();
  var validation = [
    limitNumber_1.default,
    multipleOf_1.default,
    limitLength_1.default,
    pattern_1.default,
    limitProperties_1.default,
    required_1.default,
    limitItems_1.default,
    uniqueItems_1.default,
    { keyword: "type", schemaType: ["string", "array"] },
    { keyword: "nullable", schemaType: "boolean" },
    const_1.default,
    enum_1.default
  ];
  exports.default = validation;
});

// node_modules/ajv/dist/vocabularies/applicator/additionalItems.js
var require_additionalItems = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.validateAdditionalItems = undefined;
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var error = {
    message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
    params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
  };
  var def = {
    keyword: "additionalItems",
    type: "array",
    schemaType: ["boolean", "object"],
    before: "uniqueItems",
    error,
    code(cxt) {
      const { parentSchema, it } = cxt;
      const { items } = parentSchema;
      if (!Array.isArray(items)) {
        (0, util_1.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
        return;
      }
      validateAdditionalItems(cxt, items);
    }
  };
  function validateAdditionalItems(cxt, items) {
    const { gen, schema, data, keyword, it } = cxt;
    it.items = true;
    const len = gen.const("len", (0, codegen_1._)`${data}.length`);
    if (schema === false) {
      cxt.setParams({ len: items.length });
      cxt.pass((0, codegen_1._)`${len} <= ${items.length}`);
    } else if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
      const valid = gen.var("valid", (0, codegen_1._)`${len} <= ${items.length}`);
      gen.if((0, codegen_1.not)(valid), () => validateItems(valid));
      cxt.ok(valid);
    }
    function validateItems(valid) {
      gen.forRange("i", items.length, len, (i) => {
        cxt.subschema({ keyword, dataProp: i, dataPropType: util_1.Type.Num }, valid);
        if (!it.allErrors)
          gen.if((0, codegen_1.not)(valid), () => gen.break());
      });
    }
  }
  exports.validateAdditionalItems = validateAdditionalItems;
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/items.js
var require_items = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.validateTuple = undefined;
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var code_1 = require_code2();
  var def = {
    keyword: "items",
    type: "array",
    schemaType: ["object", "array", "boolean"],
    before: "uniqueItems",
    code(cxt) {
      const { schema, it } = cxt;
      if (Array.isArray(schema))
        return validateTuple(cxt, "additionalItems", schema);
      it.items = true;
      if ((0, util_1.alwaysValidSchema)(it, schema))
        return;
      cxt.ok((0, code_1.validateArray)(cxt));
    }
  };
  function validateTuple(cxt, extraItems, schArr = cxt.schema) {
    const { gen, parentSchema, data, keyword, it } = cxt;
    checkStrictTuple(parentSchema);
    if (it.opts.unevaluated && schArr.length && it.items !== true) {
      it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
    }
    const valid = gen.name("valid");
    const len = gen.const("len", (0, codegen_1._)`${data}.length`);
    schArr.forEach((sch, i) => {
      if ((0, util_1.alwaysValidSchema)(it, sch))
        return;
      gen.if((0, codegen_1._)`${len} > ${i}`, () => cxt.subschema({
        keyword,
        schemaProp: i,
        dataProp: i
      }, valid));
      cxt.ok(valid);
    });
    function checkStrictTuple(sch) {
      const { opts, errSchemaPath } = it;
      const l = schArr.length;
      const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
      if (opts.strictTuples && !fullTuple) {
        const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
        (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
      }
    }
  }
  exports.validateTuple = validateTuple;
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/prefixItems.js
var require_prefixItems = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var items_1 = require_items();
  var def = {
    keyword: "prefixItems",
    type: "array",
    schemaType: ["array"],
    before: "uniqueItems",
    code: (cxt) => (0, items_1.validateTuple)(cxt, "items")
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/items2020.js
var require_items2020 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var code_1 = require_code2();
  var additionalItems_1 = require_additionalItems();
  var error = {
    message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
    params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
  };
  var def = {
    keyword: "items",
    type: "array",
    schemaType: ["object", "boolean"],
    before: "uniqueItems",
    error,
    code(cxt) {
      const { schema, parentSchema, it } = cxt;
      const { prefixItems } = parentSchema;
      it.items = true;
      if ((0, util_1.alwaysValidSchema)(it, schema))
        return;
      if (prefixItems)
        (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);
      else
        cxt.ok((0, code_1.validateArray)(cxt));
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/contains.js
var require_contains = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var error = {
    message: ({ params: { min, max } }) => max === undefined ? (0, codegen_1.str)`must contain at least ${min} valid item(s)` : (0, codegen_1.str)`must contain at least ${min} and no more than ${max} valid item(s)`,
    params: ({ params: { min, max } }) => max === undefined ? (0, codegen_1._)`{minContains: ${min}}` : (0, codegen_1._)`{minContains: ${min}, maxContains: ${max}}`
  };
  var def = {
    keyword: "contains",
    type: "array",
    schemaType: ["object", "boolean"],
    before: "uniqueItems",
    trackErrors: true,
    error,
    code(cxt) {
      const { gen, schema, parentSchema, data, it } = cxt;
      let min;
      let max;
      const { minContains, maxContains } = parentSchema;
      if (it.opts.next) {
        min = minContains === undefined ? 1 : minContains;
        max = maxContains;
      } else {
        min = 1;
      }
      const len = gen.const("len", (0, codegen_1._)`${data}.length`);
      cxt.setParams({ min, max });
      if (max === undefined && min === 0) {
        (0, util_1.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
        return;
      }
      if (max !== undefined && min > max) {
        (0, util_1.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
        cxt.fail();
        return;
      }
      if ((0, util_1.alwaysValidSchema)(it, schema)) {
        let cond = (0, codegen_1._)`${len} >= ${min}`;
        if (max !== undefined)
          cond = (0, codegen_1._)`${cond} && ${len} <= ${max}`;
        cxt.pass(cond);
        return;
      }
      it.items = true;
      const valid = gen.name("valid");
      if (max === undefined && min === 1) {
        validateItems(valid, () => gen.if(valid, () => gen.break()));
      } else if (min === 0) {
        gen.let(valid, true);
        if (max !== undefined)
          gen.if((0, codegen_1._)`${data}.length > 0`, validateItemsWithCount);
      } else {
        gen.let(valid, false);
        validateItemsWithCount();
      }
      cxt.result(valid, () => cxt.reset());
      function validateItemsWithCount() {
        const schValid = gen.name("_valid");
        const count = gen.let("count", 0);
        validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
      }
      function validateItems(_valid, block) {
        gen.forRange("i", 0, len, (i) => {
          cxt.subschema({
            keyword: "contains",
            dataProp: i,
            dataPropType: util_1.Type.Num,
            compositeRule: true
          }, _valid);
          block();
        });
      }
      function checkLimits(count) {
        gen.code((0, codegen_1._)`${count}++`);
        if (max === undefined) {
          gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true).break());
        } else {
          gen.if((0, codegen_1._)`${count} > ${max}`, () => gen.assign(valid, false).break());
          if (min === 1)
            gen.assign(valid, true);
          else
            gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true));
        }
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/dependencies.js
var require_dependencies = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = undefined;
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var code_1 = require_code2();
  exports.error = {
    message: ({ params: { property, depsCount, deps } }) => {
      const property_ies = depsCount === 1 ? "property" : "properties";
      return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property} is present`;
    },
    params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._)`{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`
  };
  var def = {
    keyword: "dependencies",
    type: "object",
    schemaType: "object",
    error: exports.error,
    code(cxt) {
      const [propDeps, schDeps] = splitDependencies(cxt);
      validatePropertyDeps(cxt, propDeps);
      validateSchemaDeps(cxt, schDeps);
    }
  };
  function splitDependencies({ schema }) {
    const propertyDeps = {};
    const schemaDeps = {};
    for (const key in schema) {
      if (key === "__proto__")
        continue;
      const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
      deps[key] = schema[key];
    }
    return [propertyDeps, schemaDeps];
  }
  function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
    const { gen, data, it } = cxt;
    if (Object.keys(propertyDeps).length === 0)
      return;
    const missing = gen.let("missing");
    for (const prop in propertyDeps) {
      const deps = propertyDeps[prop];
      if (deps.length === 0)
        continue;
      const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
      cxt.setParams({
        property: prop,
        depsCount: deps.length,
        deps: deps.join(", ")
      });
      if (it.allErrors) {
        gen.if(hasProperty, () => {
          for (const depProp of deps) {
            (0, code_1.checkReportMissingProp)(cxt, depProp);
          }
        });
      } else {
        gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
        (0, code_1.reportMissingProp)(cxt, missing);
        gen.else();
      }
    }
  }
  exports.validatePropertyDeps = validatePropertyDeps;
  function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
    const { gen, data, keyword, it } = cxt;
    const valid = gen.name("valid");
    for (const prop in schemaDeps) {
      if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
        continue;
      gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {
        const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
        cxt.mergeValidEvaluated(schCxt, valid);
      }, () => gen.var(valid, true));
      cxt.ok(valid);
    }
  }
  exports.validateSchemaDeps = validateSchemaDeps;
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/propertyNames.js
var require_propertyNames = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var error = {
    message: "property name must be valid",
    params: ({ params }) => (0, codegen_1._)`{propertyName: ${params.propertyName}}`
  };
  var def = {
    keyword: "propertyNames",
    type: "object",
    schemaType: ["object", "boolean"],
    error,
    code(cxt) {
      const { gen, schema, data, it } = cxt;
      if ((0, util_1.alwaysValidSchema)(it, schema))
        return;
      const valid = gen.name("valid");
      gen.forIn("key", data, (key) => {
        cxt.setParams({ propertyName: key });
        cxt.subschema({
          keyword: "propertyNames",
          data: key,
          dataTypes: ["string"],
          propertyName: key,
          compositeRule: true
        }, valid);
        gen.if((0, codegen_1.not)(valid), () => {
          cxt.error(true);
          if (!it.allErrors)
            gen.break();
        });
      });
      cxt.ok(valid);
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js
var require_additionalProperties = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var code_1 = require_code2();
  var codegen_1 = require_codegen();
  var names_1 = require_names();
  var util_1 = require_util();
  var error = {
    message: "must NOT have additional properties",
    params: ({ params }) => (0, codegen_1._)`{additionalProperty: ${params.additionalProperty}}`
  };
  var def = {
    keyword: "additionalProperties",
    type: ["object"],
    schemaType: ["boolean", "object"],
    allowUndefined: true,
    trackErrors: true,
    error,
    code(cxt) {
      const { gen, schema, parentSchema, data, errsCount, it } = cxt;
      if (!errsCount)
        throw new Error("ajv implementation error");
      const { allErrors, opts } = it;
      it.props = true;
      if (opts.removeAdditional !== "all" && (0, util_1.alwaysValidSchema)(it, schema))
        return;
      const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
      const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);
      checkAdditionalProperties();
      cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
      function checkAdditionalProperties() {
        gen.forIn("key", data, (key) => {
          if (!props.length && !patProps.length)
            additionalPropertyCode(key);
          else
            gen.if(isAdditional(key), () => additionalPropertyCode(key));
        });
      }
      function isAdditional(key) {
        let definedProp;
        if (props.length > 8) {
          const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, "properties");
          definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
        } else if (props.length) {
          definedProp = (0, codegen_1.or)(...props.map((p) => (0, codegen_1._)`${key} === ${p}`));
        } else {
          definedProp = codegen_1.nil;
        }
        if (patProps.length) {
          definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p) => (0, codegen_1._)`${(0, code_1.usePattern)(cxt, p)}.test(${key})`));
        }
        return (0, codegen_1.not)(definedProp);
      }
      function deleteAdditional(key) {
        gen.code((0, codegen_1._)`delete ${data}[${key}]`);
      }
      function additionalPropertyCode(key) {
        if (opts.removeAdditional === "all" || opts.removeAdditional && schema === false) {
          deleteAdditional(key);
          return;
        }
        if (schema === false) {
          cxt.setParams({ additionalProperty: key });
          cxt.error();
          if (!allErrors)
            gen.break();
          return;
        }
        if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
          const valid = gen.name("valid");
          if (opts.removeAdditional === "failing") {
            applyAdditionalSchema(key, valid, false);
            gen.if((0, codegen_1.not)(valid), () => {
              cxt.reset();
              deleteAdditional(key);
            });
          } else {
            applyAdditionalSchema(key, valid);
            if (!allErrors)
              gen.if((0, codegen_1.not)(valid), () => gen.break());
          }
        }
      }
      function applyAdditionalSchema(key, valid, errors) {
        const subschema = {
          keyword: "additionalProperties",
          dataProp: key,
          dataPropType: util_1.Type.Str
        };
        if (errors === false) {
          Object.assign(subschema, {
            compositeRule: true,
            createErrors: false,
            allErrors: false
          });
        }
        cxt.subschema(subschema, valid);
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/properties.js
var require_properties = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var validate_1 = require_validate();
  var code_1 = require_code2();
  var util_1 = require_util();
  var additionalProperties_1 = require_additionalProperties();
  var def = {
    keyword: "properties",
    type: "object",
    schemaType: "object",
    code(cxt) {
      const { gen, schema, parentSchema, data, it } = cxt;
      if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) {
        additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, "additionalProperties"));
      }
      const allProps = (0, code_1.allSchemaProperties)(schema);
      for (const prop of allProps) {
        it.definedProperties.add(prop);
      }
      if (it.opts.unevaluated && allProps.length && it.props !== true) {
        it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
      }
      const properties = allProps.filter((p) => !(0, util_1.alwaysValidSchema)(it, schema[p]));
      if (properties.length === 0)
        return;
      const valid = gen.name("valid");
      for (const prop of properties) {
        if (hasDefault(prop)) {
          applyPropertySchema(prop);
        } else {
          gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));
          applyPropertySchema(prop);
          if (!it.allErrors)
            gen.else().var(valid, true);
          gen.endIf();
        }
        cxt.it.definedProperties.add(prop);
        cxt.ok(valid);
      }
      function hasDefault(prop) {
        return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;
      }
      function applyPropertySchema(prop) {
        cxt.subschema({
          keyword: "properties",
          schemaProp: prop,
          dataProp: prop
        }, valid);
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/patternProperties.js
var require_patternProperties = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var code_1 = require_code2();
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var util_2 = require_util();
  var def = {
    keyword: "patternProperties",
    type: "object",
    schemaType: "object",
    code(cxt) {
      const { gen, schema, data, parentSchema, it } = cxt;
      const { opts } = it;
      const patterns = (0, code_1.allSchemaProperties)(schema);
      const alwaysValidPatterns = patterns.filter((p) => (0, util_1.alwaysValidSchema)(it, schema[p]));
      if (patterns.length === 0 || alwaysValidPatterns.length === patterns.length && (!it.opts.unevaluated || it.props === true)) {
        return;
      }
      const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
      const valid = gen.name("valid");
      if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
        it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
      }
      const { props } = it;
      validatePatternProperties();
      function validatePatternProperties() {
        for (const pat of patterns) {
          if (checkProperties)
            checkMatchingProperties(pat);
          if (it.allErrors) {
            validateProperties(pat);
          } else {
            gen.var(valid, true);
            validateProperties(pat);
            gen.if(valid);
          }
        }
      }
      function checkMatchingProperties(pat) {
        for (const prop in checkProperties) {
          if (new RegExp(pat).test(prop)) {
            (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
          }
        }
      }
      function validateProperties(pat) {
        gen.forIn("key", data, (key) => {
          gen.if((0, codegen_1._)`${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, () => {
            const alwaysValid = alwaysValidPatterns.includes(pat);
            if (!alwaysValid) {
              cxt.subschema({
                keyword: "patternProperties",
                schemaProp: pat,
                dataProp: key,
                dataPropType: util_2.Type.Str
              }, valid);
            }
            if (it.opts.unevaluated && props !== true) {
              gen.assign((0, codegen_1._)`${props}[${key}]`, true);
            } else if (!alwaysValid && !it.allErrors) {
              gen.if((0, codegen_1.not)(valid), () => gen.break());
            }
          });
        });
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/not.js
var require_not = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var util_1 = require_util();
  var def = {
    keyword: "not",
    schemaType: ["object", "boolean"],
    trackErrors: true,
    code(cxt) {
      const { gen, schema, it } = cxt;
      if ((0, util_1.alwaysValidSchema)(it, schema)) {
        cxt.fail();
        return;
      }
      const valid = gen.name("valid");
      cxt.subschema({
        keyword: "not",
        compositeRule: true,
        createErrors: false,
        allErrors: false
      }, valid);
      cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
    },
    error: { message: "must NOT be valid" }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/anyOf.js
var require_anyOf = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var code_1 = require_code2();
  var def = {
    keyword: "anyOf",
    schemaType: "array",
    trackErrors: true,
    code: code_1.validateUnion,
    error: { message: "must match a schema in anyOf" }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/oneOf.js
var require_oneOf = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var error = {
    message: "must match exactly one schema in oneOf",
    params: ({ params }) => (0, codegen_1._)`{passingSchemas: ${params.passing}}`
  };
  var def = {
    keyword: "oneOf",
    schemaType: "array",
    trackErrors: true,
    error,
    code(cxt) {
      const { gen, schema, parentSchema, it } = cxt;
      if (!Array.isArray(schema))
        throw new Error("ajv implementation error");
      if (it.opts.discriminator && parentSchema.discriminator)
        return;
      const schArr = schema;
      const valid = gen.let("valid", false);
      const passing = gen.let("passing", null);
      const schValid = gen.name("_valid");
      cxt.setParams({ passing });
      gen.block(validateOneOf);
      cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
      function validateOneOf() {
        schArr.forEach((sch, i) => {
          let schCxt;
          if ((0, util_1.alwaysValidSchema)(it, sch)) {
            gen.var(schValid, true);
          } else {
            schCxt = cxt.subschema({
              keyword: "oneOf",
              schemaProp: i,
              compositeRule: true
            }, schValid);
          }
          if (i > 0) {
            gen.if((0, codegen_1._)`${schValid} && ${valid}`).assign(valid, false).assign(passing, (0, codegen_1._)`[${passing}, ${i}]`).else();
          }
          gen.if(schValid, () => {
            gen.assign(valid, true);
            gen.assign(passing, i);
            if (schCxt)
              cxt.mergeEvaluated(schCxt, codegen_1.Name);
          });
        });
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/allOf.js
var require_allOf = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var util_1 = require_util();
  var def = {
    keyword: "allOf",
    schemaType: "array",
    code(cxt) {
      const { gen, schema, it } = cxt;
      if (!Array.isArray(schema))
        throw new Error("ajv implementation error");
      const valid = gen.name("valid");
      schema.forEach((sch, i) => {
        if ((0, util_1.alwaysValidSchema)(it, sch))
          return;
        const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid);
        cxt.ok(valid);
        cxt.mergeEvaluated(schCxt);
      });
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/if.js
var require_if = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var util_1 = require_util();
  var error = {
    message: ({ params }) => (0, codegen_1.str)`must match "${params.ifClause}" schema`,
    params: ({ params }) => (0, codegen_1._)`{failingKeyword: ${params.ifClause}}`
  };
  var def = {
    keyword: "if",
    schemaType: ["object", "boolean"],
    trackErrors: true,
    error,
    code(cxt) {
      const { gen, parentSchema, it } = cxt;
      if (parentSchema.then === undefined && parentSchema.else === undefined) {
        (0, util_1.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
      }
      const hasThen = hasSchema(it, "then");
      const hasElse = hasSchema(it, "else");
      if (!hasThen && !hasElse)
        return;
      const valid = gen.let("valid", true);
      const schValid = gen.name("_valid");
      validateIf();
      cxt.reset();
      if (hasThen && hasElse) {
        const ifClause = gen.let("ifClause");
        cxt.setParams({ ifClause });
        gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
      } else if (hasThen) {
        gen.if(schValid, validateClause("then"));
      } else {
        gen.if((0, codegen_1.not)(schValid), validateClause("else"));
      }
      cxt.pass(valid, () => cxt.error(true));
      function validateIf() {
        const schCxt = cxt.subschema({
          keyword: "if",
          compositeRule: true,
          createErrors: false,
          allErrors: false
        }, schValid);
        cxt.mergeEvaluated(schCxt);
      }
      function validateClause(keyword, ifClause) {
        return () => {
          const schCxt = cxt.subschema({ keyword }, schValid);
          gen.assign(valid, schValid);
          cxt.mergeValidEvaluated(schCxt, valid);
          if (ifClause)
            gen.assign(ifClause, (0, codegen_1._)`${keyword}`);
          else
            cxt.setParams({ ifClause: keyword });
        };
      }
    }
  };
  function hasSchema(it, keyword) {
    const schema = it.schema[keyword];
    return schema !== undefined && !(0, util_1.alwaysValidSchema)(it, schema);
  }
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/thenElse.js
var require_thenElse = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var util_1 = require_util();
  var def = {
    keyword: ["then", "else"],
    schemaType: ["object", "boolean"],
    code({ keyword, parentSchema, it }) {
      if (parentSchema.if === undefined)
        (0, util_1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/applicator/index.js
var require_applicator = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var additionalItems_1 = require_additionalItems();
  var prefixItems_1 = require_prefixItems();
  var items_1 = require_items();
  var items2020_1 = require_items2020();
  var contains_1 = require_contains();
  var dependencies_1 = require_dependencies();
  var propertyNames_1 = require_propertyNames();
  var additionalProperties_1 = require_additionalProperties();
  var properties_1 = require_properties();
  var patternProperties_1 = require_patternProperties();
  var not_1 = require_not();
  var anyOf_1 = require_anyOf();
  var oneOf_1 = require_oneOf();
  var allOf_1 = require_allOf();
  var if_1 = require_if();
  var thenElse_1 = require_thenElse();
  function getApplicator(draft2020 = false) {
    const applicator = [
      not_1.default,
      anyOf_1.default,
      oneOf_1.default,
      allOf_1.default,
      if_1.default,
      thenElse_1.default,
      propertyNames_1.default,
      additionalProperties_1.default,
      dependencies_1.default,
      properties_1.default,
      patternProperties_1.default
    ];
    if (draft2020)
      applicator.push(prefixItems_1.default, items2020_1.default);
    else
      applicator.push(additionalItems_1.default, items_1.default);
    applicator.push(contains_1.default);
    return applicator;
  }
  exports.default = getApplicator;
});

// node_modules/ajv/dist/vocabularies/format/format.js
var require_format = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var error = {
    message: ({ schemaCode }) => (0, codegen_1.str)`must match format "${schemaCode}"`,
    params: ({ schemaCode }) => (0, codegen_1._)`{format: ${schemaCode}}`
  };
  var def = {
    keyword: "format",
    type: ["number", "string"],
    schemaType: "string",
    $data: true,
    error,
    code(cxt, ruleType) {
      const { gen, data, $data, schema, schemaCode, it } = cxt;
      const { opts, errSchemaPath, schemaEnv, self } = it;
      if (!opts.validateFormats)
        return;
      if ($data)
        validate$DataFormat();
      else
        validateFormat();
      function validate$DataFormat() {
        const fmts = gen.scopeValue("formats", {
          ref: self.formats,
          code: opts.code.formats
        });
        const fDef = gen.const("fDef", (0, codegen_1._)`${fmts}[${schemaCode}]`);
        const fType = gen.let("fType");
        const format = gen.let("format");
        gen.if((0, codegen_1._)`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._)`${fDef}.type || "string"`).assign(format, (0, codegen_1._)`${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._)`"string"`).assign(format, fDef));
        cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));
        function unknownFmt() {
          if (opts.strictSchema === false)
            return codegen_1.nil;
          return (0, codegen_1._)`${schemaCode} && !${format}`;
        }
        function invalidFmt() {
          const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : (0, codegen_1._)`${format}(${data})`;
          const validData = (0, codegen_1._)`(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
          return (0, codegen_1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
        }
      }
      function validateFormat() {
        const formatDef = self.formats[schema];
        if (!formatDef) {
          unknownFormat();
          return;
        }
        if (formatDef === true)
          return;
        const [fmtType, format, fmtRef] = getFormat(formatDef);
        if (fmtType === ruleType)
          cxt.pass(validCondition());
        function unknownFormat() {
          if (opts.strictSchema === false) {
            self.logger.warn(unknownMsg());
            return;
          }
          throw new Error(unknownMsg());
          function unknownMsg() {
            return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
          }
        }
        function getFormat(fmtDef) {
          const code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema)}` : undefined;
          const fmt = gen.scopeValue("formats", { key: schema, ref: fmtDef, code });
          if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
            return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1._)`${fmt}.validate`];
          }
          return ["string", fmtDef, fmt];
        }
        function validCondition() {
          if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
            if (!schemaEnv.$async)
              throw new Error("async format in sync schema");
            return (0, codegen_1._)`await ${fmtRef}(${data})`;
          }
          return typeof format == "function" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;
        }
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/format/index.js
var require_format2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var format_1 = require_format();
  var format = [format_1.default];
  exports.default = format;
});

// node_modules/ajv/dist/vocabularies/metadata.js
var require_metadata = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.contentVocabulary = exports.metadataVocabulary = undefined;
  exports.metadataVocabulary = [
    "title",
    "description",
    "default",
    "deprecated",
    "readOnly",
    "writeOnly",
    "examples"
  ];
  exports.contentVocabulary = [
    "contentMediaType",
    "contentEncoding",
    "contentSchema"
  ];
});

// node_modules/ajv/dist/vocabularies/draft7.js
var require_draft7 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var core_1 = require_core2();
  var validation_1 = require_validation2();
  var applicator_1 = require_applicator();
  var format_1 = require_format2();
  var metadata_1 = require_metadata();
  var draft7Vocabularies = [
    core_1.default,
    validation_1.default,
    (0, applicator_1.default)(),
    format_1.default,
    metadata_1.metadataVocabulary,
    metadata_1.contentVocabulary
  ];
  exports.default = draft7Vocabularies;
});

// node_modules/ajv/dist/vocabularies/discriminator/types.js
var require_types = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.DiscrError = undefined;
  var DiscrError;
  (function(DiscrError2) {
    DiscrError2["Tag"] = "tag";
    DiscrError2["Mapping"] = "mapping";
  })(DiscrError || (exports.DiscrError = DiscrError = {}));
});

// node_modules/ajv/dist/vocabularies/discriminator/index.js
var require_discriminator = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var types_1 = require_types();
  var compile_1 = require_compile();
  var ref_error_1 = require_ref_error();
  var util_1 = require_util();
  var error = {
    message: ({ params: { discrError, tagName } }) => discrError === types_1.DiscrError.Tag ? `tag "${tagName}" must be string` : `value of tag "${tagName}" must be in oneOf`,
    params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`
  };
  var def = {
    keyword: "discriminator",
    type: "object",
    schemaType: "object",
    error,
    code(cxt) {
      const { gen, data, schema, parentSchema, it } = cxt;
      const { oneOf } = parentSchema;
      if (!it.opts.discriminator) {
        throw new Error("discriminator: requires discriminator option");
      }
      const tagName = schema.propertyName;
      if (typeof tagName != "string")
        throw new Error("discriminator: requires propertyName");
      if (schema.mapping)
        throw new Error("discriminator: mapping is not supported");
      if (!oneOf)
        throw new Error("discriminator: requires oneOf keyword");
      const valid = gen.let("valid", false);
      const tag = gen.const("tag", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);
      gen.if((0, codegen_1._)`typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1.DiscrError.Tag, tag, tagName }));
      cxt.ok(valid);
      function validateMapping() {
        const mapping = getMapping();
        gen.if(false);
        for (const tagValue in mapping) {
          gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
          gen.assign(valid, applyTagSchema(mapping[tagValue]));
        }
        gen.else();
        cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag, tagName });
        gen.endIf();
      }
      function applyTagSchema(schemaProp) {
        const _valid = gen.name("valid");
        const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
        cxt.mergeEvaluated(schCxt, codegen_1.Name);
        return _valid;
      }
      function getMapping() {
        var _a;
        const oneOfMapping = {};
        const topRequired = hasRequired(parentSchema);
        let tagRequired = true;
        for (let i = 0;i < oneOf.length; i++) {
          let sch = oneOf[i];
          if ((sch === null || sch === undefined ? undefined : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
            const ref = sch.$ref;
            sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, ref);
            if (sch instanceof compile_1.SchemaEnv)
              sch = sch.schema;
            if (sch === undefined)
              throw new ref_error_1.default(it.opts.uriResolver, it.baseId, ref);
          }
          const propSch = (_a = sch === null || sch === undefined ? undefined : sch.properties) === null || _a === undefined ? undefined : _a[tagName];
          if (typeof propSch != "object") {
            throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
          }
          tagRequired = tagRequired && (topRequired || hasRequired(sch));
          addMappings(propSch, i);
        }
        if (!tagRequired)
          throw new Error(`discriminator: "${tagName}" must be required`);
        return oneOfMapping;
        function hasRequired({ required }) {
          return Array.isArray(required) && required.includes(tagName);
        }
        function addMappings(sch, i) {
          if (sch.const) {
            addMapping(sch.const, i);
          } else if (sch.enum) {
            for (const tagValue of sch.enum) {
              addMapping(tagValue, i);
            }
          } else {
            throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
          }
        }
        function addMapping(tagValue, i) {
          if (typeof tagValue != "string" || tagValue in oneOfMapping) {
            throw new Error(`discriminator: "${tagName}" values must be unique strings`);
          }
          oneOfMapping[tagValue] = i;
        }
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/refs/json-schema-draft-07.json
var require_json_schema_draft_07 = __commonJS((exports, module) => {
  module.exports = {
    $schema: "http://json-schema.org/draft-07/schema#",
    $id: "http://json-schema.org/draft-07/schema#",
    title: "Core schema meta-schema",
    definitions: {
      schemaArray: {
        type: "array",
        minItems: 1,
        items: { $ref: "#" }
      },
      nonNegativeInteger: {
        type: "integer",
        minimum: 0
      },
      nonNegativeIntegerDefault0: {
        allOf: [{ $ref: "#/definitions/nonNegativeInteger" }, { default: 0 }]
      },
      simpleTypes: {
        enum: ["array", "boolean", "integer", "null", "number", "object", "string"]
      },
      stringArray: {
        type: "array",
        items: { type: "string" },
        uniqueItems: true,
        default: []
      }
    },
    type: ["object", "boolean"],
    properties: {
      $id: {
        type: "string",
        format: "uri-reference"
      },
      $schema: {
        type: "string",
        format: "uri"
      },
      $ref: {
        type: "string",
        format: "uri-reference"
      },
      $comment: {
        type: "string"
      },
      title: {
        type: "string"
      },
      description: {
        type: "string"
      },
      default: true,
      readOnly: {
        type: "boolean",
        default: false
      },
      examples: {
        type: "array",
        items: true
      },
      multipleOf: {
        type: "number",
        exclusiveMinimum: 0
      },
      maximum: {
        type: "number"
      },
      exclusiveMaximum: {
        type: "number"
      },
      minimum: {
        type: "number"
      },
      exclusiveMinimum: {
        type: "number"
      },
      maxLength: { $ref: "#/definitions/nonNegativeInteger" },
      minLength: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
      pattern: {
        type: "string",
        format: "regex"
      },
      additionalItems: { $ref: "#" },
      items: {
        anyOf: [{ $ref: "#" }, { $ref: "#/definitions/schemaArray" }],
        default: true
      },
      maxItems: { $ref: "#/definitions/nonNegativeInteger" },
      minItems: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
      uniqueItems: {
        type: "boolean",
        default: false
      },
      contains: { $ref: "#" },
      maxProperties: { $ref: "#/definitions/nonNegativeInteger" },
      minProperties: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
      required: { $ref: "#/definitions/stringArray" },
      additionalProperties: { $ref: "#" },
      definitions: {
        type: "object",
        additionalProperties: { $ref: "#" },
        default: {}
      },
      properties: {
        type: "object",
        additionalProperties: { $ref: "#" },
        default: {}
      },
      patternProperties: {
        type: "object",
        additionalProperties: { $ref: "#" },
        propertyNames: { format: "regex" },
        default: {}
      },
      dependencies: {
        type: "object",
        additionalProperties: {
          anyOf: [{ $ref: "#" }, { $ref: "#/definitions/stringArray" }]
        }
      },
      propertyNames: { $ref: "#" },
      const: true,
      enum: {
        type: "array",
        items: true,
        minItems: 1,
        uniqueItems: true
      },
      type: {
        anyOf: [
          { $ref: "#/definitions/simpleTypes" },
          {
            type: "array",
            items: { $ref: "#/definitions/simpleTypes" },
            minItems: 1,
            uniqueItems: true
          }
        ]
      },
      format: { type: "string" },
      contentMediaType: { type: "string" },
      contentEncoding: { type: "string" },
      if: { $ref: "#" },
      then: { $ref: "#" },
      else: { $ref: "#" },
      allOf: { $ref: "#/definitions/schemaArray" },
      anyOf: { $ref: "#/definitions/schemaArray" },
      oneOf: { $ref: "#/definitions/schemaArray" },
      not: { $ref: "#" }
    },
    default: true
  };
});

// node_modules/ajv/dist/ajv.js
var require_ajv = __commonJS((exports, module) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = exports.Ajv = undefined;
  var core_1 = require_core();
  var draft7_1 = require_draft7();
  var discriminator_1 = require_discriminator();
  var draft7MetaSchema = require_json_schema_draft_07();
  var META_SUPPORT_DATA = ["/properties"];
  var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";

  class Ajv extends core_1.default {
    _addVocabularies() {
      super._addVocabularies();
      draft7_1.default.forEach((v) => this.addVocabulary(v));
      if (this.opts.discriminator)
        this.addKeyword(discriminator_1.default);
    }
    _addDefaultMetaSchema() {
      super._addDefaultMetaSchema();
      if (!this.opts.meta)
        return;
      const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA) : draft7MetaSchema;
      this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
      this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
    }
    defaultMeta() {
      return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined);
    }
  }
  exports.Ajv = Ajv;
  module.exports = exports = Ajv;
  module.exports.Ajv = Ajv;
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = Ajv;
  var validate_1 = require_validate();
  Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function() {
    return validate_1.KeywordCxt;
  } });
  var codegen_1 = require_codegen();
  Object.defineProperty(exports, "_", { enumerable: true, get: function() {
    return codegen_1._;
  } });
  Object.defineProperty(exports, "str", { enumerable: true, get: function() {
    return codegen_1.str;
  } });
  Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
    return codegen_1.stringify;
  } });
  Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
    return codegen_1.nil;
  } });
  Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
    return codegen_1.Name;
  } });
  Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function() {
    return codegen_1.CodeGen;
  } });
  var validation_error_1 = require_validation_error();
  Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function() {
    return validation_error_1.default;
  } });
  var ref_error_1 = require_ref_error();
  Object.defineProperty(exports, "MissingRefError", { enumerable: true, get: function() {
    return ref_error_1.default;
  } });
});

// node_modules/ajv-formats/dist/formats.js
var require_formats = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.formatNames = exports.fastFormats = exports.fullFormats = undefined;
  function fmtDef(validate, compare) {
    return { validate, compare };
  }
  exports.fullFormats = {
    date: fmtDef(date, compareDate),
    time: fmtDef(getTime(true), compareTime),
    "date-time": fmtDef(getDateTime(true), compareDateTime),
    "iso-time": fmtDef(getTime(), compareIsoTime),
    "iso-date-time": fmtDef(getDateTime(), compareIsoDateTime),
    duration: /^P(?!$)((\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?|(\d+W)?)$/,
    uri,
    "uri-reference": /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,
    "uri-template": /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,
    url: /^(?:https?|ftp):\/\/(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu,
    email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
    hostname: /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,
    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)$/,
    ipv6: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i,
    regex,
    uuid: /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,
    "json-pointer": /^(?:\/(?:[^~/]|~0|~1)*)*$/,
    "json-pointer-uri-fragment": /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,
    "relative-json-pointer": /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/,
    byte,
    int32: { type: "number", validate: validateInt32 },
    int64: { type: "number", validate: validateInt64 },
    float: { type: "number", validate: validateNumber },
    double: { type: "number", validate: validateNumber },
    password: true,
    binary: true
  };
  exports.fastFormats = {
    ...exports.fullFormats,
    date: fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d$/, compareDate),
    time: fmtDef(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i, compareTime),
    "date-time": fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\dt(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i, compareDateTime),
    "iso-time": fmtDef(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i, compareIsoTime),
    "iso-date-time": fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i, compareIsoDateTime),
    uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
    "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
    email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i
  };
  exports.formatNames = Object.keys(exports.fullFormats);
  function isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }
  var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
  var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  function date(str) {
    const matches = DATE.exec(str);
    if (!matches)
      return false;
    const year = +matches[1];
    const month = +matches[2];
    const day = +matches[3];
    return month >= 1 && month <= 12 && day >= 1 && day <= (month === 2 && isLeapYear(year) ? 29 : DAYS[month]);
  }
  function compareDate(d1, d2) {
    if (!(d1 && d2))
      return;
    if (d1 > d2)
      return 1;
    if (d1 < d2)
      return -1;
    return 0;
  }
  var TIME = /^(\d\d):(\d\d):(\d\d(?:\.\d+)?)(z|([+-])(\d\d)(?::?(\d\d))?)?$/i;
  function getTime(strictTimeZone) {
    return function time(str) {
      const matches = TIME.exec(str);
      if (!matches)
        return false;
      const hr = +matches[1];
      const min = +matches[2];
      const sec = +matches[3];
      const tz = matches[4];
      const tzSign = matches[5] === "-" ? -1 : 1;
      const tzH = +(matches[6] || 0);
      const tzM = +(matches[7] || 0);
      if (tzH > 23 || tzM > 59 || strictTimeZone && !tz)
        return false;
      if (hr <= 23 && min <= 59 && sec < 60)
        return true;
      const utcMin = min - tzM * tzSign;
      const utcHr = hr - tzH * tzSign - (utcMin < 0 ? 1 : 0);
      return (utcHr === 23 || utcHr === -1) && (utcMin === 59 || utcMin === -1) && sec < 61;
    };
  }
  function compareTime(s1, s2) {
    if (!(s1 && s2))
      return;
    const t1 = new Date("2020-01-01T" + s1).valueOf();
    const t2 = new Date("2020-01-01T" + s2).valueOf();
    if (!(t1 && t2))
      return;
    return t1 - t2;
  }
  function compareIsoTime(t1, t2) {
    if (!(t1 && t2))
      return;
    const a1 = TIME.exec(t1);
    const a2 = TIME.exec(t2);
    if (!(a1 && a2))
      return;
    t1 = a1[1] + a1[2] + a1[3];
    t2 = a2[1] + a2[2] + a2[3];
    if (t1 > t2)
      return 1;
    if (t1 < t2)
      return -1;
    return 0;
  }
  var DATE_TIME_SEPARATOR = /t|\s/i;
  function getDateTime(strictTimeZone) {
    const time = getTime(strictTimeZone);
    return function date_time(str) {
      const dateTime = str.split(DATE_TIME_SEPARATOR);
      return dateTime.length === 2 && date(dateTime[0]) && time(dateTime[1]);
    };
  }
  function compareDateTime(dt1, dt2) {
    if (!(dt1 && dt2))
      return;
    const d1 = new Date(dt1).valueOf();
    const d2 = new Date(dt2).valueOf();
    if (!(d1 && d2))
      return;
    return d1 - d2;
  }
  function compareIsoDateTime(dt1, dt2) {
    if (!(dt1 && dt2))
      return;
    const [d1, t1] = dt1.split(DATE_TIME_SEPARATOR);
    const [d2, t2] = dt2.split(DATE_TIME_SEPARATOR);
    const res = compareDate(d1, d2);
    if (res === undefined)
      return;
    return res || compareTime(t1, t2);
  }
  var NOT_URI_FRAGMENT = /\/|:/;
  var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
  function uri(str) {
    return NOT_URI_FRAGMENT.test(str) && URI.test(str);
  }
  var BYTE = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm;
  function byte(str) {
    BYTE.lastIndex = 0;
    return BYTE.test(str);
  }
  var MIN_INT32 = -(2 ** 31);
  var MAX_INT32 = 2 ** 31 - 1;
  function validateInt32(value) {
    return Number.isInteger(value) && value <= MAX_INT32 && value >= MIN_INT32;
  }
  function validateInt64(value) {
    return Number.isInteger(value);
  }
  function validateNumber() {
    return true;
  }
  var Z_ANCHOR = /[^\\]\\Z/;
  function regex(str) {
    if (Z_ANCHOR.test(str))
      return false;
    try {
      new RegExp(str);
      return true;
    } catch (e) {
      return false;
    }
  }
});

// node_modules/ajv-formats/dist/limit.js
var require_limit = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.formatLimitDefinition = undefined;
  var ajv_1 = require_ajv();
  var codegen_1 = require_codegen();
  var ops = codegen_1.operators;
  var KWDs = {
    formatMaximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
    formatMinimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
    formatExclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
    formatExclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE }
  };
  var error = {
    message: ({ keyword, schemaCode }) => (0, codegen_1.str)`should be ${KWDs[keyword].okStr} ${schemaCode}`,
    params: ({ keyword, schemaCode }) => (0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
  };
  exports.formatLimitDefinition = {
    keyword: Object.keys(KWDs),
    type: "string",
    schemaType: "string",
    $data: true,
    error,
    code(cxt) {
      const { gen, data, schemaCode, keyword, it } = cxt;
      const { opts, self } = it;
      if (!opts.validateFormats)
        return;
      const fCxt = new ajv_1.KeywordCxt(it, self.RULES.all.format.definition, "format");
      if (fCxt.$data)
        validate$DataFormat();
      else
        validateFormat();
      function validate$DataFormat() {
        const fmts = gen.scopeValue("formats", {
          ref: self.formats,
          code: opts.code.formats
        });
        const fmt = gen.const("fmt", (0, codegen_1._)`${fmts}[${fCxt.schemaCode}]`);
        cxt.fail$data((0, codegen_1.or)((0, codegen_1._)`typeof ${fmt} != "object"`, (0, codegen_1._)`${fmt} instanceof RegExp`, (0, codegen_1._)`typeof ${fmt}.compare != "function"`, compareCode(fmt)));
      }
      function validateFormat() {
        const format = fCxt.schema;
        const fmtDef = self.formats[format];
        if (!fmtDef || fmtDef === true)
          return;
        if (typeof fmtDef != "object" || fmtDef instanceof RegExp || typeof fmtDef.compare != "function") {
          throw new Error(`"${keyword}": format "${format}" does not define "compare" function`);
        }
        const fmt = gen.scopeValue("formats", {
          key: format,
          ref: fmtDef,
          code: opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(format)}` : undefined
        });
        cxt.fail$data(compareCode(fmt));
      }
      function compareCode(fmt) {
        return (0, codegen_1._)`${fmt}.compare(${data}, ${schemaCode}) ${KWDs[keyword].fail} 0`;
      }
    },
    dependencies: ["format"]
  };
  var formatLimitPlugin = (ajv) => {
    ajv.addKeyword(exports.formatLimitDefinition);
    return ajv;
  };
  exports.default = formatLimitPlugin;
});

// node_modules/ajv-formats/dist/index.js
var require_dist4 = __commonJS((exports, module) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var formats_1 = require_formats();
  var limit_1 = require_limit();
  var codegen_1 = require_codegen();
  var fullName = new codegen_1.Name("fullFormats");
  var fastName = new codegen_1.Name("fastFormats");
  var formatsPlugin = (ajv, opts = { keywords: true }) => {
    if (Array.isArray(opts)) {
      addFormats(ajv, opts, formats_1.fullFormats, fullName);
      return ajv;
    }
    const [formats, exportName] = opts.mode === "fast" ? [formats_1.fastFormats, fastName] : [formats_1.fullFormats, fullName];
    const list = opts.formats || formats_1.formatNames;
    addFormats(ajv, list, formats, exportName);
    if (opts.keywords)
      (0, limit_1.default)(ajv);
    return ajv;
  };
  formatsPlugin.get = (name, mode = "full") => {
    const formats = mode === "fast" ? formats_1.fastFormats : formats_1.fullFormats;
    const f = formats[name];
    if (!f)
      throw new Error(`Unknown format "${name}"`);
    return f;
  };
  function addFormats(ajv, list, fs, exportName) {
    var _a;
    var _b;
    (_a = (_b = ajv.opts.code).formats) !== null && _a !== undefined || (_b.formats = (0, codegen_1._)`require("ajv-formats/dist/formats").${exportName}`);
    for (const f of list)
      ajv.addFormat(f, fs[f]);
  }
  module.exports = exports = formatsPlugin;
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = formatsPlugin;
});

// node_modules/fast-json-stringify/lib/validator.js
var require_validator2 = __commonJS((exports, module) => {
  var Ajv = require_ajv();
  var fastUri = require_fast_uri();
  var ajvFormats = require_dist4();
  var clone = require_rfdc()({ proto: true });

  class Validator {
    constructor(ajvOptions) {
      this.ajv = new Ajv({
        ...ajvOptions,
        strictSchema: false,
        validateSchema: false,
        allowUnionTypes: true,
        uriResolver: fastUri
      });
      ajvFormats(this.ajv);
      this.ajv.addKeyword({
        keyword: "fjs_type",
        type: "object",
        errors: false,
        validate: (_type, date) => {
          return date instanceof Date;
        }
      });
      this._ajvSchemas = {};
      this._ajvOptions = ajvOptions || {};
    }
    addSchema(schema, schemaName) {
      let schemaKey = schema.$id || schemaName;
      if (schema.$id !== undefined && schema.$id[0] === "#") {
        schemaKey = schemaName + schema.$id;
      }
      if (this.ajv.refs[schemaKey] === undefined && this.ajv.schemas[schemaKey] === undefined) {
        const ajvSchema = clone(schema);
        this.convertSchemaToAjvFormat(ajvSchema);
        this.ajv.addSchema(ajvSchema, schemaKey);
        this._ajvSchemas[schemaKey] = schema;
      }
    }
    validate(schemaRef, data) {
      return this.ajv.validate(schemaRef, data);
    }
    convertSchemaToAjvFormat(schema) {
      if (schema === null)
        return;
      if (schema.type === "string") {
        schema.fjs_type = "string";
        schema.type = ["string", "object"];
      } else if (Array.isArray(schema.type) && schema.type.includes("string") && !schema.type.includes("object")) {
        schema.fjs_type = "string";
        schema.type.push("object");
      }
      for (const property in schema) {
        if (typeof schema[property] === "object") {
          this.convertSchemaToAjvFormat(schema[property]);
        }
      }
    }
    getState() {
      return {
        ajvOptions: this._ajvOptions,
        ajvSchemas: this._ajvSchemas
      };
    }
    static restoreFromState(state) {
      const validator = new Validator(state.ajvOptions);
      for (const [id, ajvSchema] of Object.entries(state.ajvSchemas)) {
        validator.ajv.addSchema(ajvSchema, id);
      }
      return validator;
    }
  }
  module.exports = Validator;
});

// node_modules/fast-json-stringify/lib/location.js
var require_location = __commonJS((exports, module) => {
  class Location {
    constructor(schema, schemaId, jsonPointer = "#") {
      this.schema = schema;
      this.schemaId = schemaId;
      this.jsonPointer = jsonPointer;
    }
    getPropertyLocation(propertyName) {
      const propertyLocation = new Location(this.schema[propertyName], this.schemaId, this.jsonPointer + "/" + propertyName);
      return propertyLocation;
    }
    getSchemaRef() {
      return this.schemaId + this.jsonPointer;
    }
  }
  module.exports = Location;
});

// node_modules/fast-json-stringify/lib/schema-validator.js
var require_schema_validator = __commonJS((exports, module) => {
  module.exports = validate10;
  module.exports.default = validate10;
  var schema11 = { $schema: "http://json-schema.org/draft-07/schema#", $id: "http://json-schema.org/draft-07/schema#", title: "Core schema meta-schema", definitions: { schemaArray: { type: "array", minItems: 1, items: { $ref: "#" } }, nonNegativeInteger: { type: "integer", minimum: 0 }, nonNegativeIntegerDefault0: { allOf: [{ $ref: "#/definitions/nonNegativeInteger" }, { default: 0 }] }, simpleTypes: { enum: ["array", "boolean", "integer", "null", "number", "object", "string"] }, stringArray: { type: "array", items: { type: "string" }, uniqueItems: true, default: [] } }, type: ["object", "boolean"], properties: { $id: { type: "string", format: "uri-reference" }, $schema: { type: "string", format: "uri" }, $ref: { type: "string", format: "uri-reference" }, $comment: { type: "string" }, title: { type: "string" }, description: { type: "string" }, default: true, readOnly: { type: "boolean", default: false }, examples: { type: "array", items: true }, multipleOf: { type: "number", exclusiveMinimum: 0 }, maximum: { type: "number" }, exclusiveMaximum: { type: "number" }, minimum: { type: "number" }, exclusiveMinimum: { type: "number" }, maxLength: { $ref: "#/definitions/nonNegativeInteger" }, minLength: { $ref: "#/definitions/nonNegativeIntegerDefault0" }, pattern: { type: "string", format: "regex" }, additionalItems: { $ref: "#" }, items: { anyOf: [{ $ref: "#" }, { $ref: "#/definitions/schemaArray" }], default: true }, maxItems: { $ref: "#/definitions/nonNegativeInteger" }, minItems: { $ref: "#/definitions/nonNegativeIntegerDefault0" }, uniqueItems: { type: "boolean", default: false }, contains: { $ref: "#" }, maxProperties: { $ref: "#/definitions/nonNegativeInteger" }, minProperties: { $ref: "#/definitions/nonNegativeIntegerDefault0" }, required: { $ref: "#/definitions/stringArray" }, additionalProperties: { $ref: "#" }, definitions: { type: "object", additionalProperties: { $ref: "#" }, default: {} }, properties: { type: "object", additionalProperties: { $ref: "#" }, default: {} }, patternProperties: { type: "object", additionalProperties: { $ref: "#" }, propertyNames: { format: "regex" }, default: {} }, dependencies: { type: "object", additionalProperties: { anyOf: [{ $ref: "#" }, { $ref: "#/definitions/stringArray" }] } }, propertyNames: { $ref: "#" }, const: true, enum: { type: "array", items: true, minItems: 1, uniqueItems: true }, type: { anyOf: [{ $ref: "#/definitions/simpleTypes" }, { type: "array", items: { $ref: "#/definitions/simpleTypes" }, minItems: 1, uniqueItems: true }] }, format: { type: "string" }, contentMediaType: { type: "string" }, contentEncoding: { type: "string" }, if: { $ref: "#" }, then: { $ref: "#" }, else: { $ref: "#" }, allOf: { $ref: "#/definitions/schemaArray" }, anyOf: { $ref: "#/definitions/schemaArray" }, oneOf: { $ref: "#/definitions/schemaArray" }, not: { $ref: "#" } }, default: true };
  var schema20 = { enum: ["array", "boolean", "integer", "null", "number", "object", "string"] };
  var formats0 = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
  var formats2 = require_formats().fullFormats.uri;
  var formats6 = require_formats().fullFormats.regex;
  function validate11(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {
    let vErrors = null;
    let errors = 0;
    const _errs1 = errors;
    if (!(typeof data == "number" && (!(data % 1) && !isNaN(data)) && isFinite(data))) {
      validate11.errors = [{ instancePath, schemaPath: "#/definitions/nonNegativeInteger/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
      return false;
    }
    if (errors === _errs1) {
      if (typeof data == "number" && isFinite(data)) {
        if (data < 0 || isNaN(data)) {
          validate11.errors = [{ instancePath, schemaPath: "#/definitions/nonNegativeInteger/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0" }];
          return false;
        }
      }
    }
    validate11.errors = vErrors;
    return errors === 0;
  }
  var root1 = { validate: validate10 };
  function validate13(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {
    let vErrors = null;
    let errors = 0;
    if (errors === 0) {
      if (Array.isArray(data)) {
        if (data.length < 1) {
          validate13.errors = [{ instancePath, schemaPath: "#/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }];
          return false;
        } else {
          var valid0 = true;
          const len0 = data.length;
          for (let i0 = 0;i0 < len0; i0++) {
            const _errs1 = errors;
            if (!root1.validate(data[i0], { instancePath: instancePath + "/" + i0, parentData: data, parentDataProperty: i0, rootData })) {
              vErrors = vErrors === null ? root1.validate.errors : vErrors.concat(root1.validate.errors);
              errors = vErrors.length;
            }
            var valid0 = _errs1 === errors;
            if (!valid0) {
              break;
            }
          }
        }
      } else {
        validate13.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
        return false;
      }
    }
    validate13.errors = vErrors;
    return errors === 0;
  }
  var func0 = require_equal().default;
  function validate10(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {
    let vErrors = null;
    let errors = 0;
    if (!(data && typeof data == "object" && !Array.isArray(data)) && typeof data !== "boolean") {
      validate10.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: schema11.type }, message: "must be object,boolean" }];
      return false;
    }
    if (errors === 0) {
      if (data && typeof data == "object" && !Array.isArray(data)) {
        if (data.$id !== undefined) {
          let data0 = data.$id;
          const _errs1 = errors;
          if (errors === _errs1) {
            if (errors === _errs1) {
              if (typeof data0 === "string") {
                if (!formats0.test(data0)) {
                  validate10.errors = [{ instancePath: instancePath + "/$id", schemaPath: "#/properties/%24id/format", keyword: "format", params: { format: "uri-reference" }, message: 'must match format "' + "uri-reference" + '"' }];
                  return false;
                }
              } else {
                validate10.errors = [{ instancePath: instancePath + "/$id", schemaPath: "#/properties/%24id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                return false;
              }
            }
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.$schema !== undefined) {
            let data1 = data.$schema;
            const _errs3 = errors;
            if (errors === _errs3) {
              if (errors === _errs3) {
                if (typeof data1 === "string") {
                  if (!formats2(data1)) {
                    validate10.errors = [{ instancePath: instancePath + "/$schema", schemaPath: "#/properties/%24schema/format", keyword: "format", params: { format: "uri" }, message: 'must match format "' + "uri" + '"' }];
                    return false;
                  }
                } else {
                  validate10.errors = [{ instancePath: instancePath + "/$schema", schemaPath: "#/properties/%24schema/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                  return false;
                }
              }
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.$ref !== undefined) {
              let data2 = data.$ref;
              const _errs5 = errors;
              if (errors === _errs5) {
                if (errors === _errs5) {
                  if (typeof data2 === "string") {
                    if (!formats0.test(data2)) {
                      validate10.errors = [{ instancePath: instancePath + "/$ref", schemaPath: "#/properties/%24ref/format", keyword: "format", params: { format: "uri-reference" }, message: 'must match format "' + "uri-reference" + '"' }];
                      return false;
                    }
                  } else {
                    validate10.errors = [{ instancePath: instancePath + "/$ref", schemaPath: "#/properties/%24ref/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                  }
                }
              }
              var valid0 = _errs5 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.$comment !== undefined) {
                const _errs7 = errors;
                if (typeof data.$comment !== "string") {
                  validate10.errors = [{ instancePath: instancePath + "/$comment", schemaPath: "#/properties/%24comment/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                  return false;
                }
                var valid0 = _errs7 === errors;
              } else {
                var valid0 = true;
              }
              if (valid0) {
                if (data.title !== undefined) {
                  const _errs9 = errors;
                  if (typeof data.title !== "string") {
                    validate10.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                  }
                  var valid0 = _errs9 === errors;
                } else {
                  var valid0 = true;
                }
                if (valid0) {
                  if (data.description !== undefined) {
                    const _errs11 = errors;
                    if (typeof data.description !== "string") {
                      validate10.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                      return false;
                    }
                    var valid0 = _errs11 === errors;
                  } else {
                    var valid0 = true;
                  }
                  if (valid0) {
                    if (data.readOnly !== undefined) {
                      const _errs13 = errors;
                      if (typeof data.readOnly !== "boolean") {
                        validate10.errors = [{ instancePath: instancePath + "/readOnly", schemaPath: "#/properties/readOnly/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                        return false;
                      }
                      var valid0 = _errs13 === errors;
                    } else {
                      var valid0 = true;
                    }
                    if (valid0) {
                      if (data.examples !== undefined) {
                        const _errs15 = errors;
                        if (errors === _errs15) {
                          if (!Array.isArray(data.examples)) {
                            validate10.errors = [{ instancePath: instancePath + "/examples", schemaPath: "#/properties/examples/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                            return false;
                          }
                        }
                        var valid0 = _errs15 === errors;
                      } else {
                        var valid0 = true;
                      }
                      if (valid0) {
                        if (data.multipleOf !== undefined) {
                          let data8 = data.multipleOf;
                          const _errs17 = errors;
                          if (errors === _errs17) {
                            if (typeof data8 == "number" && isFinite(data8)) {
                              if (data8 <= 0 || isNaN(data8)) {
                                validate10.errors = [{ instancePath: instancePath + "/multipleOf", schemaPath: "#/properties/multipleOf/exclusiveMinimum", keyword: "exclusiveMinimum", params: { comparison: ">", limit: 0 }, message: "must be > 0" }];
                                return false;
                              }
                            } else {
                              validate10.errors = [{ instancePath: instancePath + "/multipleOf", schemaPath: "#/properties/multipleOf/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                              return false;
                            }
                          }
                          var valid0 = _errs17 === errors;
                        } else {
                          var valid0 = true;
                        }
                        if (valid0) {
                          if (data.maximum !== undefined) {
                            let data9 = data.maximum;
                            const _errs19 = errors;
                            if (!(typeof data9 == "number" && isFinite(data9))) {
                              validate10.errors = [{ instancePath: instancePath + "/maximum", schemaPath: "#/properties/maximum/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                              return false;
                            }
                            var valid0 = _errs19 === errors;
                          } else {
                            var valid0 = true;
                          }
                          if (valid0) {
                            if (data.exclusiveMaximum !== undefined) {
                              let data10 = data.exclusiveMaximum;
                              const _errs21 = errors;
                              if (!(typeof data10 == "number" && isFinite(data10))) {
                                validate10.errors = [{ instancePath: instancePath + "/exclusiveMaximum", schemaPath: "#/properties/exclusiveMaximum/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                return false;
                              }
                              var valid0 = _errs21 === errors;
                            } else {
                              var valid0 = true;
                            }
                            if (valid0) {
                              if (data.minimum !== undefined) {
                                let data11 = data.minimum;
                                const _errs23 = errors;
                                if (!(typeof data11 == "number" && isFinite(data11))) {
                                  validate10.errors = [{ instancePath: instancePath + "/minimum", schemaPath: "#/properties/minimum/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                  return false;
                                }
                                var valid0 = _errs23 === errors;
                              } else {
                                var valid0 = true;
                              }
                              if (valid0) {
                                if (data.exclusiveMinimum !== undefined) {
                                  let data12 = data.exclusiveMinimum;
                                  const _errs25 = errors;
                                  if (!(typeof data12 == "number" && isFinite(data12))) {
                                    validate10.errors = [{ instancePath: instancePath + "/exclusiveMinimum", schemaPath: "#/properties/exclusiveMinimum/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                    return false;
                                  }
                                  var valid0 = _errs25 === errors;
                                } else {
                                  var valid0 = true;
                                }
                                if (valid0) {
                                  if (data.maxLength !== undefined) {
                                    let data13 = data.maxLength;
                                    const _errs27 = errors;
                                    const _errs28 = errors;
                                    if (!(typeof data13 == "number" && (!(data13 % 1) && !isNaN(data13)) && isFinite(data13))) {
                                      validate10.errors = [{ instancePath: instancePath + "/maxLength", schemaPath: "#/definitions/nonNegativeInteger/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                                      return false;
                                    }
                                    if (errors === _errs28) {
                                      if (typeof data13 == "number" && isFinite(data13)) {
                                        if (data13 < 0 || isNaN(data13)) {
                                          validate10.errors = [{ instancePath: instancePath + "/maxLength", schemaPath: "#/definitions/nonNegativeInteger/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0" }];
                                          return false;
                                        }
                                      }
                                    }
                                    var valid0 = _errs27 === errors;
                                  } else {
                                    var valid0 = true;
                                  }
                                  if (valid0) {
                                    if (data.minLength !== undefined) {
                                      const _errs30 = errors;
                                      if (!validate11(data.minLength, { instancePath: instancePath + "/minLength", parentData: data, parentDataProperty: "minLength", rootData })) {
                                        vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);
                                        errors = vErrors.length;
                                      }
                                      var valid0 = _errs30 === errors;
                                    } else {
                                      var valid0 = true;
                                    }
                                    if (valid0) {
                                      if (data.pattern !== undefined) {
                                        let data15 = data.pattern;
                                        const _errs31 = errors;
                                        if (errors === _errs31) {
                                          if (errors === _errs31) {
                                            if (typeof data15 === "string") {
                                              if (!formats6(data15)) {
                                                validate10.errors = [{ instancePath: instancePath + "/pattern", schemaPath: "#/properties/pattern/format", keyword: "format", params: { format: "regex" }, message: 'must match format "' + "regex" + '"' }];
                                                return false;
                                              }
                                            } else {
                                              validate10.errors = [{ instancePath: instancePath + "/pattern", schemaPath: "#/properties/pattern/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                              return false;
                                            }
                                          }
                                        }
                                        var valid0 = _errs31 === errors;
                                      } else {
                                        var valid0 = true;
                                      }
                                      if (valid0) {
                                        if (data.additionalItems !== undefined) {
                                          const _errs33 = errors;
                                          if (!validate10(data.additionalItems, { instancePath: instancePath + "/additionalItems", parentData: data, parentDataProperty: "additionalItems", rootData })) {
                                            vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                                            errors = vErrors.length;
                                          }
                                          var valid0 = _errs33 === errors;
                                        } else {
                                          var valid0 = true;
                                        }
                                        if (valid0) {
                                          if (data.items !== undefined) {
                                            let data17 = data.items;
                                            const _errs34 = errors;
                                            const _errs35 = errors;
                                            let valid2 = false;
                                            const _errs36 = errors;
                                            if (!validate10(data17, { instancePath: instancePath + "/items", parentData: data, parentDataProperty: "items", rootData })) {
                                              vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                                              errors = vErrors.length;
                                            }
                                            var _valid0 = _errs36 === errors;
                                            valid2 = valid2 || _valid0;
                                            if (!valid2) {
                                              const _errs37 = errors;
                                              if (!validate13(data17, { instancePath: instancePath + "/items", parentData: data, parentDataProperty: "items", rootData })) {
                                                vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);
                                                errors = vErrors.length;
                                              }
                                              var _valid0 = _errs37 === errors;
                                              valid2 = valid2 || _valid0;
                                            }
                                            if (!valid2) {
                                              const err0 = { instancePath: instancePath + "/items", schemaPath: "#/properties/items/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                                              if (vErrors === null) {
                                                vErrors = [err0];
                                              } else {
                                                vErrors.push(err0);
                                              }
                                              errors++;
                                              validate10.errors = vErrors;
                                              return false;
                                            } else {
                                              errors = _errs35;
                                              if (vErrors !== null) {
                                                if (_errs35) {
                                                  vErrors.length = _errs35;
                                                } else {
                                                  vErrors = null;
                                                }
                                              }
                                            }
                                            var valid0 = _errs34 === errors;
                                          } else {
                                            var valid0 = true;
                                          }
                                          if (valid0) {
                                            if (data.maxItems !== undefined) {
                                              let data18 = data.maxItems;
                                              const _errs38 = errors;
                                              const _errs39 = errors;
                                              if (!(typeof data18 == "number" && (!(data18 % 1) && !isNaN(data18)) && isFinite(data18))) {
                                                validate10.errors = [{ instancePath: instancePath + "/maxItems", schemaPath: "#/definitions/nonNegativeInteger/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                                                return false;
                                              }
                                              if (errors === _errs39) {
                                                if (typeof data18 == "number" && isFinite(data18)) {
                                                  if (data18 < 0 || isNaN(data18)) {
                                                    validate10.errors = [{ instancePath: instancePath + "/maxItems", schemaPath: "#/definitions/nonNegativeInteger/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0" }];
                                                    return false;
                                                  }
                                                }
                                              }
                                              var valid0 = _errs38 === errors;
                                            } else {
                                              var valid0 = true;
                                            }
                                            if (valid0) {
                                              if (data.minItems !== undefined) {
                                                const _errs41 = errors;
                                                if (!validate11(data.minItems, { instancePath: instancePath + "/minItems", parentData: data, parentDataProperty: "minItems", rootData })) {
                                                  vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);
                                                  errors = vErrors.length;
                                                }
                                                var valid0 = _errs41 === errors;
                                              } else {
                                                var valid0 = true;
                                              }
                                              if (valid0) {
                                                if (data.uniqueItems !== undefined) {
                                                  const _errs42 = errors;
                                                  if (typeof data.uniqueItems !== "boolean") {
                                                    validate10.errors = [{ instancePath: instancePath + "/uniqueItems", schemaPath: "#/properties/uniqueItems/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                    return false;
                                                  }
                                                  var valid0 = _errs42 === errors;
                                                } else {
                                                  var valid0 = true;
                                                }
                                                if (valid0) {
                                                  if (data.contains !== undefined) {
                                                    const _errs44 = errors;
                                                    if (!validate10(data.contains, { instancePath: instancePath + "/contains", parentData: data, parentDataProperty: "contains", rootData })) {
                                                      vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                                                      errors = vErrors.length;
                                                    }
                                                    var valid0 = _errs44 === errors;
                                                  } else {
                                                    var valid0 = true;
                                                  }
                                                  if (valid0) {
                                                    if (data.maxProperties !== undefined) {
                                                      let data22 = data.maxProperties;
                                                      const _errs45 = errors;
                                                      const _errs46 = errors;
                                                      if (!(typeof data22 == "number" && (!(data22 % 1) && !isNaN(data22)) && isFinite(data22))) {
                                                        validate10.errors = [{ instancePath: instancePath + "/maxProperties", schemaPath: "#/definitions/nonNegativeInteger/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                                                        return false;
                                                      }
                                                      if (errors === _errs46) {
                                                        if (typeof data22 == "number" && isFinite(data22)) {
                                                          if (data22 < 0 || isNaN(data22)) {
                                                            validate10.errors = [{ instancePath: instancePath + "/maxProperties", schemaPath: "#/definitions/nonNegativeInteger/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0" }];
                                                            return false;
                                                          }
                                                        }
                                                      }
                                                      var valid0 = _errs45 === errors;
                                                    } else {
                                                      var valid0 = true;
                                                    }
                                                    if (valid0) {
                                                      if (data.minProperties !== undefined) {
                                                        const _errs48 = errors;
                                                        if (!validate11(data.minProperties, { instancePath: instancePath + "/minProperties", parentData: data, parentDataProperty: "minProperties", rootData })) {
                                                          vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);
                                                          errors = vErrors.length;
                                                        }
                                                        var valid0 = _errs48 === errors;
                                                      } else {
                                                        var valid0 = true;
                                                      }
                                                      if (valid0) {
                                                        if (data.required !== undefined) {
                                                          let data24 = data.required;
                                                          const _errs49 = errors;
                                                          const _errs50 = errors;
                                                          if (errors === _errs50) {
                                                            if (Array.isArray(data24)) {
                                                              var valid6 = true;
                                                              const len0 = data24.length;
                                                              for (let i0 = 0;i0 < len0; i0++) {
                                                                const _errs52 = errors;
                                                                if (typeof data24[i0] !== "string") {
                                                                  validate10.errors = [{ instancePath: instancePath + "/required/" + i0, schemaPath: "#/definitions/stringArray/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                  return false;
                                                                }
                                                                var valid6 = _errs52 === errors;
                                                                if (!valid6) {
                                                                  break;
                                                                }
                                                              }
                                                              if (valid6) {
                                                                let i1 = data24.length;
                                                                let j0;
                                                                if (i1 > 1) {
                                                                  const indices0 = {};
                                                                  for (;i1--; ) {
                                                                    let item0 = data24[i1];
                                                                    if (typeof item0 !== "string") {
                                                                      continue;
                                                                    }
                                                                    if (typeof indices0[item0] == "number") {
                                                                      j0 = indices0[item0];
                                                                      validate10.errors = [{ instancePath: instancePath + "/required", schemaPath: "#/definitions/stringArray/uniqueItems", keyword: "uniqueItems", params: { i: i1, j: j0 }, message: "must NOT have duplicate items (items ## " + j0 + " and " + i1 + " are identical)" }];
                                                                      return false;
                                                                      break;
                                                                    }
                                                                    indices0[item0] = i1;
                                                                  }
                                                                }
                                                              }
                                                            } else {
                                                              validate10.errors = [{ instancePath: instancePath + "/required", schemaPath: "#/definitions/stringArray/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                              return false;
                                                            }
                                                          }
                                                          var valid0 = _errs49 === errors;
                                                        } else {
                                                          var valid0 = true;
                                                        }
                                                        if (valid0) {
                                                          if (data.additionalProperties !== undefined) {
                                                            const _errs54 = errors;
                                                            if (!validate10(data.additionalProperties, { instancePath: instancePath + "/additionalProperties", parentData: data, parentDataProperty: "additionalProperties", rootData })) {
                                                              vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                                                              errors = vErrors.length;
                                                            }
                                                            var valid0 = _errs54 === errors;
                                                          } else {
                                                            var valid0 = true;
                                                          }
                                                          if (valid0) {
                                                            if (data.definitions !== undefined) {
                                                              let data27 = data.definitions;
                                                              const _errs55 = errors;
                                                              if (errors === _errs55) {
                                                                if (data27 && typeof data27 == "object" && !Array.isArray(data27)) {
                                                                  for (const key0 in data27) {
                                                                    const _errs58 = errors;
                                                                    if (!validate10(data27[key0], { instancePath: instancePath + "/definitions/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data27, parentDataProperty: key0, rootData })) {
                                                                      vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                                                                      errors = vErrors.length;
                                                                    }
                                                                    var valid8 = _errs58 === errors;
                                                                    if (!valid8) {
                                                                      break;
                                                                    }
                                                                  }
                                                                } else {
                                                                  validate10.errors = [{ instancePath: instancePath + "/definitions", schemaPath: "#/properties/definitions/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                  return false;
                                                                }
                                                              }
                                                              var valid0 = _errs55 === errors;
                                                            } else {
                                                              var valid0 = true;
                                                            }
                                                            if (valid0) {
                                                              if (data.properties !== undefined) {
                                                                let data29 = data.properties;
                                                                const _errs59 = errors;
                                                                if (errors === _errs59) {
                                                                  if (data29 && typeof data29 == "object" && !Array.isArray(data29)) {
                                                                    for (const key1 in data29) {
                                                                      const _errs62 = errors;
                                                                      if (!validate10(data29[key1], { instancePath: instancePath + "/properties/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data29, parentDataProperty: key1, rootData })) {
                                                                        vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                                                                        errors = vErrors.length;
                                                                      }
                                                                      var valid9 = _errs62 === errors;
                                                                      if (!valid9) {
                                                                        break;
                                                                      }
                                                                    }
                                                                  } else {
                                                                    validate10.errors = [{ instancePath: instancePath + "/properties", schemaPath: "#/properties/properties/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                    return false;
                                                                  }
                                                                }
                                                                var valid0 = _errs59 === errors;
                                                              } else {
                                                                var valid0 = true;
                                                              }
                                                              if (valid0) {
                                                                if (data.patternProperties !== undefined) {
                                                                  let data31 = data.patternProperties;
                                                                  const _errs63 = errors;
                                                                  if (errors === _errs63) {
                                                                    if (data31 && typeof data31 == "object" && !Array.isArray(data31)) {
                                                                      for (const key2 in data31) {
                                                                        const _errs65 = errors;
                                                                        if (errors === _errs65) {
                                                                          if (typeof key2 === "string") {
                                                                            if (!formats6(key2)) {
                                                                              const err1 = { instancePath: instancePath + "/patternProperties", schemaPath: "#/properties/patternProperties/propertyNames/format", keyword: "format", params: { format: "regex" }, message: 'must match format "' + "regex" + '"', propertyName: key2 };
                                                                              if (vErrors === null) {
                                                                                vErrors = [err1];
                                                                              } else {
                                                                                vErrors.push(err1);
                                                                              }
                                                                              errors++;
                                                                            }
                                                                          }
                                                                        }
                                                                        var valid10 = _errs65 === errors;
                                                                        if (!valid10) {
                                                                          const err2 = { instancePath: instancePath + "/patternProperties", schemaPath: "#/properties/patternProperties/propertyNames", keyword: "propertyNames", params: { propertyName: key2 }, message: "property name must be valid" };
                                                                          if (vErrors === null) {
                                                                            vErrors = [err2];
                                                                          } else {
                                                                            vErrors.push(err2);
                                                                          }
                                                                          errors++;
                                                                          validate10.errors = vErrors;
                                                                          return false;
                                                                          break;
                                                                        }
                                                                      }
                                                                      if (valid10) {
                                                                        for (const key3 in data31) {
                                                                          const _errs67 = errors;
                                                                          if (!validate10(data31[key3], { instancePath: instancePath + "/patternProperties/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data31, parentDataProperty: key3, rootData })) {
                                                                            vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                                                                            errors = vErrors.length;
                                                                          }
                                                                          var valid11 = _errs67 === errors;
                                                                          if (!valid11) {
                                                                            break;
                                                                          }
                                                                        }
                                                                      }
                                                                    } else {
                                                                      validate10.errors = [{ instancePath: instancePath + "/patternProperties", schemaPath: "#/properties/patternProperties/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                      return false;
                                                                    }
                                                                  }
                                                                  var valid0 = _errs63 === errors;
                                                                } else {
                                                                  var valid0 = true;
                                                                }
                                                                if (valid0) {
                                                                  if (data.dependencies !== undefined) {
                                                                    let data33 = data.dependencies;
                                                                    const _errs68 = errors;
                                                                    if (errors === _errs68) {
                                                                      if (data33 && typeof data33 == "object" && !Array.isArray(data33)) {
                                                                        for (const key4 in data33) {
                                                                          let data34 = data33[key4];
                                                                          const _errs71 = errors;
                                                                          const _errs72 = errors;
                                                                          let valid13 = false;
                                                                          const _errs73 = errors;
                                                                          if (!validate10(data34, { instancePath: instancePath + "/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data33, parentDataProperty: key4, rootData })) {
                                                                            vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                                                                            errors = vErrors.length;
                                                                          }
                                                                          var _valid1 = _errs73 === errors;
                                                                          valid13 = valid13 || _valid1;
                                                                          if (!valid13) {
                                                                            const _errs74 = errors;
                                                                            const _errs75 = errors;
                                                                            if (errors === _errs75) {
                                                                              if (Array.isArray(data34)) {
                                                                                var valid15 = true;
                                                                                const len1 = data34.length;
                                                                                for (let i2 = 0;i2 < len1; i2++) {
                                                                                  const _errs77 = errors;
                                                                                  if (typeof data34[i2] !== "string") {
                                                                                    const err3 = { instancePath: instancePath + "/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1") + "/" + i2, schemaPath: "#/definitions/stringArray/items/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                    if (vErrors === null) {
                                                                                      vErrors = [err3];
                                                                                    } else {
                                                                                      vErrors.push(err3);
                                                                                    }
                                                                                    errors++;
                                                                                  }
                                                                                  var valid15 = _errs77 === errors;
                                                                                  if (!valid15) {
                                                                                    break;
                                                                                  }
                                                                                }
                                                                                if (valid15) {
                                                                                  let i3 = data34.length;
                                                                                  let j1;
                                                                                  if (i3 > 1) {
                                                                                    const indices1 = {};
                                                                                    for (;i3--; ) {
                                                                                      let item1 = data34[i3];
                                                                                      if (typeof item1 !== "string") {
                                                                                        continue;
                                                                                      }
                                                                                      if (typeof indices1[item1] == "number") {
                                                                                        j1 = indices1[item1];
                                                                                        const err4 = { instancePath: instancePath + "/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/definitions/stringArray/uniqueItems", keyword: "uniqueItems", params: { i: i3, j: j1 }, message: "must NOT have duplicate items (items ## " + j1 + " and " + i3 + " are identical)" };
                                                                                        if (vErrors === null) {
                                                                                          vErrors = [err4];
                                                                                        } else {
                                                                                          vErrors.push(err4);
                                                                                        }
                                                                                        errors++;
                                                                                        break;
                                                                                      }
                                                                                      indices1[item1] = i3;
                                                                                    }
                                                                                  }
                                                                                }
                                                                              } else {
                                                                                const err5 = { instancePath: instancePath + "/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/definitions/stringArray/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                                if (vErrors === null) {
                                                                                  vErrors = [err5];
                                                                                } else {
                                                                                  vErrors.push(err5);
                                                                                }
                                                                                errors++;
                                                                              }
                                                                            }
                                                                            var _valid1 = _errs74 === errors;
                                                                            valid13 = valid13 || _valid1;
                                                                          }
                                                                          if (!valid13) {
                                                                            const err6 = { instancePath: instancePath + "/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/dependencies/additionalProperties/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                                                                            if (vErrors === null) {
                                                                              vErrors = [err6];
                                                                            } else {
                                                                              vErrors.push(err6);
                                                                            }
                                                                            errors++;
                                                                            validate10.errors = vErrors;
                                                                            return false;
                                                                          } else {
                                                                            errors = _errs72;
                                                                            if (vErrors !== null) {
                                                                              if (_errs72) {
                                                                                vErrors.length = _errs72;
                                                                              } else {
                                                                                vErrors = null;
                                                                              }
                                                                            }
                                                                          }
                                                                          var valid12 = _errs71 === errors;
                                                                          if (!valid12) {
                                                                            break;
                                                                          }
                                                                        }
                                                                      } else {
                                                                        validate10.errors = [{ instancePath: instancePath + "/dependencies", schemaPath: "#/properties/dependencies/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                        return false;
                                                                      }
                                                                    }
                                                                    var valid0 = _errs68 === errors;
                                                                  } else {
                                                                    var valid0 = true;
                                                                  }
                                                                  if (valid0) {
                                                                    if (data.propertyNames !== undefined) {
                                                                      const _errs79 = errors;
                                                                      if (!validate10(data.propertyNames, { instancePath: instancePath + "/propertyNames", parentData: data, parentDataProperty: "propertyNames", rootData })) {
                                                                        vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                                                                        errors = vErrors.length;
                                                                      }
                                                                      var valid0 = _errs79 === errors;
                                                                    } else {
                                                                      var valid0 = true;
                                                                    }
                                                                    if (valid0) {
                                                                      if (data.enum !== undefined) {
                                                                        let data37 = data.enum;
                                                                        const _errs80 = errors;
                                                                        if (errors === _errs80) {
                                                                          if (Array.isArray(data37)) {
                                                                            if (data37.length < 1) {
                                                                              validate10.errors = [{ instancePath: instancePath + "/enum", schemaPath: "#/properties/enum/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }];
                                                                              return false;
                                                                            } else {
                                                                              let i4 = data37.length;
                                                                              let j2;
                                                                              if (i4 > 1) {
                                                                                outer0:
                                                                                  for (;i4--; ) {
                                                                                    for (j2 = i4;j2--; ) {
                                                                                      if (func0(data37[i4], data37[j2])) {
                                                                                        validate10.errors = [{ instancePath: instancePath + "/enum", schemaPath: "#/properties/enum/uniqueItems", keyword: "uniqueItems", params: { i: i4, j: j2 }, message: "must NOT have duplicate items (items ## " + j2 + " and " + i4 + " are identical)" }];
                                                                                        return false;
                                                                                        break outer0;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                              }
                                                                            }
                                                                          } else {
                                                                            validate10.errors = [{ instancePath: instancePath + "/enum", schemaPath: "#/properties/enum/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                            return false;
                                                                          }
                                                                        }
                                                                        var valid0 = _errs80 === errors;
                                                                      } else {
                                                                        var valid0 = true;
                                                                      }
                                                                      if (valid0) {
                                                                        if (data.type !== undefined) {
                                                                          let data38 = data.type;
                                                                          const _errs82 = errors;
                                                                          const _errs83 = errors;
                                                                          let valid18 = false;
                                                                          const _errs84 = errors;
                                                                          if (!(data38 === "array" || data38 === "boolean" || data38 === "integer" || data38 === "null" || data38 === "number" || data38 === "object" || data38 === "string")) {
                                                                            const err7 = { instancePath: instancePath + "/type", schemaPath: "#/definitions/simpleTypes/enum", keyword: "enum", params: { allowedValues: schema20.enum }, message: "must be equal to one of the allowed values" };
                                                                            if (vErrors === null) {
                                                                              vErrors = [err7];
                                                                            } else {
                                                                              vErrors.push(err7);
                                                                            }
                                                                            errors++;
                                                                          }
                                                                          var _valid2 = _errs84 === errors;
                                                                          valid18 = valid18 || _valid2;
                                                                          if (!valid18) {
                                                                            const _errs86 = errors;
                                                                            if (errors === _errs86) {
                                                                              if (Array.isArray(data38)) {
                                                                                if (data38.length < 1) {
                                                                                  const err8 = { instancePath: instancePath + "/type", schemaPath: "#/properties/type/anyOf/1/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" };
                                                                                  if (vErrors === null) {
                                                                                    vErrors = [err8];
                                                                                  } else {
                                                                                    vErrors.push(err8);
                                                                                  }
                                                                                  errors++;
                                                                                } else {
                                                                                  var valid20 = true;
                                                                                  const len2 = data38.length;
                                                                                  for (let i5 = 0;i5 < len2; i5++) {
                                                                                    let data39 = data38[i5];
                                                                                    const _errs88 = errors;
                                                                                    if (!(data39 === "array" || data39 === "boolean" || data39 === "integer" || data39 === "null" || data39 === "number" || data39 === "object" || data39 === "string")) {
                                                                                      const err9 = { instancePath: instancePath + "/type/" + i5, schemaPath: "#/definitions/simpleTypes/enum", keyword: "enum", params: { allowedValues: schema20.enum }, message: "must be equal to one of the allowed values" };
                                                                                      if (vErrors === null) {
                                                                                        vErrors = [err9];
                                                                                      } else {
                                                                                        vErrors.push(err9);
                                                                                      }
                                                                                      errors++;
                                                                                    }
                                                                                    var valid20 = _errs88 === errors;
                                                                                    if (!valid20) {
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  if (valid20) {
                                                                                    let i6 = data38.length;
                                                                                    let j3;
                                                                                    if (i6 > 1) {
                                                                                      outer1:
                                                                                        for (;i6--; ) {
                                                                                          for (j3 = i6;j3--; ) {
                                                                                            if (func0(data38[i6], data38[j3])) {
                                                                                              const err10 = { instancePath: instancePath + "/type", schemaPath: "#/properties/type/anyOf/1/uniqueItems", keyword: "uniqueItems", params: { i: i6, j: j3 }, message: "must NOT have duplicate items (items ## " + j3 + " and " + i6 + " are identical)" };
                                                                                              if (vErrors === null) {
                                                                                                vErrors = [err10];
                                                                                              } else {
                                                                                                vErrors.push(err10);
                                                                                              }
                                                                                              errors++;
                                                                                              break outer1;
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              } else {
                                                                                const err11 = { instancePath: instancePath + "/type", schemaPath: "#/properties/type/anyOf/1/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                                if (vErrors === null) {
                                                                                  vErrors = [err11];
                                                                                } else {
                                                                                  vErrors.push(err11);
                                                                                }
                                                                                errors++;
                                                                              }
                                                                            }
                                                                            var _valid2 = _errs86 === errors;
                                                                            valid18 = valid18 || _valid2;
                                                                          }
                                                                          if (!valid18) {
                                                                            const err12 = { instancePath: instancePath + "/type", schemaPath: "#/properties/type/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                                                                            if (vErrors === null) {
                                                                              vErrors = [err12];
                                                                            } else {
                                                                              vErrors.push(err12);
                                                                            }
                                                                            errors++;
                                                                            validate10.errors = vErrors;
                                                                            return false;
                                                                          } else {
                                                                            errors = _errs83;
                                                                            if (vErrors !== null) {
                                                                              if (_errs83) {
                                                                                vErrors.length = _errs83;
                                                                              } else {
                                                                                vErrors = null;
                                                                              }
                                                                            }
                                                                          }
                                                                          var valid0 = _errs82 === errors;
                                                                        } else {
                                                                          var valid0 = true;
                                                                        }
                                                                        if (valid0) {
                                                                          if (data.format !== undefined) {
                                                                            const _errs90 = errors;
                                                                            if (typeof data.format !== "string") {
                                                                              validate10.errors = [{ instancePath: instancePath + "/format", schemaPath: "#/properties/format/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                              return false;
                                                                            }
                                                                            var valid0 = _errs90 === errors;
                                                                          } else {
                                                                            var valid0 = true;
                                                                          }
                                                                          if (valid0) {
                                                                            if (data.contentMediaType !== undefined) {
                                                                              const _errs92 = errors;
                                                                              if (typeof data.contentMediaType !== "string") {
                                                                                validate10.errors = [{ instancePath: instancePath + "/contentMediaType", schemaPath: "#/properties/contentMediaType/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                return false;
                                                                              }
                                                                              var valid0 = _errs92 === errors;
                                                                            } else {
                                                                              var valid0 = true;
                                                                            }
                                                                            if (valid0) {
                                                                              if (data.contentEncoding !== undefined) {
                                                                                const _errs94 = errors;
                                                                                if (typeof data.contentEncoding !== "string") {
                                                                                  validate10.errors = [{ instancePath: instancePath + "/contentEncoding", schemaPath: "#/properties/contentEncoding/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                  return false;
                                                                                }
                                                                                var valid0 = _errs94 === errors;
                                                                              } else {
                                                                                var valid0 = true;
                                                                              }
                                                                              if (valid0) {
                                                                                if (data.if !== undefined) {
                                                                                  const _errs96 = errors;
                                                                                  if (!validate10(data.if, { instancePath: instancePath + "/if", parentData: data, parentDataProperty: "if", rootData })) {
                                                                                    vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                                                                                    errors = vErrors.length;
                                                                                  }
                                                                                  var valid0 = _errs96 === errors;
                                                                                } else {
                                                                                  var valid0 = true;
                                                                                }
                                                                                if (valid0) {
                                                                                  if (data.then !== undefined) {
                                                                                    const _errs97 = errors;
                                                                                    if (!validate10(data.then, { instancePath: instancePath + "/then", parentData: data, parentDataProperty: "then", rootData })) {
                                                                                      vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                                                                                      errors = vErrors.length;
                                                                                    }
                                                                                    var valid0 = _errs97 === errors;
                                                                                  } else {
                                                                                    var valid0 = true;
                                                                                  }
                                                                                  if (valid0) {
                                                                                    if (data.else !== undefined) {
                                                                                      const _errs98 = errors;
                                                                                      if (!validate10(data.else, { instancePath: instancePath + "/else", parentData: data, parentDataProperty: "else", rootData })) {
                                                                                        vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                                                                                        errors = vErrors.length;
                                                                                      }
                                                                                      var valid0 = _errs98 === errors;
                                                                                    } else {
                                                                                      var valid0 = true;
                                                                                    }
                                                                                    if (valid0) {
                                                                                      if (data.allOf !== undefined) {
                                                                                        const _errs99 = errors;
                                                                                        if (!validate13(data.allOf, { instancePath: instancePath + "/allOf", parentData: data, parentDataProperty: "allOf", rootData })) {
                                                                                          vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);
                                                                                          errors = vErrors.length;
                                                                                        }
                                                                                        var valid0 = _errs99 === errors;
                                                                                      } else {
                                                                                        var valid0 = true;
                                                                                      }
                                                                                      if (valid0) {
                                                                                        if (data.anyOf !== undefined) {
                                                                                          const _errs100 = errors;
                                                                                          if (!validate13(data.anyOf, { instancePath: instancePath + "/anyOf", parentData: data, parentDataProperty: "anyOf", rootData })) {
                                                                                            vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);
                                                                                            errors = vErrors.length;
                                                                                          }
                                                                                          var valid0 = _errs100 === errors;
                                                                                        } else {
                                                                                          var valid0 = true;
                                                                                        }
                                                                                        if (valid0) {
                                                                                          if (data.oneOf !== undefined) {
                                                                                            const _errs101 = errors;
                                                                                            if (!validate13(data.oneOf, { instancePath: instancePath + "/oneOf", parentData: data, parentDataProperty: "oneOf", rootData })) {
                                                                                              vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);
                                                                                              errors = vErrors.length;
                                                                                            }
                                                                                            var valid0 = _errs101 === errors;
                                                                                          } else {
                                                                                            var valid0 = true;
                                                                                          }
                                                                                          if (valid0) {
                                                                                            if (data.not !== undefined) {
                                                                                              const _errs102 = errors;
                                                                                              if (!validate10(data.not, { instancePath: instancePath + "/not", parentData: data, parentDataProperty: "not", rootData })) {
                                                                                                vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                                                                                                errors = vErrors.length;
                                                                                              }
                                                                                              var valid0 = _errs102 === errors;
                                                                                            } else {
                                                                                              var valid0 = true;
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    validate10.errors = vErrors;
    return errors === 0;
  }
});

// node_modules/@fastify/merge-json-schemas/lib/errors.js
var require_errors6 = __commonJS((exports, module) => {
  class MergeError extends Error {
    constructor(keyword, schemas) {
      super();
      this.name = "JsonSchemaMergeError";
      this.code = "JSON_SCHEMA_MERGE_ERROR";
      this.message = `Failed to merge "${keyword}" keyword schemas.`;
      this.schemas = schemas;
    }
  }

  class ResolverNotFoundError extends Error {
    constructor(keyword, schemas) {
      super();
      this.name = "JsonSchemaMergeError";
      this.code = "JSON_SCHEMA_MERGE_ERROR";
      this.message = `Resolver for "${keyword}" keyword not found.`;
      this.schemas = schemas;
    }
  }

  class InvalidOnConflictOptionError extends Error {
    constructor(onConflict) {
      super();
      this.name = "JsonSchemaMergeError";
      this.code = "JSON_SCHEMA_MERGE_ERROR";
      this.message = `Invalid "onConflict" option: "${onConflict}".`;
    }
  }
  module.exports = {
    MergeError,
    ResolverNotFoundError,
    InvalidOnConflictOptionError
  };
});

// node_modules/@fastify/merge-json-schemas/lib/resolvers.js
var require_resolvers = __commonJS((exports, module) => {
  var { dequal: deepEqual } = require_dist3();
  var { MergeError } = require_errors6();
  function _arraysIntersection(arrays) {
    let intersection = arrays[0];
    for (let i = 1;i < arrays.length; i++) {
      intersection = intersection.filter((value) => arrays[i].includes(value));
    }
    return intersection;
  }
  function arraysIntersection(keyword, values, mergedSchema) {
    const intersection = _arraysIntersection(values);
    if (intersection.length === 0) {
      throw new MergeError(keyword, values);
    }
    mergedSchema[keyword] = intersection;
  }
  function hybridArraysIntersection(keyword, values, mergedSchema) {
    for (let i = 0;i < values.length; i++) {
      if (!Array.isArray(values[i])) {
        values[i] = [values[i]];
      }
    }
    const intersection = _arraysIntersection(values);
    if (intersection.length === 0) {
      throw new MergeError(keyword, values);
    }
    if (intersection.length === 1) {
      mergedSchema[keyword] = intersection[0];
    } else {
      mergedSchema[keyword] = intersection;
    }
  }
  function arraysUnion(keyword, values, mergedSchema) {
    const union = [];
    for (const array of values) {
      for (const value of array) {
        if (!union.includes(value)) {
          union.push(value);
        }
      }
    }
    mergedSchema[keyword] = union;
  }
  function minNumber(keyword, values, mergedSchema) {
    mergedSchema[keyword] = Math.min(...values);
  }
  function maxNumber(keyword, values, mergedSchema) {
    mergedSchema[keyword] = Math.max(...values);
  }
  function commonMultiple(keyword, values, mergedSchema) {
    const gcd = (a, b) => !b ? a : gcd(b, a % b);
    const lcm = (a, b) => a * b / gcd(a, b);
    let scale = 1;
    for (const value of values) {
      while (value * scale % 1 !== 0) {
        scale *= 10;
      }
    }
    let multiple = values[0] * scale;
    for (const value of values) {
      multiple = lcm(multiple, value * scale);
    }
    mergedSchema[keyword] = multiple / scale;
  }
  function allEqual(keyword, values, mergedSchema) {
    const firstValue = values[0];
    for (let i = 1;i < values.length; i++) {
      if (!deepEqual(values[i], firstValue)) {
        throw new MergeError(keyword, values);
      }
    }
    mergedSchema[keyword] = firstValue;
  }
  function skip() {
  }
  function booleanAnd(keyword, values, mergedSchema) {
    for (const value of values) {
      if (value === false) {
        mergedSchema[keyword] = false;
        return;
      }
    }
    mergedSchema[keyword] = true;
  }
  function booleanOr(keyword, values, mergedSchema) {
    for (const value of values) {
      if (value === true) {
        mergedSchema[keyword] = true;
        return;
      }
    }
    mergedSchema[keyword] = false;
  }
  module.exports = {
    arraysIntersection,
    hybridArraysIntersection,
    arraysUnion,
    minNumber,
    maxNumber,
    commonMultiple,
    allEqual,
    booleanAnd,
    booleanOr,
    skip
  };
});

// node_modules/@fastify/merge-json-schemas/index.js
var require_merge_json_schemas = __commonJS((exports, module) => {
  var { dequal: deepEqual } = require_dist3();
  var resolvers = require_resolvers();
  var errors = require_errors6();
  var keywordsResolvers = {
    $id: resolvers.skip,
    type: resolvers.hybridArraysIntersection,
    enum: resolvers.arraysIntersection,
    minLength: resolvers.maxNumber,
    maxLength: resolvers.minNumber,
    minimum: resolvers.maxNumber,
    maximum: resolvers.minNumber,
    multipleOf: resolvers.commonMultiple,
    exclusiveMinimum: resolvers.maxNumber,
    exclusiveMaximum: resolvers.minNumber,
    minItems: resolvers.maxNumber,
    maxItems: resolvers.minNumber,
    maxProperties: resolvers.minNumber,
    minProperties: resolvers.maxNumber,
    const: resolvers.allEqual,
    default: resolvers.allEqual,
    format: resolvers.allEqual,
    required: resolvers.arraysUnion,
    properties: mergeProperties,
    patternProperties: mergeObjects,
    additionalProperties: mergeSchemasResolver,
    items: mergeItems,
    additionalItems: mergeAdditionalItems,
    definitions: mergeObjects,
    $defs: mergeObjects,
    nullable: resolvers.booleanAnd,
    oneOf: mergeOneOf,
    anyOf: mergeOneOf,
    allOf: resolvers.arraysUnion,
    not: mergeSchemasResolver,
    if: mergeIfThenElseSchemas,
    then: resolvers.skip,
    else: resolvers.skip,
    dependencies: mergeDependencies,
    dependentRequired: mergeDependencies,
    dependentSchemas: mergeObjects,
    propertyNames: mergeSchemasResolver,
    uniqueItems: resolvers.booleanOr,
    contains: mergeSchemasResolver
  };
  function mergeSchemasResolver(keyword, values, mergedSchema, _schemas, options) {
    mergedSchema[keyword] = _mergeSchemas(values, options);
  }
  function cartesianProduct(arrays) {
    let result = [[]];
    for (const array of arrays) {
      const temp = [];
      for (const x of result) {
        for (const y of array) {
          temp.push([...x, y]);
        }
      }
      result = temp;
    }
    return result;
  }
  function mergeOneOf(keyword, values, mergedSchema, _schemas, options) {
    if (values.length === 1) {
      mergedSchema[keyword] = values[0];
      return;
    }
    const product = cartesianProduct(values);
    const mergedOneOf = [];
    for (const combination of product) {
      try {
        const mergedSchema2 = _mergeSchemas(combination, options);
        if (mergedSchema2 !== undefined) {
          mergedOneOf.push(mergedSchema2);
        }
      } catch (error) {
        if (error instanceof errors.MergeError)
          continue;
        throw error;
      }
    }
    mergedSchema[keyword] = mergedOneOf;
  }
  function getSchemaForItem(schema, index) {
    const { items, additionalItems } = schema;
    if (Array.isArray(items)) {
      if (index < items.length) {
        return items[index];
      }
      return additionalItems;
    }
    if (items !== undefined) {
      return items;
    }
    return additionalItems;
  }
  function mergeItems(keyword, values, mergedSchema, schemas, options) {
    let maxArrayItemsLength = 0;
    for (const itemsSchema of values) {
      if (Array.isArray(itemsSchema)) {
        maxArrayItemsLength = Math.max(maxArrayItemsLength, itemsSchema.length);
      }
    }
    if (maxArrayItemsLength === 0) {
      mergedSchema[keyword] = _mergeSchemas(values, options);
      return;
    }
    const mergedItemsSchemas = [];
    for (let i = 0;i < maxArrayItemsLength; i++) {
      const indexItemSchemas = [];
      for (const schema of schemas) {
        const itemSchema = getSchemaForItem(schema, i);
        if (itemSchema !== undefined) {
          indexItemSchemas.push(itemSchema);
        }
      }
      mergedItemsSchemas[i] = _mergeSchemas(indexItemSchemas, options);
    }
    mergedSchema[keyword] = mergedItemsSchemas;
  }
  function mergeAdditionalItems(keyword, values, mergedSchema, schemas, options) {
    let hasArrayItems = false;
    for (const schema of schemas) {
      if (Array.isArray(schema.items)) {
        hasArrayItems = true;
        break;
      }
    }
    if (!hasArrayItems) {
      mergedSchema[keyword] = _mergeSchemas(values, options);
      return;
    }
    const mergedAdditionalItemsSchemas = [];
    for (const schema of schemas) {
      let additionalItemsSchema = schema.additionalItems;
      if (additionalItemsSchema === undefined && !Array.isArray(schema.items)) {
        additionalItemsSchema = schema.items;
      }
      if (additionalItemsSchema !== undefined) {
        mergedAdditionalItemsSchemas.push(additionalItemsSchema);
      }
    }
    mergedSchema[keyword] = _mergeSchemas(mergedAdditionalItemsSchemas, options);
  }
  function getSchemaForProperty(schema, propertyName) {
    const { properties, patternProperties, additionalProperties } = schema;
    if (properties?.[propertyName] !== undefined) {
      return properties[propertyName];
    }
    for (const pattern of Object.keys(patternProperties ?? {})) {
      const regexp = new RegExp(pattern);
      if (regexp.test(propertyName)) {
        return patternProperties[pattern];
      }
    }
    return additionalProperties;
  }
  function mergeProperties(keyword, _values, mergedSchema, schemas, options) {
    const foundProperties = {};
    for (const currentSchema of schemas) {
      const properties = currentSchema.properties ?? {};
      for (const propertyName of Object.keys(properties)) {
        if (foundProperties[propertyName] !== undefined)
          continue;
        const propertySchema = properties[propertyName];
        foundProperties[propertyName] = [propertySchema];
        for (const anotherSchema of schemas) {
          if (currentSchema === anotherSchema)
            continue;
          const propertySchema2 = getSchemaForProperty(anotherSchema, propertyName);
          if (propertySchema2 !== undefined) {
            foundProperties[propertyName].push(propertySchema2);
          }
        }
      }
    }
    const mergedProperties = {};
    for (const property of Object.keys(foundProperties)) {
      const propertySchemas = foundProperties[property];
      mergedProperties[property] = _mergeSchemas(propertySchemas, options);
    }
    mergedSchema[keyword] = mergedProperties;
  }
  function mergeObjects(keyword, values, mergedSchema, _schemas, options) {
    const objectsProperties = {};
    for (const properties of values) {
      for (const propertyName of Object.keys(properties)) {
        if (objectsProperties[propertyName] === undefined) {
          objectsProperties[propertyName] = [];
        }
        objectsProperties[propertyName].push(properties[propertyName]);
      }
    }
    const mergedProperties = {};
    for (const propertyName of Object.keys(objectsProperties)) {
      const propertySchemas = objectsProperties[propertyName];
      const mergedPropertySchema = _mergeSchemas(propertySchemas, options);
      mergedProperties[propertyName] = mergedPropertySchema;
    }
    mergedSchema[keyword] = mergedProperties;
  }
  function mergeIfThenElseSchemas(_keyword, _values, mergedSchema, schemas, options) {
    for (let i = 0;i < schemas.length; i++) {
      const subSchema = {
        if: schemas[i].if,
        then: schemas[i].then,
        else: schemas[i].else
      };
      if (subSchema.if === undefined)
        continue;
      if (mergedSchema.if === undefined) {
        mergedSchema.if = subSchema.if;
        if (subSchema.then !== undefined) {
          mergedSchema.then = subSchema.then;
        }
        if (subSchema.else !== undefined) {
          mergedSchema.else = subSchema.else;
        }
        continue;
      }
      if (mergedSchema.then !== undefined) {
        mergedSchema.then = _mergeSchemas([mergedSchema.then, subSchema], options);
      }
      if (mergedSchema.else !== undefined) {
        mergedSchema.else = _mergeSchemas([mergedSchema.else, subSchema], options);
      }
    }
  }
  function mergeDependencies(keyword, values, mergedSchema) {
    const mergedDependencies = {};
    for (const dependencies of values) {
      for (const propertyName of Object.keys(dependencies)) {
        if (mergedDependencies[propertyName] === undefined) {
          mergedDependencies[propertyName] = [];
        }
        const mergedPropertyDependencies = mergedDependencies[propertyName];
        for (const propertyDependency of dependencies[propertyName]) {
          if (!mergedPropertyDependencies.includes(propertyDependency)) {
            mergedPropertyDependencies.push(propertyDependency);
          }
        }
      }
    }
    mergedSchema[keyword] = mergedDependencies;
  }
  function _mergeSchemas(schemas, options) {
    if (schemas.length === 0)
      return {};
    if (schemas.length === 1)
      return schemas[0];
    const mergedSchema = {};
    const keywords = {};
    let allSchemasAreTrue = true;
    for (const schema of schemas) {
      if (schema === false)
        return false;
      if (schema === true)
        continue;
      allSchemasAreTrue = false;
      for (const keyword of Object.keys(schema)) {
        if (keywords[keyword] === undefined) {
          keywords[keyword] = [];
        }
        keywords[keyword].push(schema[keyword]);
      }
    }
    if (allSchemasAreTrue)
      return true;
    for (const keyword of Object.keys(keywords)) {
      const keywordValues = keywords[keyword];
      const resolver = options.resolvers[keyword] ?? options.defaultResolver;
      resolver(keyword, keywordValues, mergedSchema, schemas, options);
    }
    return mergedSchema;
  }
  function defaultResolver(keyword, values, mergedSchema, _schemas, options) {
    const onConflict = options.onConflict ?? "throw";
    if (values.length === 1 || onConflict === "first") {
      mergedSchema[keyword] = values[0];
      return;
    }
    let allValuesEqual = true;
    for (let i = 1;i < values.length; i++) {
      if (!deepEqual(values[i], values[0])) {
        allValuesEqual = false;
        break;
      }
    }
    if (allValuesEqual) {
      mergedSchema[keyword] = values[0];
      return;
    }
    if (onConflict === "throw") {
      throw new errors.ResolverNotFoundError(keyword, values);
    }
    if (onConflict === "skip") {
      return;
    }
    throw new errors.InvalidOnConflictOptionError(onConflict);
  }
  function mergeSchemas(schemas, options = {}) {
    if (options.defaultResolver === undefined) {
      options.defaultResolver = defaultResolver;
    }
    options.resolvers = { ...keywordsResolvers, ...options.resolvers };
    const mergedSchema = _mergeSchemas(schemas, options);
    return mergedSchema;
  }
  module.exports = { mergeSchemas, keywordsResolvers, defaultResolver, ...errors };
});

// node_modules/fast-json-stringify/lib/merge-schemas.js
var require_merge_schemas = __commonJS((exports, module) => {
  var { mergeSchemas: _mergeSchemas } = require_merge_json_schemas();
  function mergeSchemas(schemas) {
    return _mergeSchemas(schemas, { onConflict: "skip" });
  }
  module.exports = mergeSchemas;
});

// node_modules/fast-json-stringify/lib/standalone.js
var require_standalone = __commonJS((exports, module) => {
  function buildStandaloneCode(contextFunc, context, serializer, validator) {
    let ajvDependencyCode = "";
    if (context.validatorSchemasIds.size > 0) {
      ajvDependencyCode += `const Validator = require('fast-json-stringify/lib/validator')
`;
      ajvDependencyCode += `const validatorState = ${JSON.stringify(validator.getState())}
`;
      ajvDependencyCode += `const validator = Validator.restoreFromState(validatorState)
`;
    } else {
      ajvDependencyCode += `const validator = null
`;
    }
    const { schema, ...serializerState } = serializer.getState();
    return `
  'use strict'

  const Serializer = require('fast-json-stringify/lib/serializer')
  const serializerState = ${JSON.stringify(serializerState)}
  const serializer = Serializer.restoreFromState(serializerState)

  ${ajvDependencyCode}

  module.exports = ${contextFunc.toString()}(validator, serializer)`;
  }
  module.exports = buildStandaloneCode;
  module.exports.dependencies = {
    Serializer: require_serializer(),
    Validator: require_validator2()
  };
});

// node_modules/fast-json-stringify/index.js
var require_fast_json_stringify = __commonJS((exports, module) => {
  var { RefResolver } = require_json_schema_ref_resolver();
  var Serializer = require_serializer();
  var Validator = require_validator2();
  var Location = require_location();
  var validate = require_schema_validator();
  var mergeSchemas = require_merge_schemas();
  var SINGLE_TICK = /'/g;
  var largeArraySize = 20000;
  var largeArrayMechanism = "default";
  var validRoundingMethods = [
    "floor",
    "ceil",
    "round",
    "trunc"
  ];
  var validLargeArrayMechanisms = [
    "default",
    "json-stringify"
  ];
  var schemaIdCounter = 0;
  function isValidSchema(schema, name) {
    if (!validate(schema)) {
      if (name) {
        name = `"${name}" `;
      } else {
        name = "";
      }
      const first = validate.errors[0];
      const err = new Error(`${name}schema is invalid: data${first.instancePath} ${first.message}`);
      err.errors = isValidSchema.errors;
      throw err;
    }
  }
  function resolveRef(context, location) {
    const ref = location.schema.$ref;
    let hashIndex = ref.indexOf("#");
    if (hashIndex === -1) {
      hashIndex = ref.length;
    }
    const schemaId = ref.slice(0, hashIndex) || location.schemaId;
    const jsonPointer = ref.slice(hashIndex) || "#";
    const schema = context.refResolver.getSchema(schemaId, jsonPointer);
    if (schema === null) {
      throw new Error(`Cannot find reference "${ref}"`);
    }
    const newLocation = new Location(schema, schemaId, jsonPointer);
    if (schema.$ref !== undefined) {
      return resolveRef(context, newLocation);
    }
    return newLocation;
  }
  function getMergedLocation(context, mergedSchemaId) {
    const mergedSchema = context.refResolver.getSchema(mergedSchemaId, "#");
    return new Location(mergedSchema, mergedSchemaId, "#");
  }
  function getSchemaId(schema, rootSchemaId) {
    if (schema.$id && schema.$id.charAt(0) !== "#") {
      return schema.$id;
    }
    return rootSchemaId;
  }
  function build(schema, options) {
    isValidSchema(schema);
    options = options || {};
    const context = {
      functions: [],
      functionsCounter: 0,
      functionsNamesBySchema: new Map,
      options,
      refResolver: new RefResolver,
      rootSchemaId: schema.$id || `__fjs_root_${schemaIdCounter++}`,
      validatorSchemasIds: new Set,
      mergedSchemasIds: new Map
    };
    const schemaId = getSchemaId(schema, context.rootSchemaId);
    if (!context.refResolver.hasSchema(schemaId)) {
      context.refResolver.addSchema(schema, context.rootSchemaId);
    }
    if (options.schema) {
      for (const key in options.schema) {
        const schema2 = options.schema[key];
        const schemaId2 = getSchemaId(schema2, key);
        if (!context.refResolver.hasSchema(schemaId2)) {
          isValidSchema(schema2, key);
          context.refResolver.addSchema(schema2, key);
        }
      }
    }
    if (options.rounding) {
      if (!validRoundingMethods.includes(options.rounding)) {
        throw new Error(`Unsupported integer rounding method ${options.rounding}`);
      }
    }
    if (options.largeArrayMechanism) {
      if (validLargeArrayMechanisms.includes(options.largeArrayMechanism)) {
        largeArrayMechanism = options.largeArrayMechanism;
      } else {
        throw new Error(`Unsupported large array mechanism ${options.largeArrayMechanism}`);
      }
    }
    if (options.largeArraySize) {
      if (typeof options.largeArraySize === "string" && Number.isFinite(Number.parseInt(options.largeArraySize, 10))) {
        largeArraySize = Number.parseInt(options.largeArraySize, 10);
      } else if (typeof options.largeArraySize === "number" && Number.isInteger(options.largeArraySize)) {
        largeArraySize = options.largeArraySize;
      } else if (typeof options.largeArraySize === "bigint") {
        largeArraySize = Number(options.largeArraySize);
      } else {
        throw new Error(`Unsupported large array size. Expected integer-like, got ${typeof options.largeArraySize} with value ${options.largeArraySize}`);
      }
    }
    const location = new Location(schema, context.rootSchemaId);
    const code = buildValue(context, location, "input");
    let contextFunctionCode = `
    const JSON_STR_BEGIN_OBJECT = '{'
    const JSON_STR_END_OBJECT = '}'
    const JSON_STR_BEGIN_ARRAY = '['
    const JSON_STR_END_ARRAY = ']'
    const JSON_STR_COMMA = ','
    const JSON_STR_COLONS = ':'
    const JSON_STR_QUOTE = '"'
    const JSON_STR_EMPTY_OBJECT = JSON_STR_BEGIN_OBJECT + JSON_STR_END_OBJECT
    const JSON_STR_EMPTY_ARRAY = JSON_STR_BEGIN_ARRAY + JSON_STR_END_ARRAY
    const JSON_STR_EMPTY_STRING = JSON_STR_QUOTE + JSON_STR_QUOTE
    const JSON_STR_NULL = 'null'
  `;
    if (code === "json += anonymous0(input)") {
      contextFunctionCode += `
    ${context.functions.join(`
`)}
    const main = anonymous0
    return main
    `;
    } else {
      contextFunctionCode += `
    function main (input) {
      let json = ''
      ${code}
      return json
    }
    ${context.functions.join(`
`)}
    return main
    `;
    }
    const serializer = new Serializer(options);
    const validator = new Validator(options.ajv);
    for (const schemaId2 of context.validatorSchemasIds) {
      const schema2 = context.refResolver.getSchema(schemaId2);
      validator.addSchema(schema2, schemaId2);
      const dependencies = context.refResolver.getSchemaDependencies(schemaId2);
      for (const [schemaId3, schema3] of Object.entries(dependencies)) {
        validator.addSchema(schema3, schemaId3);
      }
    }
    if (options.debugMode) {
      options.mode = "debug";
    }
    if (options.mode === "debug") {
      return {
        validator,
        serializer,
        code: `validator
serializer
${contextFunctionCode}`,
        ajv: validator.ajv
      };
    }
    const contextFunc = new Function("validator", "serializer", contextFunctionCode);
    if (options.mode === "standalone") {
      const buildStandaloneCode = require_standalone();
      return buildStandaloneCode(contextFunc, context, serializer, validator);
    }
    return contextFunc(validator, serializer);
  }
  var objectKeywords = [
    "properties",
    "required",
    "additionalProperties",
    "patternProperties",
    "maxProperties",
    "minProperties",
    "dependencies"
  ];
  var arrayKeywords = [
    "items",
    "additionalItems",
    "maxItems",
    "minItems",
    "uniqueItems",
    "contains"
  ];
  var stringKeywords = [
    "maxLength",
    "minLength",
    "pattern"
  ];
  var numberKeywords = [
    "multipleOf",
    "maximum",
    "exclusiveMaximum",
    "minimum",
    "exclusiveMinimum"
  ];
  function inferTypeByKeyword(schema) {
    for (const keyword of objectKeywords) {
      if (keyword in schema)
        return "object";
    }
    for (const keyword of arrayKeywords) {
      if (keyword in schema)
        return "array";
    }
    for (const keyword of stringKeywords) {
      if (keyword in schema)
        return "string";
    }
    for (const keyword of numberKeywords) {
      if (keyword in schema)
        return "number";
    }
    return schema.type;
  }
  function buildExtraObjectPropertiesSerializer(context, location, addComma) {
    const schema = location.schema;
    const propertiesKeys = Object.keys(schema.properties || {});
    let code = `
    const propertiesKeys = ${JSON.stringify(propertiesKeys)}
    for (const [key, value] of Object.entries(obj)) {
      if (
        propertiesKeys.includes(key) ||
        value === undefined ||
        typeof value === 'function' ||
        typeof value === 'symbol'
      ) continue
  `;
    const patternPropertiesLocation = location.getPropertyLocation("patternProperties");
    const patternPropertiesSchema = patternPropertiesLocation.schema;
    if (patternPropertiesSchema !== undefined) {
      for (const propertyKey in patternPropertiesSchema) {
        const propertyLocation = patternPropertiesLocation.getPropertyLocation(propertyKey);
        code += `
        if (/${propertyKey.replace(/\\*\//g, "\\/")}/.test(key)) {
          ${addComma}
          json += serializer.asString(key) + JSON_STR_COLONS
          ${buildValue(context, propertyLocation, "value")}
          continue
        }
      `;
      }
    }
    const additionalPropertiesLocation = location.getPropertyLocation("additionalProperties");
    const additionalPropertiesSchema = additionalPropertiesLocation.schema;
    if (additionalPropertiesSchema !== undefined) {
      if (additionalPropertiesSchema === true) {
        code += `
        ${addComma}
        json += serializer.asString(key) + JSON_STR_COLONS + JSON.stringify(value)
      `;
      } else {
        const propertyLocation = location.getPropertyLocation("additionalProperties");
        code += `
        ${addComma}
        json += serializer.asString(key) + JSON_STR_COLONS
        ${buildValue(context, propertyLocation, "value")}
      `;
      }
    }
    code += `
    }
  `;
    return code;
  }
  function buildInnerObject(context, location) {
    const schema = location.schema;
    const propertiesLocation = location.getPropertyLocation("properties");
    const requiredProperties = schema.required || [];
    const propertiesKeys = Object.keys(schema.properties || {}).sort((key1, key2) => {
      const required1 = requiredProperties.includes(key1);
      const required2 = requiredProperties.includes(key2);
      return required1 === required2 ? 0 : required1 ? -1 : 1;
    });
    const hasRequiredProperties = requiredProperties.includes(propertiesKeys[0]);
    let code = `let value
`;
    for (const key of requiredProperties) {
      if (!propertiesKeys.includes(key)) {
        const sanitizedKey = JSON.stringify(key);
        code += `if (obj[${sanitizedKey}] === undefined) throw new Error('${sanitizedKey.replace(/'/g, "\\'")} is required!')
`;
      }
    }
    code += `let json = JSON_STR_BEGIN_OBJECT
`;
    let addComma = "";
    if (!hasRequiredProperties) {
      code += `let addComma = false
`;
      addComma = "!addComma && (addComma = true) || (json += JSON_STR_COMMA)";
    }
    for (const key of propertiesKeys) {
      let propertyLocation = propertiesLocation.getPropertyLocation(key);
      if (propertyLocation.schema.$ref) {
        propertyLocation = resolveRef(context, propertyLocation);
      }
      const sanitizedKey = JSON.stringify(key);
      const defaultValue = propertyLocation.schema.default;
      const isRequired = requiredProperties.includes(key);
      code += `
      value = obj[${sanitizedKey}]
      if (value !== undefined) {
        ${addComma}
        json += ${JSON.stringify(sanitizedKey + ":")}
        ${buildValue(context, propertyLocation, "value")}
      }`;
      if (defaultValue !== undefined) {
        code += ` else {
        ${addComma}
        json += ${JSON.stringify(sanitizedKey + ":" + JSON.stringify(defaultValue))}
      }
      `;
      } else if (isRequired) {
        code += ` else {
        throw new Error('${sanitizedKey.replace(/'/g, "\\'")} is required!')
      }
      `;
      } else {
        code += `
`;
      }
      if (hasRequiredProperties) {
        addComma = "json += ','";
      }
    }
    if (schema.patternProperties || schema.additionalProperties) {
      code += buildExtraObjectPropertiesSerializer(context, location, addComma);
    }
    code += `
    return json + JSON_STR_END_OBJECT
  `;
    return code;
  }
  function mergeLocations(context, mergedSchemaId, mergedLocations) {
    for (let i = 0;i < mergedLocations.length; i++) {
      const location = mergedLocations[i];
      const schema = location.schema;
      if (schema.$ref) {
        mergedLocations[i] = resolveRef(context, location);
      }
    }
    const mergedSchemas = [];
    for (const location of mergedLocations) {
      const schema = cloneOriginSchema(context, location.schema, location.schemaId);
      delete schema.$id;
      mergedSchemas.push(schema);
    }
    const mergedSchema = mergeSchemas(mergedSchemas);
    const mergedLocation = new Location(mergedSchema, mergedSchemaId);
    context.refResolver.addSchema(mergedSchema, mergedSchemaId);
    return mergedLocation;
  }
  function cloneOriginSchema(context, schema, schemaId) {
    const clonedSchema = Array.isArray(schema) ? [] : {};
    if (schema.$id !== undefined && schema.$id.charAt(0) !== "#") {
      schemaId = schema.$id;
    }
    const mergedSchemaRef = context.mergedSchemasIds.get(schema);
    if (mergedSchemaRef) {
      context.mergedSchemasIds.set(clonedSchema, mergedSchemaRef);
    }
    for (const key in schema) {
      let value = schema[key];
      if (key === "$ref" && typeof value === "string" && value.charAt(0) === "#") {
        value = schemaId + value;
      }
      if (typeof value === "object" && value !== null) {
        value = cloneOriginSchema(context, value, schemaId);
      }
      clonedSchema[key] = value;
    }
    return clonedSchema;
  }
  function toJSON(variableName) {
    return `(${variableName} && typeof ${variableName}.toJSON === 'function')
    ? ${variableName}.toJSON()
    : ${variableName}
  `;
  }
  function buildObject(context, location) {
    const schema = location.schema;
    if (context.functionsNamesBySchema.has(schema)) {
      return context.functionsNamesBySchema.get(schema);
    }
    const functionName = generateFuncName(context);
    context.functionsNamesBySchema.set(schema, functionName);
    let schemaRef = location.getSchemaRef();
    if (schemaRef.startsWith(context.rootSchemaId)) {
      schemaRef = schemaRef.replace(context.rootSchemaId, "");
    }
    let functionCode = `
  `;
    const nullable = schema.nullable === true;
    functionCode += `
    // ${schemaRef}
    function ${functionName} (input) {
      const obj = ${toJSON("input")}
      ${!nullable ? "if (obj === null) return JSON_STR_EMPTY_OBJECT" : ""}

      ${buildInnerObject(context, location)}
    }
  `;
    context.functions.push(functionCode);
    return functionName;
  }
  function buildArray(context, location) {
    const schema = location.schema;
    let itemsLocation = location.getPropertyLocation("items");
    itemsLocation.schema = itemsLocation.schema || {};
    if (itemsLocation.schema.$ref) {
      itemsLocation = resolveRef(context, itemsLocation);
    }
    const itemsSchema = itemsLocation.schema;
    if (context.functionsNamesBySchema.has(schema)) {
      return context.functionsNamesBySchema.get(schema);
    }
    const functionName = generateFuncName(context);
    context.functionsNamesBySchema.set(schema, functionName);
    let schemaRef = location.getSchemaRef();
    if (schemaRef.startsWith(context.rootSchemaId)) {
      schemaRef = schemaRef.replace(context.rootSchemaId, "");
    }
    let functionCode = `
    function ${functionName} (obj) {
      // ${schemaRef}
  `;
    const nullable = schema.nullable === true;
    functionCode += `
    ${!nullable ? "if (obj === null) return JSON_STR_EMPTY_ARRAY" : ""}
    if (!Array.isArray(obj)) {
      throw new TypeError(\`The value of '${schemaRef}' does not match schema definition.\`)
    }
    const arrayLength = obj.length
  `;
    if (!schema.additionalItems && Array.isArray(itemsSchema)) {
      functionCode += `
      if (arrayLength > ${itemsSchema.length}) {
        throw new Error(\`Item at ${itemsSchema.length} does not match schema definition.\`)
      }
    `;
    }
    if (largeArrayMechanism === "json-stringify") {
      functionCode += `if (arrayLength >= ${largeArraySize}) return JSON.stringify(obj)
`;
    }
    functionCode += `
    const arrayEnd = arrayLength - 1
    let value
    let json = ''
  `;
    if (Array.isArray(itemsSchema)) {
      for (let i = 0;i < itemsSchema.length; i++) {
        const item = itemsSchema[i];
        functionCode += `value = obj[${i}]`;
        const tmpRes = buildValue(context, itemsLocation.getPropertyLocation(i), "value");
        functionCode += `
        if (${i} < arrayLength) {
          if (${buildArrayTypeCondition(item.type, `[${i}]`)}) {
            ${tmpRes}
            if (${i} < arrayEnd) {
              json += JSON_STR_COMMA
            }
          } else {
            throw new Error(\`Item at ${i} does not match schema definition.\`)
          }
        }
        `;
      }
      if (schema.additionalItems) {
        functionCode += `
        for (let i = ${itemsSchema.length}; i < arrayLength; i++) {
          json += JSON.stringify(obj[i])
          if (i < arrayEnd) {
            json += JSON_STR_COMMA
          }
        }`;
      }
    } else {
      const code = buildValue(context, itemsLocation, "obj[i]");
      functionCode += `
      for (let i = 0; i < arrayLength; i++) {
        ${code}
        if (i < arrayEnd) {
          json += JSON_STR_COMMA
        }
      }`;
    }
    functionCode += `
    return JSON_STR_BEGIN_ARRAY + json + JSON_STR_END_ARRAY
  }`;
    context.functions.push(functionCode);
    return functionName;
  }
  function buildArrayTypeCondition(type, accessor) {
    let condition;
    switch (type) {
      case "null":
        condition = "value === null";
        break;
      case "string":
        condition = `typeof value === 'string' ||
      value === null ||
      value instanceof Date ||
      value instanceof RegExp ||
      (
        typeof value === "object" &&
        typeof value.toString === "function" &&
        value.toString !== Object.prototype.toString
      )`;
        break;
      case "integer":
        condition = "Number.isInteger(value)";
        break;
      case "number":
        condition = "Number.isFinite(value)";
        break;
      case "boolean":
        condition = "typeof value === 'boolean'";
        break;
      case "object":
        condition = "value && typeof value === 'object' && value.constructor === Object";
        break;
      case "array":
        condition = "Array.isArray(value)";
        break;
      default:
        if (Array.isArray(type)) {
          const conditions = type.map((subType) => {
            return buildArrayTypeCondition(subType, accessor);
          });
          condition = `(${conditions.join(" || ")})`;
        }
    }
    return condition;
  }
  function generateFuncName(context) {
    return "anonymous" + context.functionsCounter++;
  }
  function buildMultiTypeSerializer(context, location, input) {
    const schema = location.schema;
    const types = schema.type.sort((t1) => t1 === "null" ? -1 : 1);
    let code = "";
    types.forEach((type, index) => {
      location.schema = { ...location.schema, type };
      const nestedResult = buildSingleTypeSerializer(context, location, input);
      const statement = index === 0 ? "if" : "else if";
      switch (type) {
        case "null":
          code += `
          ${statement} (${input} === null)
            ${nestedResult}
          `;
          break;
        case "string": {
          code += `
          ${statement}(
            typeof ${input} === "string" ||
            ${input} === null ||
            ${input} instanceof Date ||
            ${input} instanceof RegExp ||
            (
              typeof ${input} === "object" &&
              typeof ${input}.toString === "function" &&
              ${input}.toString !== Object.prototype.toString
            )
          )
            ${nestedResult}
        `;
          break;
        }
        case "array": {
          code += `
          ${statement}(Array.isArray(${input}))
            ${nestedResult}
        `;
          break;
        }
        case "integer": {
          code += `
          ${statement}(Number.isInteger(${input}) || ${input} === null)
            ${nestedResult}
        `;
          break;
        }
        default: {
          code += `
          ${statement}(typeof ${input} === "${type}" || ${input} === null)
            ${nestedResult}
        `;
          break;
        }
      }
    });
    let schemaRef = location.getSchemaRef();
    if (schemaRef.startsWith(context.rootSchemaId)) {
      schemaRef = schemaRef.replace(context.rootSchemaId, "");
    }
    code += `
    else throw new TypeError(\`The value of '${schemaRef}' does not match schema definition.\`)
  `;
    return code;
  }
  function buildSingleTypeSerializer(context, location, input) {
    const schema = location.schema;
    switch (schema.type) {
      case "null":
        return "json += JSON_STR_NULL";
      case "string": {
        if (schema.format === "date-time") {
          return `json += serializer.asDateTime(${input})`;
        } else if (schema.format === "date") {
          return `json += serializer.asDate(${input})`;
        } else if (schema.format === "time") {
          return `json += serializer.asTime(${input})`;
        } else if (schema.format === "unsafe") {
          return `json += serializer.asUnsafeString(${input})`;
        } else {
          return `
        if (typeof ${input} !== 'string') {
          if (${input} === null) {
            json += JSON_STR_EMPTY_STRING
          } else if (${input} instanceof Date) {
            json += JSON_STR_QUOTE + ${input}.toISOString() + JSON_STR_QUOTE
          } else if (${input} instanceof RegExp) {
            json += serializer.asString(${input}.source)
          } else {
            json += serializer.asString(${input}.toString())
          }
        } else {
          json += serializer.asString(${input})
        }
        `;
        }
      }
      case "integer":
        return `json += serializer.asInteger(${input})`;
      case "number":
        return `json += serializer.asNumber(${input})`;
      case "boolean":
        return `json += serializer.asBoolean(${input})`;
      case "object": {
        const funcName = buildObject(context, location);
        return `json += ${funcName}(${input})`;
      }
      case "array": {
        const funcName = buildArray(context, location);
        return `json += ${funcName}(${input})`;
      }
      case undefined:
        return `json += JSON.stringify(${input})`;
      default:
        throw new Error(`${schema.type} unsupported`);
    }
  }
  function buildConstSerializer(location, input) {
    const schema = location.schema;
    const type = schema.type;
    const hasNullType = Array.isArray(type) && type.includes("null");
    let code = "";
    if (hasNullType) {
      code += `
      if (${input} === null) {
        json += JSON_STR_NULL
      } else {
    `;
    }
    code += `json += '${JSON.stringify(schema.const).replace(SINGLE_TICK, "\\'")}'`;
    if (hasNullType) {
      code += `
      }
    `;
    }
    return code;
  }
  function buildAllOf(context, location, input) {
    const schema = location.schema;
    let mergedSchemaId = context.mergedSchemasIds.get(schema);
    if (mergedSchemaId) {
      const mergedLocation2 = getMergedLocation(context, mergedSchemaId);
      return buildValue(context, mergedLocation2, input);
    }
    mergedSchemaId = `__fjs_merged_${schemaIdCounter++}`;
    context.mergedSchemasIds.set(schema, mergedSchemaId);
    const { allOf, ...schemaWithoutAllOf } = location.schema;
    const locations = [
      new Location(schemaWithoutAllOf, location.schemaId, location.jsonPointer)
    ];
    const allOfsLocation = location.getPropertyLocation("allOf");
    for (let i = 0;i < allOf.length; i++) {
      locations.push(allOfsLocation.getPropertyLocation(i));
    }
    const mergedLocation = mergeLocations(context, mergedSchemaId, locations);
    return buildValue(context, mergedLocation, input);
  }
  function buildOneOf(context, location, input) {
    context.validatorSchemasIds.add(location.schemaId);
    const schema = location.schema;
    const type = schema.anyOf ? "anyOf" : "oneOf";
    const { [type]: oneOfs, ...schemaWithoutAnyOf } = location.schema;
    const locationWithoutOneOf = new Location(schemaWithoutAnyOf, location.schemaId, location.jsonPointer);
    const oneOfsLocation = location.getPropertyLocation(type);
    let code = "";
    for (let index = 0;index < oneOfs.length; index++) {
      const optionLocation = oneOfsLocation.getPropertyLocation(index);
      const optionSchema = optionLocation.schema;
      let mergedSchemaId = context.mergedSchemasIds.get(optionSchema);
      let mergedLocation = null;
      if (mergedSchemaId) {
        mergedLocation = getMergedLocation(context, mergedSchemaId);
      } else {
        mergedSchemaId = `__fjs_merged_${schemaIdCounter++}`;
        context.mergedSchemasIds.set(optionSchema, mergedSchemaId);
        mergedLocation = mergeLocations(context, mergedSchemaId, [
          locationWithoutOneOf,
          optionLocation
        ]);
      }
      const nestedResult = buildValue(context, mergedLocation, input);
      const schemaRef2 = optionLocation.getSchemaRef();
      code += `
      ${index === 0 ? "if" : "else if"}(validator.validate("${schemaRef2}", ${input}))
        ${nestedResult}
    `;
    }
    let schemaRef = location.getSchemaRef();
    if (schemaRef.startsWith(context.rootSchemaId)) {
      schemaRef = schemaRef.replace(context.rootSchemaId, "");
    }
    code += `
    else throw new TypeError(\`The value of '${schemaRef}' does not match schema definition.\`)
  `;
    return code;
  }
  function buildIfThenElse(context, location, input) {
    context.validatorSchemasIds.add(location.schemaId);
    const {
      if: ifSchema,
      then: thenSchema,
      else: elseSchema,
      ...schemaWithoutIfThenElse
    } = location.schema;
    const rootLocation = new Location(schemaWithoutIfThenElse, location.schemaId, location.jsonPointer);
    const ifLocation = location.getPropertyLocation("if");
    const ifSchemaRef = ifLocation.getSchemaRef();
    const thenLocation = location.getPropertyLocation("then");
    let thenMergedSchemaId = context.mergedSchemasIds.get(thenSchema);
    let thenMergedLocation = null;
    if (thenMergedSchemaId) {
      thenMergedLocation = getMergedLocation(context, thenMergedSchemaId);
    } else {
      thenMergedSchemaId = `__fjs_merged_${schemaIdCounter++}`;
      context.mergedSchemasIds.set(thenSchema, thenMergedSchemaId);
      thenMergedLocation = mergeLocations(context, thenMergedSchemaId, [
        rootLocation,
        thenLocation
      ]);
    }
    if (!elseSchema) {
      return `
      if (validator.validate("${ifSchemaRef}", ${input})) {
        ${buildValue(context, thenMergedLocation, input)}
      } else {
        ${buildValue(context, rootLocation, input)}
      }
    `;
    }
    const elseLocation = location.getPropertyLocation("else");
    let elseMergedSchemaId = context.mergedSchemasIds.get(elseSchema);
    let elseMergedLocation = null;
    if (elseMergedSchemaId) {
      elseMergedLocation = getMergedLocation(context, elseMergedSchemaId);
    } else {
      elseMergedSchemaId = `__fjs_merged_${schemaIdCounter++}`;
      context.mergedSchemasIds.set(elseSchema, elseMergedSchemaId);
      elseMergedLocation = mergeLocations(context, elseMergedSchemaId, [
        rootLocation,
        elseLocation
      ]);
    }
    return `
    if (validator.validate("${ifSchemaRef}", ${input})) {
      ${buildValue(context, thenMergedLocation, input)}
    } else {
      ${buildValue(context, elseMergedLocation, input)}
    }
  `;
  }
  function buildValue(context, location, input) {
    let schema = location.schema;
    if (typeof schema === "boolean") {
      return `json += JSON.stringify(${input})`;
    }
    if (schema.$ref) {
      location = resolveRef(context, location);
      schema = location.schema;
    }
    if (schema.allOf) {
      return buildAllOf(context, location, input);
    }
    if (schema.anyOf || schema.oneOf) {
      return buildOneOf(context, location, input);
    }
    if (schema.if && schema.then) {
      return buildIfThenElse(context, location, input);
    }
    if (schema.type === undefined) {
      const inferredType = inferTypeByKeyword(schema);
      if (inferredType) {
        schema.type = inferredType;
      }
    }
    let code = "";
    const type = schema.type;
    const nullable = schema.nullable === true;
    if (nullable) {
      code += `
      if (${input} === null) {
        json += JSON_STR_NULL
      } else {
    `;
    }
    if (schema.const !== undefined) {
      code += buildConstSerializer(location, input);
    } else if (Array.isArray(type)) {
      code += buildMultiTypeSerializer(context, location, input);
    } else {
      code += buildSingleTypeSerializer(context, location, input);
    }
    if (nullable) {
      code += `
      }
    `;
    }
    return code;
  }
  module.exports = build;
  module.exports.default = build;
  module.exports.build = build;
  module.exports.validLargeArrayMechanisms = validLargeArrayMechanisms;
  module.exports.restore = function({ code, validator, serializer }) {
    return Function.apply(null, ["validator", "serializer", code]).apply(null, [validator, serializer]);
  };
});

// node_modules/@fastify/fast-json-stringify-compiler/standalone.js
var require_standalone2 = __commonJS((exports, module) => {
  var SerializerSelector = require_fast_json_stringify_compiler();
  function StandaloneSerializer(options = { readMode: true }) {
    if (options.readMode === true && typeof options.restoreFunction !== "function") {
      throw new Error("You must provide a function for the restoreFunction-option when readMode ON");
    }
    if (options.readMode !== true && typeof options.storeFunction !== "function") {
      throw new Error("You must provide a function for the storeFunction-option when readMode OFF");
    }
    if (options.readMode === true) {
      return function wrapper() {
        return function(opts) {
          return options.restoreFunction(opts);
        };
      };
    }
    const factory = SerializerSelector();
    return function wrapper(externalSchemas, serializerOpts = {}) {
      serializerOpts.mode = "standalone";
      const compiler = factory(externalSchemas, serializerOpts);
      return function(opts) {
        const serializeFuncCode = compiler(opts);
        options.storeFunction(opts, serializeFuncCode);
        return new Function(serializeFuncCode);
      };
    };
  }
  module.exports = StandaloneSerializer;
  module.exports.default = StandaloneSerializer;
});

// node_modules/@fastify/fast-json-stringify-compiler/index.js
var require_fast_json_stringify_compiler = __commonJS((exports, module) => {
  var fastJsonStringify = require_fast_json_stringify();
  function SerializerSelector() {
    return function buildSerializerFactory(externalSchemas, serializerOpts) {
      const fjsOpts = Object.assign({}, serializerOpts, { schema: externalSchemas });
      return responseSchemaCompiler.bind(null, fjsOpts);
    };
  }
  function responseSchemaCompiler(fjsOpts, { schema }) {
    if (fjsOpts.schema && schema.$id && fjsOpts.schema[schema.$id]) {
      fjsOpts.schema = { ...fjsOpts.schema };
      delete fjsOpts.schema[schema.$id];
    }
    return fastJsonStringify(schema, fjsOpts);
  }
  module.exports = SerializerSelector;
  module.exports.default = SerializerSelector;
  module.exports.SerializerSelector = SerializerSelector;
  module.exports.StandaloneSerializer = require_standalone2();
});

// node_modules/ajv/dist/vocabularies/jtd/metadata.js
var require_metadata2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.checkMetadata = undefined;
  var util_1 = require_util();
  var def = {
    keyword: "metadata",
    schemaType: "object",
    code(cxt) {
      checkMetadata(cxt);
      const { gen, schema, it } = cxt;
      if ((0, util_1.alwaysValidSchema)(it, schema))
        return;
      const valid = gen.name("valid");
      cxt.subschema({ keyword: "metadata", jtdMetadata: true }, valid);
      cxt.ok(valid);
    }
  };
  function checkMetadata({ it, keyword }, metadata) {
    if (it.jtdMetadata !== metadata) {
      throw new Error(`JTD: "${keyword}" cannot be used in this schema location`);
    }
  }
  exports.checkMetadata = checkMetadata;
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/jtd/ref.js
var require_ref2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.hasRef = undefined;
  var compile_1 = require_compile();
  var codegen_1 = require_codegen();
  var ref_error_1 = require_ref_error();
  var names_1 = require_names();
  var ref_1 = require_ref();
  var metadata_1 = require_metadata2();
  var def = {
    keyword: "ref",
    schemaType: "string",
    code(cxt) {
      (0, metadata_1.checkMetadata)(cxt);
      const { gen, data, schema: ref, parentSchema, it } = cxt;
      const { schemaEnv: { root } } = it;
      const valid = gen.name("valid");
      if (parentSchema.nullable) {
        gen.var(valid, (0, codegen_1._)`${data} === null`);
        gen.if((0, codegen_1.not)(valid), validateJtdRef);
      } else {
        gen.var(valid, false);
        validateJtdRef();
      }
      cxt.ok(valid);
      function validateJtdRef() {
        var _a;
        const refSchema = (_a = root.schema.definitions) === null || _a === undefined ? undefined : _a[ref];
        if (!refSchema) {
          throw new ref_error_1.default(it.opts.uriResolver, "", ref, `No definition ${ref}`);
        }
        if (hasRef(refSchema) || !it.opts.inlineRefs)
          callValidate(refSchema);
        else
          inlineRefSchema(refSchema);
      }
      function callValidate(schema) {
        const sch = compile_1.compileSchema.call(it.self, new compile_1.SchemaEnv({ schema, root, schemaPath: `/definitions/${ref}` }));
        const v = (0, ref_1.getValidate)(cxt, sch);
        const errsCount = gen.const("_errs", names_1.default.errors);
        (0, ref_1.callRef)(cxt, v, sch, sch.$async);
        gen.assign(valid, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
      }
      function inlineRefSchema(schema) {
        const schName = gen.scopeValue("schema", it.opts.code.source === true ? { ref: schema, code: (0, codegen_1.stringify)(schema) } : { ref: schema });
        cxt.subschema({
          schema,
          dataTypes: [],
          schemaPath: codegen_1.nil,
          topSchemaRef: schName,
          errSchemaPath: `/definitions/${ref}`
        }, valid);
      }
    }
  };
  function hasRef(schema) {
    for (const key in schema) {
      let sch;
      if (key === "ref" || typeof (sch = schema[key]) == "object" && hasRef(sch))
        return true;
    }
    return false;
  }
  exports.hasRef = hasRef;
  exports.default = def;
});

// node_modules/ajv/dist/runtime/timestamp.js
var require_timestamp2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var DT_SEPARATOR = /t|\s/i;
  var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
  var TIME = /^(\d\d):(\d\d):(\d\d)(?:\.\d+)?(?:z|([+-]\d\d)(?::?(\d\d))?)$/i;
  var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  function validTimestamp(str, allowDate) {
    const dt = str.split(DT_SEPARATOR);
    return dt.length === 2 && validDate(dt[0]) && validTime(dt[1]) || allowDate && dt.length === 1 && validDate(dt[0]);
  }
  exports.default = validTimestamp;
  function validDate(str) {
    const matches = DATE.exec(str);
    if (!matches)
      return false;
    const y = +matches[1];
    const m = +matches[2];
    const d = +matches[3];
    return m >= 1 && m <= 12 && d >= 1 && (d <= DAYS[m] || m === 2 && d === 29 && (y % 100 === 0 ? y % 400 === 0 : y % 4 === 0));
  }
  function validTime(str) {
    const matches = TIME.exec(str);
    if (!matches)
      return false;
    const hr = +matches[1];
    const min = +matches[2];
    const sec = +matches[3];
    const tzH = +(matches[4] || 0);
    const tzM = +(matches[5] || 0);
    return hr <= 23 && min <= 59 && sec <= 59 || hr - tzH === 23 && min - tzM === 59 && sec === 60;
  }
  validTimestamp.code = 'require("ajv/dist/runtime/timestamp").default';
});

// node_modules/ajv/dist/vocabularies/jtd/error.js
var require_error2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.typeErrorParams = exports.typeErrorMessage = exports.typeError = undefined;
  var codegen_1 = require_codegen();
  function typeError(t) {
    return {
      message: (cxt) => typeErrorMessage(cxt, t),
      params: (cxt) => typeErrorParams(cxt, t)
    };
  }
  exports.typeError = typeError;
  function typeErrorMessage({ parentSchema }, t) {
    return (parentSchema === null || parentSchema === undefined ? undefined : parentSchema.nullable) ? `must be ${t} or null` : `must be ${t}`;
  }
  exports.typeErrorMessage = typeErrorMessage;
  function typeErrorParams({ parentSchema }, t) {
    return (0, codegen_1._)`{type: ${t}, nullable: ${!!(parentSchema === null || parentSchema === undefined ? undefined : parentSchema.nullable)}}`;
  }
  exports.typeErrorParams = typeErrorParams;
});

// node_modules/ajv/dist/vocabularies/jtd/type.js
var require_type = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.intRange = undefined;
  var codegen_1 = require_codegen();
  var timestamp_1 = require_timestamp2();
  var util_1 = require_util();
  var metadata_1 = require_metadata2();
  var error_1 = require_error2();
  exports.intRange = {
    int8: [-128, 127, 3],
    uint8: [0, 255, 3],
    int16: [-32768, 32767, 5],
    uint16: [0, 65535, 5],
    int32: [-2147483648, 2147483647, 10],
    uint32: [0, 4294967295, 10]
  };
  var error = {
    message: (cxt) => (0, error_1.typeErrorMessage)(cxt, cxt.schema),
    params: (cxt) => (0, error_1.typeErrorParams)(cxt, cxt.schema)
  };
  function timestampCode(cxt) {
    const { gen, data, it } = cxt;
    const { timestamp, allowDate } = it.opts;
    if (timestamp === "date")
      return (0, codegen_1._)`${data} instanceof Date `;
    const vts = (0, util_1.useFunc)(gen, timestamp_1.default);
    const allowDateArg = allowDate ? (0, codegen_1._)`, true` : codegen_1.nil;
    const validString = (0, codegen_1._)`typeof ${data} == "string" && ${vts}(${data}${allowDateArg})`;
    return timestamp === "string" ? validString : (0, codegen_1.or)((0, codegen_1._)`${data} instanceof Date`, validString);
  }
  var def = {
    keyword: "type",
    schemaType: "string",
    error,
    code(cxt) {
      (0, metadata_1.checkMetadata)(cxt);
      const { data, schema, parentSchema, it } = cxt;
      let cond;
      switch (schema) {
        case "boolean":
        case "string":
          cond = (0, codegen_1._)`typeof ${data} == ${schema}`;
          break;
        case "timestamp": {
          cond = timestampCode(cxt);
          break;
        }
        case "float32":
        case "float64":
          cond = (0, codegen_1._)`typeof ${data} == "number"`;
          break;
        default: {
          const sch = schema;
          cond = (0, codegen_1._)`typeof ${data} == "number" && isFinite(${data}) && !(${data} % 1)`;
          if (!it.opts.int32range && (sch === "int32" || sch === "uint32")) {
            if (sch === "uint32")
              cond = (0, codegen_1._)`${cond} && ${data} >= 0`;
          } else {
            const [min, max] = exports.intRange[sch];
            cond = (0, codegen_1._)`${cond} && ${data} >= ${min} && ${data} <= ${max}`;
          }
        }
      }
      cxt.pass(parentSchema.nullable ? (0, codegen_1.or)((0, codegen_1._)`${data} === null`, cond) : cond);
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/jtd/nullable.js
var require_nullable = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.checkNullableObject = exports.checkNullable = undefined;
  var codegen_1 = require_codegen();
  function checkNullable({ gen, data, parentSchema }, cond = codegen_1.nil) {
    const valid = gen.name("valid");
    if (parentSchema.nullable) {
      gen.let(valid, (0, codegen_1._)`${data} === null`);
      cond = (0, codegen_1.not)(valid);
    } else {
      gen.let(valid, false);
    }
    return [valid, cond];
  }
  exports.checkNullable = checkNullable;
  function checkNullableObject(cxt, cond) {
    const [valid, cond_] = checkNullable(cxt, cond);
    return [valid, (0, codegen_1._)`${cond_} && typeof ${cxt.data} == "object" && !Array.isArray(${cxt.data})`];
  }
  exports.checkNullableObject = checkNullableObject;
});

// node_modules/ajv/dist/vocabularies/jtd/enum.js
var require_enum2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var metadata_1 = require_metadata2();
  var nullable_1 = require_nullable();
  var error = {
    message: "must be equal to one of the allowed values",
    params: ({ schemaCode }) => (0, codegen_1._)`{allowedValues: ${schemaCode}}`
  };
  var def = {
    keyword: "enum",
    schemaType: "array",
    error,
    code(cxt) {
      (0, metadata_1.checkMetadata)(cxt);
      const { gen, data, schema, schemaValue, parentSchema, it } = cxt;
      if (schema.length === 0)
        throw new Error("enum must have non-empty array");
      if (schema.length !== new Set(schema).size)
        throw new Error("enum items must be unique");
      let valid;
      const isString = (0, codegen_1._)`typeof ${data} == "string"`;
      if (schema.length >= it.opts.loopEnum) {
        let cond;
        [valid, cond] = (0, nullable_1.checkNullable)(cxt, isString);
        gen.if(cond, loopEnum);
      } else {
        if (!Array.isArray(schema))
          throw new Error("ajv implementation error");
        valid = (0, codegen_1.and)(isString, (0, codegen_1.or)(...schema.map((value) => (0, codegen_1._)`${data} === ${value}`)));
        if (parentSchema.nullable)
          valid = (0, codegen_1.or)((0, codegen_1._)`${data} === null`, valid);
      }
      cxt.pass(valid);
      function loopEnum() {
        gen.forOf("v", schemaValue, (v) => gen.if((0, codegen_1._)`${valid} = ${data} === ${v}`, () => gen.break()));
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/jtd/elements.js
var require_elements = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var util_1 = require_util();
  var code_1 = require_code2();
  var codegen_1 = require_codegen();
  var metadata_1 = require_metadata2();
  var nullable_1 = require_nullable();
  var error_1 = require_error2();
  var def = {
    keyword: "elements",
    schemaType: "object",
    error: (0, error_1.typeError)("array"),
    code(cxt) {
      (0, metadata_1.checkMetadata)(cxt);
      const { gen, data, schema, it } = cxt;
      if ((0, util_1.alwaysValidSchema)(it, schema))
        return;
      const [valid] = (0, nullable_1.checkNullable)(cxt);
      gen.if((0, codegen_1.not)(valid), () => gen.if((0, codegen_1._)`Array.isArray(${data})`, () => gen.assign(valid, (0, code_1.validateArray)(cxt)), () => cxt.error()));
      cxt.ok(valid);
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/jtd/properties.js
var require_properties2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.validateProperties = exports.error = undefined;
  var code_1 = require_code2();
  var util_1 = require_util();
  var codegen_1 = require_codegen();
  var metadata_1 = require_metadata2();
  var nullable_1 = require_nullable();
  var error_1 = require_error2();
  var PropError;
  (function(PropError2) {
    PropError2["Additional"] = "additional";
    PropError2["Missing"] = "missing";
  })(PropError || (PropError = {}));
  exports.error = {
    message: (cxt) => {
      const { params } = cxt;
      return params.propError ? params.propError === PropError.Additional ? "must NOT have additional properties" : `must have property '${params.missingProperty}'` : (0, error_1.typeErrorMessage)(cxt, "object");
    },
    params: (cxt) => {
      const { params } = cxt;
      return params.propError ? params.propError === PropError.Additional ? (0, codegen_1._)`{error: ${params.propError}, additionalProperty: ${params.additionalProperty}}` : (0, codegen_1._)`{error: ${params.propError}, missingProperty: ${params.missingProperty}}` : (0, error_1.typeErrorParams)(cxt, "object");
    }
  };
  var def = {
    keyword: "properties",
    schemaType: "object",
    error: exports.error,
    code: validateProperties
  };
  function validateProperties(cxt) {
    (0, metadata_1.checkMetadata)(cxt);
    const { gen, data, parentSchema, it } = cxt;
    const { additionalProperties, nullable } = parentSchema;
    if (it.jtdDiscriminator && nullable)
      throw new Error("JTD: nullable inside discriminator mapping");
    if (commonProperties()) {
      throw new Error("JTD: properties and optionalProperties have common members");
    }
    const [allProps, properties] = schemaProperties("properties");
    const [allOptProps, optProperties] = schemaProperties("optionalProperties");
    if (properties.length === 0 && optProperties.length === 0 && additionalProperties) {
      return;
    }
    const [valid, cond] = it.jtdDiscriminator === undefined ? (0, nullable_1.checkNullableObject)(cxt, data) : [gen.let("valid", false), true];
    gen.if(cond, () => gen.assign(valid, true).block(() => {
      validateProps(properties, "properties", true);
      validateProps(optProperties, "optionalProperties");
      if (!additionalProperties)
        validateAdditional();
    }));
    cxt.pass(valid);
    function commonProperties() {
      const props = parentSchema.properties;
      const optProps = parentSchema.optionalProperties;
      if (!(props && optProps))
        return false;
      for (const p in props) {
        if (Object.prototype.hasOwnProperty.call(optProps, p))
          return true;
      }
      return false;
    }
    function schemaProperties(keyword) {
      const schema = parentSchema[keyword];
      const allPs = schema ? (0, code_1.allSchemaProperties)(schema) : [];
      if (it.jtdDiscriminator && allPs.some((p) => p === it.jtdDiscriminator)) {
        throw new Error(`JTD: discriminator tag used in ${keyword}`);
      }
      const ps = allPs.filter((p) => !(0, util_1.alwaysValidSchema)(it, schema[p]));
      return [allPs, ps];
    }
    function validateProps(props, keyword, required) {
      const _valid = gen.var("valid");
      for (const prop of props) {
        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => applyPropertySchema(prop, keyword, _valid), () => missingProperty(prop));
        cxt.ok(_valid);
      }
      function missingProperty(prop) {
        if (required) {
          gen.assign(_valid, false);
          cxt.error(false, { propError: PropError.Missing, missingProperty: prop }, { schemaPath: prop });
        } else {
          gen.assign(_valid, true);
        }
      }
    }
    function applyPropertySchema(prop, keyword, _valid) {
      cxt.subschema({
        keyword,
        schemaProp: prop,
        dataProp: prop
      }, _valid);
    }
    function validateAdditional() {
      gen.forIn("key", data, (key) => {
        const addProp = isAdditional(key, allProps, "properties", it.jtdDiscriminator);
        const addOptProp = isAdditional(key, allOptProps, "optionalProperties");
        const extra = addProp === true ? addOptProp : addOptProp === true ? addProp : (0, codegen_1.and)(addProp, addOptProp);
        gen.if(extra, () => {
          if (it.opts.removeAdditional) {
            gen.code((0, codegen_1._)`delete ${data}[${key}]`);
          } else {
            cxt.error(false, { propError: PropError.Additional, additionalProperty: key }, { instancePath: key, parentSchema: true });
            if (!it.opts.allErrors)
              gen.break();
          }
        });
      });
    }
    function isAdditional(key, props, keyword, jtdDiscriminator) {
      let additional;
      if (props.length > 8) {
        const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema[keyword], keyword);
        additional = (0, codegen_1.not)((0, code_1.isOwnProperty)(gen, propsSchema, key));
        if (jtdDiscriminator !== undefined) {
          additional = (0, codegen_1.and)(additional, (0, codegen_1._)`${key} !== ${jtdDiscriminator}`);
        }
      } else if (props.length || jtdDiscriminator !== undefined) {
        const ps = jtdDiscriminator === undefined ? props : [jtdDiscriminator].concat(props);
        additional = (0, codegen_1.and)(...ps.map((p) => (0, codegen_1._)`${key} !== ${p}`));
      } else {
        additional = true;
      }
      return additional;
    }
  }
  exports.validateProperties = validateProperties;
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/jtd/optionalProperties.js
var require_optionalProperties = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var properties_1 = require_properties2();
  var def = {
    keyword: "optionalProperties",
    schemaType: "object",
    error: properties_1.error,
    code(cxt) {
      if (cxt.parentSchema.properties)
        return;
      (0, properties_1.validateProperties)(cxt);
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/jtd/discriminator.js
var require_discriminator2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var codegen_1 = require_codegen();
  var metadata_1 = require_metadata2();
  var nullable_1 = require_nullable();
  var error_1 = require_error2();
  var types_1 = require_types();
  var error = {
    message: (cxt) => {
      const { schema, params } = cxt;
      return params.discrError ? params.discrError === types_1.DiscrError.Tag ? `tag "${schema}" must be string` : `value of tag "${schema}" must be in mapping` : (0, error_1.typeErrorMessage)(cxt, "object");
    },
    params: (cxt) => {
      const { schema, params } = cxt;
      return params.discrError ? (0, codegen_1._)`{error: ${params.discrError}, tag: ${schema}, tagValue: ${params.tag}}` : (0, error_1.typeErrorParams)(cxt, "object");
    }
  };
  var def = {
    keyword: "discriminator",
    schemaType: "string",
    implements: ["mapping"],
    error,
    code(cxt) {
      (0, metadata_1.checkMetadata)(cxt);
      const { gen, data, schema, parentSchema } = cxt;
      const [valid, cond] = (0, nullable_1.checkNullableObject)(cxt, data);
      gen.if(cond);
      validateDiscriminator();
      gen.elseIf((0, codegen_1.not)(valid));
      cxt.error();
      gen.endIf();
      cxt.ok(valid);
      function validateDiscriminator() {
        const tag = gen.const("tag", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(schema)}`);
        gen.if((0, codegen_1._)`${tag} === undefined`);
        cxt.error(false, { discrError: types_1.DiscrError.Tag, tag });
        gen.elseIf((0, codegen_1._)`typeof ${tag} == "string"`);
        validateMapping(tag);
        gen.else();
        cxt.error(false, { discrError: types_1.DiscrError.Tag, tag }, { instancePath: schema });
        gen.endIf();
      }
      function validateMapping(tag) {
        gen.if(false);
        for (const tagValue in parentSchema.mapping) {
          gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
          gen.assign(valid, applyTagSchema(tagValue));
        }
        gen.else();
        cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag }, { instancePath: schema, schemaPath: "mapping", parentSchema: true });
        gen.endIf();
      }
      function applyTagSchema(schemaProp) {
        const _valid = gen.name("valid");
        cxt.subschema({
          keyword: "mapping",
          schemaProp,
          jtdDiscriminator: schema
        }, _valid);
        return _valid;
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/jtd/values.js
var require_values = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var util_1 = require_util();
  var codegen_1 = require_codegen();
  var metadata_1 = require_metadata2();
  var nullable_1 = require_nullable();
  var error_1 = require_error2();
  var def = {
    keyword: "values",
    schemaType: "object",
    error: (0, error_1.typeError)("object"),
    code(cxt) {
      (0, metadata_1.checkMetadata)(cxt);
      const { gen, data, schema, it } = cxt;
      const [valid, cond] = (0, nullable_1.checkNullableObject)(cxt, data);
      if ((0, util_1.alwaysValidSchema)(it, schema)) {
        gen.if((0, codegen_1.not)((0, codegen_1.or)(cond, valid)), () => cxt.error());
      } else {
        gen.if(cond);
        gen.assign(valid, validateMap());
        gen.elseIf((0, codegen_1.not)(valid));
        cxt.error();
        gen.endIf();
      }
      cxt.ok(valid);
      function validateMap() {
        const _valid = gen.name("valid");
        if (it.allErrors) {
          const validMap = gen.let("valid", true);
          validateValues(() => gen.assign(validMap, false));
          return validMap;
        }
        gen.var(_valid, true);
        validateValues(() => gen.break());
        return _valid;
        function validateValues(notValid) {
          gen.forIn("key", data, (key) => {
            cxt.subschema({
              keyword: "values",
              dataProp: key,
              dataPropType: util_1.Type.Str
            }, _valid);
            gen.if((0, codegen_1.not)(_valid), notValid);
          });
        }
      }
    }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/jtd/union.js
var require_union = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var code_1 = require_code2();
  var def = {
    keyword: "union",
    schemaType: "array",
    trackErrors: true,
    code: code_1.validateUnion,
    error: { message: "must match a schema in union" }
  };
  exports.default = def;
});

// node_modules/ajv/dist/vocabularies/jtd/index.js
var require_jtd = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var ref_1 = require_ref2();
  var type_1 = require_type();
  var enum_1 = require_enum2();
  var elements_1 = require_elements();
  var properties_1 = require_properties2();
  var optionalProperties_1 = require_optionalProperties();
  var discriminator_1 = require_discriminator2();
  var values_1 = require_values();
  var union_1 = require_union();
  var metadata_1 = require_metadata2();
  var jtdVocabulary = [
    "definitions",
    ref_1.default,
    type_1.default,
    enum_1.default,
    elements_1.default,
    properties_1.default,
    optionalProperties_1.default,
    discriminator_1.default,
    values_1.default,
    union_1.default,
    metadata_1.default,
    { keyword: "additionalProperties", schemaType: "boolean" },
    { keyword: "nullable", schemaType: "boolean" }
  ];
  exports.default = jtdVocabulary;
});

// node_modules/ajv/dist/refs/jtd-schema.js
var require_jtd_schema = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var shared = (root) => {
    const sch = {
      nullable: { type: "boolean" },
      metadata: {
        optionalProperties: {
          union: { elements: { ref: "schema" } }
        },
        additionalProperties: true
      }
    };
    if (root)
      sch.definitions = { values: { ref: "schema" } };
    return sch;
  };
  var emptyForm = (root) => ({
    optionalProperties: shared(root)
  });
  var refForm = (root) => ({
    properties: {
      ref: { type: "string" }
    },
    optionalProperties: shared(root)
  });
  var typeForm = (root) => ({
    properties: {
      type: {
        enum: [
          "boolean",
          "timestamp",
          "string",
          "float32",
          "float64",
          "int8",
          "uint8",
          "int16",
          "uint16",
          "int32",
          "uint32"
        ]
      }
    },
    optionalProperties: shared(root)
  });
  var enumForm = (root) => ({
    properties: {
      enum: { elements: { type: "string" } }
    },
    optionalProperties: shared(root)
  });
  var elementsForm = (root) => ({
    properties: {
      elements: { ref: "schema" }
    },
    optionalProperties: shared(root)
  });
  var propertiesForm = (root) => ({
    properties: {
      properties: { values: { ref: "schema" } }
    },
    optionalProperties: {
      optionalProperties: { values: { ref: "schema" } },
      additionalProperties: { type: "boolean" },
      ...shared(root)
    }
  });
  var optionalPropertiesForm = (root) => ({
    properties: {
      optionalProperties: { values: { ref: "schema" } }
    },
    optionalProperties: {
      additionalProperties: { type: "boolean" },
      ...shared(root)
    }
  });
  var discriminatorForm = (root) => ({
    properties: {
      discriminator: { type: "string" },
      mapping: {
        values: {
          metadata: {
            union: [propertiesForm(false), optionalPropertiesForm(false)]
          }
        }
      }
    },
    optionalProperties: shared(root)
  });
  var valuesForm = (root) => ({
    properties: {
      values: { ref: "schema" }
    },
    optionalProperties: shared(root)
  });
  var schema = (root) => ({
    metadata: {
      union: [
        emptyForm,
        refForm,
        typeForm,
        enumForm,
        elementsForm,
        propertiesForm,
        optionalPropertiesForm,
        discriminatorForm,
        valuesForm
      ].map((s) => s(root))
    }
  });
  var jtdMetaSchema = {
    definitions: {
      schema: schema(false)
    },
    ...schema(true)
  };
  exports.default = jtdMetaSchema;
});

// node_modules/ajv/dist/compile/jtd/types.js
var require_types2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.jtdForms = undefined;
  exports.jtdForms = [
    "elements",
    "values",
    "discriminator",
    "properties",
    "optionalProperties",
    "enum",
    "type",
    "ref"
  ];
});

// node_modules/ajv/dist/runtime/quote.js
var require_quote = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var rxEscapable = /[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
  var escaped = {
    "\b": "\\b",
    "\t": "\\t",
    "\n": "\\n",
    "\f": "\\f",
    "\r": "\\r",
    '"': "\\\"",
    "\\": "\\\\"
  };
  function quote(s) {
    rxEscapable.lastIndex = 0;
    return '"' + (rxEscapable.test(s) ? s.replace(rxEscapable, (a) => {
      const c = escaped[a];
      return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
    }) : s) + '"';
  }
  exports.default = quote;
  quote.code = 'require("ajv/dist/runtime/quote").default';
});

// node_modules/ajv/dist/compile/jtd/serialize.js
var require_serialize2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var types_1 = require_types2();
  var __1 = require_compile();
  var codegen_1 = require_codegen();
  var ref_error_1 = require_ref_error();
  var names_1 = require_names();
  var code_1 = require_code2();
  var ref_1 = require_ref2();
  var util_1 = require_util();
  var quote_1 = require_quote();
  var genSerialize = {
    elements: serializeElements,
    values: serializeValues,
    discriminator: serializeDiscriminator,
    properties: serializeProperties,
    optionalProperties: serializeProperties,
    enum: serializeString,
    type: serializeType,
    ref: serializeRef
  };
  function compileSerializer(sch, definitions) {
    const _sch = __1.getCompilingSchema.call(this, sch);
    if (_sch)
      return _sch;
    const { es5, lines } = this.opts.code;
    const { ownProperties } = this.opts;
    const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
    const serializeName = gen.scopeName("serialize");
    const cxt = {
      self: this,
      gen,
      schema: sch.schema,
      schemaEnv: sch,
      definitions,
      data: names_1.default.data
    };
    let sourceCode;
    try {
      this._compilations.add(sch);
      sch.serializeName = serializeName;
      gen.func(serializeName, names_1.default.data, false, () => {
        gen.let(names_1.default.json, (0, codegen_1.str)``);
        serializeCode(cxt);
        gen.return(names_1.default.json);
      });
      gen.optimize(this.opts.code.optimize);
      const serializeFuncCode = gen.toString();
      sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${serializeFuncCode}`;
      const makeSerialize = new Function(`${names_1.default.scope}`, sourceCode);
      const serialize = makeSerialize(this.scope.get());
      this.scope.value(serializeName, { ref: serialize });
      sch.serialize = serialize;
    } catch (e) {
      if (sourceCode)
        this.logger.error("Error compiling serializer, function code:", sourceCode);
      delete sch.serialize;
      delete sch.serializeName;
      throw e;
    } finally {
      this._compilations.delete(sch);
    }
    return sch;
  }
  exports.default = compileSerializer;
  function serializeCode(cxt) {
    let form;
    for (const key of types_1.jtdForms) {
      if (key in cxt.schema) {
        form = key;
        break;
      }
    }
    serializeNullable(cxt, form ? genSerialize[form] : serializeEmpty);
  }
  function serializeNullable(cxt, serializeForm) {
    const { gen, schema, data } = cxt;
    if (!schema.nullable)
      return serializeForm(cxt);
    gen.if((0, codegen_1._)`${data} === undefined || ${data} === null`, () => gen.add(names_1.default.json, (0, codegen_1._)`"null"`), () => serializeForm(cxt));
  }
  function serializeElements(cxt) {
    const { gen, schema, data } = cxt;
    gen.add(names_1.default.json, (0, codegen_1.str)`[`);
    const first = gen.let("first", true);
    gen.forOf("el", data, (el) => {
      addComma(cxt, first);
      serializeCode({ ...cxt, schema: schema.elements, data: el });
    });
    gen.add(names_1.default.json, (0, codegen_1.str)`]`);
  }
  function serializeValues(cxt) {
    const { gen, schema, data } = cxt;
    gen.add(names_1.default.json, (0, codegen_1.str)`{`);
    const first = gen.let("first", true);
    gen.forIn("key", data, (key) => serializeKeyValue(cxt, key, schema.values, first));
    gen.add(names_1.default.json, (0, codegen_1.str)`}`);
  }
  function serializeKeyValue(cxt, key, schema, first) {
    const { gen, data } = cxt;
    addComma(cxt, first);
    serializeString({ ...cxt, data: key });
    gen.add(names_1.default.json, (0, codegen_1.str)`:`);
    const value = gen.const("value", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(key)}`);
    serializeCode({ ...cxt, schema, data: value });
  }
  function serializeDiscriminator(cxt) {
    const { gen, schema, data } = cxt;
    const { discriminator } = schema;
    gen.add(names_1.default.json, (0, codegen_1.str)`{${JSON.stringify(discriminator)}:`);
    const tag = gen.const("tag", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(discriminator)}`);
    serializeString({ ...cxt, data: tag });
    gen.if(false);
    for (const tagValue in schema.mapping) {
      gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
      const sch = schema.mapping[tagValue];
      serializeSchemaProperties({ ...cxt, schema: sch }, discriminator);
    }
    gen.endIf();
    gen.add(names_1.default.json, (0, codegen_1.str)`}`);
  }
  function serializeProperties(cxt) {
    const { gen } = cxt;
    gen.add(names_1.default.json, (0, codegen_1.str)`{`);
    serializeSchemaProperties(cxt);
    gen.add(names_1.default.json, (0, codegen_1.str)`}`);
  }
  function serializeSchemaProperties(cxt, discriminator) {
    const { gen, schema, data } = cxt;
    const { properties, optionalProperties } = schema;
    const props = keys(properties);
    const optProps = keys(optionalProperties);
    const allProps = allProperties(props.concat(optProps));
    let first = !discriminator;
    let firstProp;
    for (const key of props) {
      if (first)
        first = false;
      else
        gen.add(names_1.default.json, (0, codegen_1.str)`,`);
      serializeProperty(key, properties[key], keyValue(key));
    }
    if (first)
      firstProp = gen.let("first", true);
    for (const key of optProps) {
      const value = keyValue(key);
      gen.if((0, codegen_1.and)((0, codegen_1._)`${value} !== undefined`, (0, code_1.isOwnProperty)(gen, data, key)), () => {
        addComma(cxt, firstProp);
        serializeProperty(key, optionalProperties[key], value);
      });
    }
    if (schema.additionalProperties) {
      gen.forIn("key", data, (key) => gen.if(isAdditional(key, allProps), () => serializeKeyValue(cxt, key, {}, firstProp)));
    }
    function keys(ps) {
      return ps ? Object.keys(ps) : [];
    }
    function allProperties(ps) {
      if (discriminator)
        ps.push(discriminator);
      if (new Set(ps).size !== ps.length) {
        throw new Error("JTD: properties/optionalProperties/disciminator overlap");
      }
      return ps;
    }
    function keyValue(key) {
      return gen.const("value", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(key)}`);
    }
    function serializeProperty(key, propSchema, value) {
      gen.add(names_1.default.json, (0, codegen_1.str)`${JSON.stringify(key)}:`);
      serializeCode({ ...cxt, schema: propSchema, data: value });
    }
    function isAdditional(key, ps) {
      return ps.length ? (0, codegen_1.and)(...ps.map((p) => (0, codegen_1._)`${key} !== ${p}`)) : true;
    }
  }
  function serializeType(cxt) {
    const { gen, schema, data } = cxt;
    switch (schema.type) {
      case "boolean":
        gen.add(names_1.default.json, (0, codegen_1._)`${data} ? "true" : "false"`);
        break;
      case "string":
        serializeString(cxt);
        break;
      case "timestamp":
        gen.if((0, codegen_1._)`${data} instanceof Date`, () => gen.add(names_1.default.json, (0, codegen_1._)`'"' + ${data}.toISOString() + '"'`), () => serializeString(cxt));
        break;
      default:
        serializeNumber(cxt);
    }
  }
  function serializeString({ gen, data }) {
    gen.add(names_1.default.json, (0, codegen_1._)`${(0, util_1.useFunc)(gen, quote_1.default)}(${data})`);
  }
  function serializeNumber({ gen, data }) {
    gen.add(names_1.default.json, (0, codegen_1._)`"" + ${data}`);
  }
  function serializeRef(cxt) {
    const { gen, self, data, definitions, schema, schemaEnv } = cxt;
    const { ref } = schema;
    const refSchema = definitions[ref];
    if (!refSchema)
      throw new ref_error_1.default(self.opts.uriResolver, "", ref, `No definition ${ref}`);
    if (!(0, ref_1.hasRef)(refSchema))
      return serializeCode({ ...cxt, schema: refSchema });
    const { root } = schemaEnv;
    const sch = compileSerializer.call(self, new __1.SchemaEnv({ schema: refSchema, root }), definitions);
    gen.add(names_1.default.json, (0, codegen_1._)`${getSerialize(gen, sch)}(${data})`);
  }
  function getSerialize(gen, sch) {
    return sch.serialize ? gen.scopeValue("serialize", { ref: sch.serialize }) : (0, codegen_1._)`${gen.scopeValue("wrapper", { ref: sch })}.serialize`;
  }
  function serializeEmpty({ gen, data }) {
    gen.add(names_1.default.json, (0, codegen_1._)`JSON.stringify(${data})`);
  }
  function addComma({ gen }, first) {
    if (first) {
      gen.if(first, () => gen.assign(first, false), () => gen.add(names_1.default.json, (0, codegen_1.str)`,`));
    } else {
      gen.add(names_1.default.json, (0, codegen_1.str)`,`);
    }
  }
});

// node_modules/ajv/dist/runtime/parseJson.js
var require_parseJson = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.parseJsonString = exports.parseJsonNumber = exports.parseJson = undefined;
  var rxParseJson = /position\s(\d+)(?: \(line \d+ column \d+\))?$/;
  function parseJson(s, pos) {
    let endPos;
    parseJson.message = undefined;
    let matches;
    if (pos)
      s = s.slice(pos);
    try {
      parseJson.position = pos + s.length;
      return JSON.parse(s);
    } catch (e) {
      matches = rxParseJson.exec(e.message);
      if (!matches) {
        parseJson.message = "unexpected end";
        return;
      }
      endPos = +matches[1];
      const c = s[endPos];
      s = s.slice(0, endPos);
      parseJson.position = pos + endPos;
      try {
        return JSON.parse(s);
      } catch (e1) {
        parseJson.message = `unexpected token ${c}`;
        return;
      }
    }
  }
  exports.parseJson = parseJson;
  parseJson.message = undefined;
  parseJson.position = 0;
  parseJson.code = 'require("ajv/dist/runtime/parseJson").parseJson';
  function parseJsonNumber(s, pos, maxDigits) {
    let numStr = "";
    let c;
    parseJsonNumber.message = undefined;
    if (s[pos] === "-") {
      numStr += "-";
      pos++;
    }
    if (s[pos] === "0") {
      numStr += "0";
      pos++;
    } else {
      if (!parseDigits(maxDigits)) {
        errorMessage();
        return;
      }
    }
    if (maxDigits) {
      parseJsonNumber.position = pos;
      return +numStr;
    }
    if (s[pos] === ".") {
      numStr += ".";
      pos++;
      if (!parseDigits()) {
        errorMessage();
        return;
      }
    }
    if (c = s[pos], c === "e" || c === "E") {
      numStr += "e";
      pos++;
      if (c = s[pos], c === "+" || c === "-") {
        numStr += c;
        pos++;
      }
      if (!parseDigits()) {
        errorMessage();
        return;
      }
    }
    parseJsonNumber.position = pos;
    return +numStr;
    function parseDigits(maxLen) {
      let digit = false;
      while (c = s[pos], c >= "0" && c <= "9" && (maxLen === undefined || maxLen-- > 0)) {
        digit = true;
        numStr += c;
        pos++;
      }
      return digit;
    }
    function errorMessage() {
      parseJsonNumber.position = pos;
      parseJsonNumber.message = pos < s.length ? `unexpected token ${s[pos]}` : "unexpected end";
    }
  }
  exports.parseJsonNumber = parseJsonNumber;
  parseJsonNumber.message = undefined;
  parseJsonNumber.position = 0;
  parseJsonNumber.code = 'require("ajv/dist/runtime/parseJson").parseJsonNumber';
  var escapedChars = {
    b: "\b",
    f: "\f",
    n: `
`,
    r: "\r",
    t: "\t",
    '"': '"',
    "/": "/",
    "\\": "\\"
  };
  var CODE_A = 97;
  var CODE_0 = 48;
  function parseJsonString(s, pos) {
    let str = "";
    let c;
    parseJsonString.message = undefined;
    while (true) {
      c = s[pos++];
      if (c === '"')
        break;
      if (c === "\\") {
        c = s[pos];
        if (c in escapedChars) {
          str += escapedChars[c];
          pos++;
        } else if (c === "u") {
          pos++;
          let count = 4;
          let code = 0;
          while (count--) {
            code <<= 4;
            c = s[pos];
            if (c === undefined) {
              errorMessage("unexpected end");
              return;
            }
            c = c.toLowerCase();
            if (c >= "a" && c <= "f") {
              code += c.charCodeAt(0) - CODE_A + 10;
            } else if (c >= "0" && c <= "9") {
              code += c.charCodeAt(0) - CODE_0;
            } else {
              errorMessage(`unexpected token ${c}`);
              return;
            }
            pos++;
          }
          str += String.fromCharCode(code);
        } else {
          errorMessage(`unexpected token ${c}`);
          return;
        }
      } else if (c === undefined) {
        errorMessage("unexpected end");
        return;
      } else {
        if (c.charCodeAt(0) >= 32) {
          str += c;
        } else {
          errorMessage(`unexpected token ${c}`);
          return;
        }
      }
    }
    parseJsonString.position = pos;
    return str;
    function errorMessage(msg) {
      parseJsonString.position = pos;
      parseJsonString.message = msg;
    }
  }
  exports.parseJsonString = parseJsonString;
  parseJsonString.message = undefined;
  parseJsonString.position = 0;
  parseJsonString.code = 'require("ajv/dist/runtime/parseJson").parseJsonString';
});

// node_modules/ajv/dist/compile/jtd/parse.js
var require_parse2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var types_1 = require_types2();
  var __1 = require_compile();
  var codegen_1 = require_codegen();
  var ref_error_1 = require_ref_error();
  var names_1 = require_names();
  var code_1 = require_code2();
  var ref_1 = require_ref2();
  var type_1 = require_type();
  var parseJson_1 = require_parseJson();
  var util_1 = require_util();
  var timestamp_1 = require_timestamp2();
  var genParse = {
    elements: parseElements,
    values: parseValues,
    discriminator: parseDiscriminator,
    properties: parseProperties,
    optionalProperties: parseProperties,
    enum: parseEnum,
    type: parseType,
    ref: parseRef
  };
  function compileParser(sch, definitions) {
    const _sch = __1.getCompilingSchema.call(this, sch);
    if (_sch)
      return _sch;
    const { es5, lines } = this.opts.code;
    const { ownProperties } = this.opts;
    const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
    const parseName = gen.scopeName("parse");
    const cxt = {
      self: this,
      gen,
      schema: sch.schema,
      schemaEnv: sch,
      definitions,
      data: names_1.default.data,
      parseName,
      char: gen.name("c")
    };
    let sourceCode;
    try {
      this._compilations.add(sch);
      sch.parseName = parseName;
      parserFunction(cxt);
      gen.optimize(this.opts.code.optimize);
      const parseFuncCode = gen.toString();
      sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${parseFuncCode}`;
      const makeParse = new Function(`${names_1.default.scope}`, sourceCode);
      const parse = makeParse(this.scope.get());
      this.scope.value(parseName, { ref: parse });
      sch.parse = parse;
    } catch (e) {
      if (sourceCode)
        this.logger.error("Error compiling parser, function code:", sourceCode);
      delete sch.parse;
      delete sch.parseName;
      throw e;
    } finally {
      this._compilations.delete(sch);
    }
    return sch;
  }
  exports.default = compileParser;
  var undef = (0, codegen_1._)`undefined`;
  function parserFunction(cxt) {
    const { gen, parseName, char } = cxt;
    gen.func(parseName, (0, codegen_1._)`${names_1.default.json}, ${names_1.default.jsonPos}, ${names_1.default.jsonPart}`, false, () => {
      gen.let(names_1.default.data);
      gen.let(char);
      gen.assign((0, codegen_1._)`${parseName}.message`, undef);
      gen.assign((0, codegen_1._)`${parseName}.position`, undef);
      gen.assign(names_1.default.jsonPos, (0, codegen_1._)`${names_1.default.jsonPos} || 0`);
      gen.const(names_1.default.jsonLen, (0, codegen_1._)`${names_1.default.json}.length`);
      parseCode(cxt);
      skipWhitespace(cxt);
      gen.if(names_1.default.jsonPart, () => {
        gen.assign((0, codegen_1._)`${parseName}.position`, names_1.default.jsonPos);
        gen.return(names_1.default.data);
      });
      gen.if((0, codegen_1._)`${names_1.default.jsonPos} === ${names_1.default.jsonLen}`, () => gen.return(names_1.default.data));
      jsonSyntaxError(cxt);
    });
  }
  function parseCode(cxt) {
    let form;
    for (const key of types_1.jtdForms) {
      if (key in cxt.schema) {
        form = key;
        break;
      }
    }
    if (form)
      parseNullable(cxt, genParse[form]);
    else
      parseEmpty(cxt);
  }
  var parseBoolean = parseBooleanToken(true, parseBooleanToken(false, jsonSyntaxError));
  function parseNullable(cxt, parseForm) {
    const { gen, schema, data } = cxt;
    if (!schema.nullable)
      return parseForm(cxt);
    tryParseToken(cxt, "null", parseForm, () => gen.assign(data, null));
  }
  function parseElements(cxt) {
    const { gen, schema, data } = cxt;
    parseToken(cxt, "[");
    const ix = gen.let("i", 0);
    gen.assign(data, (0, codegen_1._)`[]`);
    parseItems(cxt, "]", () => {
      const el = gen.let("el");
      parseCode({ ...cxt, schema: schema.elements, data: el });
      gen.assign((0, codegen_1._)`${data}[${ix}++]`, el);
    });
  }
  function parseValues(cxt) {
    const { gen, schema, data } = cxt;
    parseToken(cxt, "{");
    gen.assign(data, (0, codegen_1._)`{}`);
    parseItems(cxt, "}", () => parseKeyValue(cxt, schema.values));
  }
  function parseItems(cxt, endToken, block) {
    tryParseItems(cxt, endToken, block);
    parseToken(cxt, endToken);
  }
  function tryParseItems(cxt, endToken, block) {
    const { gen } = cxt;
    gen.for((0, codegen_1._)`;${names_1.default.jsonPos}<${names_1.default.jsonLen} && ${jsonSlice(1)}!==${endToken};`, () => {
      block();
      tryParseToken(cxt, ",", () => gen.break(), hasItem);
    });
    function hasItem() {
      tryParseToken(cxt, endToken, () => {
      }, jsonSyntaxError);
    }
  }
  function parseKeyValue(cxt, schema) {
    const { gen } = cxt;
    const key = gen.let("key");
    parseString({ ...cxt, data: key });
    parseToken(cxt, ":");
    parsePropertyValue(cxt, key, schema);
  }
  function parseDiscriminator(cxt) {
    const { gen, data, schema } = cxt;
    const { discriminator, mapping } = schema;
    parseToken(cxt, "{");
    gen.assign(data, (0, codegen_1._)`{}`);
    const startPos = gen.const("pos", names_1.default.jsonPos);
    const value = gen.let("value");
    const tag = gen.let("tag");
    tryParseItems(cxt, "}", () => {
      const key = gen.let("key");
      parseString({ ...cxt, data: key });
      parseToken(cxt, ":");
      gen.if((0, codegen_1._)`${key} === ${discriminator}`, () => {
        parseString({ ...cxt, data: tag });
        gen.assign((0, codegen_1._)`${data}[${key}]`, tag);
        gen.break();
      }, () => parseEmpty({ ...cxt, data: value }));
    });
    gen.assign(names_1.default.jsonPos, startPos);
    gen.if((0, codegen_1._)`${tag} === undefined`);
    parsingError(cxt, (0, codegen_1.str)`discriminator tag not found`);
    for (const tagValue in mapping) {
      gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
      parseSchemaProperties({ ...cxt, schema: mapping[tagValue] }, discriminator);
    }
    gen.else();
    parsingError(cxt, (0, codegen_1.str)`discriminator value not in schema`);
    gen.endIf();
  }
  function parseProperties(cxt) {
    const { gen, data } = cxt;
    parseToken(cxt, "{");
    gen.assign(data, (0, codegen_1._)`{}`);
    parseSchemaProperties(cxt);
  }
  function parseSchemaProperties(cxt, discriminator) {
    const { gen, schema, data } = cxt;
    const { properties, optionalProperties, additionalProperties } = schema;
    parseItems(cxt, "}", () => {
      const key = gen.let("key");
      parseString({ ...cxt, data: key });
      parseToken(cxt, ":");
      gen.if(false);
      parseDefinedProperty(cxt, key, properties);
      parseDefinedProperty(cxt, key, optionalProperties);
      if (discriminator) {
        gen.elseIf((0, codegen_1._)`${key} === ${discriminator}`);
        const tag = gen.let("tag");
        parseString({ ...cxt, data: tag });
      }
      gen.else();
      if (additionalProperties) {
        parseEmpty({ ...cxt, data: (0, codegen_1._)`${data}[${key}]` });
      } else {
        parsingError(cxt, (0, codegen_1.str)`property ${key} not allowed`);
      }
      gen.endIf();
    });
    if (properties) {
      const hasProp = (0, code_1.hasPropFunc)(gen);
      const allProps = (0, codegen_1.and)(...Object.keys(properties).map((p) => (0, codegen_1._)`${hasProp}.call(${data}, ${p})`));
      gen.if((0, codegen_1.not)(allProps), () => parsingError(cxt, (0, codegen_1.str)`missing required properties`));
    }
  }
  function parseDefinedProperty(cxt, key, schemas = {}) {
    const { gen } = cxt;
    for (const prop in schemas) {
      gen.elseIf((0, codegen_1._)`${key} === ${prop}`);
      parsePropertyValue(cxt, key, schemas[prop]);
    }
  }
  function parsePropertyValue(cxt, key, schema) {
    parseCode({ ...cxt, schema, data: (0, codegen_1._)`${cxt.data}[${key}]` });
  }
  function parseType(cxt) {
    const { gen, schema, data, self } = cxt;
    switch (schema.type) {
      case "boolean":
        parseBoolean(cxt);
        break;
      case "string":
        parseString(cxt);
        break;
      case "timestamp": {
        parseString(cxt);
        const vts = (0, util_1.useFunc)(gen, timestamp_1.default);
        const { allowDate, parseDate } = self.opts;
        const notValid = allowDate ? (0, codegen_1._)`!${vts}(${data}, true)` : (0, codegen_1._)`!${vts}(${data})`;
        const fail = parseDate ? (0, codegen_1.or)(notValid, (0, codegen_1._)`(${data} = new Date(${data}), false)`, (0, codegen_1._)`isNaN(${data}.valueOf())`) : notValid;
        gen.if(fail, () => parsingError(cxt, (0, codegen_1.str)`invalid timestamp`));
        break;
      }
      case "float32":
      case "float64":
        parseNumber(cxt);
        break;
      default: {
        const t = schema.type;
        if (!self.opts.int32range && (t === "int32" || t === "uint32")) {
          parseNumber(cxt, 16);
          if (t === "uint32") {
            gen.if((0, codegen_1._)`${data} < 0`, () => parsingError(cxt, (0, codegen_1.str)`integer out of range`));
          }
        } else {
          const [min, max, maxDigits] = type_1.intRange[t];
          parseNumber(cxt, maxDigits);
          gen.if((0, codegen_1._)`${data} < ${min} || ${data} > ${max}`, () => parsingError(cxt, (0, codegen_1.str)`integer out of range`));
        }
      }
    }
  }
  function parseString(cxt) {
    parseToken(cxt, '"');
    parseWith(cxt, parseJson_1.parseJsonString);
  }
  function parseEnum(cxt) {
    const { gen, data, schema } = cxt;
    const enumSch = schema.enum;
    parseToken(cxt, '"');
    gen.if(false);
    for (const value of enumSch) {
      const valueStr = JSON.stringify(value).slice(1);
      gen.elseIf((0, codegen_1._)`${jsonSlice(valueStr.length)} === ${valueStr}`);
      gen.assign(data, (0, codegen_1.str)`${value}`);
      gen.add(names_1.default.jsonPos, valueStr.length);
    }
    gen.else();
    jsonSyntaxError(cxt);
    gen.endIf();
  }
  function parseNumber(cxt, maxDigits) {
    const { gen } = cxt;
    skipWhitespace(cxt);
    gen.if((0, codegen_1._)`"-0123456789".indexOf(${jsonSlice(1)}) < 0`, () => jsonSyntaxError(cxt), () => parseWith(cxt, parseJson_1.parseJsonNumber, maxDigits));
  }
  function parseBooleanToken(bool, fail) {
    return (cxt) => {
      const { gen, data } = cxt;
      tryParseToken(cxt, `${bool}`, () => fail(cxt), () => gen.assign(data, bool));
    };
  }
  function parseRef(cxt) {
    const { gen, self, definitions, schema, schemaEnv } = cxt;
    const { ref } = schema;
    const refSchema = definitions[ref];
    if (!refSchema)
      throw new ref_error_1.default(self.opts.uriResolver, "", ref, `No definition ${ref}`);
    if (!(0, ref_1.hasRef)(refSchema))
      return parseCode({ ...cxt, schema: refSchema });
    const { root } = schemaEnv;
    const sch = compileParser.call(self, new __1.SchemaEnv({ schema: refSchema, root }), definitions);
    partialParse(cxt, getParser(gen, sch), true);
  }
  function getParser(gen, sch) {
    return sch.parse ? gen.scopeValue("parse", { ref: sch.parse }) : (0, codegen_1._)`${gen.scopeValue("wrapper", { ref: sch })}.parse`;
  }
  function parseEmpty(cxt) {
    parseWith(cxt, parseJson_1.parseJson);
  }
  function parseWith(cxt, parseFunc, args) {
    partialParse(cxt, (0, util_1.useFunc)(cxt.gen, parseFunc), args);
  }
  function partialParse(cxt, parseFunc, args) {
    const { gen, data } = cxt;
    gen.assign(data, (0, codegen_1._)`${parseFunc}(${names_1.default.json}, ${names_1.default.jsonPos}${args ? (0, codegen_1._)`, ${args}` : codegen_1.nil})`);
    gen.assign(names_1.default.jsonPos, (0, codegen_1._)`${parseFunc}.position`);
    gen.if((0, codegen_1._)`${data} === undefined`, () => parsingError(cxt, (0, codegen_1._)`${parseFunc}.message`));
  }
  function parseToken(cxt, tok) {
    tryParseToken(cxt, tok, jsonSyntaxError);
  }
  function tryParseToken(cxt, tok, fail, success) {
    const { gen } = cxt;
    const n = tok.length;
    skipWhitespace(cxt);
    gen.if((0, codegen_1._)`${jsonSlice(n)} === ${tok}`, () => {
      gen.add(names_1.default.jsonPos, n);
      success === null || success === undefined || success(cxt);
    }, () => fail(cxt));
  }
  function skipWhitespace({ gen, char: c }) {
    gen.code((0, codegen_1._)`while((${c}=${names_1.default.json}[${names_1.default.jsonPos}],${c}===" "||${c}==="\\n"||${c}==="\\r"||${c}==="\\t"))${names_1.default.jsonPos}++;`);
  }
  function jsonSlice(len) {
    return len === 1 ? (0, codegen_1._)`${names_1.default.json}[${names_1.default.jsonPos}]` : (0, codegen_1._)`${names_1.default.json}.slice(${names_1.default.jsonPos}, ${names_1.default.jsonPos}+${len})`;
  }
  function jsonSyntaxError(cxt) {
    parsingError(cxt, (0, codegen_1._)`"unexpected token " + ${names_1.default.json}[${names_1.default.jsonPos}]`);
  }
  function parsingError({ gen, parseName }, msg) {
    gen.assign((0, codegen_1._)`${parseName}.message`, msg);
    gen.assign((0, codegen_1._)`${parseName}.position`, names_1.default.jsonPos);
    gen.return(undef);
  }
});

// node_modules/ajv/dist/jtd.js
var require_jtd2 = __commonJS((exports, module) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = exports.Ajv = undefined;
  var core_1 = require_core();
  var jtd_1 = require_jtd();
  var jtd_schema_1 = require_jtd_schema();
  var serialize_1 = require_serialize2();
  var parse_1 = require_parse2();
  var META_SCHEMA_ID = "JTD-meta-schema";

  class Ajv extends core_1.default {
    constructor(opts = {}) {
      super({
        ...opts,
        jtd: true
      });
    }
    _addVocabularies() {
      super._addVocabularies();
      this.addVocabulary(jtd_1.default);
    }
    _addDefaultMetaSchema() {
      super._addDefaultMetaSchema();
      if (!this.opts.meta)
        return;
      this.addMetaSchema(jtd_schema_1.default, META_SCHEMA_ID, false);
    }
    defaultMeta() {
      return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined);
    }
    compileSerializer(schema) {
      const sch = this._addSchema(schema);
      return sch.serialize || this._compileSerializer(sch);
    }
    compileParser(schema) {
      const sch = this._addSchema(schema);
      return sch.parse || this._compileParser(sch);
    }
    _compileSerializer(sch) {
      serialize_1.default.call(this, sch, sch.schema.definitions || {});
      if (!sch.serialize)
        throw new Error("ajv implementation error");
      return sch.serialize;
    }
    _compileParser(sch) {
      parse_1.default.call(this, sch, sch.schema.definitions || {});
      if (!sch.parse)
        throw new Error("ajv implementation error");
      return sch.parse;
    }
  }
  exports.Ajv = Ajv;
  module.exports = exports = Ajv;
  module.exports.Ajv = Ajv;
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = Ajv;
  var validate_1 = require_validate();
  Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function() {
    return validate_1.KeywordCxt;
  } });
  var codegen_1 = require_codegen();
  Object.defineProperty(exports, "_", { enumerable: true, get: function() {
    return codegen_1._;
  } });
  Object.defineProperty(exports, "str", { enumerable: true, get: function() {
    return codegen_1.str;
  } });
  Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
    return codegen_1.stringify;
  } });
  Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
    return codegen_1.nil;
  } });
  Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
    return codegen_1.Name;
  } });
  Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function() {
    return codegen_1.CodeGen;
  } });
  var validation_error_1 = require_validation_error();
  Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function() {
    return validation_error_1.default;
  } });
  var ref_error_1 = require_ref_error();
  Object.defineProperty(exports, "MissingRefError", { enumerable: true, get: function() {
    return ref_error_1.default;
  } });
});

// node_modules/@fastify/ajv-compiler/lib/default-ajv-options.js
var require_default_ajv_options = __commonJS((exports, module) => {
  var fastUri = require_fast_uri();
  module.exports = Object.freeze({
    coerceTypes: "array",
    useDefaults: true,
    removeAdditional: true,
    uriResolver: fastUri,
    addUsedSchema: false,
    allErrors: false
  });
});

// node_modules/@fastify/ajv-compiler/lib/validator-compiler.js
var require_validator_compiler = __commonJS((exports, module) => {
  var Ajv = require_ajv().default;
  var AjvJTD = require_jtd2();
  var defaultAjvOptions = require_default_ajv_options();

  class ValidatorCompiler {
    constructor(externalSchemas, options) {
      if (options.mode === "JTD") {
        this.ajv = new AjvJTD(Object.assign({}, defaultAjvOptions, options.customOptions));
      } else {
        this.ajv = new Ajv(Object.assign({}, defaultAjvOptions, options.customOptions));
      }
      let addFormatPlugin = true;
      if (options.plugins && options.plugins.length > 0) {
        for (const plugin of options.plugins) {
          if (Array.isArray(plugin)) {
            addFormatPlugin = addFormatPlugin && plugin[0].name !== "formatsPlugin";
            plugin[0](this.ajv, plugin[1]);
          } else {
            addFormatPlugin = addFormatPlugin && plugin.name !== "formatsPlugin";
            plugin(this.ajv);
          }
        }
      }
      if (addFormatPlugin) {
        require_dist4()(this.ajv);
      }
      options.onCreate?.(this.ajv);
      const sourceSchemas = Object.values(externalSchemas);
      for (const extSchema of sourceSchemas) {
        this.ajv.addSchema(extSchema);
      }
    }
    buildValidatorFunction({ schema }) {
      if (schema.$id) {
        const stored = this.ajv.getSchema(schema.$id);
        if (stored) {
          return stored;
        }
      }
      return this.ajv.compile(schema);
    }
  }
  module.exports = ValidatorCompiler;
});

// node_modules/@fastify/ajv-compiler/lib/serializer-compiler.js
var require_serializer_compiler = __commonJS((exports, module) => {
  var AjvJTD = require_jtd2();
  var defaultAjvOptions = require_default_ajv_options();

  class SerializerCompiler {
    constructor(_externalSchemas, options) {
      this.ajv = new AjvJTD(Object.assign({}, defaultAjvOptions, options));
    }
    buildSerializerFunction({ schema }) {
      return this.ajv.compileSerializer(schema);
    }
  }
  module.exports = SerializerCompiler;
});

// node_modules/ajv/dist/standalone/index.js
var require_standalone3 = __commonJS((exports, module) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  var scope_1 = require_scope();
  var code_1 = require_code();
  function standaloneCode(ajv, refsOrFunc) {
    if (!ajv.opts.code.source) {
      throw new Error("moduleCode: ajv instance must have code.source option");
    }
    const { _n } = ajv.scope.opts;
    return typeof refsOrFunc == "function" ? funcExportCode(refsOrFunc.source) : refsOrFunc !== undefined ? multiExportsCode(refsOrFunc, getValidate) : multiExportsCode(ajv.schemas, (sch) => sch.meta ? undefined : ajv.compile(sch.schema));
    function getValidate(id) {
      const v = ajv.getSchema(id);
      if (!v)
        throw new Error(`moduleCode: no schema with id ${id}`);
      return v;
    }
    function funcExportCode(source) {
      const usedValues = {};
      const n = source === null || source === undefined ? undefined : source.validateName;
      const vCode = validateCode(usedValues, source);
      if (ajv.opts.code.esm) {
        return `"use strict";${_n}export const validate = ${n};${_n}export default ${n};${_n}${vCode}`;
      }
      return `"use strict";${_n}module.exports = ${n};${_n}module.exports.default = ${n};${_n}${vCode}`;
    }
    function multiExportsCode(schemas, getValidateFunc) {
      var _a;
      const usedValues = {};
      let code = (0, code_1._)`"use strict";`;
      for (const name in schemas) {
        const v = getValidateFunc(schemas[name]);
        if (v) {
          const vCode = validateCode(usedValues, v.source);
          const exportSyntax = ajv.opts.code.esm ? (0, code_1._)`export const ${(0, code_1.getEsmExportName)(name)}` : (0, code_1._)`exports${(0, code_1.getProperty)(name)}`;
          code = (0, code_1._)`${code}${_n}${exportSyntax} = ${(_a = v.source) === null || _a === undefined ? undefined : _a.validateName};${_n}${vCode}`;
        }
      }
      return `${code}`;
    }
    function validateCode(usedValues, s) {
      if (!s)
        throw new Error('moduleCode: function does not have "source" property');
      if (usedState(s.validateName) === scope_1.UsedValueState.Completed)
        return code_1.nil;
      setUsedState(s.validateName, scope_1.UsedValueState.Started);
      const scopeCode = ajv.scope.scopeCode(s.scopeValues, usedValues, refValidateCode);
      const code = new code_1._Code(`${scopeCode}${_n}${s.validateCode}`);
      return s.evaluated ? (0, code_1._)`${code}${s.validateName}.evaluated = ${s.evaluated};${_n}` : code;
      function refValidateCode(n) {
        var _a;
        const vRef = (_a = n.value) === null || _a === undefined ? undefined : _a.ref;
        if (n.prefix === "validate" && typeof vRef == "function") {
          const v = vRef;
          return validateCode(usedValues, v.source);
        } else if ((n.prefix === "root" || n.prefix === "wrapper") && typeof vRef == "object") {
          const { validate, validateName } = vRef;
          if (!validateName)
            throw new Error("ajv internal error");
          const def = ajv.opts.code.es5 ? scope_1.varKinds.var : scope_1.varKinds.const;
          const wrapper = (0, code_1._)`${def} ${n} = {validate: ${validateName}};`;
          if (usedState(validateName) === scope_1.UsedValueState.Started)
            return wrapper;
          const vCode = validateCode(usedValues, validate === null || validate === undefined ? undefined : validate.source);
          return (0, code_1._)`${wrapper}${_n}${vCode}`;
        }
        return;
      }
      function usedState(name) {
        var _a;
        return (_a = usedValues[name.prefix]) === null || _a === undefined ? undefined : _a.get(name);
      }
      function setUsedState(name, state) {
        const { prefix } = name;
        const names = usedValues[prefix] = usedValues[prefix] || new Map;
        names.set(name, state);
      }
    }
  }
  module.exports = exports = standaloneCode;
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = standaloneCode;
});

// node_modules/@fastify/ajv-compiler/standalone.js
var require_standalone4 = __commonJS((exports, module) => {
  var ValidatorSelector = require_ajv_compiler();
  var standaloneCode = require_standalone3().default;
  function StandaloneValidator(options = { readMode: true }) {
    if (options.readMode === true && !options.restoreFunction) {
      throw new Error("You must provide a restoreFunction options when readMode ON");
    }
    if (options.readMode !== true && !options.storeFunction) {
      throw new Error("You must provide a storeFunction options when readMode OFF");
    }
    if (options.readMode === true) {
      return function wrapper() {
        return function(opts) {
          return options.restoreFunction(opts);
        };
      };
    }
    const factory = ValidatorSelector();
    return function wrapper(externalSchemas, ajvOptions = {}) {
      if (!ajvOptions.customOptions || !ajvOptions.customOptions.code) {
        ajvOptions.customOptions = Object.assign({}, ajvOptions.customOptions, { code: { source: true } });
      }
      const compiler = factory(externalSchemas, ajvOptions);
      return function(opts) {
        const validationFunc = compiler(opts);
        const schemaValidationCode = standaloneCode(compiler[ValidatorSelector.AjvReference].ajv, validationFunc);
        options.storeFunction(opts, schemaValidationCode);
        return validationFunc;
      };
    };
  }
  module.exports = StandaloneValidator;
});

// node_modules/@fastify/ajv-compiler/index.js
var require_ajv_compiler = __commonJS((exports, module) => {
  var AjvReference = Symbol.for("fastify.ajv-compiler.reference");
  var ValidatorCompiler = require_validator_compiler();
  var SerializerCompiler = require_serializer_compiler();
  function AjvCompiler(opts) {
    const validatorPool = new Map;
    const serializerPool = new Map;
    if (opts && opts.jtdSerializer === true) {
      return function buildSerializerFromPool(externalSchemas, serializerOpts) {
        const uniqueAjvKey = getPoolKey({}, serializerOpts);
        if (serializerPool.has(uniqueAjvKey)) {
          return serializerPool.get(uniqueAjvKey);
        }
        const compiler = new SerializerCompiler(externalSchemas, serializerOpts);
        const ret = compiler.buildSerializerFunction.bind(compiler);
        serializerPool.set(uniqueAjvKey, ret);
        return ret;
      };
    }
    return function buildCompilerFromPool(externalSchemas, options) {
      const uniqueAjvKey = getPoolKey(externalSchemas, options.customOptions);
      if (validatorPool.has(uniqueAjvKey)) {
        return validatorPool.get(uniqueAjvKey);
      }
      const compiler = new ValidatorCompiler(externalSchemas, options);
      const ret = compiler.buildValidatorFunction.bind(compiler);
      validatorPool.set(uniqueAjvKey, ret);
      if (options.customOptions.code !== undefined) {
        ret[AjvReference] = compiler;
      }
      return ret;
    };
  }
  function getPoolKey(externalSchemas, options) {
    const externals = JSON.stringify(externalSchemas);
    const ajvConfig = JSON.stringify(options);
    return `${externals}${ajvConfig}`;
  }
  module.exports = AjvCompiler;
  module.exports.default = AjvCompiler;
  module.exports.AjvCompiler = AjvCompiler;
  module.exports.AjvReference = AjvReference;
  module.exports.StandaloneValidator = require_standalone4();
});

// node_modules/fastify/lib/schema-controller.js
var require_schema_controller = __commonJS((exports, module) => {
  var { buildSchemas } = require_schemas();
  var SerializerSelector = require_fast_json_stringify_compiler();
  var ValidatorSelector = require_ajv_compiler();
  function buildSchemaController(parentSchemaCtrl, opts) {
    if (parentSchemaCtrl) {
      return new SchemaController(parentSchemaCtrl, opts);
    }
    const compilersFactory = Object.assign({
      buildValidator: null,
      buildSerializer: null
    }, opts?.compilersFactory);
    if (!compilersFactory.buildValidator) {
      compilersFactory.buildValidator = ValidatorSelector();
    }
    if (!compilersFactory.buildSerializer) {
      compilersFactory.buildSerializer = SerializerSelector();
    }
    const option = {
      bucket: opts && opts.bucket || buildSchemas,
      compilersFactory,
      isCustomValidatorCompiler: typeof opts?.compilersFactory?.buildValidator === "function",
      isCustomSerializerCompiler: typeof opts?.compilersFactory?.buildValidator === "function"
    };
    return new SchemaController(undefined, option);
  }

  class SchemaController {
    constructor(parent, options) {
      this.opts = options || parent?.opts;
      this.addedSchemas = false;
      this.compilersFactory = this.opts.compilersFactory;
      if (parent) {
        this.schemaBucket = this.opts.bucket(parent.getSchemas());
        this.validatorCompiler = parent.getValidatorCompiler();
        this.serializerCompiler = parent.getSerializerCompiler();
        this.isCustomValidatorCompiler = parent.isCustomValidatorCompiler;
        this.isCustomSerializerCompiler = parent.isCustomSerializerCompiler;
        this.parent = parent;
      } else {
        this.schemaBucket = this.opts.bucket();
        this.isCustomValidatorCompiler = this.opts.isCustomValidatorCompiler || false;
        this.isCustomSerializerCompiler = this.opts.isCustomSerializerCompiler || false;
      }
    }
    add(schema) {
      this.addedSchemas = true;
      return this.schemaBucket.add(schema);
    }
    getSchema(schemaId) {
      return this.schemaBucket.getSchema(schemaId);
    }
    getSchemas() {
      return this.schemaBucket.getSchemas();
    }
    setValidatorCompiler(validatorCompiler) {
      this.compilersFactory = Object.assign({}, this.compilersFactory, { buildValidator: () => validatorCompiler });
      this.validatorCompiler = validatorCompiler;
      this.isCustomValidatorCompiler = true;
    }
    setSerializerCompiler(serializerCompiler) {
      this.compilersFactory = Object.assign({}, this.compilersFactory, { buildSerializer: () => serializerCompiler });
      this.serializerCompiler = serializerCompiler;
      this.isCustomSerializerCompiler = true;
    }
    getValidatorCompiler() {
      return this.validatorCompiler || this.parent && this.parent.getValidatorCompiler();
    }
    getSerializerCompiler() {
      return this.serializerCompiler || this.parent && this.parent.getSerializerCompiler();
    }
    getSerializerBuilder() {
      return this.compilersFactory.buildSerializer || this.parent && this.parent.getSerializerBuilder();
    }
    getValidatorBuilder() {
      return this.compilersFactory.buildValidator || this.parent && this.parent.getValidatorBuilder();
    }
    setupValidator(serverOptions) {
      const isReady = this.validatorCompiler !== undefined && !this.addedSchemas;
      if (isReady) {
        return;
      }
      this.validatorCompiler = this.getValidatorBuilder()(this.schemaBucket.getSchemas(), serverOptions.ajv);
    }
    setupSerializer(serverOptions) {
      const isReady = this.serializerCompiler !== undefined && !this.addedSchemas;
      if (isReady) {
        return;
      }
      this.serializerCompiler = this.getSerializerBuilder()(this.schemaBucket.getSchemas(), serverOptions.serializerOpts);
    }
  }
  SchemaController.buildSchemaController = buildSchemaController;
  module.exports = SchemaController;
});

// node_modules/semver/internal/constants.js
var require_constants3 = __commonJS((exports, module) => {
  var SEMVER_SPEC_VERSION = "2.0.0";
  var MAX_LENGTH = 256;
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
  var MAX_SAFE_COMPONENT_LENGTH = 16;
  var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
  var RELEASE_TYPES = [
    "major",
    "premajor",
    "minor",
    "preminor",
    "patch",
    "prepatch",
    "prerelease"
  ];
  module.exports = {
    MAX_LENGTH,
    MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH,
    MAX_SAFE_INTEGER,
    RELEASE_TYPES,
    SEMVER_SPEC_VERSION,
    FLAG_INCLUDE_PRERELEASE: 1,
    FLAG_LOOSE: 2
  };
});

// node_modules/semver/internal/debug.js
var require_debug2 = __commonJS((exports, module) => {
  var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
  };
  module.exports = debug;
});

// node_modules/semver/internal/re.js
var require_re = __commonJS((exports, module) => {
  var {
    MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH,
    MAX_LENGTH
  } = require_constants3();
  var debug = require_debug2();
  exports = module.exports = {};
  var re = exports.re = [];
  var safeRe = exports.safeRe = [];
  var src = exports.src = [];
  var safeSrc = exports.safeSrc = [];
  var t = exports.t = {};
  var R = 0;
  var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
  var safeRegexReplacements = [
    ["\\s", 1],
    ["\\d", MAX_LENGTH],
    [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
  ];
  var makeSafeRegex = (value) => {
    for (const [token, max] of safeRegexReplacements) {
      value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
    }
    return value;
  };
  var createToken = (name, value, isGlobal) => {
    const safe = makeSafeRegex(value);
    const index = R++;
    debug(name, index, value);
    t[name] = index;
    src[index] = value;
    safeSrc[index] = safe;
    re[index] = new RegExp(value, isGlobal ? "g" : undefined);
    safeRe[index] = new RegExp(safe, isGlobal ? "g" : undefined);
  };
  createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
  createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
  createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
  createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})`);
  createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})`);
  createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
  createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
  createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
  createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
  createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
  createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
  createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
  createToken("FULL", `^${src[t.FULLPLAIN]}$`);
  createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
  createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
  createToken("GTLT", "((?:<|>)?=?)");
  createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
  createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
  createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` + `)?)?`);
  createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` + `)?)?`);
  createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
  createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("COERCEPLAIN", `${"(^|[^\\d])" + "(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
  createToken("COERCE", `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
  createToken("COERCEFULL", src[t.COERCEPLAIN] + `(?:${src[t.PRERELEASE]})?` + `(?:${src[t.BUILD]})?` + `(?:$|[^\\d])`);
  createToken("COERCERTL", src[t.COERCE], true);
  createToken("COERCERTLFULL", src[t.COERCEFULL], true);
  createToken("LONETILDE", "(?:~>?)");
  createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
  exports.tildeTrimReplace = "$1~";
  createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
  createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("LONECARET", "(?:\\^)");
  createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
  exports.caretTrimReplace = "$1^";
  createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
  createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
  createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
  createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
  exports.comparatorTrimReplace = "$1$2$3";
  createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAIN]})` + `\\s*$`);
  createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAINLOOSE]})` + `\\s*$`);
  createToken("STAR", "(<|>)?=?\\s*\\*");
  createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
  createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
});

// node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS((exports, module) => {
  var looseOption = Object.freeze({ loose: true });
  var emptyOpts = Object.freeze({});
  var parseOptions = (options) => {
    if (!options) {
      return emptyOpts;
    }
    if (typeof options !== "object") {
      return looseOption;
    }
    return options;
  };
  module.exports = parseOptions;
});

// node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS((exports, module) => {
  var numeric = /^[0-9]+$/;
  var compareIdentifiers = (a, b) => {
    const anum = numeric.test(a);
    const bnum = numeric.test(b);
    if (anum && bnum) {
      a = +a;
      b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
  };
  var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
  module.exports = {
    compareIdentifiers,
    rcompareIdentifiers
  };
});

// node_modules/semver/classes/semver.js
var require_semver = __commonJS((exports, module) => {
  var debug = require_debug2();
  var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants3();
  var { safeRe: re, safeSrc: src, t } = require_re();
  var parseOptions = require_parse_options();
  var { compareIdentifiers } = require_identifiers();

  class SemVer {
    constructor(version, options) {
      options = parseOptions(options);
      if (version instanceof SemVer) {
        if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== "string") {
        throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
      }
      if (version.length > MAX_LENGTH) {
        throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
      }
      debug("SemVer", version, options);
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
      if (!m) {
        throw new TypeError(`Invalid Version: ${version}`);
      }
      this.raw = version;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map((id) => {
          if (/^[0-9]+$/.test(id)) {
            const num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }
          return id;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    format() {
      this.version = `${this.major}.${this.minor}.${this.patch}`;
      if (this.prerelease.length) {
        this.version += `-${this.prerelease.join(".")}`;
      }
      return this.version;
    }
    toString() {
      return this.version;
    }
    compare(other) {
      debug("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        if (typeof other === "string" && other === this.version) {
          return 0;
        }
        other = new SemVer(other, this.options);
      }
      if (other.version === this.version) {
        return 0;
      }
      return this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      let i = 0;
      do {
        const a = this.prerelease[i];
        const b = other.prerelease[i];
        debug("prerelease compare", i, a, b);
        if (a === undefined && b === undefined) {
          return 0;
        } else if (b === undefined) {
          return 1;
        } else if (a === undefined) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i);
    }
    compareBuild(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      let i = 0;
      do {
        const a = this.build[i];
        const b = other.build[i];
        debug("build compare", i, a, b);
        if (a === undefined && b === undefined) {
          return 0;
        } else if (b === undefined) {
          return 1;
        } else if (a === undefined) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i);
    }
    inc(release, identifier, identifierBase) {
      if (release.startsWith("pre")) {
        if (!identifier && identifierBase === false) {
          throw new Error("invalid increment argument: identifier is empty");
        }
        if (identifier) {
          const r = new RegExp(`^${this.options.loose ? src[t.PRERELEASELOOSE] : src[t.PRERELEASE]}$`);
          const match = `-${identifier}`.match(r);
          if (!match || match[1] !== identifier) {
            throw new Error(`invalid identifier: ${identifier}`);
          }
        }
      }
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier, identifierBase);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier, identifierBase);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier, identifierBase);
          this.inc("pre", identifier, identifierBase);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier, identifierBase);
          }
          this.inc("pre", identifier, identifierBase);
          break;
        case "release":
          if (this.prerelease.length === 0) {
            throw new Error(`version ${this.raw} is not a prerelease`);
          }
          this.prerelease.length = 0;
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre": {
          const base = Number(identifierBase) ? 1 : 0;
          if (this.prerelease.length === 0) {
            this.prerelease = [base];
          } else {
            let i = this.prerelease.length;
            while (--i >= 0) {
              if (typeof this.prerelease[i] === "number") {
                this.prerelease[i]++;
                i = -2;
              }
            }
            if (i === -1) {
              if (identifier === this.prerelease.join(".") && identifierBase === false) {
                throw new Error("invalid increment argument: identifier already exists");
              }
              this.prerelease.push(base);
            }
          }
          if (identifier) {
            let prerelease = [identifier, base];
            if (identifierBase === false) {
              prerelease = [identifier];
            }
            if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = prerelease;
              }
            } else {
              this.prerelease = prerelease;
            }
          }
          break;
        }
        default:
          throw new Error(`invalid increment argument: ${release}`);
      }
      this.raw = this.format();
      if (this.build.length) {
        this.raw += `+${this.build.join(".")}`;
      }
      return this;
    }
  }
  module.exports = SemVer;
});

// node_modules/semver/functions/parse.js
var require_parse3 = __commonJS((exports, module) => {
  var SemVer = require_semver();
  var parse = (version, options, throwErrors = false) => {
    if (version instanceof SemVer) {
      return version;
    }
    try {
      return new SemVer(version, options);
    } catch (er) {
      if (!throwErrors) {
        return null;
      }
      throw er;
    }
  };
  module.exports = parse;
});

// node_modules/semver/functions/valid.js
var require_valid = __commonJS((exports, module) => {
  var parse = require_parse3();
  var valid = (version, options) => {
    const v = parse(version, options);
    return v ? v.version : null;
  };
  module.exports = valid;
});

// node_modules/semver/functions/clean.js
var require_clean = __commonJS((exports, module) => {
  var parse = require_parse3();
  var clean = (version, options) => {
    const s = parse(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
  };
  module.exports = clean;
});

// node_modules/semver/functions/inc.js
var require_inc = __commonJS((exports, module) => {
  var SemVer = require_semver();
  var inc = (version, release, options, identifier, identifierBase) => {
    if (typeof options === "string") {
      identifierBase = identifier;
      identifier = options;
      options = undefined;
    }
    try {
      return new SemVer(version instanceof SemVer ? version.version : version, options).inc(release, identifier, identifierBase).version;
    } catch (er) {
      return null;
    }
  };
  module.exports = inc;
});

// node_modules/semver/functions/diff.js
var require_diff = __commonJS((exports, module) => {
  var parse = require_parse3();
  var diff = (version1, version2) => {
    const v1 = parse(version1, null, true);
    const v2 = parse(version2, null, true);
    const comparison = v1.compare(v2);
    if (comparison === 0) {
      return null;
    }
    const v1Higher = comparison > 0;
    const highVersion = v1Higher ? v1 : v2;
    const lowVersion = v1Higher ? v2 : v1;
    const highHasPre = !!highVersion.prerelease.length;
    const lowHasPre = !!lowVersion.prerelease.length;
    if (lowHasPre && !highHasPre) {
      if (!lowVersion.patch && !lowVersion.minor) {
        return "major";
      }
      if (lowVersion.compareMain(highVersion) === 0) {
        if (lowVersion.minor && !lowVersion.patch) {
          return "minor";
        }
        return "patch";
      }
    }
    const prefix = highHasPre ? "pre" : "";
    if (v1.major !== v2.major) {
      return prefix + "major";
    }
    if (v1.minor !== v2.minor) {
      return prefix + "minor";
    }
    if (v1.patch !== v2.patch) {
      return prefix + "patch";
    }
    return "prerelease";
  };
  module.exports = diff;
});

// node_modules/semver/functions/major.js
var require_major = __commonJS((exports, module) => {
  var SemVer = require_semver();
  var major = (a, loose) => new SemVer(a, loose).major;
  module.exports = major;
});

// node_modules/semver/functions/minor.js
var require_minor = __commonJS((exports, module) => {
  var SemVer = require_semver();
  var minor = (a, loose) => new SemVer(a, loose).minor;
  module.exports = minor;
});

// node_modules/semver/functions/patch.js
var require_patch = __commonJS((exports, module) => {
  var SemVer = require_semver();
  var patch = (a, loose) => new SemVer(a, loose).patch;
  module.exports = patch;
});

// node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS((exports, module) => {
  var parse = require_parse3();
  var prerelease = (version, options) => {
    const parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  };
  module.exports = prerelease;
});

// node_modules/semver/functions/compare.js
var require_compare2 = __commonJS((exports, module) => {
  var SemVer = require_semver();
  var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
  module.exports = compare;
});

// node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS((exports, module) => {
  var compare = require_compare2();
  var rcompare = (a, b, loose) => compare(b, a, loose);
  module.exports = rcompare;
});

// node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS((exports, module) => {
  var compare = require_compare2();
  var compareLoose = (a, b) => compare(a, b, true);
  module.exports = compareLoose;
});

// node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS((exports, module) => {
  var SemVer = require_semver();
  var compareBuild = (a, b, loose) => {
    const versionA = new SemVer(a, loose);
    const versionB = new SemVer(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
  };
  module.exports = compareBuild;
});

// node_modules/semver/functions/sort.js
var require_sort = __commonJS((exports, module) => {
  var compareBuild = require_compare_build();
  var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
  module.exports = sort;
});

// node_modules/semver/functions/rsort.js
var require_rsort = __commonJS((exports, module) => {
  var compareBuild = require_compare_build();
  var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
  module.exports = rsort;
});

// node_modules/semver/functions/gt.js
var require_gt = __commonJS((exports, module) => {
  var compare = require_compare2();
  var gt = (a, b, loose) => compare(a, b, loose) > 0;
  module.exports = gt;
});

// node_modules/semver/functions/lt.js
var require_lt = __commonJS((exports, module) => {
  var compare = require_compare2();
  var lt = (a, b, loose) => compare(a, b, loose) < 0;
  module.exports = lt;
});

// node_modules/semver/functions/eq.js
var require_eq = __commonJS((exports, module) => {
  var compare = require_compare2();
  var eq = (a, b, loose) => compare(a, b, loose) === 0;
  module.exports = eq;
});

// node_modules/semver/functions/neq.js
var require_neq = __commonJS((exports, module) => {
  var compare = require_compare2();
  var neq = (a, b, loose) => compare(a, b, loose) !== 0;
  module.exports = neq;
});

// node_modules/semver/functions/gte.js
var require_gte = __commonJS((exports, module) => {
  var compare = require_compare2();
  var gte = (a, b, loose) => compare(a, b, loose) >= 0;
  module.exports = gte;
});

// node_modules/semver/functions/lte.js
var require_lte = __commonJS((exports, module) => {
  var compare = require_compare2();
  var lte = (a, b, loose) => compare(a, b, loose) <= 0;
  module.exports = lte;
});

// node_modules/semver/functions/cmp.js
var require_cmp = __commonJS((exports, module) => {
  var eq = require_eq();
  var neq = require_neq();
  var gt = require_gt();
  var gte = require_gte();
  var lt = require_lt();
  var lte = require_lte();
  var cmp = (a, op, b, loose) => {
    switch (op) {
      case "===":
        if (typeof a === "object") {
          a = a.version;
        }
        if (typeof b === "object") {
          b = b.version;
        }
        return a === b;
      case "!==":
        if (typeof a === "object") {
          a = a.version;
        }
        if (typeof b === "object") {
          b = b.version;
        }
        return a !== b;
      case "":
      case "=":
      case "==":
        return eq(a, b, loose);
      case "!=":
        return neq(a, b, loose);
      case ">":
        return gt(a, b, loose);
      case ">=":
        return gte(a, b, loose);
      case "<":
        return lt(a, b, loose);
      case "<=":
        return lte(a, b, loose);
      default:
        throw new TypeError(`Invalid operator: ${op}`);
    }
  };
  module.exports = cmp;
});

// node_modules/semver/functions/coerce.js
var require_coerce = __commonJS((exports, module) => {
  var SemVer = require_semver();
  var parse = require_parse3();
  var { safeRe: re, t } = require_re();
  var coerce = (version, options) => {
    if (version instanceof SemVer) {
      return version;
    }
    if (typeof version === "number") {
      version = String(version);
    }
    if (typeof version !== "string") {
      return null;
    }
    options = options || {};
    let match = null;
    if (!options.rtl) {
      match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
    } else {
      const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
      let next;
      while ((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)) {
        if (!match || next.index + next[0].length !== match.index + match[0].length) {
          match = next;
        }
        coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
      }
      coerceRtlRegex.lastIndex = -1;
    }
    if (match === null) {
      return null;
    }
    const major = match[2];
    const minor = match[3] || "0";
    const patch = match[4] || "0";
    const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "";
    const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
    return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options);
  };
  module.exports = coerce;
});

// node_modules/semver/internal/lrucache.js
var require_lrucache = __commonJS((exports, module) => {
  class LRUCache {
    constructor() {
      this.max = 1000;
      this.map = new Map;
    }
    get(key) {
      const value = this.map.get(key);
      if (value === undefined) {
        return;
      } else {
        this.map.delete(key);
        this.map.set(key, value);
        return value;
      }
    }
    delete(key) {
      return this.map.delete(key);
    }
    set(key, value) {
      const deleted = this.delete(key);
      if (!deleted && value !== undefined) {
        if (this.map.size >= this.max) {
          const firstKey = this.map.keys().next().value;
          this.delete(firstKey);
        }
        this.map.set(key, value);
      }
      return this;
    }
  }
  module.exports = LRUCache;
});

// node_modules/semver/classes/range.js
var require_range = __commonJS((exports, module) => {
  var SPACE_CHARACTERS = /\s+/g;

  class Range {
    constructor(range, options) {
      options = parseOptions(options);
      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }
      if (range instanceof Comparator) {
        this.raw = range.value;
        this.set = [[range]];
        this.formatted = undefined;
        return this;
      }
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      this.raw = range.trim().replace(SPACE_CHARACTERS, " ");
      this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
      if (!this.set.length) {
        throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
      }
      if (this.set.length > 1) {
        const first = this.set[0];
        this.set = this.set.filter((c) => !isNullSet(c[0]));
        if (this.set.length === 0) {
          this.set = [first];
        } else if (this.set.length > 1) {
          for (const c of this.set) {
            if (c.length === 1 && isAny(c[0])) {
              this.set = [c];
              break;
            }
          }
        }
      }
      this.formatted = undefined;
    }
    get range() {
      if (this.formatted === undefined) {
        this.formatted = "";
        for (let i = 0;i < this.set.length; i++) {
          if (i > 0) {
            this.formatted += "||";
          }
          const comps = this.set[i];
          for (let k = 0;k < comps.length; k++) {
            if (k > 0) {
              this.formatted += " ";
            }
            this.formatted += comps[k].toString().trim();
          }
        }
      }
      return this.formatted;
    }
    format() {
      return this.range;
    }
    toString() {
      return this.range;
    }
    parseRange(range) {
      const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
      const memoKey = memoOpts + ":" + range;
      const cached = cache.get(memoKey);
      if (cached) {
        return cached;
      }
      const loose = this.options.loose;
      const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
      range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
      debug("hyphen replace", range);
      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
      debug("comparator trim", range);
      range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
      debug("tilde trim", range);
      range = range.replace(re[t.CARETTRIM], caretTrimReplace);
      debug("caret trim", range);
      let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
      if (loose) {
        rangeList = rangeList.filter((comp) => {
          debug("loose invalid filter", comp, this.options);
          return !!comp.match(re[t.COMPARATORLOOSE]);
        });
      }
      debug("range list", rangeList);
      const rangeMap = new Map;
      const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
      for (const comp of comparators) {
        if (isNullSet(comp)) {
          return [comp];
        }
        rangeMap.set(comp.value, comp);
      }
      if (rangeMap.size > 1 && rangeMap.has("")) {
        rangeMap.delete("");
      }
      const result = [...rangeMap.values()];
      cache.set(memoKey, result);
      return result;
    }
    intersects(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError("a Range is required");
      }
      return this.set.some((thisComparators) => {
        return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
          return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
            return rangeComparators.every((rangeComparator) => {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    }
    test(version) {
      if (!version) {
        return false;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      for (let i = 0;i < this.set.length; i++) {
        if (testSet(this.set[i], version, this.options)) {
          return true;
        }
      }
      return false;
    }
  }
  module.exports = Range;
  var LRU = require_lrucache();
  var cache = new LRU;
  var parseOptions = require_parse_options();
  var Comparator = require_comparator();
  var debug = require_debug2();
  var SemVer = require_semver();
  var {
    safeRe: re,
    t,
    comparatorTrimReplace,
    tildeTrimReplace,
    caretTrimReplace
  } = require_re();
  var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants3();
  var isNullSet = (c) => c.value === "<0.0.0-0";
  var isAny = (c) => c.value === "";
  var isSatisfiable = (comparators, options) => {
    let result = true;
    const remainingComparators = comparators.slice();
    let testComparator = remainingComparators.pop();
    while (result && remainingComparators.length) {
      result = remainingComparators.every((otherComparator) => {
        return testComparator.intersects(otherComparator, options);
      });
      testComparator = remainingComparators.pop();
    }
    return result;
  };
  var parseComparator = (comp, options) => {
    debug("comp", comp, options);
    comp = replaceCarets(comp, options);
    debug("caret", comp);
    comp = replaceTildes(comp, options);
    debug("tildes", comp);
    comp = replaceXRanges(comp, options);
    debug("xrange", comp);
    comp = replaceStars(comp, options);
    debug("stars", comp);
    return comp;
  };
  var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
  var replaceTildes = (comp, options) => {
    return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
  };
  var replaceTilde = (comp, options) => {
    const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
    return comp.replace(r, (_, M, m, p, pr) => {
      debug("tilde", comp, _, M, m, p, pr);
      let ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
      } else if (isX(p)) {
        ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
      } else if (pr) {
        debug("replaceTilde pr", pr);
        ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
      } else {
        ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
      }
      debug("tilde return", ret);
      return ret;
    });
  };
  var replaceCarets = (comp, options) => {
    return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
  };
  var replaceCaret = (comp, options) => {
    debug("caret", comp, options);
    const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
    const z = options.includePrerelease ? "-0" : "";
    return comp.replace(r, (_, M, m, p, pr) => {
      debug("caret", comp, _, M, m, p, pr);
      let ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
      } else if (isX(p)) {
        if (M === "0") {
          ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
        }
      } else if (pr) {
        debug("replaceCaret pr", pr);
        if (M === "0") {
          if (m === "0") {
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
          }
        } else {
          ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
        }
      } else {
        debug("no pr");
        if (M === "0") {
          if (m === "0") {
            ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
          } else {
            ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
          }
        } else {
          ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
        }
      }
      debug("caret return", ret);
      return ret;
    });
  };
  var replaceXRanges = (comp, options) => {
    debug("replaceXRanges", comp, options);
    return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
  };
  var replaceXRange = (comp, options) => {
    comp = comp.trim();
    const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
    return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
      debug("xRange", comp, ret, gtlt, M, m, p, pr);
      const xM = isX(M);
      const xm = xM || isX(m);
      const xp = xm || isX(p);
      const anyX = xp;
      if (gtlt === "=" && anyX) {
        gtlt = "";
      }
      pr = options.includePrerelease ? "-0" : "";
      if (xM) {
        if (gtlt === ">" || gtlt === "<") {
          ret = "<0.0.0-0";
        } else {
          ret = "*";
        }
      } else if (gtlt && anyX) {
        if (xm) {
          m = 0;
        }
        p = 0;
        if (gtlt === ">") {
          gtlt = ">=";
          if (xm) {
            M = +M + 1;
            m = 0;
            p = 0;
          } else {
            m = +m + 1;
            p = 0;
          }
        } else if (gtlt === "<=") {
          gtlt = "<";
          if (xm) {
            M = +M + 1;
          } else {
            m = +m + 1;
          }
        }
        if (gtlt === "<") {
          pr = "-0";
        }
        ret = `${gtlt + M}.${m}.${p}${pr}`;
      } else if (xm) {
        ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
      } else if (xp) {
        ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
      }
      debug("xRange return", ret);
      return ret;
    });
  };
  var replaceStars = (comp, options) => {
    debug("replaceStars", comp, options);
    return comp.trim().replace(re[t.STAR], "");
  };
  var replaceGTE0 = (comp, options) => {
    debug("replaceGTE0", comp, options);
    return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
  };
  var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
    if (isX(fM)) {
      from = "";
    } else if (isX(fm)) {
      from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
    } else if (isX(fp)) {
      from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
    } else if (fpr) {
      from = `>=${from}`;
    } else {
      from = `>=${from}${incPr ? "-0" : ""}`;
    }
    if (isX(tM)) {
      to = "";
    } else if (isX(tm)) {
      to = `<${+tM + 1}.0.0-0`;
    } else if (isX(tp)) {
      to = `<${tM}.${+tm + 1}.0-0`;
    } else if (tpr) {
      to = `<=${tM}.${tm}.${tp}-${tpr}`;
    } else if (incPr) {
      to = `<${tM}.${tm}.${+tp + 1}-0`;
    } else {
      to = `<=${to}`;
    }
    return `${from} ${to}`.trim();
  };
  var testSet = (set, version, options) => {
    for (let i = 0;i < set.length; i++) {
      if (!set[i].test(version)) {
        return false;
      }
    }
    if (version.prerelease.length && !options.includePrerelease) {
      for (let i = 0;i < set.length; i++) {
        debug(set[i].semver);
        if (set[i].semver === Comparator.ANY) {
          continue;
        }
        if (set[i].semver.prerelease.length > 0) {
          const allowed = set[i].semver;
          if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
            return true;
          }
        }
      }
      return false;
    }
    return true;
  };
});

// node_modules/semver/classes/comparator.js
var require_comparator = __commonJS((exports, module) => {
  var ANY = Symbol("SemVer ANY");

  class Comparator {
    static get ANY() {
      return ANY;
    }
    constructor(comp, options) {
      options = parseOptions(options);
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      comp = comp.trim().split(/\s+/).join(" ");
      debug("comparator", comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = "";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug("comp", this);
    }
    parse(comp) {
      const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
      const m = comp.match(r);
      if (!m) {
        throw new TypeError(`Invalid comparator: ${comp}`);
      }
      this.operator = m[1] !== undefined ? m[1] : "";
      if (this.operator === "=") {
        this.operator = "";
      }
      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    }
    toString() {
      return this.value;
    }
    test(version) {
      debug("Comparator.test", version, this.options.loose);
      if (this.semver === ANY || version === ANY) {
        return true;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      return cmp(version, this.operator, this.semver, this.options);
    }
    intersects(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError("a Comparator is required");
      }
      if (this.operator === "") {
        if (this.value === "") {
          return true;
        }
        return new Range(comp.value, options).test(this.value);
      } else if (comp.operator === "") {
        if (comp.value === "") {
          return true;
        }
        return new Range(this.value, options).test(comp.semver);
      }
      options = parseOptions(options);
      if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
        return false;
      }
      if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
        return false;
      }
      if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
        return true;
      }
      if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
        return true;
      }
      if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
        return true;
      }
      if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
        return true;
      }
      if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
        return true;
      }
      return false;
    }
  }
  module.exports = Comparator;
  var parseOptions = require_parse_options();
  var { safeRe: re, t } = require_re();
  var cmp = require_cmp();
  var debug = require_debug2();
  var SemVer = require_semver();
  var Range = require_range();
});

// node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS((exports, module) => {
  var Range = require_range();
  var satisfies = (version, range, options) => {
    try {
      range = new Range(range, options);
    } catch (er) {
      return false;
    }
    return range.test(version);
  };
  module.exports = satisfies;
});

// node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS((exports, module) => {
  var Range = require_range();
  var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
  module.exports = toComparators;
});

// node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS((exports, module) => {
  var SemVer = require_semver();
  var Range = require_range();
  var maxSatisfying = (versions, range, options) => {
    let max = null;
    let maxSV = null;
    let rangeObj = null;
    try {
      rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    versions.forEach((v) => {
      if (rangeObj.test(v)) {
        if (!max || maxSV.compare(v) === -1) {
          max = v;
          maxSV = new SemVer(max, options);
        }
      }
    });
    return max;
  };
  module.exports = maxSatisfying;
});

// node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS((exports, module) => {
  var SemVer = require_semver();
  var Range = require_range();
  var minSatisfying = (versions, range, options) => {
    let min = null;
    let minSV = null;
    let rangeObj = null;
    try {
      rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    versions.forEach((v) => {
      if (rangeObj.test(v)) {
        if (!min || minSV.compare(v) === 1) {
          min = v;
          minSV = new SemVer(min, options);
        }
      }
    });
    return min;
  };
  module.exports = minSatisfying;
});

// node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS((exports, module) => {
  var SemVer = require_semver();
  var Range = require_range();
  var gt = require_gt();
  var minVersion = (range, loose) => {
    range = new Range(range, loose);
    let minver = new SemVer("0.0.0");
    if (range.test(minver)) {
      return minver;
    }
    minver = new SemVer("0.0.0-0");
    if (range.test(minver)) {
      return minver;
    }
    minver = null;
    for (let i = 0;i < range.set.length; ++i) {
      const comparators = range.set[i];
      let setMin = null;
      comparators.forEach((comparator) => {
        const compver = new SemVer(comparator.semver.version);
        switch (comparator.operator) {
          case ">":
            if (compver.prerelease.length === 0) {
              compver.patch++;
            } else {
              compver.prerelease.push(0);
            }
            compver.raw = compver.format();
          case "":
          case ">=":
            if (!setMin || gt(compver, setMin)) {
              setMin = compver;
            }
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error(`Unexpected operation: ${comparator.operator}`);
        }
      });
      if (setMin && (!minver || gt(minver, setMin))) {
        minver = setMin;
      }
    }
    if (minver && range.test(minver)) {
      return minver;
    }
    return null;
  };
  module.exports = minVersion;
});

// node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS((exports, module) => {
  var Range = require_range();
  var validRange = (range, options) => {
    try {
      return new Range(range, options).range || "*";
    } catch (er) {
      return null;
    }
  };
  module.exports = validRange;
});

// node_modules/semver/ranges/outside.js
var require_outside = __commonJS((exports, module) => {
  var SemVer = require_semver();
  var Comparator = require_comparator();
  var { ANY } = Comparator;
  var Range = require_range();
  var satisfies = require_satisfies();
  var gt = require_gt();
  var lt = require_lt();
  var lte = require_lte();
  var gte = require_gte();
  var outside = (version, range, hilo, options) => {
    version = new SemVer(version, options);
    range = new Range(range, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt;
        ltefn = lte;
        ltfn = lt;
        comp = ">";
        ecomp = ">=";
        break;
      case "<":
        gtfn = lt;
        ltefn = gte;
        ltfn = gt;
        comp = "<";
        ecomp = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies(version, range, options)) {
      return false;
    }
    for (let i = 0;i < range.set.length; ++i) {
      const comparators = range.set[i];
      let high = null;
      let low = null;
      comparators.forEach((comparator) => {
        if (comparator.semver === ANY) {
          comparator = new Comparator(">=0.0.0");
        }
        high = high || comparator;
        low = low || comparator;
        if (gtfn(comparator.semver, high.semver, options)) {
          high = comparator;
        } else if (ltfn(comparator.semver, low.semver, options)) {
          low = comparator;
        }
      });
      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }
      if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version, low.semver)) {
        return false;
      }
    }
    return true;
  };
  module.exports = outside;
});

// node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS((exports, module) => {
  var outside = require_outside();
  var gtr = (version, range, options) => outside(version, range, ">", options);
  module.exports = gtr;
});

// node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS((exports, module) => {
  var outside = require_outside();
  var ltr = (version, range, options) => outside(version, range, "<", options);
  module.exports = ltr;
});

// node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS((exports, module) => {
  var Range = require_range();
  var intersects = (r1, r2, options) => {
    r1 = new Range(r1, options);
    r2 = new Range(r2, options);
    return r1.intersects(r2, options);
  };
  module.exports = intersects;
});

// node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS((exports, module) => {
  var satisfies = require_satisfies();
  var compare = require_compare2();
  module.exports = (versions, range, options) => {
    const set = [];
    let first = null;
    let prev = null;
    const v = versions.sort((a, b) => compare(a, b, options));
    for (const version of v) {
      const included = satisfies(version, range, options);
      if (included) {
        prev = version;
        if (!first) {
          first = version;
        }
      } else {
        if (prev) {
          set.push([first, prev]);
        }
        prev = null;
        first = null;
      }
    }
    if (first) {
      set.push([first, null]);
    }
    const ranges = [];
    for (const [min, max] of set) {
      if (min === max) {
        ranges.push(min);
      } else if (!max && min === v[0]) {
        ranges.push("*");
      } else if (!max) {
        ranges.push(`>=${min}`);
      } else if (min === v[0]) {
        ranges.push(`<=${max}`);
      } else {
        ranges.push(`${min} - ${max}`);
      }
    }
    const simplified = ranges.join(" || ");
    const original = typeof range.raw === "string" ? range.raw : String(range);
    return simplified.length < original.length ? simplified : range;
  };
});

// node_modules/semver/ranges/subset.js
var require_subset = __commonJS((exports, module) => {
  var Range = require_range();
  var Comparator = require_comparator();
  var { ANY } = Comparator;
  var satisfies = require_satisfies();
  var compare = require_compare2();
  var subset = (sub, dom, options = {}) => {
    if (sub === dom) {
      return true;
    }
    sub = new Range(sub, options);
    dom = new Range(dom, options);
    let sawNonNull = false;
    OUTER:
      for (const simpleSub of sub.set) {
        for (const simpleDom of dom.set) {
          const isSub = simpleSubset(simpleSub, simpleDom, options);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub) {
            continue OUTER;
          }
        }
        if (sawNonNull) {
          return false;
        }
      }
    return true;
  };
  var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
  var minimumVersion = [new Comparator(">=0.0.0")];
  var simpleSubset = (sub, dom, options) => {
    if (sub === dom) {
      return true;
    }
    if (sub.length === 1 && sub[0].semver === ANY) {
      if (dom.length === 1 && dom[0].semver === ANY) {
        return true;
      } else if (options.includePrerelease) {
        sub = minimumVersionWithPreRelease;
      } else {
        sub = minimumVersion;
      }
    }
    if (dom.length === 1 && dom[0].semver === ANY) {
      if (options.includePrerelease) {
        return true;
      } else {
        dom = minimumVersion;
      }
    }
    const eqSet = new Set;
    let gt, lt;
    for (const c of sub) {
      if (c.operator === ">" || c.operator === ">=") {
        gt = higherGT(gt, c, options);
      } else if (c.operator === "<" || c.operator === "<=") {
        lt = lowerLT(lt, c, options);
      } else {
        eqSet.add(c.semver);
      }
    }
    if (eqSet.size > 1) {
      return null;
    }
    let gtltComp;
    if (gt && lt) {
      gtltComp = compare(gt.semver, lt.semver, options);
      if (gtltComp > 0) {
        return null;
      } else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) {
        return null;
      }
    }
    for (const eq of eqSet) {
      if (gt && !satisfies(eq, String(gt), options)) {
        return null;
      }
      if (lt && !satisfies(eq, String(lt), options)) {
        return null;
      }
      for (const c of dom) {
        if (!satisfies(eq, String(c), options)) {
          return false;
        }
      }
      return true;
    }
    let higher, lower;
    let hasDomLT, hasDomGT;
    let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
    let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
    if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
      needDomLTPre = false;
    }
    for (const c of dom) {
      hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
      hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
      if (gt) {
        if (needDomGTPre) {
          if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
            needDomGTPre = false;
          }
        }
        if (c.operator === ">" || c.operator === ">=") {
          higher = higherGT(gt, c, options);
          if (higher === c && higher !== gt) {
            return false;
          }
        } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options)) {
          return false;
        }
      }
      if (lt) {
        if (needDomLTPre) {
          if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
            needDomLTPre = false;
          }
        }
        if (c.operator === "<" || c.operator === "<=") {
          lower = lowerLT(lt, c, options);
          if (lower === c && lower !== lt) {
            return false;
          }
        } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options)) {
          return false;
        }
      }
      if (!c.operator && (lt || gt) && gtltComp !== 0) {
        return false;
      }
    }
    if (gt && hasDomLT && !lt && gtltComp !== 0) {
      return false;
    }
    if (lt && hasDomGT && !gt && gtltComp !== 0) {
      return false;
    }
    if (needDomGTPre || needDomLTPre) {
      return false;
    }
    return true;
  };
  var higherGT = (a, b, options) => {
    if (!a) {
      return b;
    }
    const comp = compare(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
  };
  var lowerLT = (a, b, options) => {
    if (!a) {
      return b;
    }
    const comp = compare(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
  };
  module.exports = subset;
});

// node_modules/semver/index.js
var require_semver2 = __commonJS((exports, module) => {
  var internalRe = require_re();
  var constants = require_constants3();
  var SemVer = require_semver();
  var identifiers = require_identifiers();
  var parse = require_parse3();
  var valid = require_valid();
  var clean = require_clean();
  var inc = require_inc();
  var diff = require_diff();
  var major = require_major();
  var minor = require_minor();
  var patch = require_patch();
  var prerelease = require_prerelease();
  var compare = require_compare2();
  var rcompare = require_rcompare();
  var compareLoose = require_compare_loose();
  var compareBuild = require_compare_build();
  var sort = require_sort();
  var rsort = require_rsort();
  var gt = require_gt();
  var lt = require_lt();
  var eq = require_eq();
  var neq = require_neq();
  var gte = require_gte();
  var lte = require_lte();
  var cmp = require_cmp();
  var coerce = require_coerce();
  var Comparator = require_comparator();
  var Range = require_range();
  var satisfies = require_satisfies();
  var toComparators = require_to_comparators();
  var maxSatisfying = require_max_satisfying();
  var minSatisfying = require_min_satisfying();
  var minVersion = require_min_version();
  var validRange = require_valid2();
  var outside = require_outside();
  var gtr = require_gtr();
  var ltr = require_ltr();
  var intersects = require_intersects();
  var simplifyRange = require_simplify();
  var subset = require_subset();
  module.exports = {
    parse,
    valid,
    clean,
    inc,
    diff,
    major,
    minor,
    patch,
    prerelease,
    compare,
    rcompare,
    compareLoose,
    compareBuild,
    sort,
    rsort,
    gt,
    lt,
    eq,
    neq,
    gte,
    lte,
    cmp,
    coerce,
    Comparator,
    Range,
    satisfies,
    toComparators,
    maxSatisfying,
    minSatisfying,
    minVersion,
    validRange,
    outside,
    gtr,
    ltr,
    intersects,
    simplifyRange,
    subset,
    SemVer,
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: constants.RELEASE_TYPES,
    compareIdentifiers: identifiers.compareIdentifiers,
    rcompareIdentifiers: identifiers.rcompareIdentifiers
  };
});

// node_modules/fastify/lib/pluginUtils.js
var require_pluginUtils = __commonJS((exports, module) => {
  var semver = require_semver2();
  var assert = __require("node:assert");
  var kRegisteredPlugins = Symbol.for("registered-plugin");
  var {
    kTestInternals
  } = require_symbols3();
  var { exist, existReply, existRequest } = require_decorate();
  var {
    FST_ERR_PLUGIN_VERSION_MISMATCH,
    FST_ERR_PLUGIN_NOT_PRESENT_IN_INSTANCE,
    FST_ERR_PLUGIN_INVALID_ASYNC_HANDLER
  } = require_errors4();
  var rcRegex = /-(?:rc|pre|alpha).+$/u;
  function getMeta(fn) {
    return fn[Symbol.for("plugin-meta")];
  }
  function getPluginName(func) {
    const display = getDisplayName(func);
    if (display) {
      return display;
    }
    const cache = __require.cache;
    if (cache) {
      const keys = Object.keys(cache);
      for (let i = 0;i < keys.length; i++) {
        const key = keys[i];
        if (cache[key].exports === func) {
          return key;
        }
      }
    }
    if (func.name) {
      return func.name;
    }
    return null;
  }
  function getFuncPreview(func) {
    return func.toString().split(`
`, 2).map((s) => s.trim()).join(" -- ");
  }
  function getDisplayName(fn) {
    return fn[Symbol.for("fastify.display-name")];
  }
  function shouldSkipOverride(fn) {
    return !!fn[Symbol.for("skip-override")];
  }
  function checkDependencies(fn) {
    const meta = getMeta(fn);
    if (!meta)
      return;
    const dependencies = meta.dependencies;
    if (!dependencies)
      return;
    assert(Array.isArray(dependencies), "The dependencies should be an array of strings");
    dependencies.forEach((dependency) => {
      assert(this[kRegisteredPlugins].indexOf(dependency) > -1, `The dependency '${dependency}' of plugin '${meta.name}' is not registered`);
    });
  }
  function checkDecorators(fn) {
    const meta = getMeta(fn);
    if (!meta)
      return;
    const { decorators, name } = meta;
    if (!decorators)
      return;
    if (decorators.fastify)
      _checkDecorators(this, "Fastify", decorators.fastify, name);
    if (decorators.reply)
      _checkDecorators(this, "Reply", decorators.reply, name);
    if (decorators.request)
      _checkDecorators(this, "Request", decorators.request, name);
  }
  var checks = {
    Fastify: exist,
    Request: existRequest,
    Reply: existReply
  };
  function _checkDecorators(that, instance, decorators, name) {
    assert(Array.isArray(decorators), "The decorators should be an array of strings");
    decorators.forEach((decorator) => {
      const withPluginName = typeof name === "string" ? ` required by '${name}'` : "";
      if (!checks[instance].call(that, decorator)) {
        throw new FST_ERR_PLUGIN_NOT_PRESENT_IN_INSTANCE(decorator, withPluginName, instance);
      }
    });
  }
  function checkVersion(fn) {
    const meta = getMeta(fn);
    if (meta?.fastify == null)
      return;
    const requiredVersion = meta.fastify;
    const fastifyRc = rcRegex.test(this.version);
    if (fastifyRc === true && semver.gt(this.version, semver.coerce(requiredVersion)) === true) {
      return;
    }
    if (requiredVersion && semver.satisfies(this.version, requiredVersion, { includePrerelease: fastifyRc }) === false) {
      throw new FST_ERR_PLUGIN_VERSION_MISMATCH(meta.name, requiredVersion, this.version);
    }
  }
  function registerPluginName(fn) {
    const meta = getMeta(fn);
    if (!meta)
      return;
    const name = meta.name;
    if (!name)
      return;
    this[kRegisteredPlugins].push(name);
    return name;
  }
  function checkPluginHealthiness(fn, pluginName) {
    if (fn.constructor.name === "AsyncFunction" && fn.length === 3) {
      throw new FST_ERR_PLUGIN_INVALID_ASYNC_HANDLER(pluginName);
    }
  }
  function registerPlugin(fn) {
    const pluginName = registerPluginName.call(this, fn) || getPluginName(fn);
    checkPluginHealthiness.call(this, fn, pluginName);
    checkVersion.call(this, fn);
    checkDecorators.call(this, fn);
    checkDependencies.call(this, fn);
    return shouldSkipOverride(fn);
  }
  module.exports = {
    getPluginName,
    getFuncPreview,
    kRegisteredPlugins,
    getDisplayName,
    registerPlugin
  };
  module.exports[kTestInternals] = {
    shouldSkipOverride,
    getMeta,
    checkDecorators,
    checkDependencies
  };
});

// node_modules/fastify/lib/reqIdGenFactory.js
var require_reqIdGenFactory = __commonJS((exports, module) => {
  function reqIdGenFactory(requestIdHeader, optGenReqId) {
    const genReqId = optGenReqId || buildDefaultGenReqId();
    if (requestIdHeader) {
      return buildOptionalHeaderReqId(requestIdHeader, genReqId);
    }
    return genReqId;
  }
  function getGenReqId(contextServer, req) {
    return contextServer.genReqId(req);
  }
  function buildDefaultGenReqId() {
    const maxInt = 2147483647;
    let nextReqId = 0;
    return function defaultGenReqId() {
      nextReqId = nextReqId + 1 & maxInt;
      return `req-${nextReqId.toString(36)}`;
    };
  }
  function buildOptionalHeaderReqId(requestIdHeader, genReqId) {
    return function(req) {
      return req.headers[requestIdHeader] || genReqId(req);
    };
  }
  module.exports = {
    getGenReqId,
    reqIdGenFactory
  };
});

// node_modules/fast-querystring/lib/parse.js
var require_parse4 = __commonJS((exports, module) => {
  var fastDecode = require_fast_decode_uri_component();
  var plusRegex = /\+/g;
  var Empty = function() {
  };
  Empty.prototype = Object.create(null);
  function parse(input) {
    const result = new Empty;
    if (typeof input !== "string") {
      return result;
    }
    let inputLength = input.length;
    let key = "";
    let value = "";
    let startingIndex = -1;
    let equalityIndex = -1;
    let shouldDecodeKey = false;
    let shouldDecodeValue = false;
    let keyHasPlus = false;
    let valueHasPlus = false;
    let hasBothKeyValuePair = false;
    let c = 0;
    for (let i = 0;i < inputLength + 1; i++) {
      c = i !== inputLength ? input.charCodeAt(i) : 38;
      if (c === 38) {
        hasBothKeyValuePair = equalityIndex > startingIndex;
        if (!hasBothKeyValuePair) {
          equalityIndex = i;
        }
        key = input.slice(startingIndex + 1, equalityIndex);
        if (hasBothKeyValuePair || key.length > 0) {
          if (keyHasPlus) {
            key = key.replace(plusRegex, " ");
          }
          if (shouldDecodeKey) {
            key = fastDecode(key) || key;
          }
          if (hasBothKeyValuePair) {
            value = input.slice(equalityIndex + 1, i);
            if (valueHasPlus) {
              value = value.replace(plusRegex, " ");
            }
            if (shouldDecodeValue) {
              value = fastDecode(value) || value;
            }
          }
          const currentValue = result[key];
          if (currentValue === undefined) {
            result[key] = value;
          } else {
            if (currentValue.pop) {
              currentValue.push(value);
            } else {
              result[key] = [currentValue, value];
            }
          }
        }
        value = "";
        startingIndex = i;
        equalityIndex = i;
        shouldDecodeKey = false;
        shouldDecodeValue = false;
        keyHasPlus = false;
        valueHasPlus = false;
      } else if (c === 61) {
        if (equalityIndex <= startingIndex) {
          equalityIndex = i;
        } else {
          shouldDecodeValue = true;
        }
      } else if (c === 43) {
        if (equalityIndex > startingIndex) {
          valueHasPlus = true;
        } else {
          keyHasPlus = true;
        }
      } else if (c === 37) {
        if (equalityIndex > startingIndex) {
          shouldDecodeValue = true;
        } else {
          shouldDecodeKey = true;
        }
      }
    }
    return result;
  }
  module.exports = parse;
});

// node_modules/fast-querystring/lib/internals/querystring.js
var require_querystring = __commonJS((exports, module) => {
  var hexTable = Array.from({ length: 256 }, (_, i) => "%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
  var noEscape = new Int8Array([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    1,
    0
  ]);
  function encodeString(str) {
    const len = str.length;
    if (len === 0)
      return "";
    let out = "";
    let lastPos = 0;
    let i = 0;
    outer:
      for (;i < len; i++) {
        let c = str.charCodeAt(i);
        while (c < 128) {
          if (noEscape[c] !== 1) {
            if (lastPos < i)
              out += str.slice(lastPos, i);
            lastPos = i + 1;
            out += hexTable[c];
          }
          if (++i === len)
            break outer;
          c = str.charCodeAt(i);
        }
        if (lastPos < i)
          out += str.slice(lastPos, i);
        if (c < 2048) {
          lastPos = i + 1;
          out += hexTable[192 | c >> 6] + hexTable[128 | c & 63];
          continue;
        }
        if (c < 55296 || c >= 57344) {
          lastPos = i + 1;
          out += hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
          continue;
        }
        ++i;
        if (i >= len) {
          throw new Error("URI malformed");
        }
        const c2 = str.charCodeAt(i) & 1023;
        lastPos = i + 1;
        c = 65536 + ((c & 1023) << 10 | c2);
        out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
      }
    if (lastPos === 0)
      return str;
    if (lastPos < len)
      return out + str.slice(lastPos);
    return out;
  }
  module.exports = { encodeString };
});

// node_modules/fast-querystring/lib/stringify.js
var require_stringify2 = __commonJS((exports, module) => {
  var { encodeString } = require_querystring();
  function getAsPrimitive(value) {
    const type = typeof value;
    if (type === "string") {
      return encodeString(value);
    } else if (type === "bigint") {
      return value.toString();
    } else if (type === "boolean") {
      return value ? "true" : "false";
    } else if (type === "number" && Number.isFinite(value)) {
      return value < 1000000000000000000000 ? "" + value : encodeString("" + value);
    }
    return "";
  }
  function stringify(input) {
    let result = "";
    if (input === null || typeof input !== "object") {
      return result;
    }
    const separator = "&";
    const keys = Object.keys(input);
    const keyLength = keys.length;
    let valueLength = 0;
    for (let i = 0;i < keyLength; i++) {
      const key = keys[i];
      const value = input[key];
      const encodedKey = encodeString(key) + "=";
      if (i) {
        result += separator;
      }
      if (Array.isArray(value)) {
        valueLength = value.length;
        for (let j = 0;j < valueLength; j++) {
          if (j) {
            result += separator;
          }
          result += encodedKey;
          result += getAsPrimitive(value[j]);
        }
      } else {
        result += encodedKey;
        result += getAsPrimitive(value);
      }
    }
    return result;
  }
  module.exports = stringify;
});

// node_modules/fast-querystring/lib/index.js
var require_lib = __commonJS((exports, module) => {
  var parse = require_parse4();
  var stringify = require_stringify2();
  var fastQuerystring = {
    parse,
    stringify
  };
  module.exports = fastQuerystring;
  module.exports.default = fastQuerystring;
  module.exports.parse = parse;
  module.exports.stringify = stringify;
});

// node_modules/ret/dist/types/tokens.js
var require_tokens = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
});

// node_modules/ret/dist/types/types.js
var require_types3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.types = undefined;
  var types;
  (function(types2) {
    types2[types2["ROOT"] = 0] = "ROOT";
    types2[types2["GROUP"] = 1] = "GROUP";
    types2[types2["POSITION"] = 2] = "POSITION";
    types2[types2["SET"] = 3] = "SET";
    types2[types2["RANGE"] = 4] = "RANGE";
    types2[types2["REPETITION"] = 5] = "REPETITION";
    types2[types2["REFERENCE"] = 6] = "REFERENCE";
    types2[types2["CHAR"] = 7] = "CHAR";
  })(types = exports.types || (exports.types = {}));
});

// node_modules/ret/dist/types/set-lookup.js
var require_set_lookup = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
});

// node_modules/ret/dist/types/index.js
var require_types4 = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __exportStar = exports && exports.__exportStar || function(m, exports2) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding(exports2, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(require_tokens(), exports);
  __exportStar(require_types3(), exports);
  __exportStar(require_set_lookup(), exports);
});

// node_modules/ret/dist/sets.js
var require_sets = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.anyChar = exports.notWhitespace = exports.whitespace = exports.notInts = exports.ints = exports.notWords = exports.words = undefined;
  var types_1 = require_types4();
  var INTS = () => [{ type: types_1.types.RANGE, from: 48, to: 57 }];
  var WORDS = () => [
    { type: types_1.types.CHAR, value: 95 },
    { type: types_1.types.RANGE, from: 97, to: 122 },
    { type: types_1.types.RANGE, from: 65, to: 90 },
    { type: types_1.types.RANGE, from: 48, to: 57 }
  ];
  var WHITESPACE = () => [
    { type: types_1.types.CHAR, value: 9 },
    { type: types_1.types.CHAR, value: 10 },
    { type: types_1.types.CHAR, value: 11 },
    { type: types_1.types.CHAR, value: 12 },
    { type: types_1.types.CHAR, value: 13 },
    { type: types_1.types.CHAR, value: 32 },
    { type: types_1.types.CHAR, value: 160 },
    { type: types_1.types.CHAR, value: 5760 },
    { type: types_1.types.RANGE, from: 8192, to: 8202 },
    { type: types_1.types.CHAR, value: 8232 },
    { type: types_1.types.CHAR, value: 8233 },
    { type: types_1.types.CHAR, value: 8239 },
    { type: types_1.types.CHAR, value: 8287 },
    { type: types_1.types.CHAR, value: 12288 },
    { type: types_1.types.CHAR, value: 65279 }
  ];
  var NOTANYCHAR = () => [
    { type: types_1.types.CHAR, value: 10 },
    { type: types_1.types.CHAR, value: 13 },
    { type: types_1.types.CHAR, value: 8232 },
    { type: types_1.types.CHAR, value: 8233 }
  ];
  exports.words = () => ({ type: types_1.types.SET, set: WORDS(), not: false });
  exports.notWords = () => ({ type: types_1.types.SET, set: WORDS(), not: true });
  exports.ints = () => ({ type: types_1.types.SET, set: INTS(), not: false });
  exports.notInts = () => ({ type: types_1.types.SET, set: INTS(), not: true });
  exports.whitespace = () => ({ type: types_1.types.SET, set: WHITESPACE(), not: false });
  exports.notWhitespace = () => ({ type: types_1.types.SET, set: WHITESPACE(), not: true });
  exports.anyChar = () => ({ type: types_1.types.SET, set: NOTANYCHAR(), not: true });
});

// node_modules/ret/dist/util.js
var require_util2 = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.tokenizeClass = exports.strToChars = undefined;
  var types_1 = require_types4();
  var sets = __importStar(require_sets());
  var CTRL = "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^ ?";
  exports.strToChars = (str) => {
    const charsRegex = /(\[\\b\])|(\\)?\\(?:u([A-F0-9]{4})|x([A-F0-9]{2})|c([@A-Z[\\\]^?])|([0tnvfr]))/g;
    return str.replace(charsRegex, (s, b, lbs, a16, b16, dctrl, eslsh) => {
      if (lbs) {
        return s;
      }
      let code = b ? 8 : a16 ? parseInt(a16, 16) : b16 ? parseInt(b16, 16) : dctrl ? CTRL.indexOf(dctrl) : {
        0: 0,
        t: 9,
        n: 10,
        v: 11,
        f: 12,
        r: 13
      }[eslsh];
      let c = String.fromCharCode(code);
      return /[[\]{}^$.|?*+()]/.test(c) ? `\\${c}` : c;
    });
  };
  exports.tokenizeClass = (str, regexpStr) => {
    var _a, _b, _c, _d, _e, _f, _g;
    let tokens = [], rs, c;
    const regexp = /\\(?:(w)|(d)|(s)|(W)|(D)|(S))|((?:(?:\\)(.)|([^\]\\]))-(((?:\\)])|(((?:\\)?([^\]])))))|(\])|(?:\\)?([^])/g;
    while ((rs = regexp.exec(str)) !== null) {
      const p = (_g = (_f = (_e = (_d = (_c = (_b = (_a = rs[1] && sets.words()) !== null && _a !== undefined ? _a : rs[2] && sets.ints()) !== null && _b !== undefined ? _b : rs[3] && sets.whitespace()) !== null && _c !== undefined ? _c : rs[4] && sets.notWords()) !== null && _d !== undefined ? _d : rs[5] && sets.notInts()) !== null && _e !== undefined ? _e : rs[6] && sets.notWhitespace()) !== null && _f !== undefined ? _f : rs[7] && {
        type: types_1.types.RANGE,
        from: (rs[8] || rs[9]).charCodeAt(0),
        to: (c = rs[10]).charCodeAt(c.length - 1)
      }) !== null && _g !== undefined ? _g : (c = rs[16]) && { type: types_1.types.CHAR, value: c.charCodeAt(0) };
      if (p) {
        tokens.push(p);
      } else {
        return [tokens, regexp.lastIndex];
      }
    }
    throw new SyntaxError(`Invalid regular expression: /${regexpStr}/: Unterminated character class`);
  };
});

// node_modules/ret/dist/tokenizer.js
var require_tokenizer = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.tokenizer = undefined;
  var util = __importStar(require_util2());
  var types_1 = require_types4();
  var sets = __importStar(require_sets());
  var captureGroupFirstChar = /^[a-zA-Z_$]$/i;
  var captureGroupChars = /^[a-zA-Z0-9_$]$/i;
  var digit = /\d/;
  exports.tokenizer = (regexpStr) => {
    let i = 0, c;
    let start = { type: types_1.types.ROOT, stack: [] };
    let lastGroup = start;
    let last = start.stack;
    let groupStack = [];
    let referenceQueue = [];
    let groupCount = 0;
    const repeatErr = (col) => {
      throw new SyntaxError(`Invalid regular expression: /${regexpStr}/: Nothing to repeat at column ${col - 1}`);
    };
    let str = util.strToChars(regexpStr);
    while (i < str.length) {
      switch (c = str[i++]) {
        case "\\":
          if (i === str.length) {
            throw new SyntaxError(`Invalid regular expression: /${regexpStr}/: \\ at end of pattern`);
          }
          switch (c = str[i++]) {
            case "b":
              last.push({ type: types_1.types.POSITION, value: "b" });
              break;
            case "B":
              last.push({ type: types_1.types.POSITION, value: "B" });
              break;
            case "w":
              last.push(sets.words());
              break;
            case "W":
              last.push(sets.notWords());
              break;
            case "d":
              last.push(sets.ints());
              break;
            case "D":
              last.push(sets.notInts());
              break;
            case "s":
              last.push(sets.whitespace());
              break;
            case "S":
              last.push(sets.notWhitespace());
              break;
            default:
              if (digit.test(c)) {
                let digits = c;
                while (i < str.length && digit.test(str[i])) {
                  digits += str[i++];
                }
                let value = parseInt(digits, 10);
                const reference = { type: types_1.types.REFERENCE, value };
                last.push(reference);
                referenceQueue.push({ reference, stack: last, index: last.length - 1 });
              } else {
                last.push({ type: types_1.types.CHAR, value: c.charCodeAt(0) });
              }
          }
          break;
        case "^":
          last.push({ type: types_1.types.POSITION, value: "^" });
          break;
        case "$":
          last.push({ type: types_1.types.POSITION, value: "$" });
          break;
        case "[": {
          let not;
          if (str[i] === "^") {
            not = true;
            i++;
          } else {
            not = false;
          }
          let classTokens = util.tokenizeClass(str.slice(i), regexpStr);
          i += classTokens[1];
          last.push({
            type: types_1.types.SET,
            set: classTokens[0],
            not
          });
          break;
        }
        case ".":
          last.push(sets.anyChar());
          break;
        case "(": {
          let group = {
            type: types_1.types.GROUP,
            stack: [],
            remember: true
          };
          if (str[i] === "?") {
            c = str[i + 1];
            i += 2;
            if (c === "=") {
              group.followedBy = true;
              group.remember = false;
            } else if (c === "!") {
              group.notFollowedBy = true;
              group.remember = false;
            } else if (c === "<") {
              let name = "";
              if (captureGroupFirstChar.test(str[i])) {
                name += str[i];
                i++;
              } else {
                throw new SyntaxError(`Invalid regular expression: /${regexpStr}/: Invalid capture group name, character '${str[i]}'` + ` after '<' at column ${i + 1}`);
              }
              while (i < str.length && captureGroupChars.test(str[i])) {
                name += str[i];
                i++;
              }
              if (!name) {
                throw new SyntaxError(`Invalid regular expression: /${regexpStr}/: Invalid capture group name, character '${str[i]}'` + ` after '<' at column ${i + 1}`);
              }
              if (str[i] !== ">") {
                throw new SyntaxError(`Invalid regular expression: /${regexpStr}/: Unclosed capture group name, expected '>', found` + ` '${str[i]}' at column ${i + 1}`);
              }
              group.name = name;
              i++;
            } else if (c === ":") {
              group.remember = false;
            } else {
              throw new SyntaxError(`Invalid regular expression: /${regexpStr}/: Invalid group, character '${c}'` + ` after '?' at column ${i - 1}`);
            }
          } else {
            groupCount += 1;
          }
          last.push(group);
          groupStack.push(lastGroup);
          lastGroup = group;
          last = group.stack;
          break;
        }
        case ")":
          if (groupStack.length === 0) {
            throw new SyntaxError(`Invalid regular expression: /${regexpStr}/: Unmatched ) at column ${i - 1}`);
          }
          lastGroup = groupStack.pop();
          last = lastGroup.options ? lastGroup.options[lastGroup.options.length - 1] : lastGroup.stack;
          break;
        case "|": {
          if (!lastGroup.options) {
            lastGroup.options = [lastGroup.stack];
            delete lastGroup.stack;
          }
          let stack = [];
          lastGroup.options.push(stack);
          last = stack;
          break;
        }
        case "{": {
          let rs = /^(\d+)(,(\d+)?)?\}/.exec(str.slice(i)), min, max;
          if (rs !== null) {
            if (last.length === 0) {
              repeatErr(i);
            }
            min = parseInt(rs[1], 10);
            max = rs[2] ? rs[3] ? parseInt(rs[3], 10) : Infinity : min;
            i += rs[0].length;
            last.push({
              type: types_1.types.REPETITION,
              min,
              max,
              value: last.pop()
            });
          } else {
            last.push({
              type: types_1.types.CHAR,
              value: 123
            });
          }
          break;
        }
        case "?":
          if (last.length === 0) {
            repeatErr(i);
          }
          last.push({
            type: types_1.types.REPETITION,
            min: 0,
            max: 1,
            value: last.pop()
          });
          break;
        case "+":
          if (last.length === 0) {
            repeatErr(i);
          }
          last.push({
            type: types_1.types.REPETITION,
            min: 1,
            max: Infinity,
            value: last.pop()
          });
          break;
        case "*":
          if (last.length === 0) {
            repeatErr(i);
          }
          last.push({
            type: types_1.types.REPETITION,
            min: 0,
            max: Infinity,
            value: last.pop()
          });
          break;
        default:
          last.push({
            type: types_1.types.CHAR,
            value: c.charCodeAt(0)
          });
      }
    }
    if (groupStack.length !== 0) {
      throw new SyntaxError(`Invalid regular expression: /${regexpStr}/: Unterminated group`);
    }
    updateReferences(referenceQueue, groupCount);
    return start;
  };
  function updateReferences(referenceQueue, groupCount) {
    for (const elem of referenceQueue.reverse()) {
      if (groupCount < elem.reference.value) {
        elem.reference.type = types_1.types.CHAR;
        const valueString = elem.reference.value.toString();
        elem.reference.value = parseInt(valueString, 8);
        if (!/^[0-7]+$/.test(valueString)) {
          let i = 0;
          while (valueString[i] !== "8" && valueString[i] !== "9") {
            i += 1;
          }
          if (i === 0) {
            elem.reference.value = valueString.charCodeAt(0);
            i += 1;
          } else {
            elem.reference.value = parseInt(valueString.slice(0, i), 8);
          }
          if (valueString.length > i) {
            const tail = elem.stack.splice(elem.index + 1);
            for (const char of valueString.slice(i)) {
              elem.stack.push({
                type: types_1.types.CHAR,
                value: char.charCodeAt(0)
              });
            }
            elem.stack.push(...tail);
          }
        }
      }
    }
  }
});

// node_modules/ret/dist/sets-lookup.js
var require_sets_lookup = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.NOTANYCHAR = exports.WHITESPACE = exports.WORDS = exports.INTS = undefined;
  var Sets = __importStar(require_sets());
  var types_1 = require_types4();
  function setToLookup(tokens) {
    let lookup = {};
    let len = 0;
    for (const token of tokens) {
      if (token.type === types_1.types.CHAR) {
        lookup[token.value] = true;
      }
      if (token.type === types_1.types.RANGE) {
        lookup[`${token.from}-${token.to}`] = true;
      }
      len += 1;
    }
    return {
      lookup: () => Object.assign({}, lookup),
      len
    };
  }
  exports.INTS = setToLookup(Sets.ints().set);
  exports.WORDS = setToLookup(Sets.words().set);
  exports.WHITESPACE = setToLookup(Sets.whitespace().set);
  exports.NOTANYCHAR = setToLookup(Sets.anyChar().set);
});

// node_modules/ret/dist/write-set-tokens.js
var require_write_set_tokens = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.writeSetTokens = exports.setChar = undefined;
  var types_1 = require_types4();
  var sets = __importStar(require_sets_lookup());
  function setChar(charCode) {
    return charCode === 94 ? "\\^" : charCode === 92 ? "\\\\" : charCode === 93 ? "\\]" : charCode === 45 ? "\\-" : String.fromCharCode(charCode);
  }
  exports.setChar = setChar;
  function isSameSet(set, { lookup, len }) {
    if (len !== set.length) {
      return false;
    }
    const map3 = lookup();
    for (const elem of set) {
      if (elem.type === types_1.types.SET) {
        return false;
      }
      const key = elem.type === types_1.types.CHAR ? elem.value : `${elem.from}-${elem.to}`;
      if (map3[key]) {
        map3[key] = false;
      } else {
        return false;
      }
    }
    return true;
  }
  function writeSetTokens(set, isNested = false) {
    if (isSameSet(set.set, sets.INTS)) {
      return set.not ? "\\D" : "\\d";
    }
    if (isSameSet(set.set, sets.WORDS)) {
      return set.not ? "\\W" : "\\w";
    }
    if (set.not && isSameSet(set.set, sets.NOTANYCHAR)) {
      return ".";
    }
    if (isSameSet(set.set, sets.WHITESPACE)) {
      return set.not ? "\\S" : "\\s";
    }
    let tokenString = "";
    for (let i = 0;i < set.set.length; i++) {
      const subset = set.set[i];
      tokenString += writeSetToken(subset);
    }
    const contents = `${set.not ? "^" : ""}${tokenString}`;
    return isNested ? contents : `[${contents}]`;
  }
  exports.writeSetTokens = writeSetTokens;
  function writeSetToken(set) {
    if (set.type === types_1.types.CHAR) {
      return setChar(set.value);
    } else if (set.type === types_1.types.RANGE) {
      return `${setChar(set.from)}-${setChar(set.to)}`;
    }
    return writeSetTokens(set, true);
  }
});

// node_modules/ret/dist/reconstruct.js
var require_reconstruct = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.reconstruct = undefined;
  var types_1 = require_types4();
  var write_set_tokens_1 = require_write_set_tokens();
  var reduceStack = (stack) => stack.map(exports.reconstruct).join("");
  var createAlternate = (token) => {
    if ("options" in token) {
      return token.options.map(reduceStack).join("|");
    } else if ("stack" in token) {
      return reduceStack(token.stack);
    } else {
      throw new Error(`options or stack must be Root or Group token`);
    }
  };
  exports.reconstruct = (token) => {
    switch (token.type) {
      case types_1.types.ROOT:
        return createAlternate(token);
      case types_1.types.CHAR: {
        const c = String.fromCharCode(token.value);
        return (/[[\\{}$^.|?*+()]/.test(c) ? "\\" : "") + c;
      }
      case types_1.types.POSITION:
        if (token.value === "^" || token.value === "$") {
          return token.value;
        } else {
          return `\\${token.value}`;
        }
      case types_1.types.REFERENCE:
        return `\\${token.value}`;
      case types_1.types.SET:
        return write_set_tokens_1.writeSetTokens(token);
      case types_1.types.GROUP: {
        const prefix = token.name ? `?<${token.name}>` : token.remember ? "" : token.followedBy ? "?=" : token.notFollowedBy ? "?!" : "?:";
        return `(${prefix}${createAlternate(token)})`;
      }
      case types_1.types.REPETITION: {
        const { min, max } = token;
        let endWith;
        if (min === 0 && max === 1) {
          endWith = "?";
        } else if (min === 1 && max === Infinity) {
          endWith = "+";
        } else if (min === 0 && max === Infinity) {
          endWith = "*";
        } else if (max === Infinity) {
          endWith = `{${min},}`;
        } else if (min === max) {
          endWith = `{${min}}`;
        } else {
          endWith = `{${min},${max}}`;
        }
        return `${exports.reconstruct(token.value)}${endWith}`;
      }
      case types_1.types.RANGE:
        return `${write_set_tokens_1.setChar(token.from)}-${write_set_tokens_1.setChar(token.to)}`;
      default:
        throw new Error(`Invalid token type ${token}`);
    }
  };
});

// node_modules/ret/dist/index.js
var require_dist5 = __commonJS((exports, module) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __exportStar = exports && exports.__exportStar || function(m, exports2) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding(exports2, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.types = undefined;
  var types_1 = require_types4();
  Object.defineProperty(exports, "types", { enumerable: true, get: function() {
    return types_1.types;
  } });
  __exportStar(require_tokenizer(), exports);
  __exportStar(require_reconstruct(), exports);
  var tokenizer_1 = require_tokenizer();
  var reconstruct_1 = require_reconstruct();
  __exportStar(require_types4(), exports);
  exports.default = tokenizer_1.tokenizer;
  module.exports = tokenizer_1.tokenizer;
  module.exports.types = types_1.types;
  module.exports.reconstruct = reconstruct_1.reconstruct;
});

// node_modules/safe-regex2/index.js
var require_safe_regex2 = __commonJS((exports, module) => {
  var parse = require_dist5();
  var types = parse.types;
  function safeRegex(re, opts) {
    if (!opts)
      opts = {};
    const replimit = opts.limit === undefined ? 25 : opts.limit;
    if (isRegExp(re))
      re = re.source;
    else if (typeof re !== "string")
      re = String(re);
    try {
      re = parse(re);
    } catch {
      return false;
    }
    let reps = 0;
    return function walk(node, starHeight) {
      let i;
      let ok;
      let len;
      if (node.type === types.REPETITION) {
        starHeight++;
        reps++;
        if (starHeight > 1)
          return false;
        if (reps > replimit)
          return false;
      }
      if (node.options) {
        for (i = 0, len = node.options.length;i < len; i++) {
          ok = walk({ stack: node.options[i] }, starHeight);
          if (!ok)
            return false;
        }
      }
      const stack = node.stack || node.value?.stack;
      if (!stack)
        return true;
      for (i = 0;i < stack.length; i++) {
        ok = walk(stack[i], starHeight);
        if (!ok)
          return false;
      }
      return true;
    }(re, 0);
  }
  function isRegExp(x) {
    return {}.toString.call(x) === "[object RegExp]";
  }
  module.exports = safeRegex;
  module.exports.default = safeRegex;
  module.exports.safeRegex = safeRegex;
});

// node_modules/find-my-way/lib/strategies/http-method.js
var require_http_method = __commonJS((exports, module) => {
  module.exports = {
    name: "__fmw_internal_strategy_merged_tree_http_method__",
    storage: function() {
      const handlers = new Map;
      return {
        get: (type) => {
          return handlers.get(type) || null;
        },
        set: (type, store) => {
          handlers.set(type, store);
        }
      };
    },
    deriveConstraint: (req) => req.method,
    mustMatchWhenDerived: true
  };
});

// node_modules/find-my-way/lib/pretty-print.js
var require_pretty_print = __commonJS((exports, module) => {
  var deepEqual = require_fast_deep_equal();
  var httpMethodStrategy = require_http_method();
  var treeDataSymbol = Symbol("treeData");
  function printObjectTree(obj, parentPrefix = "") {
    let tree = "";
    const keys = Object.keys(obj);
    for (let i = 0;i < keys.length; i++) {
      const key = keys[i];
      const value = obj[key];
      const isLast = i === keys.length - 1;
      const nodePrefix = isLast ? "└── " : "├── ";
      const childPrefix = isLast ? "    " : "│   ";
      const nodeData = value[treeDataSymbol] || "";
      const prefixedNodeData = nodeData.replaceAll(`
`, `
` + parentPrefix + childPrefix);
      tree += parentPrefix + nodePrefix + key + prefixedNodeData + `
`;
      tree += printObjectTree(value, parentPrefix + childPrefix);
    }
    return tree;
  }
  function parseFunctionName(fn) {
    let fName = fn.name || "";
    fName = fName.replace("bound", "").trim();
    fName = (fName || "anonymous") + "()";
    return fName;
  }
  function parseMeta(meta) {
    if (Array.isArray(meta))
      return meta.map((m) => parseMeta(m));
    if (typeof meta === "symbol")
      return meta.toString();
    if (typeof meta === "function")
      return parseFunctionName(meta);
    return meta;
  }
  function getRouteMetaData(route, options) {
    if (!options.includeMeta)
      return {};
    const metaDataObject = options.buildPrettyMeta(route);
    const filteredMetaData = {};
    let includeMetaKeys = options.includeMeta;
    if (!Array.isArray(includeMetaKeys)) {
      includeMetaKeys = Reflect.ownKeys(metaDataObject);
    }
    for (const metaKey of includeMetaKeys) {
      if (!Object.prototype.hasOwnProperty.call(metaDataObject, metaKey))
        continue;
      const serializedKey = metaKey.toString();
      const metaValue = metaDataObject[metaKey];
      if (metaValue !== undefined && metaValue !== null) {
        const serializedValue = JSON.stringify(parseMeta(metaValue));
        filteredMetaData[serializedKey] = serializedValue;
      }
    }
    return filteredMetaData;
  }
  function serializeMetaData(metaData) {
    let serializedMetaData = "";
    for (const [key, value] of Object.entries(metaData)) {
      serializedMetaData += `
• (${key}) ${value}`;
    }
    return serializedMetaData;
  }
  function normalizeRoute(route) {
    const constraints = { ...route.opts.constraints };
    const method = constraints[httpMethodStrategy.name];
    delete constraints[httpMethodStrategy.name];
    return { ...route, method, opts: { constraints } };
  }
  function serializeRoute(route) {
    let serializedRoute = ` (${route.method})`;
    const constraints = route.opts.constraints || {};
    if (Object.keys(constraints).length !== 0) {
      serializedRoute += " " + JSON.stringify(constraints);
    }
    serializedRoute += serializeMetaData(route.metaData);
    return serializedRoute;
  }
  function mergeSimilarRoutes(routes) {
    return routes.reduce((mergedRoutes, route) => {
      for (const nodeRoute of mergedRoutes) {
        if (deepEqual(route.opts.constraints, nodeRoute.opts.constraints) && deepEqual(route.metaData, nodeRoute.metaData)) {
          nodeRoute.method += ", " + route.method;
          return mergedRoutes;
        }
      }
      mergedRoutes.push(route);
      return mergedRoutes;
    }, []);
  }
  function serializeNode(node, prefix, options) {
    let routes = node.routes;
    if (options.method === undefined) {
      routes = routes.map(normalizeRoute);
    }
    routes = routes.map((route) => {
      route.metaData = getRouteMetaData(route, options);
      return route;
    });
    if (options.method === undefined) {
      routes = mergeSimilarRoutes(routes);
    }
    return routes.map(serializeRoute).join(`
${prefix}`);
  }
  function buildObjectTree(node, tree, prefix, options) {
    if (node.isLeafNode || options.commonPrefix !== false) {
      prefix = prefix || "(empty root node)";
      tree = tree[prefix] = {};
      if (node.isLeafNode) {
        tree[treeDataSymbol] = serializeNode(node, prefix, options);
      }
      prefix = "";
    }
    if (node.staticChildren) {
      for (const child of Object.values(node.staticChildren)) {
        buildObjectTree(child, tree, prefix + child.prefix, options);
      }
    }
    if (node.parametricChildren) {
      for (const child of Object.values(node.parametricChildren)) {
        const childPrefix = Array.from(child.nodePaths).join("|");
        buildObjectTree(child, tree, prefix + childPrefix, options);
      }
    }
    if (node.wildcardChild) {
      buildObjectTree(node.wildcardChild, tree, "*", options);
    }
  }
  function prettyPrintTree(root, options) {
    const objectTree = {};
    buildObjectTree(root, objectTree, root.prefix, options);
    return printObjectTree(objectTree);
  }
  module.exports = { prettyPrintTree };
});

// node_modules/find-my-way/lib/null-object.js
var require_null_object = __commonJS((exports, module) => {
  var NullObject = function() {
  };
  NullObject.prototype = Object.create(null);
  module.exports = {
    NullObject
  };
});

// node_modules/find-my-way/lib/handler-storage.js
var require_handler_storage = __commonJS((exports, module) => {
  var { NullObject } = require_null_object();
  var httpMethodStrategy = require_http_method();

  class HandlerStorage {
    constructor() {
      this.unconstrainedHandler = null;
      this.constraints = [];
      this.handlers = [];
      this.constrainedHandlerStores = null;
    }
    getMatchingHandler(derivedConstraints) {
      if (derivedConstraints === undefined) {
        return this.unconstrainedHandler;
      }
      return this._getHandlerMatchingConstraints(derivedConstraints);
    }
    addHandler(constrainer, route) {
      const params = route.params;
      const constraints = route.opts.constraints || {};
      const handlerObject = {
        params,
        constraints,
        handler: route.handler,
        store: route.store || null,
        _createParamsObject: this._compileCreateParamsObject(params)
      };
      const constraintsNames = Object.keys(constraints);
      if (constraintsNames.length === 0) {
        this.unconstrainedHandler = handlerObject;
      }
      for (const constraint of constraintsNames) {
        if (!this.constraints.includes(constraint)) {
          if (constraint === "version") {
            this.constraints.unshift(constraint);
          } else {
            this.constraints.push(constraint);
          }
        }
      }
      const isMergedTree = constraintsNames.includes(httpMethodStrategy.name);
      if (!isMergedTree && this.handlers.length >= 31) {
        throw new Error("find-my-way supports a maximum of 31 route handlers per node when there are constraints, limit reached");
      }
      this.handlers.push(handlerObject);
      this.handlers.sort((a, b) => Object.keys(a.constraints).length - Object.keys(b.constraints).length);
      if (!isMergedTree) {
        this._compileGetHandlerMatchingConstraints(constrainer, constraints);
      }
    }
    _compileCreateParamsObject(params) {
      const fnBody = [];
      fnBody.push("const fn = function _createParamsObject (paramsArray) {");
      fnBody.push("const params = new NullObject()");
      for (let i = 0;i < params.length; i++) {
        fnBody.push(`params['${params[i]}'] = paramsArray[${i}]`);
      }
      fnBody.push("return params");
      fnBody.push("}");
      fnBody.push("return fn");
      return new Function("NullObject", fnBody.join(`
`))(NullObject);
    }
    _getHandlerMatchingConstraints() {
      return null;
    }
    _buildConstraintStore(store, constraint) {
      for (let i = 0;i < this.handlers.length; i++) {
        const handler = this.handlers[i];
        const constraintValue = handler.constraints[constraint];
        if (constraintValue !== undefined) {
          let indexes = store.get(constraintValue) || 0;
          indexes |= 1 << i;
          store.set(constraintValue, indexes);
        }
      }
    }
    _constrainedIndexBitmask(constraint) {
      let mask = 0;
      for (let i = 0;i < this.handlers.length; i++) {
        const handler = this.handlers[i];
        const constraintValue = handler.constraints[constraint];
        if (constraintValue !== undefined) {
          mask |= 1 << i;
        }
      }
      return ~mask;
    }
    _compileGetHandlerMatchingConstraints(constrainer) {
      this.constrainedHandlerStores = {};
      for (const constraint of this.constraints) {
        const store = constrainer.newStoreForConstraint(constraint);
        this.constrainedHandlerStores[constraint] = store;
        this._buildConstraintStore(store, constraint);
      }
      const lines = [];
      lines.push(`
    let candidates = ${(1 << this.handlers.length) - 1}
    let mask, matches
    `);
      for (const constraint of this.constraints) {
        lines.push(`
      mask = ${this._constrainedIndexBitmask(constraint)}
      value = derivedConstraints.${constraint}
      `);
        const strategy = constrainer.strategies[constraint];
        const matchMask = strategy.mustMatchWhenDerived ? "matches" : "(matches | mask)";
        lines.push(`
      if (value === undefined) {
        candidates &= mask
      } else {
        matches = this.constrainedHandlerStores.${constraint}.get(value) || 0
        candidates &= ${matchMask}
      }
      if (candidates === 0) return null;
      `);
      }
      for (const constraint in constrainer.strategies) {
        const strategy = constrainer.strategies[constraint];
        if (strategy.mustMatchWhenDerived && !this.constraints.includes(constraint)) {
          lines.push(`if (derivedConstraints.${constraint} !== undefined) return null`);
        }
      }
      lines.push("return this.handlers[Math.floor(Math.log2(candidates))]");
      this._getHandlerMatchingConstraints = new Function("derivedConstraints", lines.join(`
`));
    }
  }
  module.exports = HandlerStorage;
});

// node_modules/find-my-way/lib/node.js
var require_node2 = __commonJS((exports, module) => {
  var HandlerStorage = require_handler_storage();
  var NODE_TYPES = {
    STATIC: 0,
    PARAMETRIC: 1,
    WILDCARD: 2
  };

  class Node {
    constructor() {
      this.isLeafNode = false;
      this.routes = null;
      this.handlerStorage = null;
    }
    addRoute(route, constrainer) {
      if (this.routes === null) {
        this.routes = [];
      }
      if (this.handlerStorage === null) {
        this.handlerStorage = new HandlerStorage;
      }
      this.isLeafNode = true;
      this.routes.push(route);
      this.handlerStorage.addHandler(constrainer, route);
    }
  }

  class ParentNode extends Node {
    constructor() {
      super();
      this.staticChildren = {};
    }
    findStaticMatchingChild(path, pathIndex) {
      const staticChild = this.staticChildren[path.charAt(pathIndex)];
      if (staticChild === undefined || !staticChild.matchPrefix(path, pathIndex)) {
        return null;
      }
      return staticChild;
    }
    getStaticChild(path, pathIndex = 0) {
      if (path.length === pathIndex) {
        return this;
      }
      const staticChild = this.findStaticMatchingChild(path, pathIndex);
      if (staticChild) {
        return staticChild.getStaticChild(path, pathIndex + staticChild.prefix.length);
      }
      return null;
    }
    createStaticChild(path) {
      if (path.length === 0) {
        return this;
      }
      let staticChild = this.staticChildren[path.charAt(0)];
      if (staticChild) {
        let i = 1;
        for (;i < staticChild.prefix.length; i++) {
          if (path.charCodeAt(i) !== staticChild.prefix.charCodeAt(i)) {
            staticChild = staticChild.split(this, i);
            break;
          }
        }
        return staticChild.createStaticChild(path.slice(i));
      }
      const label = path.charAt(0);
      this.staticChildren[label] = new StaticNode(path);
      return this.staticChildren[label];
    }
  }

  class StaticNode extends ParentNode {
    constructor(prefix) {
      super();
      this.prefix = prefix;
      this.wildcardChild = null;
      this.parametricChildren = [];
      this.kind = NODE_TYPES.STATIC;
      this._compilePrefixMatch();
    }
    getParametricChild(regex) {
      const regexpSource = regex && regex.source;
      const parametricChild = this.parametricChildren.find((child) => {
        const childRegexSource = child.regex && child.regex.source;
        return childRegexSource === regexpSource;
      });
      if (parametricChild) {
        return parametricChild;
      }
      return null;
    }
    createParametricChild(regex, staticSuffix, nodePath) {
      let parametricChild = this.getParametricChild(regex);
      if (parametricChild) {
        parametricChild.nodePaths.add(nodePath);
        return parametricChild;
      }
      parametricChild = new ParametricNode(regex, staticSuffix, nodePath);
      this.parametricChildren.push(parametricChild);
      this.parametricChildren.sort((child1, child2) => {
        if (!child1.isRegex)
          return 1;
        if (!child2.isRegex)
          return -1;
        if (child1.staticSuffix === null)
          return 1;
        if (child2.staticSuffix === null)
          return -1;
        if (child2.staticSuffix.endsWith(child1.staticSuffix))
          return 1;
        if (child1.staticSuffix.endsWith(child2.staticSuffix))
          return -1;
        return 0;
      });
      return parametricChild;
    }
    getWildcardChild() {
      return this.wildcardChild;
    }
    createWildcardChild() {
      this.wildcardChild = this.getWildcardChild() || new WildcardNode;
      return this.wildcardChild;
    }
    split(parentNode, length) {
      const parentPrefix = this.prefix.slice(0, length);
      const childPrefix = this.prefix.slice(length);
      this.prefix = childPrefix;
      this._compilePrefixMatch();
      const staticNode = new StaticNode(parentPrefix);
      staticNode.staticChildren[childPrefix.charAt(0)] = this;
      parentNode.staticChildren[parentPrefix.charAt(0)] = staticNode;
      return staticNode;
    }
    getNextNode(path, pathIndex, nodeStack, paramsCount) {
      let node = this.findStaticMatchingChild(path, pathIndex);
      let parametricBrotherNodeIndex = 0;
      if (node === null) {
        if (this.parametricChildren.length === 0) {
          return this.wildcardChild;
        }
        node = this.parametricChildren[0];
        parametricBrotherNodeIndex = 1;
      }
      if (this.wildcardChild !== null) {
        nodeStack.push({
          paramsCount,
          brotherPathIndex: pathIndex,
          brotherNode: this.wildcardChild
        });
      }
      for (let i = this.parametricChildren.length - 1;i >= parametricBrotherNodeIndex; i--) {
        nodeStack.push({
          paramsCount,
          brotherPathIndex: pathIndex,
          brotherNode: this.parametricChildren[i]
        });
      }
      return node;
    }
    _compilePrefixMatch() {
      if (this.prefix.length === 1) {
        this.matchPrefix = () => true;
        return;
      }
      const lines = [];
      for (let i = 1;i < this.prefix.length; i++) {
        const charCode = this.prefix.charCodeAt(i);
        lines.push(`path.charCodeAt(i + ${i}) === ${charCode}`);
      }
      this.matchPrefix = new Function("path", "i", `return ${lines.join(" && ")}`);
    }
  }

  class ParametricNode extends ParentNode {
    constructor(regex, staticSuffix, nodePath) {
      super();
      this.isRegex = !!regex;
      this.regex = regex || null;
      this.staticSuffix = staticSuffix || null;
      this.kind = NODE_TYPES.PARAMETRIC;
      this.nodePaths = new Set([nodePath]);
    }
    getNextNode(path, pathIndex) {
      return this.findStaticMatchingChild(path, pathIndex);
    }
  }

  class WildcardNode extends Node {
    constructor() {
      super();
      this.kind = NODE_TYPES.WILDCARD;
    }
    getNextNode() {
      return null;
    }
  }
  module.exports = { StaticNode, ParametricNode, WildcardNode, NODE_TYPES };
});

// node_modules/find-my-way/lib/strategies/accept-version.js
var require_accept_version = __commonJS((exports, module) => {
  var assert = __require("node:assert");
  function SemVerStore() {
    if (!(this instanceof SemVerStore)) {
      return new SemVerStore;
    }
    this.store = new Map;
    this.maxMajor = 0;
    this.maxMinors = {};
    this.maxPatches = {};
  }
  SemVerStore.prototype.set = function(version, store) {
    if (typeof version !== "string") {
      throw new TypeError("Version should be a string");
    }
    let [major, minor, patch] = version.split(".", 3);
    if (isNaN(major)) {
      throw new TypeError("Major version must be a numeric value");
    }
    major = Number(major);
    minor = Number(minor) || 0;
    patch = Number(patch) || 0;
    if (major >= this.maxMajor) {
      this.maxMajor = major;
      this.store.set("x", store);
      this.store.set("*", store);
      this.store.set("x.x", store);
      this.store.set("x.x.x", store);
    }
    if (minor >= (this.maxMinors[major] || 0)) {
      this.maxMinors[major] = minor;
      this.store.set(`${major}.x`, store);
      this.store.set(`${major}.x.x`, store);
    }
    if (patch >= (this.maxPatches[`${major}.${minor}`] || 0)) {
      this.maxPatches[`${major}.${minor}`] = patch;
      this.store.set(`${major}.${minor}.x`, store);
    }
    this.store.set(`${major}.${minor}.${patch}`, store);
    return this;
  };
  SemVerStore.prototype.get = function(version) {
    return this.store.get(version);
  };
  module.exports = {
    name: "version",
    mustMatchWhenDerived: true,
    storage: SemVerStore,
    validate(value) {
      assert(typeof value === "string", "Version should be a string");
    }
  };
});

// node_modules/find-my-way/lib/strategies/accept-host.js
var require_accept_host = __commonJS((exports, module) => {
  var assert = __require("node:assert");
  function HostStorage() {
    const hosts = new Map;
    const regexHosts = [];
    return {
      get: (host) => {
        const exact = hosts.get(host);
        if (exact) {
          return exact;
        }
        for (const regex of regexHosts) {
          if (regex.host.test(host)) {
            return regex.value;
          }
        }
      },
      set: (host, value) => {
        if (host instanceof RegExp) {
          regexHosts.push({ host, value });
        } else {
          hosts.set(host, value);
        }
      }
    };
  }
  module.exports = {
    name: "host",
    mustMatchWhenDerived: false,
    storage: HostStorage,
    validate(value) {
      assert(typeof value === "string" || Object.prototype.toString.call(value) === "[object RegExp]", "Host should be a string or a RegExp");
    }
  };
});

// node_modules/find-my-way/lib/constrainer.js
var require_constrainer = __commonJS((exports, module) => {
  var acceptVersionStrategy = require_accept_version();
  var acceptHostStrategy = require_accept_host();
  var assert = __require("node:assert");

  class Constrainer {
    constructor(customStrategies) {
      this.strategies = {
        version: acceptVersionStrategy,
        host: acceptHostStrategy
      };
      this.strategiesInUse = new Set;
      this.asyncStrategiesInUse = new Set;
      if (customStrategies) {
        for (const strategy of Object.values(customStrategies)) {
          this.addConstraintStrategy(strategy);
        }
      }
    }
    isStrategyUsed(strategyName) {
      return this.strategiesInUse.has(strategyName) || this.asyncStrategiesInUse.has(strategyName);
    }
    hasConstraintStrategy(strategyName) {
      const customConstraintStrategy = this.strategies[strategyName];
      if (customConstraintStrategy !== undefined) {
        return customConstraintStrategy.isCustom || this.isStrategyUsed(strategyName);
      }
      return false;
    }
    addConstraintStrategy(strategy) {
      assert(typeof strategy.name === "string" && strategy.name !== "", "strategy.name is required.");
      assert(strategy.storage && typeof strategy.storage === "function", "strategy.storage function is required.");
      assert(strategy.deriveConstraint && typeof strategy.deriveConstraint === "function", "strategy.deriveConstraint function is required.");
      if (this.strategies[strategy.name] && this.strategies[strategy.name].isCustom) {
        throw new Error(`There already exists a custom constraint with the name ${strategy.name}.`);
      }
      if (this.isStrategyUsed(strategy.name)) {
        throw new Error(`There already exists a route with ${strategy.name} constraint.`);
      }
      strategy.isCustom = true;
      strategy.isAsync = strategy.deriveConstraint.length === 3;
      this.strategies[strategy.name] = strategy;
      if (strategy.mustMatchWhenDerived) {
        this.noteUsage({ [strategy.name]: strategy });
      }
    }
    deriveConstraints(req, ctx, done) {
      const constraints = this.deriveSyncConstraints(req, ctx);
      if (done === undefined) {
        return constraints;
      }
      this.deriveAsyncConstraints(constraints, req, ctx, done);
    }
    deriveSyncConstraints(req, ctx) {
      return;
    }
    noteUsage(constraints) {
      if (constraints) {
        const beforeSize = this.strategiesInUse.size;
        for (const key in constraints) {
          const strategy = this.strategies[key];
          if (strategy.isAsync) {
            this.asyncStrategiesInUse.add(key);
          } else {
            this.strategiesInUse.add(key);
          }
        }
        if (beforeSize !== this.strategiesInUse.size) {
          this._buildDeriveConstraints();
        }
      }
    }
    newStoreForConstraint(constraint) {
      if (!this.strategies[constraint]) {
        throw new Error(`No strategy registered for constraint key ${constraint}`);
      }
      return this.strategies[constraint].storage();
    }
    validateConstraints(constraints) {
      for (const key in constraints) {
        const value = constraints[key];
        if (typeof value === "undefined") {
          throw new Error("Can't pass an undefined constraint value, must pass null or no key at all");
        }
        const strategy = this.strategies[key];
        if (!strategy) {
          throw new Error(`No strategy registered for constraint key ${key}`);
        }
        if (strategy.validate) {
          strategy.validate(value);
        }
      }
    }
    deriveAsyncConstraints(constraints, req, ctx, done) {
      let asyncConstraintsCount = this.asyncStrategiesInUse.size;
      if (asyncConstraintsCount === 0) {
        done(null, constraints);
        return;
      }
      constraints = constraints || {};
      for (const key of this.asyncStrategiesInUse) {
        const strategy = this.strategies[key];
        strategy.deriveConstraint(req, ctx, (err, constraintValue) => {
          if (err !== null) {
            done(err);
            return;
          }
          constraints[key] = constraintValue;
          if (--asyncConstraintsCount === 0) {
            done(null, constraints);
          }
        });
      }
    }
    _buildDeriveConstraints() {
      if (this.strategiesInUse.size === 0)
        return;
      const lines = ["return {"];
      for (const key of this.strategiesInUse) {
        const strategy = this.strategies[key];
        if (!strategy.isCustom) {
          if (key === "version") {
            lines.push("   version: req.headers['accept-version'],");
          } else {
            lines.push("   host: req.headers.host || req.headers[':authority'],");
          }
        } else {
          lines.push(`  ${strategy.name}: this.strategies.${key}.deriveConstraint(req, ctx),`);
        }
      }
      lines.push("}");
      this.deriveSyncConstraints = new Function("req", "ctx", lines.join(`
`)).bind(this);
    }
  }
  module.exports = Constrainer;
});

// node_modules/find-my-way/lib/http-methods.js
var require_http_methods = __commonJS((exports, module) => {
  var httpMethods = [
    "ACL",
    "BIND",
    "CHECKOUT",
    "CONNECT",
    "COPY",
    "DELETE",
    "GET",
    "HEAD",
    "LINK",
    "LOCK",
    "M-SEARCH",
    "MERGE",
    "MKACTIVITY",
    "MKCALENDAR",
    "MKCOL",
    "MOVE",
    "NOTIFY",
    "OPTIONS",
    "PATCH",
    "POST",
    "PROPFIND",
    "PROPPATCH",
    "PURGE",
    "PUT",
    "QUERY",
    "REBIND",
    "REPORT",
    "SEARCH",
    "SOURCE",
    "SUBSCRIBE",
    "TRACE",
    "UNBIND",
    "UNLINK",
    "UNLOCK",
    "UNSUBSCRIBE"
  ];
  module.exports = httpMethods;
});

// node_modules/find-my-way/lib/url-sanitizer.js
var require_url_sanitizer = __commonJS((exports, module) => {
  function decodeComponentChar(highCharCode, lowCharCode) {
    if (highCharCode === 50) {
      if (lowCharCode === 53)
        return "%";
      if (lowCharCode === 51)
        return "#";
      if (lowCharCode === 52)
        return "$";
      if (lowCharCode === 54)
        return "&";
      if (lowCharCode === 66)
        return "+";
      if (lowCharCode === 98)
        return "+";
      if (lowCharCode === 67)
        return ",";
      if (lowCharCode === 99)
        return ",";
      if (lowCharCode === 70)
        return "/";
      if (lowCharCode === 102)
        return "/";
      return null;
    }
    if (highCharCode === 51) {
      if (lowCharCode === 65)
        return ":";
      if (lowCharCode === 97)
        return ":";
      if (lowCharCode === 66)
        return ";";
      if (lowCharCode === 98)
        return ";";
      if (lowCharCode === 68)
        return "=";
      if (lowCharCode === 100)
        return "=";
      if (lowCharCode === 70)
        return "?";
      if (lowCharCode === 102)
        return "?";
      return null;
    }
    if (highCharCode === 52 && lowCharCode === 48) {
      return "@";
    }
    return null;
  }
  function safeDecodeURI(path, useSemicolonDelimiter) {
    let shouldDecode = false;
    let shouldDecodeParam = false;
    let querystring = "";
    for (let i = 1;i < path.length; i++) {
      const charCode = path.charCodeAt(i);
      if (charCode === 37) {
        const highCharCode = path.charCodeAt(i + 1);
        const lowCharCode = path.charCodeAt(i + 2);
        if (decodeComponentChar(highCharCode, lowCharCode) === null) {
          shouldDecode = true;
        } else {
          shouldDecodeParam = true;
          if (highCharCode === 50 && lowCharCode === 53) {
            shouldDecode = true;
            path = path.slice(0, i + 1) + "25" + path.slice(i + 1);
            i += 2;
          }
          i += 2;
        }
      } else if (charCode === 63 || charCode === 35 || charCode === 59 && useSemicolonDelimiter) {
        querystring = path.slice(i + 1);
        path = path.slice(0, i);
        break;
      }
    }
    const decodedPath = shouldDecode ? decodeURI(path) : path;
    return { path: decodedPath, querystring, shouldDecodeParam };
  }
  function safeDecodeURIComponent(uriComponent) {
    const startIndex = uriComponent.indexOf("%");
    if (startIndex === -1)
      return uriComponent;
    let decoded = "";
    let lastIndex = startIndex;
    for (let i = startIndex;i < uriComponent.length; i++) {
      if (uriComponent.charCodeAt(i) === 37) {
        const highCharCode = uriComponent.charCodeAt(i + 1);
        const lowCharCode = uriComponent.charCodeAt(i + 2);
        const decodedChar = decodeComponentChar(highCharCode, lowCharCode);
        decoded += uriComponent.slice(lastIndex, i) + decodedChar;
        lastIndex = i + 3;
      }
    }
    return uriComponent.slice(0, startIndex) + decoded + uriComponent.slice(lastIndex);
  }
  module.exports = { safeDecodeURI, safeDecodeURIComponent };
});

// node_modules/find-my-way/index.js
var require_find_my_way = __commonJS((exports, module) => {
  var assert = __require("node:assert");
  var querystring = require_lib();
  var isRegexSafe = require_safe_regex2();
  var deepEqual = require_fast_deep_equal();
  var { prettyPrintTree } = require_pretty_print();
  var { StaticNode, NODE_TYPES } = require_node2();
  var Constrainer = require_constrainer();
  var httpMethods = require_http_methods();
  var httpMethodStrategy = require_http_method();
  var { safeDecodeURI, safeDecodeURIComponent } = require_url_sanitizer();
  var FULL_PATH_REGEXP = /^https?:\/\/.*?\//;
  var OPTIONAL_PARAM_REGEXP = /(\/:[^/()]*?)\?(\/?)/;
  var ESCAPE_REGEXP = /[.*+?^${}()|[\]\\]/g;
  var REMOVE_DUPLICATE_SLASHES_REGEXP = /\/\/+/g;
  if (!isRegexSafe(FULL_PATH_REGEXP)) {
    throw new Error("the FULL_PATH_REGEXP is not safe, update this module");
  }
  if (!isRegexSafe(OPTIONAL_PARAM_REGEXP)) {
    throw new Error("the OPTIONAL_PARAM_REGEXP is not safe, update this module");
  }
  if (!isRegexSafe(ESCAPE_REGEXP)) {
    throw new Error("the ESCAPE_REGEXP is not safe, update this module");
  }
  if (!isRegexSafe(REMOVE_DUPLICATE_SLASHES_REGEXP)) {
    throw new Error("the REMOVE_DUPLICATE_SLASHES_REGEXP is not safe, update this module");
  }
  function Router(opts) {
    if (!(this instanceof Router)) {
      return new Router(opts);
    }
    opts = opts || {};
    this._opts = opts;
    if (opts.defaultRoute) {
      assert(typeof opts.defaultRoute === "function", "The default route must be a function");
      this.defaultRoute = opts.defaultRoute;
    } else {
      this.defaultRoute = null;
    }
    if (opts.onBadUrl) {
      assert(typeof opts.onBadUrl === "function", "The bad url handler must be a function");
      this.onBadUrl = opts.onBadUrl;
    } else {
      this.onBadUrl = null;
    }
    if (opts.buildPrettyMeta) {
      assert(typeof opts.buildPrettyMeta === "function", "buildPrettyMeta must be a function");
      this.buildPrettyMeta = opts.buildPrettyMeta;
    } else {
      this.buildPrettyMeta = defaultBuildPrettyMeta;
    }
    if (opts.querystringParser) {
      assert(typeof opts.querystringParser === "function", "querystringParser must be a function");
      this.querystringParser = opts.querystringParser;
    } else {
      this.querystringParser = (query) => query.length === 0 ? {} : querystring.parse(query);
    }
    this.caseSensitive = opts.caseSensitive === undefined ? true : opts.caseSensitive;
    this.ignoreTrailingSlash = opts.ignoreTrailingSlash || false;
    this.ignoreDuplicateSlashes = opts.ignoreDuplicateSlashes || false;
    this.maxParamLength = opts.maxParamLength || 100;
    this.allowUnsafeRegex = opts.allowUnsafeRegex || false;
    this.constrainer = new Constrainer(opts.constraints);
    this.useSemicolonDelimiter = opts.useSemicolonDelimiter || false;
    this.routes = [];
    this.trees = {};
  }
  Router.prototype.on = function on(method, path, opts, handler, store) {
    if (typeof opts === "function") {
      if (handler !== undefined) {
        store = handler;
      }
      handler = opts;
      opts = {};
    }
    assert(typeof path === "string", "Path should be a string");
    assert(path.length > 0, "The path could not be empty");
    assert(path[0] === "/" || path[0] === "*", "The first character of a path should be `/` or `*`");
    assert(typeof handler === "function", "Handler should be a function");
    const optionalParamMatch = path.match(OPTIONAL_PARAM_REGEXP);
    if (optionalParamMatch) {
      assert(path.length === optionalParamMatch.index + optionalParamMatch[0].length, "Optional Parameter needs to be the last parameter of the path");
      const pathFull = path.replace(OPTIONAL_PARAM_REGEXP, "$1$2");
      const pathOptional = path.replace(OPTIONAL_PARAM_REGEXP, "$2") || "/";
      this.on(method, pathFull, opts, handler, store);
      this.on(method, pathOptional, opts, handler, store);
      return;
    }
    const route = path;
    if (this.ignoreDuplicateSlashes) {
      path = removeDuplicateSlashes(path);
    }
    if (this.ignoreTrailingSlash) {
      path = trimLastSlash(path);
    }
    const methods = Array.isArray(method) ? method : [method];
    for (const method2 of methods) {
      assert(typeof method2 === "string", "Method should be a string");
      assert(httpMethods.includes(method2), `Method '${method2}' is not an http method.`);
      this._on(method2, path, opts, handler, store, route);
    }
  };
  Router.prototype._on = function _on(method, path, opts, handler, store) {
    let constraints = {};
    if (opts.constraints !== undefined) {
      assert(typeof opts.constraints === "object" && opts.constraints !== null, "Constraints should be an object");
      if (Object.keys(opts.constraints).length !== 0) {
        constraints = opts.constraints;
      }
    }
    this.constrainer.validateConstraints(constraints);
    this.constrainer.noteUsage(constraints);
    if (this.trees[method] === undefined) {
      this.trees[method] = new StaticNode("/");
    }
    let pattern = path;
    if (pattern === "*" && this.trees[method].prefix.length !== 0) {
      const currentRoot = this.trees[method];
      this.trees[method] = new StaticNode("");
      this.trees[method].staticChildren["/"] = currentRoot;
    }
    let currentNode = this.trees[method];
    let parentNodePathIndex = currentNode.prefix.length;
    const params = [];
    for (let i = 0;i <= pattern.length; i++) {
      if (pattern.charCodeAt(i) === 58 && pattern.charCodeAt(i + 1) === 58) {
        i++;
        continue;
      }
      const isParametricNode = pattern.charCodeAt(i) === 58 && pattern.charCodeAt(i + 1) !== 58;
      const isWildcardNode = pattern.charCodeAt(i) === 42;
      if (isParametricNode || isWildcardNode || i === pattern.length && i !== parentNodePathIndex) {
        let staticNodePath = pattern.slice(parentNodePathIndex, i);
        if (!this.caseSensitive) {
          staticNodePath = staticNodePath.toLowerCase();
        }
        staticNodePath = staticNodePath.replaceAll("::", ":");
        staticNodePath = staticNodePath.replaceAll("%", "%25");
        currentNode = currentNode.createStaticChild(staticNodePath);
      }
      if (isParametricNode) {
        let isRegexNode = false;
        let isParamSafe = true;
        let backtrack = "";
        const regexps = [];
        let lastParamStartIndex = i + 1;
        for (let j = lastParamStartIndex;; j++) {
          const charCode = pattern.charCodeAt(j);
          const isRegexParam = charCode === 40;
          const isStaticPart = charCode === 45 || charCode === 46;
          const isEndOfNode = charCode === 47 || j === pattern.length;
          if (isRegexParam || isStaticPart || isEndOfNode) {
            const paramName = pattern.slice(lastParamStartIndex, j);
            params.push(paramName);
            isRegexNode = isRegexNode || isRegexParam || isStaticPart;
            if (isRegexParam) {
              const endOfRegexIndex = getClosingParenthensePosition(pattern, j);
              const regexString = pattern.slice(j, endOfRegexIndex + 1);
              if (!this.allowUnsafeRegex) {
                assert(isRegexSafe(new RegExp(regexString)), `The regex '${regexString}' is not safe!`);
              }
              regexps.push(trimRegExpStartAndEnd(regexString));
              j = endOfRegexIndex + 1;
              isParamSafe = true;
            } else {
              regexps.push(isParamSafe ? "(.*?)" : `(${backtrack}|(?:(?!${backtrack}).)*)`);
              isParamSafe = false;
            }
            const staticPartStartIndex = j;
            for (;j < pattern.length; j++) {
              const charCode2 = pattern.charCodeAt(j);
              if (charCode2 === 47)
                break;
              if (charCode2 === 58) {
                const nextCharCode = pattern.charCodeAt(j + 1);
                if (nextCharCode === 58)
                  j++;
                else
                  break;
              }
            }
            let staticPart = pattern.slice(staticPartStartIndex, j);
            if (staticPart) {
              staticPart = staticPart.replaceAll("::", ":");
              staticPart = staticPart.replaceAll("%", "%25");
              regexps.push(backtrack = escapeRegExp(staticPart));
            }
            lastParamStartIndex = j + 1;
            if (isEndOfNode || pattern.charCodeAt(j) === 47 || j === pattern.length) {
              const nodePattern = isRegexNode ? "()" + staticPart : staticPart;
              const nodePath = pattern.slice(i, j);
              pattern = pattern.slice(0, i + 1) + nodePattern + pattern.slice(j);
              i += nodePattern.length;
              const regex = isRegexNode ? new RegExp("^" + regexps.join("") + "$") : null;
              currentNode = currentNode.createParametricChild(regex, staticPart || null, nodePath);
              parentNodePathIndex = i + 1;
              break;
            }
          }
        }
      } else if (isWildcardNode) {
        params.push("*");
        currentNode = currentNode.createWildcardChild();
        parentNodePathIndex = i + 1;
        if (i !== pattern.length - 1) {
          throw new Error("Wildcard must be the last character in the route");
        }
      }
    }
    if (!this.caseSensitive) {
      pattern = pattern.toLowerCase();
    }
    if (pattern === "*") {
      pattern = "/*";
    }
    for (const existRoute of this.routes) {
      const routeConstraints = existRoute.opts.constraints || {};
      if (existRoute.method === method && existRoute.pattern === pattern && deepEqual(routeConstraints, constraints)) {
        throw new Error(`Method '${method}' already declared for route '${pattern}' with constraints '${JSON.stringify(constraints)}'`);
      }
    }
    const route = { method, path, pattern, params, opts, handler, store };
    this.routes.push(route);
    currentNode.addRoute(route, this.constrainer);
  };
  Router.prototype.hasRoute = function hasRoute(method, path, constraints) {
    const route = this.findRoute(method, path, constraints);
    return route !== null;
  };
  Router.prototype.findRoute = function findNode(method, path, constraints = {}) {
    if (this.trees[method] === undefined) {
      return null;
    }
    let pattern = path;
    let currentNode = this.trees[method];
    let parentNodePathIndex = currentNode.prefix.length;
    const params = [];
    for (let i = 0;i <= pattern.length; i++) {
      if (pattern.charCodeAt(i) === 58 && pattern.charCodeAt(i + 1) === 58) {
        i++;
        continue;
      }
      const isParametricNode = pattern.charCodeAt(i) === 58 && pattern.charCodeAt(i + 1) !== 58;
      const isWildcardNode = pattern.charCodeAt(i) === 42;
      if (isParametricNode || isWildcardNode || i === pattern.length && i !== parentNodePathIndex) {
        let staticNodePath = pattern.slice(parentNodePathIndex, i);
        if (!this.caseSensitive) {
          staticNodePath = staticNodePath.toLowerCase();
        }
        staticNodePath = staticNodePath.replaceAll("::", ":");
        staticNodePath = staticNodePath.replaceAll("%", "%25");
        currentNode = currentNode.getStaticChild(staticNodePath);
        if (currentNode === null) {
          return null;
        }
      }
      if (isParametricNode) {
        let isRegexNode = false;
        let isParamSafe = true;
        let backtrack = "";
        const regexps = [];
        let lastParamStartIndex = i + 1;
        for (let j = lastParamStartIndex;; j++) {
          const charCode = pattern.charCodeAt(j);
          const isRegexParam = charCode === 40;
          const isStaticPart = charCode === 45 || charCode === 46;
          const isEndOfNode = charCode === 47 || j === pattern.length;
          if (isRegexParam || isStaticPart || isEndOfNode) {
            const paramName = pattern.slice(lastParamStartIndex, j);
            params.push(paramName);
            isRegexNode = isRegexNode || isRegexParam || isStaticPart;
            if (isRegexParam) {
              const endOfRegexIndex = getClosingParenthensePosition(pattern, j);
              const regexString = pattern.slice(j, endOfRegexIndex + 1);
              if (!this.allowUnsafeRegex) {
                assert(isRegexSafe(new RegExp(regexString)), `The regex '${regexString}' is not safe!`);
              }
              regexps.push(trimRegExpStartAndEnd(regexString));
              j = endOfRegexIndex + 1;
              isParamSafe = false;
            } else {
              regexps.push(isParamSafe ? "(.*?)" : `(${backtrack}|(?:(?!${backtrack}).)*)`);
              isParamSafe = false;
            }
            const staticPartStartIndex = j;
            for (;j < pattern.length; j++) {
              const charCode2 = pattern.charCodeAt(j);
              if (charCode2 === 47)
                break;
              if (charCode2 === 58) {
                const nextCharCode = pattern.charCodeAt(j + 1);
                if (nextCharCode === 58)
                  j++;
                else
                  break;
              }
            }
            let staticPart = pattern.slice(staticPartStartIndex, j);
            if (staticPart) {
              staticPart = staticPart.replaceAll("::", ":");
              staticPart = staticPart.replaceAll("%", "%25");
              regexps.push(backtrack = escapeRegExp(staticPart));
            }
            lastParamStartIndex = j + 1;
            if (isEndOfNode || pattern.charCodeAt(j) === 47 || j === pattern.length) {
              const nodePattern = isRegexNode ? "()" + staticPart : staticPart;
              const nodePath = pattern.slice(i, j);
              pattern = pattern.slice(0, i + 1) + nodePattern + pattern.slice(j);
              i += nodePattern.length;
              const regex = isRegexNode ? new RegExp("^" + regexps.join("") + "$") : null;
              currentNode = currentNode.getParametricChild(regex, staticPart || null, nodePath);
              if (currentNode === null) {
                return null;
              }
              parentNodePathIndex = i + 1;
              break;
            }
          }
        }
      } else if (isWildcardNode) {
        params.push("*");
        currentNode = currentNode.getWildcardChild();
        parentNodePathIndex = i + 1;
        if (i !== pattern.length - 1) {
          throw new Error("Wildcard must be the last character in the route");
        }
      }
    }
    if (!this.caseSensitive) {
      pattern = pattern.toLowerCase();
    }
    for (const existRoute of this.routes) {
      const routeConstraints = existRoute.opts.constraints || {};
      if (existRoute.method === method && existRoute.pattern === pattern && deepEqual(routeConstraints, constraints)) {
        return {
          handler: existRoute.handler,
          store: existRoute.store,
          params: existRoute.params
        };
      }
    }
    return null;
  };
  Router.prototype.hasConstraintStrategy = function(strategyName) {
    return this.constrainer.hasConstraintStrategy(strategyName);
  };
  Router.prototype.addConstraintStrategy = function(constraints) {
    this.constrainer.addConstraintStrategy(constraints);
    this._rebuild(this.routes);
  };
  Router.prototype.reset = function reset() {
    this.trees = {};
    this.routes = [];
  };
  Router.prototype.off = function off(method, path, constraints) {
    assert(typeof path === "string", "Path should be a string");
    assert(path.length > 0, "The path could not be empty");
    assert(path[0] === "/" || path[0] === "*", "The first character of a path should be `/` or `*`");
    assert(typeof constraints === "undefined" || typeof constraints === "object" && !Array.isArray(constraints) && constraints !== null, "Constraints should be an object or undefined.");
    const optionalParamMatch = path.match(OPTIONAL_PARAM_REGEXP);
    if (optionalParamMatch) {
      assert(path.length === optionalParamMatch.index + optionalParamMatch[0].length, "Optional Parameter needs to be the last parameter of the path");
      const pathFull = path.replace(OPTIONAL_PARAM_REGEXP, "$1$2");
      const pathOptional = path.replace(OPTIONAL_PARAM_REGEXP, "$2");
      this.off(method, pathFull, constraints);
      this.off(method, pathOptional, constraints);
      return;
    }
    if (this.ignoreDuplicateSlashes) {
      path = removeDuplicateSlashes(path);
    }
    if (this.ignoreTrailingSlash) {
      path = trimLastSlash(path);
    }
    const methods = Array.isArray(method) ? method : [method];
    for (const method2 of methods) {
      this._off(method2, path, constraints);
    }
  };
  Router.prototype._off = function _off(method, path, constraints) {
    assert(typeof method === "string", "Method should be a string");
    assert(httpMethods.includes(method), `Method '${method}' is not an http method.`);
    function matcherWithoutConstraints(route) {
      return method !== route.method || path !== route.path;
    }
    function matcherWithConstraints(route) {
      return matcherWithoutConstraints(route) || !deepEqual(constraints, route.opts.constraints || {});
    }
    const predicate = constraints ? matcherWithConstraints : matcherWithoutConstraints;
    const newRoutes = this.routes.filter(predicate);
    this._rebuild(newRoutes);
  };
  Router.prototype.lookup = function lookup(req, res, ctx, done) {
    if (typeof ctx === "function") {
      done = ctx;
      ctx = undefined;
    }
    if (done === undefined) {
      const constraints = this.constrainer.deriveConstraints(req, ctx);
      const handle = this.find(req.method, req.url, constraints);
      return this.callHandler(handle, req, res, ctx);
    }
    this.constrainer.deriveConstraints(req, ctx, (err, constraints) => {
      if (err !== null) {
        done(err);
        return;
      }
      try {
        const handle = this.find(req.method, req.url, constraints);
        const result = this.callHandler(handle, req, res, ctx);
        done(null, result);
      } catch (err2) {
        done(err2);
      }
    });
  };
  Router.prototype.callHandler = function callHandler(handle, req, res, ctx) {
    if (handle === null)
      return this._defaultRoute(req, res, ctx);
    return ctx === undefined ? handle.handler(req, res, handle.params, handle.store, handle.searchParams) : handle.handler.call(ctx, req, res, handle.params, handle.store, handle.searchParams);
  };
  Router.prototype.find = function find(method, path, derivedConstraints) {
    let currentNode = this.trees[method];
    if (currentNode === undefined)
      return null;
    if (path.charCodeAt(0) !== 47) {
      path = path.replace(FULL_PATH_REGEXP, "/");
    }
    if (this.ignoreDuplicateSlashes) {
      path = removeDuplicateSlashes(path);
    }
    let sanitizedUrl;
    let querystring2;
    let shouldDecodeParam;
    try {
      sanitizedUrl = safeDecodeURI(path, this.useSemicolonDelimiter);
      path = sanitizedUrl.path;
      querystring2 = sanitizedUrl.querystring;
      shouldDecodeParam = sanitizedUrl.shouldDecodeParam;
    } catch (error) {
      return this._onBadUrl(path);
    }
    if (this.ignoreTrailingSlash) {
      path = trimLastSlash(path);
    }
    const originPath = path;
    if (this.caseSensitive === false) {
      path = path.toLowerCase();
    }
    const maxParamLength = this.maxParamLength;
    let pathIndex = currentNode.prefix.length;
    const params = [];
    const pathLen = path.length;
    const brothersNodesStack = [];
    while (true) {
      if (pathIndex === pathLen && currentNode.isLeafNode) {
        const handle = currentNode.handlerStorage.getMatchingHandler(derivedConstraints);
        if (handle !== null) {
          return {
            handler: handle.handler,
            store: handle.store,
            params: handle._createParamsObject(params),
            searchParams: this.querystringParser(querystring2)
          };
        }
      }
      let node = currentNode.getNextNode(path, pathIndex, brothersNodesStack, params.length);
      if (node === null) {
        if (brothersNodesStack.length === 0) {
          return null;
        }
        const brotherNodeState = brothersNodesStack.pop();
        pathIndex = brotherNodeState.brotherPathIndex;
        params.splice(brotherNodeState.paramsCount);
        node = brotherNodeState.brotherNode;
      }
      currentNode = node;
      if (currentNode.kind === NODE_TYPES.STATIC) {
        pathIndex += currentNode.prefix.length;
        continue;
      }
      if (currentNode.kind === NODE_TYPES.WILDCARD) {
        let param2 = originPath.slice(pathIndex);
        if (shouldDecodeParam) {
          param2 = safeDecodeURIComponent(param2);
        }
        params.push(param2);
        pathIndex = pathLen;
        continue;
      }
      let paramEndIndex = originPath.indexOf("/", pathIndex);
      if (paramEndIndex === -1) {
        paramEndIndex = pathLen;
      }
      let param = originPath.slice(pathIndex, paramEndIndex);
      if (shouldDecodeParam) {
        param = safeDecodeURIComponent(param);
      }
      if (currentNode.isRegex) {
        const matchedParameters = currentNode.regex.exec(param);
        if (matchedParameters === null)
          continue;
        for (let i = 1;i < matchedParameters.length; i++) {
          const matchedParam = matchedParameters[i];
          if (matchedParam.length > maxParamLength) {
            return null;
          }
          params.push(matchedParam);
        }
      } else {
        if (param.length > maxParamLength) {
          return null;
        }
        params.push(param);
      }
      pathIndex = paramEndIndex;
    }
  };
  Router.prototype._rebuild = function(routes) {
    this.reset();
    for (const route of routes) {
      const { method, path, opts, handler, store } = route;
      this._on(method, path, opts, handler, store);
    }
  };
  Router.prototype._defaultRoute = function(req, res, ctx) {
    if (this.defaultRoute !== null) {
      return ctx === undefined ? this.defaultRoute(req, res) : this.defaultRoute.call(ctx, req, res);
    } else {
      res.statusCode = 404;
      res.end();
    }
  };
  Router.prototype._onBadUrl = function(path) {
    if (this.onBadUrl === null) {
      return null;
    }
    const onBadUrl = this.onBadUrl;
    return {
      handler: (req, res, ctx) => onBadUrl(path, req, res),
      params: {},
      store: null
    };
  };
  Router.prototype.prettyPrint = function(options = {}) {
    const method = options.method;
    options.buildPrettyMeta = this.buildPrettyMeta.bind(this);
    let tree = null;
    if (method === undefined) {
      const { version, host, ...constraints } = this.constrainer.strategies;
      constraints[httpMethodStrategy.name] = httpMethodStrategy;
      const mergedRouter = new Router({ ...this._opts, constraints });
      const mergedRoutes = this.routes.map((route) => {
        const constraints2 = {
          ...route.opts.constraints,
          [httpMethodStrategy.name]: route.method
        };
        return { ...route, method: "MERGED", opts: { constraints: constraints2 } };
      });
      mergedRouter._rebuild(mergedRoutes);
      tree = mergedRouter.trees.MERGED;
    } else {
      tree = this.trees[method];
    }
    if (tree == null)
      return "(empty tree)";
    return prettyPrintTree(tree, options);
  };
  for (const i in httpMethods) {
    if (!httpMethods.hasOwnProperty(i))
      continue;
    const m = httpMethods[i];
    const methodName = m.toLowerCase();
    Router.prototype[methodName] = function(path, handler, store) {
      return this.on(m, path, handler, store);
    };
  }
  Router.prototype.all = function(path, handler, store) {
    this.on(httpMethods, path, handler, store);
  };
  module.exports = Router;
  function escapeRegExp(string) {
    return string.replace(ESCAPE_REGEXP, "\\$&");
  }
  function removeDuplicateSlashes(path) {
    return path.indexOf("//") !== -1 ? path.replace(REMOVE_DUPLICATE_SLASHES_REGEXP, "/") : path;
  }
  function trimLastSlash(path) {
    if (path.length > 1 && path.charCodeAt(path.length - 1) === 47) {
      return path.slice(0, -1);
    }
    return path;
  }
  function trimRegExpStartAndEnd(regexString) {
    if (regexString.charCodeAt(1) === 94) {
      regexString = regexString.slice(0, 1) + regexString.slice(2);
    }
    if (regexString.charCodeAt(regexString.length - 2) === 36) {
      regexString = regexString.slice(0, regexString.length - 2) + regexString.slice(regexString.length - 1);
    }
    return regexString;
  }
  function getClosingParenthensePosition(path, idx) {
    let parentheses = 1;
    while (idx < path.length) {
      idx++;
      if (path.charCodeAt(idx) === 92) {
        idx++;
        continue;
      }
      if (path.charCodeAt(idx) === 41) {
        parentheses--;
      } else if (path.charCodeAt(idx) === 40) {
        parentheses++;
      }
      if (!parentheses)
        return idx;
    }
    throw new TypeError('Invalid regexp expression in "' + path + '"');
  }
  function defaultBuildPrettyMeta(route) {
    if (!route)
      return {};
    if (!route.store)
      return {};
    return Object.assign({}, route.store);
  }
});

// node_modules/fastify/lib/headRoute.js
var require_headRoute = __commonJS((exports, module) => {
  function headRouteOnSendHandler(req, reply, payload, done) {
    if (payload === undefined) {
      reply.header("content-length", "0");
      done(null, null);
      return;
    }
    if (typeof payload.resume === "function") {
      payload.on("error", (err) => {
        reply.log.error({ err }, "Error on Stream found for HEAD route");
      });
      payload.resume();
      done(null, null);
      return;
    }
    const size = "" + Buffer.byteLength(payload);
    reply.header("content-length", size);
    done(null, null);
  }
  function parseHeadOnSendHandlers(onSendHandlers) {
    if (onSendHandlers == null)
      return headRouteOnSendHandler;
    return Array.isArray(onSendHandlers) ? [...onSendHandlers, headRouteOnSendHandler] : [onSendHandlers, headRouteOnSendHandler];
  }
  module.exports = {
    parseHeadOnSendHandlers
  };
});

// node_modules/fastify/lib/route.js
var require_route = __commonJS((exports, module) => {
  var FindMyWay = require_find_my_way();
  var Context = require_context();
  var handleRequest = require_handleRequest();
  var { onRequestAbortHookRunner, lifecycleHooks, preParsingHookRunner, onTimeoutHookRunner, onRequestHookRunner } = require_hooks();
  var { normalizeSchema } = require_schemas();
  var { parseHeadOnSendHandlers } = require_headRoute();
  var {
    compileSchemasForValidation,
    compileSchemasForSerialization
  } = require_validation();
  var {
    FST_ERR_SCH_VALIDATION_BUILD,
    FST_ERR_SCH_SERIALIZATION_BUILD,
    FST_ERR_DUPLICATED_ROUTE,
    FST_ERR_INVALID_URL,
    FST_ERR_HOOK_INVALID_HANDLER,
    FST_ERR_ROUTE_OPTIONS_NOT_OBJ,
    FST_ERR_ROUTE_DUPLICATED_HANDLER,
    FST_ERR_ROUTE_HANDLER_NOT_FN,
    FST_ERR_ROUTE_MISSING_HANDLER,
    FST_ERR_ROUTE_METHOD_NOT_SUPPORTED,
    FST_ERR_ROUTE_METHOD_INVALID,
    FST_ERR_ROUTE_BODY_VALIDATION_SCHEMA_NOT_SUPPORTED,
    FST_ERR_ROUTE_BODY_LIMIT_OPTION_NOT_INT,
    FST_ERR_HOOK_INVALID_ASYNC_HANDLER
  } = require_errors4();
  var {
    kRoutePrefix,
    kSupportedHTTPMethods,
    kLogLevel,
    kLogSerializers,
    kHooks,
    kSchemaController,
    kOptions,
    kReplySerializerDefault,
    kReplyIsError,
    kRequestPayloadStream,
    kDisableRequestLogging,
    kSchemaErrorFormatter,
    kErrorHandler,
    kHasBeenDecorated,
    kRequestAcceptVersion,
    kRouteByFastify,
    kRouteContext
  } = require_symbols3();
  var { buildErrorHandler } = require_error_handler();
  var { createChildLogger } = require_logger_factory();
  var { getGenReqId } = require_reqIdGenFactory();
  function buildRouting(options) {
    const router = FindMyWay(options.config);
    let avvio;
    let fourOhFour;
    let logger;
    let hasLogger;
    let setupResponseListeners;
    let throwIfAlreadyStarted;
    let disableRequestLogging;
    let ignoreTrailingSlash;
    let ignoreDuplicateSlashes;
    let return503OnClosing;
    let globalExposeHeadRoutes;
    let keepAliveConnections;
    let closing = false;
    return {
      setup(options2, fastifyArgs) {
        avvio = fastifyArgs.avvio;
        fourOhFour = fastifyArgs.fourOhFour;
        logger = fastifyArgs.logger;
        hasLogger = fastifyArgs.hasLogger;
        setupResponseListeners = fastifyArgs.setupResponseListeners;
        throwIfAlreadyStarted = fastifyArgs.throwIfAlreadyStarted;
        globalExposeHeadRoutes = options2.exposeHeadRoutes;
        disableRequestLogging = options2.disableRequestLogging;
        ignoreTrailingSlash = options2.ignoreTrailingSlash;
        ignoreDuplicateSlashes = options2.ignoreDuplicateSlashes;
        return503OnClosing = Object.hasOwn(options2, "return503OnClosing") ? options2.return503OnClosing : true;
        keepAliveConnections = fastifyArgs.keepAliveConnections;
      },
      routing: router.lookup.bind(router),
      route,
      hasRoute,
      prepareRoute,
      routeHandler,
      closeRoutes: () => {
        closing = true;
      },
      printRoutes: router.prettyPrint.bind(router),
      addConstraintStrategy,
      hasConstraintStrategy,
      isAsyncConstraint,
      findRoute
    };
    function addConstraintStrategy(strategy) {
      throwIfAlreadyStarted("Cannot add constraint strategy!");
      return router.addConstraintStrategy(strategy);
    }
    function hasConstraintStrategy(strategyName) {
      return router.hasConstraintStrategy(strategyName);
    }
    function isAsyncConstraint() {
      return router.constrainer.asyncStrategiesInUse.size > 0;
    }
    function prepareRoute({ method, url, options: options2, handler, isFastify }) {
      if (typeof url !== "string") {
        throw new FST_ERR_INVALID_URL(typeof url);
      }
      if (!handler && typeof options2 === "function") {
        handler = options2;
        options2 = {};
      } else if (handler && typeof handler === "function") {
        if (Object.prototype.toString.call(options2) !== "[object Object]") {
          throw new FST_ERR_ROUTE_OPTIONS_NOT_OBJ(method, url);
        } else if (options2.handler) {
          if (typeof options2.handler === "function") {
            throw new FST_ERR_ROUTE_DUPLICATED_HANDLER(method, url);
          } else {
            throw new FST_ERR_ROUTE_HANDLER_NOT_FN(method, url);
          }
        }
      }
      options2 = Object.assign({}, options2, {
        method,
        url,
        path: url,
        handler: handler || options2 && options2.handler
      });
      return route.call(this, { options: options2, isFastify });
    }
    function hasRoute({ options: options2 }) {
      const normalizedMethod = options2.method?.toUpperCase() ?? "";
      return router.hasRoute(normalizedMethod, options2.url || "", options2.constraints);
    }
    function findRoute(options2) {
      const route2 = router.find(options2.method, options2.url || "", options2.constraints);
      if (route2) {
        return {
          handler: route2.handler,
          params: route2.params,
          searchParams: route2.searchParams
        };
      } else {
        return null;
      }
    }
    function route({ options: options2, isFastify }) {
      throwIfAlreadyStarted("Cannot add route!");
      const opts = { ...options2 };
      const path = opts.url || opts.path || "";
      if (!opts.handler) {
        throw new FST_ERR_ROUTE_MISSING_HANDLER(opts.method, path);
      }
      if (opts.errorHandler !== undefined && typeof opts.errorHandler !== "function") {
        throw new FST_ERR_ROUTE_HANDLER_NOT_FN(opts.method, path);
      }
      validateBodyLimitOption(opts.bodyLimit);
      const shouldExposeHead = opts.exposeHeadRoute ?? globalExposeHeadRoutes;
      let isGetRoute = false;
      let isHeadRoute = false;
      if (Array.isArray(opts.method)) {
        for (let i = 0;i < opts.method.length; ++i) {
          opts.method[i] = normalizeAndValidateMethod.call(this, opts.method[i]);
          validateSchemaBodyOption.call(this, opts.method[i], path, opts.schema);
          isGetRoute = opts.method.includes("GET");
          isHeadRoute = opts.method.includes("HEAD");
        }
      } else {
        opts.method = normalizeAndValidateMethod.call(this, opts.method);
        validateSchemaBodyOption.call(this, opts.method, path, opts.schema);
        isGetRoute = opts.method === "GET";
        isHeadRoute = opts.method === "HEAD";
      }
      const headOpts = shouldExposeHead && isGetRoute ? { ...options2 } : null;
      const prefix = this[kRoutePrefix];
      if (path === "/" && prefix.length > 0 && opts.method !== "HEAD") {
        switch (opts.prefixTrailingSlash) {
          case "slash":
            addNewRoute.call(this, { path, isFastify });
            break;
          case "no-slash":
            addNewRoute.call(this, { path: "", isFastify });
            break;
          case "both":
          default:
            addNewRoute.call(this, { path: "", isFastify });
            if (ignoreTrailingSlash !== true && (ignoreDuplicateSlashes !== true || !prefix.endsWith("/"))) {
              addNewRoute.call(this, { path, prefixing: true, isFastify });
            }
        }
      } else if (path[0] === "/" && prefix.endsWith("/")) {
        addNewRoute.call(this, { path: path.slice(1), isFastify });
      } else {
        addNewRoute.call(this, { path, isFastify });
      }
      return this;
      function addNewRoute({ path: path2, prefixing = false, isFastify: isFastify2 = false }) {
        const url = prefix + path2;
        opts.url = url;
        opts.path = url;
        opts.routePath = path2;
        opts.prefix = prefix;
        opts.logLevel = opts.logLevel || this[kLogLevel];
        if (this[kLogSerializers] || opts.logSerializers) {
          opts.logSerializers = Object.assign(Object.create(this[kLogSerializers]), opts.logSerializers);
        }
        if (opts.attachValidation == null) {
          opts.attachValidation = false;
        }
        if (prefixing === false) {
          for (const hook of this[kHooks].onRoute) {
            hook.call(this, opts);
          }
        }
        for (const hook of lifecycleHooks) {
          if (opts && hook in opts) {
            if (Array.isArray(opts[hook])) {
              for (const func of opts[hook]) {
                if (typeof func !== "function") {
                  throw new FST_ERR_HOOK_INVALID_HANDLER(hook, Object.prototype.toString.call(func));
                }
                if (hook === "onSend" || hook === "preSerialization" || hook === "onError" || hook === "preParsing") {
                  if (func.constructor.name === "AsyncFunction" && func.length === 4) {
                    throw new FST_ERR_HOOK_INVALID_ASYNC_HANDLER;
                  }
                } else if (hook === "onRequestAbort") {
                  if (func.constructor.name === "AsyncFunction" && func.length !== 1) {
                    throw new FST_ERR_HOOK_INVALID_ASYNC_HANDLER;
                  }
                } else {
                  if (func.constructor.name === "AsyncFunction" && func.length === 3) {
                    throw new FST_ERR_HOOK_INVALID_ASYNC_HANDLER;
                  }
                }
              }
            } else if (opts[hook] !== undefined && typeof opts[hook] !== "function") {
              throw new FST_ERR_HOOK_INVALID_HANDLER(hook, Object.prototype.toString.call(opts[hook]));
            }
          }
        }
        const constraints = opts.constraints || {};
        const config = {
          ...opts.config,
          url,
          method: opts.method
        };
        const context = new Context({
          schema: opts.schema,
          handler: opts.handler.bind(this),
          config,
          errorHandler: opts.errorHandler,
          childLoggerFactory: opts.childLoggerFactory,
          bodyLimit: opts.bodyLimit,
          logLevel: opts.logLevel,
          logSerializers: opts.logSerializers,
          attachValidation: opts.attachValidation,
          schemaErrorFormatter: opts.schemaErrorFormatter,
          replySerializer: this[kReplySerializerDefault],
          validatorCompiler: opts.validatorCompiler,
          serializerCompiler: opts.serializerCompiler,
          exposeHeadRoute: shouldExposeHead,
          prefixTrailingSlash: opts.prefixTrailingSlash || "both",
          server: this,
          isFastify: isFastify2
        });
        const headHandler = router.findRoute("HEAD", opts.url, constraints);
        const hasHEADHandler = headHandler !== null;
        try {
          router.on(opts.method, opts.url, { constraints }, routeHandler, context);
        } catch (error) {
          if (!context[kRouteByFastify]) {
            const isDuplicatedRoute = error.message.includes(`Method '${opts.method}' already declared for route`);
            if (isDuplicatedRoute) {
              throw new FST_ERR_DUPLICATED_ROUTE(opts.method, opts.url);
            }
            throw error;
          }
        }
        this.after((notHandledErr, done) => {
          context.errorHandler = opts.errorHandler ? buildErrorHandler(this[kErrorHandler], opts.errorHandler) : this[kErrorHandler];
          context._parserOptions.limit = opts.bodyLimit || null;
          context.logLevel = opts.logLevel;
          context.logSerializers = opts.logSerializers;
          context.attachValidation = opts.attachValidation;
          context[kReplySerializerDefault] = this[kReplySerializerDefault];
          context.schemaErrorFormatter = opts.schemaErrorFormatter || this[kSchemaErrorFormatter] || context.schemaErrorFormatter;
          avvio.once("preReady", () => {
            for (const hook of lifecycleHooks) {
              const toSet = this[kHooks][hook].concat(opts[hook] || []).map((h) => h.bind(this));
              context[hook] = toSet.length ? toSet : null;
            }
            while (!context.Request[kHasBeenDecorated] && context.Request.parent) {
              context.Request = context.Request.parent;
            }
            while (!context.Reply[kHasBeenDecorated] && context.Reply.parent) {
              context.Reply = context.Reply.parent;
            }
            fourOhFour.setContext(this, context);
            if (opts.schema) {
              context.schema = normalizeSchema(context.schema, this.initialConfig);
              const schemaController = this[kSchemaController];
              if (!opts.validatorCompiler && (opts.schema.body || opts.schema.headers || opts.schema.querystring || opts.schema.params)) {
                schemaController.setupValidator(this[kOptions]);
              }
              try {
                const isCustom = typeof opts?.validatorCompiler === "function" || schemaController.isCustomValidatorCompiler;
                compileSchemasForValidation(context, opts.validatorCompiler || schemaController.validatorCompiler, isCustom);
              } catch (error) {
                throw new FST_ERR_SCH_VALIDATION_BUILD(opts.method, url, error.message);
              }
              if (opts.schema.response && !opts.serializerCompiler) {
                schemaController.setupSerializer(this[kOptions]);
              }
              try {
                compileSchemasForSerialization(context, opts.serializerCompiler || schemaController.serializerCompiler);
              } catch (error) {
                throw new FST_ERR_SCH_SERIALIZATION_BUILD(opts.method, url, error.message);
              }
            }
          });
          done(notHandledErr);
        });
        if (shouldExposeHead && isGetRoute && !isHeadRoute && !hasHEADHandler) {
          const onSendHandlers = parseHeadOnSendHandlers(headOpts.onSend);
          prepareRoute.call(this, { method: "HEAD", url: path2, options: { ...headOpts, onSend: onSendHandlers }, isFastify: true });
        }
      }
    }
    function routeHandler(req, res, params, context, query) {
      const id = getGenReqId(context.server, req);
      const loggerOpts = {
        level: context.logLevel
      };
      if (context.logSerializers) {
        loggerOpts.serializers = context.logSerializers;
      }
      const childLogger = createChildLogger(context, logger, req, id, loggerOpts);
      childLogger[kDisableRequestLogging] = disableRequestLogging;
      if (closing === true) {
        if (req.httpVersionMajor !== 2) {
          res.setHeader("Connection", "close");
        }
        if (return503OnClosing) {
          const headers = {
            "Content-Type": "application/json",
            "Content-Length": "80"
          };
          res.writeHead(503, headers);
          res.end('{"error":"Service Unavailable","message":"Service Unavailable","statusCode":503}');
          childLogger.info({ res: { statusCode: 503 } }, "request aborted - refusing to accept new requests as server is closing");
          return;
        }
      }
      const connHeader = String.prototype.toLowerCase.call(req.headers.connection || "");
      if (connHeader === "keep-alive") {
        if (keepAliveConnections.has(req.socket) === false) {
          keepAliveConnections.add(req.socket);
          req.socket.on("close", removeTrackedSocket.bind({ keepAliveConnections, socket: req.socket }));
        }
      }
      if (req.headers[kRequestAcceptVersion] !== undefined) {
        req.headers["accept-version"] = req.headers[kRequestAcceptVersion];
        req.headers[kRequestAcceptVersion] = undefined;
      }
      const request = new context.Request(id, params, req, query, childLogger, context);
      const reply = new context.Reply(res, request, childLogger);
      if (disableRequestLogging === false) {
        childLogger.info({ req: request }, "incoming request");
      }
      if (hasLogger === true || context.onResponse !== null) {
        setupResponseListeners(reply);
      }
      if (context.onRequest !== null) {
        onRequestHookRunner(context.onRequest, request, reply, runPreParsing);
      } else {
        runPreParsing(null, request, reply);
      }
      if (context.onRequestAbort !== null) {
        req.on("close", () => {
          if (req.aborted) {
            onRequestAbortHookRunner(context.onRequestAbort, request, handleOnRequestAbortHooksErrors.bind(null, reply));
          }
        });
      }
      if (context.onTimeout !== null) {
        if (!request.raw.socket._meta) {
          request.raw.socket.on("timeout", handleTimeout);
        }
        request.raw.socket._meta = { context, request, reply };
      }
    }
  }
  function handleOnRequestAbortHooksErrors(reply, err) {
    if (err) {
      reply.log.error({ err }, "onRequestAborted hook failed");
    }
  }
  function handleTimeout() {
    const { context, request, reply } = this._meta;
    onTimeoutHookRunner(context.onTimeout, request, reply, noop);
  }
  function normalizeAndValidateMethod(method) {
    if (typeof method !== "string") {
      throw new FST_ERR_ROUTE_METHOD_INVALID;
    }
    method = method.toUpperCase();
    if (!this[kSupportedHTTPMethods].bodyless.has(method) && !this[kSupportedHTTPMethods].bodywith.has(method)) {
      throw new FST_ERR_ROUTE_METHOD_NOT_SUPPORTED(method);
    }
    return method;
  }
  function validateSchemaBodyOption(method, path, schema) {
    if (this[kSupportedHTTPMethods].bodyless.has(method) && schema?.body) {
      throw new FST_ERR_ROUTE_BODY_VALIDATION_SCHEMA_NOT_SUPPORTED(method, path);
    }
  }
  function validateBodyLimitOption(bodyLimit) {
    if (bodyLimit === undefined)
      return;
    if (!Number.isInteger(bodyLimit) || bodyLimit <= 0) {
      throw new FST_ERR_ROUTE_BODY_LIMIT_OPTION_NOT_INT(bodyLimit);
    }
  }
  function runPreParsing(err, request, reply) {
    if (reply.sent === true)
      return;
    if (err != null) {
      reply[kReplyIsError] = true;
      reply.send(err);
      return;
    }
    request[kRequestPayloadStream] = request.raw;
    if (request[kRouteContext].preParsing !== null) {
      preParsingHookRunner(request[kRouteContext].preParsing, request, reply, handleRequest.bind(request.server));
    } else {
      handleRequest.call(request.server, null, request, reply);
    }
  }
  function removeTrackedSocket() {
    this.keepAliveConnections.delete(this.socket);
  }
  function noop() {
  }
  module.exports = { buildRouting, validateBodyLimitOption };
});

// node_modules/fastify/lib/fourOhFour.js
var require_fourOhFour = __commonJS((exports, module) => {
  var FindMyWay = require_find_my_way();
  var Reply = require_reply();
  var Request = require_request();
  var Context = require_context();
  var {
    kRoutePrefix,
    kCanSetNotFoundHandler,
    kFourOhFourLevelInstance,
    kFourOhFourContext,
    kHooks,
    kErrorHandler
  } = require_symbols3();
  var { lifecycleHooks } = require_hooks();
  var { buildErrorHandler } = require_error_handler();
  var {
    FST_ERR_NOT_FOUND
  } = require_errors4();
  var { createChildLogger } = require_logger_factory();
  var { getGenReqId } = require_reqIdGenFactory();
  function fourOhFour(options) {
    const { logger, disableRequestLogging } = options;
    const router = FindMyWay({ onBadUrl: createOnBadUrl(), defaultRoute: fourOhFourFallBack });
    let _onBadUrlHandler = null;
    return { router, setNotFoundHandler, setContext, arrange404 };
    function arrange404(instance) {
      instance[kFourOhFourLevelInstance] = instance;
      instance[kCanSetNotFoundHandler] = true;
      router.onBadUrl = router.onBadUrl.bind(instance);
      router.defaultRoute = router.defaultRoute.bind(instance);
    }
    function basic404(request, reply) {
      const { url, method } = request.raw;
      const message = `Route ${method}:${url} not found`;
      if (!disableRequestLogging) {
        request.log.info(message);
      }
      reply.code(404).send({
        message,
        error: "Not Found",
        statusCode: 404
      });
    }
    function createOnBadUrl() {
      return function onBadUrl(path, req, res) {
        const fourOhFourContext = this[kFourOhFourLevelInstance][kFourOhFourContext];
        const id = getGenReqId(fourOhFourContext.server, req);
        const childLogger = createChildLogger(fourOhFourContext, logger, req, id);
        const request = new Request(id, null, req, null, childLogger, fourOhFourContext);
        const reply = new Reply(res, request, childLogger);
        _onBadUrlHandler(request, reply);
      };
    }
    function setContext(instance, context) {
      const _404Context = Object.assign({}, instance[kFourOhFourContext]);
      _404Context.onSend = context.onSend;
      context[kFourOhFourContext] = _404Context;
    }
    function setNotFoundHandler(opts, handler, avvio, routeHandler) {
      if (this[kCanSetNotFoundHandler] === undefined) {
        this[kCanSetNotFoundHandler] = true;
      }
      if (this[kFourOhFourContext] === undefined) {
        this[kFourOhFourContext] = null;
      }
      const _fastify = this;
      const prefix = this[kRoutePrefix] || "/";
      if (this[kCanSetNotFoundHandler] === false) {
        throw new Error(`Not found handler already set for Fastify instance with prefix: '${prefix}'`);
      }
      if (typeof opts === "object") {
        if (opts.preHandler) {
          if (Array.isArray(opts.preHandler)) {
            opts.preHandler = opts.preHandler.map((hook) => hook.bind(_fastify));
          } else {
            opts.preHandler = opts.preHandler.bind(_fastify);
          }
        }
        if (opts.preValidation) {
          if (Array.isArray(opts.preValidation)) {
            opts.preValidation = opts.preValidation.map((hook) => hook.bind(_fastify));
          } else {
            opts.preValidation = opts.preValidation.bind(_fastify);
          }
        }
      }
      if (typeof opts === "function") {
        handler = opts;
        opts = undefined;
      }
      opts = opts || {};
      if (handler) {
        this[kFourOhFourLevelInstance][kCanSetNotFoundHandler] = false;
        handler = handler.bind(this);
        _onBadUrlHandler = handler;
      } else {
        handler = basic404;
        _onBadUrlHandler = basic404;
      }
      this.after((notHandledErr, done) => {
        _setNotFoundHandler.call(this, prefix, opts, handler, avvio, routeHandler);
        done(notHandledErr);
      });
    }
    function _setNotFoundHandler(prefix, opts, handler, avvio, routeHandler) {
      const context = new Context({
        schema: opts.schema,
        handler,
        config: opts.config || {},
        server: this
      });
      avvio.once("preReady", () => {
        const context2 = this[kFourOhFourContext];
        for (const hook of lifecycleHooks) {
          const toSet = this[kHooks][hook].concat(opts[hook] || []).map((h) => h.bind(this));
          context2[hook] = toSet.length ? toSet : null;
        }
        context2.errorHandler = opts.errorHandler ? buildErrorHandler(this[kErrorHandler], opts.errorHandler) : this[kErrorHandler];
      });
      if (this[kFourOhFourContext] !== null && prefix === "/") {
        Object.assign(this[kFourOhFourContext], context);
        return;
      }
      this[kFourOhFourLevelInstance][kFourOhFourContext] = context;
      router.all(prefix + (prefix.endsWith("/") ? "*" : "/*"), routeHandler, context);
      router.all(prefix, routeHandler, context);
    }
    function fourOhFourFallBack(req, res) {
      const fourOhFourContext = this[kFourOhFourLevelInstance][kFourOhFourContext];
      const id = getGenReqId(fourOhFourContext.server, req);
      const childLogger = createChildLogger(fourOhFourContext, logger, req, id);
      childLogger.info({ req }, "incoming request");
      const request = new Request(id, null, req, null, childLogger, fourOhFourContext);
      const reply = new Reply(res, request, childLogger);
      request.log.warn("the default handler for 404 did not catch this, this is likely a fastify bug, please report it");
      request.log.warn(router.prettyPrint());
      reply.code(404).send(new FST_ERR_NOT_FOUND);
    }
  }
  module.exports = fourOhFour;
});

// node_modules/fastify/lib/configValidator.js
var require_configValidator = __commonJS((exports, module) => {
  module.exports = validate10;
  module.exports.default = validate10;
  var schema11 = { type: "object", additionalProperties: false, properties: { connectionTimeout: { type: "integer", default: 0 }, keepAliveTimeout: { type: "integer", default: 72000 }, forceCloseConnections: { oneOf: [{ type: "string", pattern: "idle" }, { type: "boolean" }] }, maxRequestsPerSocket: { type: "integer", default: 0, nullable: true }, requestTimeout: { type: "integer", default: 0 }, bodyLimit: { type: "integer", default: 1048576 }, caseSensitive: { type: "boolean", default: true }, allowUnsafeRegex: { type: "boolean", default: false }, http2: { type: "boolean" }, https: { if: { not: { oneOf: [{ type: "boolean" }, { type: "null" }, { type: "object", additionalProperties: false, required: ["allowHTTP1"], properties: { allowHTTP1: { type: "boolean" } } }] } }, then: { setDefaultValue: true } }, ignoreTrailingSlash: { type: "boolean", default: false }, ignoreDuplicateSlashes: { type: "boolean", default: false }, disableRequestLogging: { type: "boolean", default: false }, maxParamLength: { type: "integer", default: 100 }, onProtoPoisoning: { type: "string", default: "error" }, onConstructorPoisoning: { type: "string", default: "error" }, pluginTimeout: { type: "integer", default: 1e4 }, requestIdHeader: { anyOf: [{ type: "boolean" }, { type: "string" }], default: false }, requestIdLogLabel: { type: "string", default: "reqId" }, http2SessionTimeout: { type: "integer", default: 72000 }, exposeHeadRoutes: { type: "boolean", default: true }, useSemicolonDelimiter: { type: "boolean", default: false }, constraints: { type: "object", additionalProperties: { type: "object", required: ["name", "storage", "validate", "deriveConstraint"], additionalProperties: true, properties: { name: { type: "string" }, storage: {}, validate: {}, deriveConstraint: {} } } } } };
  var func2 = Object.prototype.hasOwnProperty;
  var pattern0 = new RegExp("idle", "u");
  function validate10(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {
    let vErrors = null;
    let errors = 0;
    if (errors === 0) {
      if (data && typeof data == "object" && !Array.isArray(data)) {
        if (data.connectionTimeout === undefined) {
          data.connectionTimeout = 0;
        }
        if (data.keepAliveTimeout === undefined) {
          data.keepAliveTimeout = 72000;
        }
        if (data.maxRequestsPerSocket === undefined) {
          data.maxRequestsPerSocket = 0;
        }
        if (data.requestTimeout === undefined) {
          data.requestTimeout = 0;
        }
        if (data.bodyLimit === undefined) {
          data.bodyLimit = 1048576;
        }
        if (data.caseSensitive === undefined) {
          data.caseSensitive = true;
        }
        if (data.allowUnsafeRegex === undefined) {
          data.allowUnsafeRegex = false;
        }
        if (data.ignoreTrailingSlash === undefined) {
          data.ignoreTrailingSlash = false;
        }
        if (data.ignoreDuplicateSlashes === undefined) {
          data.ignoreDuplicateSlashes = false;
        }
        if (data.disableRequestLogging === undefined) {
          data.disableRequestLogging = false;
        }
        if (data.maxParamLength === undefined) {
          data.maxParamLength = 100;
        }
        if (data.onProtoPoisoning === undefined) {
          data.onProtoPoisoning = "error";
        }
        if (data.onConstructorPoisoning === undefined) {
          data.onConstructorPoisoning = "error";
        }
        if (data.pluginTimeout === undefined) {
          data.pluginTimeout = 1e4;
        }
        if (data.requestIdHeader === undefined) {
          data.requestIdHeader = false;
        }
        if (data.requestIdLogLabel === undefined) {
          data.requestIdLogLabel = "reqId";
        }
        if (data.http2SessionTimeout === undefined) {
          data.http2SessionTimeout = 72000;
        }
        if (data.exposeHeadRoutes === undefined) {
          data.exposeHeadRoutes = true;
        }
        if (data.useSemicolonDelimiter === undefined) {
          data.useSemicolonDelimiter = false;
        }
        const _errs1 = errors;
        for (const key0 in data) {
          if (!func2.call(schema11.properties, key0)) {
            delete data[key0];
          }
        }
        if (_errs1 === errors) {
          let data0 = data.connectionTimeout;
          const _errs2 = errors;
          if (!(typeof data0 == "number" && (!(data0 % 1) && !isNaN(data0)) && isFinite(data0))) {
            let dataType0 = typeof data0;
            let coerced0 = undefined;
            if (!(coerced0 !== undefined)) {
              if (dataType0 === "boolean" || data0 === null || dataType0 === "string" && data0 && data0 == +data0 && !(data0 % 1)) {
                coerced0 = +data0;
              } else {
                validate10.errors = [{ instancePath: instancePath + "/connectionTimeout", schemaPath: "#/properties/connectionTimeout/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                return false;
              }
            }
            if (coerced0 !== undefined) {
              data0 = coerced0;
              if (data !== undefined) {
                data["connectionTimeout"] = coerced0;
              }
            }
          }
          var valid0 = _errs2 === errors;
          if (valid0) {
            let data1 = data.keepAliveTimeout;
            const _errs4 = errors;
            if (!(typeof data1 == "number" && (!(data1 % 1) && !isNaN(data1)) && isFinite(data1))) {
              let dataType1 = typeof data1;
              let coerced1 = undefined;
              if (!(coerced1 !== undefined)) {
                if (dataType1 === "boolean" || data1 === null || dataType1 === "string" && data1 && data1 == +data1 && !(data1 % 1)) {
                  coerced1 = +data1;
                } else {
                  validate10.errors = [{ instancePath: instancePath + "/keepAliveTimeout", schemaPath: "#/properties/keepAliveTimeout/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                  return false;
                }
              }
              if (coerced1 !== undefined) {
                data1 = coerced1;
                if (data !== undefined) {
                  data["keepAliveTimeout"] = coerced1;
                }
              }
            }
            var valid0 = _errs4 === errors;
            if (valid0) {
              if (data.forceCloseConnections !== undefined) {
                let data2 = data.forceCloseConnections;
                const _errs6 = errors;
                const _errs7 = errors;
                let valid1 = false;
                let passing0 = null;
                const _errs8 = errors;
                if (typeof data2 !== "string") {
                  let dataType2 = typeof data2;
                  let coerced2 = undefined;
                  if (!(coerced2 !== undefined)) {
                    if (dataType2 == "number" || dataType2 == "boolean") {
                      coerced2 = "" + data2;
                    } else if (data2 === null) {
                      coerced2 = "";
                    } else {
                      const err0 = { instancePath: instancePath + "/forceCloseConnections", schemaPath: "#/properties/forceCloseConnections/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                      if (vErrors === null) {
                        vErrors = [err0];
                      } else {
                        vErrors.push(err0);
                      }
                      errors++;
                    }
                  }
                  if (coerced2 !== undefined) {
                    data2 = coerced2;
                    if (data !== undefined) {
                      data["forceCloseConnections"] = coerced2;
                    }
                  }
                }
                if (errors === _errs8) {
                  if (typeof data2 === "string") {
                    if (!pattern0.test(data2)) {
                      const err1 = { instancePath: instancePath + "/forceCloseConnections", schemaPath: "#/properties/forceCloseConnections/oneOf/0/pattern", keyword: "pattern", params: { pattern: "idle" }, message: 'must match pattern "' + "idle" + '"' };
                      if (vErrors === null) {
                        vErrors = [err1];
                      } else {
                        vErrors.push(err1);
                      }
                      errors++;
                    }
                  }
                }
                var _valid0 = _errs8 === errors;
                if (_valid0) {
                  valid1 = true;
                  passing0 = 0;
                }
                const _errs10 = errors;
                if (typeof data2 !== "boolean") {
                  let coerced3 = undefined;
                  if (!(coerced3 !== undefined)) {
                    if (data2 === "false" || data2 === 0 || data2 === null) {
                      coerced3 = false;
                    } else if (data2 === "true" || data2 === 1) {
                      coerced3 = true;
                    } else {
                      const err2 = { instancePath: instancePath + "/forceCloseConnections", schemaPath: "#/properties/forceCloseConnections/oneOf/1/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" };
                      if (vErrors === null) {
                        vErrors = [err2];
                      } else {
                        vErrors.push(err2);
                      }
                      errors++;
                    }
                  }
                  if (coerced3 !== undefined) {
                    data2 = coerced3;
                    if (data !== undefined) {
                      data["forceCloseConnections"] = coerced3;
                    }
                  }
                }
                var _valid0 = _errs10 === errors;
                if (_valid0 && valid1) {
                  valid1 = false;
                  passing0 = [passing0, 1];
                } else {
                  if (_valid0) {
                    valid1 = true;
                    passing0 = 1;
                  }
                }
                if (!valid1) {
                  const err3 = { instancePath: instancePath + "/forceCloseConnections", schemaPath: "#/properties/forceCloseConnections/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
                  if (vErrors === null) {
                    vErrors = [err3];
                  } else {
                    vErrors.push(err3);
                  }
                  errors++;
                  validate10.errors = vErrors;
                  return false;
                } else {
                  errors = _errs7;
                  if (vErrors !== null) {
                    if (_errs7) {
                      vErrors.length = _errs7;
                    } else {
                      vErrors = null;
                    }
                  }
                }
                var valid0 = _errs6 === errors;
              } else {
                var valid0 = true;
              }
              if (valid0) {
                let data3 = data.maxRequestsPerSocket;
                const _errs12 = errors;
                if (!(typeof data3 == "number" && (!(data3 % 1) && !isNaN(data3)) && isFinite(data3)) && data3 !== null) {
                  let dataType4 = typeof data3;
                  let coerced4 = undefined;
                  if (!(coerced4 !== undefined)) {
                    if (dataType4 === "boolean" || data3 === null || dataType4 === "string" && data3 && data3 == +data3 && !(data3 % 1)) {
                      coerced4 = +data3;
                    } else if (data3 === "" || data3 === 0 || data3 === false) {
                      coerced4 = null;
                    } else {
                      validate10.errors = [{ instancePath: instancePath + "/maxRequestsPerSocket", schemaPath: "#/properties/maxRequestsPerSocket/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                      return false;
                    }
                  }
                  if (coerced4 !== undefined) {
                    data3 = coerced4;
                    if (data !== undefined) {
                      data["maxRequestsPerSocket"] = coerced4;
                    }
                  }
                }
                var valid0 = _errs12 === errors;
                if (valid0) {
                  let data4 = data.requestTimeout;
                  const _errs15 = errors;
                  if (!(typeof data4 == "number" && (!(data4 % 1) && !isNaN(data4)) && isFinite(data4))) {
                    let dataType5 = typeof data4;
                    let coerced5 = undefined;
                    if (!(coerced5 !== undefined)) {
                      if (dataType5 === "boolean" || data4 === null || dataType5 === "string" && data4 && data4 == +data4 && !(data4 % 1)) {
                        coerced5 = +data4;
                      } else {
                        validate10.errors = [{ instancePath: instancePath + "/requestTimeout", schemaPath: "#/properties/requestTimeout/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                        return false;
                      }
                    }
                    if (coerced5 !== undefined) {
                      data4 = coerced5;
                      if (data !== undefined) {
                        data["requestTimeout"] = coerced5;
                      }
                    }
                  }
                  var valid0 = _errs15 === errors;
                  if (valid0) {
                    let data5 = data.bodyLimit;
                    const _errs17 = errors;
                    if (!(typeof data5 == "number" && (!(data5 % 1) && !isNaN(data5)) && isFinite(data5))) {
                      let dataType6 = typeof data5;
                      let coerced6 = undefined;
                      if (!(coerced6 !== undefined)) {
                        if (dataType6 === "boolean" || data5 === null || dataType6 === "string" && data5 && data5 == +data5 && !(data5 % 1)) {
                          coerced6 = +data5;
                        } else {
                          validate10.errors = [{ instancePath: instancePath + "/bodyLimit", schemaPath: "#/properties/bodyLimit/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                          return false;
                        }
                      }
                      if (coerced6 !== undefined) {
                        data5 = coerced6;
                        if (data !== undefined) {
                          data["bodyLimit"] = coerced6;
                        }
                      }
                    }
                    var valid0 = _errs17 === errors;
                    if (valid0) {
                      let data6 = data.caseSensitive;
                      const _errs19 = errors;
                      if (typeof data6 !== "boolean") {
                        let coerced7 = undefined;
                        if (!(coerced7 !== undefined)) {
                          if (data6 === "false" || data6 === 0 || data6 === null) {
                            coerced7 = false;
                          } else if (data6 === "true" || data6 === 1) {
                            coerced7 = true;
                          } else {
                            validate10.errors = [{ instancePath: instancePath + "/caseSensitive", schemaPath: "#/properties/caseSensitive/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                            return false;
                          }
                        }
                        if (coerced7 !== undefined) {
                          data6 = coerced7;
                          if (data !== undefined) {
                            data["caseSensitive"] = coerced7;
                          }
                        }
                      }
                      var valid0 = _errs19 === errors;
                      if (valid0) {
                        let data7 = data.allowUnsafeRegex;
                        const _errs21 = errors;
                        if (typeof data7 !== "boolean") {
                          let coerced8 = undefined;
                          if (!(coerced8 !== undefined)) {
                            if (data7 === "false" || data7 === 0 || data7 === null) {
                              coerced8 = false;
                            } else if (data7 === "true" || data7 === 1) {
                              coerced8 = true;
                            } else {
                              validate10.errors = [{ instancePath: instancePath + "/allowUnsafeRegex", schemaPath: "#/properties/allowUnsafeRegex/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                              return false;
                            }
                          }
                          if (coerced8 !== undefined) {
                            data7 = coerced8;
                            if (data !== undefined) {
                              data["allowUnsafeRegex"] = coerced8;
                            }
                          }
                        }
                        var valid0 = _errs21 === errors;
                        if (valid0) {
                          if (data.http2 !== undefined) {
                            let data8 = data.http2;
                            const _errs23 = errors;
                            if (typeof data8 !== "boolean") {
                              let coerced9 = undefined;
                              if (!(coerced9 !== undefined)) {
                                if (data8 === "false" || data8 === 0 || data8 === null) {
                                  coerced9 = false;
                                } else if (data8 === "true" || data8 === 1) {
                                  coerced9 = true;
                                } else {
                                  validate10.errors = [{ instancePath: instancePath + "/http2", schemaPath: "#/properties/http2/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                  return false;
                                }
                              }
                              if (coerced9 !== undefined) {
                                data8 = coerced9;
                                if (data !== undefined) {
                                  data["http2"] = coerced9;
                                }
                              }
                            }
                            var valid0 = _errs23 === errors;
                          } else {
                            var valid0 = true;
                          }
                          if (valid0) {
                            if (data.https !== undefined) {
                              let data9 = data.https;
                              const _errs25 = errors;
                              const _errs26 = errors;
                              let valid2 = true;
                              const _errs27 = errors;
                              const _errs28 = errors;
                              const _errs29 = errors;
                              const _errs30 = errors;
                              let valid4 = false;
                              let passing1 = null;
                              const _errs31 = errors;
                              if (typeof data9 !== "boolean") {
                                let coerced10 = undefined;
                                if (!(coerced10 !== undefined)) {
                                  if (data9 === "false" || data9 === 0 || data9 === null) {
                                    coerced10 = false;
                                  } else if (data9 === "true" || data9 === 1) {
                                    coerced10 = true;
                                  } else {
                                    const err4 = {};
                                    if (vErrors === null) {
                                      vErrors = [err4];
                                    } else {
                                      vErrors.push(err4);
                                    }
                                    errors++;
                                  }
                                }
                                if (coerced10 !== undefined) {
                                  data9 = coerced10;
                                  if (data !== undefined) {
                                    data["https"] = coerced10;
                                  }
                                }
                              }
                              var _valid2 = _errs31 === errors;
                              if (_valid2) {
                                valid4 = true;
                                passing1 = 0;
                              }
                              const _errs33 = errors;
                              if (data9 !== null) {
                                let coerced11 = undefined;
                                if (!(coerced11 !== undefined)) {
                                  if (data9 === "" || data9 === 0 || data9 === false) {
                                    coerced11 = null;
                                  } else {
                                    const err5 = {};
                                    if (vErrors === null) {
                                      vErrors = [err5];
                                    } else {
                                      vErrors.push(err5);
                                    }
                                    errors++;
                                  }
                                }
                                if (coerced11 !== undefined) {
                                  data9 = coerced11;
                                  if (data !== undefined) {
                                    data["https"] = coerced11;
                                  }
                                }
                              }
                              var _valid2 = _errs33 === errors;
                              if (_valid2 && valid4) {
                                valid4 = false;
                                passing1 = [passing1, 1];
                              } else {
                                if (_valid2) {
                                  valid4 = true;
                                  passing1 = 1;
                                }
                                const _errs35 = errors;
                                if (errors === _errs35) {
                                  if (data9 && typeof data9 == "object" && !Array.isArray(data9)) {
                                    let missing0;
                                    if (data9.allowHTTP1 === undefined && (missing0 = "allowHTTP1")) {
                                      const err6 = {};
                                      if (vErrors === null) {
                                        vErrors = [err6];
                                      } else {
                                        vErrors.push(err6);
                                      }
                                      errors++;
                                    } else {
                                      const _errs37 = errors;
                                      for (const key1 in data9) {
                                        if (!(key1 === "allowHTTP1")) {
                                          delete data9[key1];
                                        }
                                      }
                                      if (_errs37 === errors) {
                                        if (data9.allowHTTP1 !== undefined) {
                                          let data10 = data9.allowHTTP1;
                                          if (typeof data10 !== "boolean") {
                                            let coerced12 = undefined;
                                            if (!(coerced12 !== undefined)) {
                                              if (data10 === "false" || data10 === 0 || data10 === null) {
                                                coerced12 = false;
                                              } else if (data10 === "true" || data10 === 1) {
                                                coerced12 = true;
                                              } else {
                                                const err7 = {};
                                                if (vErrors === null) {
                                                  vErrors = [err7];
                                                } else {
                                                  vErrors.push(err7);
                                                }
                                                errors++;
                                              }
                                            }
                                            if (coerced12 !== undefined) {
                                              data10 = coerced12;
                                              if (data9 !== undefined) {
                                                data9["allowHTTP1"] = coerced12;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  } else {
                                    const err8 = {};
                                    if (vErrors === null) {
                                      vErrors = [err8];
                                    } else {
                                      vErrors.push(err8);
                                    }
                                    errors++;
                                  }
                                }
                                var _valid2 = _errs35 === errors;
                                if (_valid2 && valid4) {
                                  valid4 = false;
                                  passing1 = [passing1, 2];
                                } else {
                                  if (_valid2) {
                                    valid4 = true;
                                    passing1 = 2;
                                  }
                                }
                              }
                              if (!valid4) {
                                const err9 = {};
                                if (vErrors === null) {
                                  vErrors = [err9];
                                } else {
                                  vErrors.push(err9);
                                }
                                errors++;
                              } else {
                                errors = _errs30;
                                if (vErrors !== null) {
                                  if (_errs30) {
                                    vErrors.length = _errs30;
                                  } else {
                                    vErrors = null;
                                  }
                                }
                              }
                              var valid3 = _errs29 === errors;
                              if (valid3) {
                                const err10 = {};
                                if (vErrors === null) {
                                  vErrors = [err10];
                                } else {
                                  vErrors.push(err10);
                                }
                                errors++;
                              } else {
                                errors = _errs28;
                                if (vErrors !== null) {
                                  if (_errs28) {
                                    vErrors.length = _errs28;
                                  } else {
                                    vErrors = null;
                                  }
                                }
                              }
                              var _valid1 = _errs27 === errors;
                              errors = _errs26;
                              if (vErrors !== null) {
                                if (_errs26) {
                                  vErrors.length = _errs26;
                                } else {
                                  vErrors = null;
                                }
                              }
                              if (_valid1) {
                                const _errs40 = errors;
                                data["https"] = true;
                                var _valid1 = _errs40 === errors;
                                valid2 = _valid1;
                              }
                              if (!valid2) {
                                const err11 = { instancePath: instancePath + "/https", schemaPath: "#/properties/https/if", keyword: "if", params: { failingKeyword: "then" }, message: 'must match "then" schema' };
                                if (vErrors === null) {
                                  vErrors = [err11];
                                } else {
                                  vErrors.push(err11);
                                }
                                errors++;
                                validate10.errors = vErrors;
                                return false;
                              }
                              var valid0 = _errs25 === errors;
                            } else {
                              var valid0 = true;
                            }
                            if (valid0) {
                              let data11 = data.ignoreTrailingSlash;
                              const _errs41 = errors;
                              if (typeof data11 !== "boolean") {
                                let coerced13 = undefined;
                                if (!(coerced13 !== undefined)) {
                                  if (data11 === "false" || data11 === 0 || data11 === null) {
                                    coerced13 = false;
                                  } else if (data11 === "true" || data11 === 1) {
                                    coerced13 = true;
                                  } else {
                                    validate10.errors = [{ instancePath: instancePath + "/ignoreTrailingSlash", schemaPath: "#/properties/ignoreTrailingSlash/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                    return false;
                                  }
                                }
                                if (coerced13 !== undefined) {
                                  data11 = coerced13;
                                  if (data !== undefined) {
                                    data["ignoreTrailingSlash"] = coerced13;
                                  }
                                }
                              }
                              var valid0 = _errs41 === errors;
                              if (valid0) {
                                let data12 = data.ignoreDuplicateSlashes;
                                const _errs43 = errors;
                                if (typeof data12 !== "boolean") {
                                  let coerced14 = undefined;
                                  if (!(coerced14 !== undefined)) {
                                    if (data12 === "false" || data12 === 0 || data12 === null) {
                                      coerced14 = false;
                                    } else if (data12 === "true" || data12 === 1) {
                                      coerced14 = true;
                                    } else {
                                      validate10.errors = [{ instancePath: instancePath + "/ignoreDuplicateSlashes", schemaPath: "#/properties/ignoreDuplicateSlashes/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                      return false;
                                    }
                                  }
                                  if (coerced14 !== undefined) {
                                    data12 = coerced14;
                                    if (data !== undefined) {
                                      data["ignoreDuplicateSlashes"] = coerced14;
                                    }
                                  }
                                }
                                var valid0 = _errs43 === errors;
                                if (valid0) {
                                  let data13 = data.disableRequestLogging;
                                  const _errs45 = errors;
                                  if (typeof data13 !== "boolean") {
                                    let coerced15 = undefined;
                                    if (!(coerced15 !== undefined)) {
                                      if (data13 === "false" || data13 === 0 || data13 === null) {
                                        coerced15 = false;
                                      } else if (data13 === "true" || data13 === 1) {
                                        coerced15 = true;
                                      } else {
                                        validate10.errors = [{ instancePath: instancePath + "/disableRequestLogging", schemaPath: "#/properties/disableRequestLogging/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                        return false;
                                      }
                                    }
                                    if (coerced15 !== undefined) {
                                      data13 = coerced15;
                                      if (data !== undefined) {
                                        data["disableRequestLogging"] = coerced15;
                                      }
                                    }
                                  }
                                  var valid0 = _errs45 === errors;
                                  if (valid0) {
                                    let data14 = data.maxParamLength;
                                    const _errs47 = errors;
                                    if (!(typeof data14 == "number" && (!(data14 % 1) && !isNaN(data14)) && isFinite(data14))) {
                                      let dataType16 = typeof data14;
                                      let coerced16 = undefined;
                                      if (!(coerced16 !== undefined)) {
                                        if (dataType16 === "boolean" || data14 === null || dataType16 === "string" && data14 && data14 == +data14 && !(data14 % 1)) {
                                          coerced16 = +data14;
                                        } else {
                                          validate10.errors = [{ instancePath: instancePath + "/maxParamLength", schemaPath: "#/properties/maxParamLength/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                                          return false;
                                        }
                                      }
                                      if (coerced16 !== undefined) {
                                        data14 = coerced16;
                                        if (data !== undefined) {
                                          data["maxParamLength"] = coerced16;
                                        }
                                      }
                                    }
                                    var valid0 = _errs47 === errors;
                                    if (valid0) {
                                      let data15 = data.onProtoPoisoning;
                                      const _errs49 = errors;
                                      if (typeof data15 !== "string") {
                                        let dataType17 = typeof data15;
                                        let coerced17 = undefined;
                                        if (!(coerced17 !== undefined)) {
                                          if (dataType17 == "number" || dataType17 == "boolean") {
                                            coerced17 = "" + data15;
                                          } else if (data15 === null) {
                                            coerced17 = "";
                                          } else {
                                            validate10.errors = [{ instancePath: instancePath + "/onProtoPoisoning", schemaPath: "#/properties/onProtoPoisoning/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                          }
                                        }
                                        if (coerced17 !== undefined) {
                                          data15 = coerced17;
                                          if (data !== undefined) {
                                            data["onProtoPoisoning"] = coerced17;
                                          }
                                        }
                                      }
                                      var valid0 = _errs49 === errors;
                                      if (valid0) {
                                        let data16 = data.onConstructorPoisoning;
                                        const _errs51 = errors;
                                        if (typeof data16 !== "string") {
                                          let dataType18 = typeof data16;
                                          let coerced18 = undefined;
                                          if (!(coerced18 !== undefined)) {
                                            if (dataType18 == "number" || dataType18 == "boolean") {
                                              coerced18 = "" + data16;
                                            } else if (data16 === null) {
                                              coerced18 = "";
                                            } else {
                                              validate10.errors = [{ instancePath: instancePath + "/onConstructorPoisoning", schemaPath: "#/properties/onConstructorPoisoning/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                              return false;
                                            }
                                          }
                                          if (coerced18 !== undefined) {
                                            data16 = coerced18;
                                            if (data !== undefined) {
                                              data["onConstructorPoisoning"] = coerced18;
                                            }
                                          }
                                        }
                                        var valid0 = _errs51 === errors;
                                        if (valid0) {
                                          let data17 = data.pluginTimeout;
                                          const _errs53 = errors;
                                          if (!(typeof data17 == "number" && (!(data17 % 1) && !isNaN(data17)) && isFinite(data17))) {
                                            let dataType19 = typeof data17;
                                            let coerced19 = undefined;
                                            if (!(coerced19 !== undefined)) {
                                              if (dataType19 === "boolean" || data17 === null || dataType19 === "string" && data17 && data17 == +data17 && !(data17 % 1)) {
                                                coerced19 = +data17;
                                              } else {
                                                validate10.errors = [{ instancePath: instancePath + "/pluginTimeout", schemaPath: "#/properties/pluginTimeout/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                                                return false;
                                              }
                                            }
                                            if (coerced19 !== undefined) {
                                              data17 = coerced19;
                                              if (data !== undefined) {
                                                data["pluginTimeout"] = coerced19;
                                              }
                                            }
                                          }
                                          var valid0 = _errs53 === errors;
                                          if (valid0) {
                                            let data18 = data.requestIdHeader;
                                            const _errs55 = errors;
                                            const _errs56 = errors;
                                            let valid6 = false;
                                            const _errs57 = errors;
                                            if (typeof data18 !== "boolean") {
                                              let coerced20 = undefined;
                                              if (!(coerced20 !== undefined)) {
                                                if (data18 === "false" || data18 === 0 || data18 === null) {
                                                  coerced20 = false;
                                                } else if (data18 === "true" || data18 === 1) {
                                                  coerced20 = true;
                                                } else {
                                                  const err12 = { instancePath: instancePath + "/requestIdHeader", schemaPath: "#/properties/requestIdHeader/anyOf/0/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" };
                                                  if (vErrors === null) {
                                                    vErrors = [err12];
                                                  } else {
                                                    vErrors.push(err12);
                                                  }
                                                  errors++;
                                                }
                                              }
                                              if (coerced20 !== undefined) {
                                                data18 = coerced20;
                                                if (data !== undefined) {
                                                  data["requestIdHeader"] = coerced20;
                                                }
                                              }
                                            }
                                            var _valid3 = _errs57 === errors;
                                            valid6 = valid6 || _valid3;
                                            if (!valid6) {
                                              const _errs59 = errors;
                                              if (typeof data18 !== "string") {
                                                let dataType21 = typeof data18;
                                                let coerced21 = undefined;
                                                if (!(coerced21 !== undefined)) {
                                                  if (dataType21 == "number" || dataType21 == "boolean") {
                                                    coerced21 = "" + data18;
                                                  } else if (data18 === null) {
                                                    coerced21 = "";
                                                  } else {
                                                    const err13 = { instancePath: instancePath + "/requestIdHeader", schemaPath: "#/properties/requestIdHeader/anyOf/1/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                      vErrors = [err13];
                                                    } else {
                                                      vErrors.push(err13);
                                                    }
                                                    errors++;
                                                  }
                                                }
                                                if (coerced21 !== undefined) {
                                                  data18 = coerced21;
                                                  if (data !== undefined) {
                                                    data["requestIdHeader"] = coerced21;
                                                  }
                                                }
                                              }
                                              var _valid3 = _errs59 === errors;
                                              valid6 = valid6 || _valid3;
                                            }
                                            if (!valid6) {
                                              const err14 = { instancePath: instancePath + "/requestIdHeader", schemaPath: "#/properties/requestIdHeader/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                                              if (vErrors === null) {
                                                vErrors = [err14];
                                              } else {
                                                vErrors.push(err14);
                                              }
                                              errors++;
                                              validate10.errors = vErrors;
                                              return false;
                                            } else {
                                              errors = _errs56;
                                              if (vErrors !== null) {
                                                if (_errs56) {
                                                  vErrors.length = _errs56;
                                                } else {
                                                  vErrors = null;
                                                }
                                              }
                                            }
                                            var valid0 = _errs55 === errors;
                                            if (valid0) {
                                              let data19 = data.requestIdLogLabel;
                                              const _errs61 = errors;
                                              if (typeof data19 !== "string") {
                                                let dataType22 = typeof data19;
                                                let coerced22 = undefined;
                                                if (!(coerced22 !== undefined)) {
                                                  if (dataType22 == "number" || dataType22 == "boolean") {
                                                    coerced22 = "" + data19;
                                                  } else if (data19 === null) {
                                                    coerced22 = "";
                                                  } else {
                                                    validate10.errors = [{ instancePath: instancePath + "/requestIdLogLabel", schemaPath: "#/properties/requestIdLogLabel/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                  }
                                                }
                                                if (coerced22 !== undefined) {
                                                  data19 = coerced22;
                                                  if (data !== undefined) {
                                                    data["requestIdLogLabel"] = coerced22;
                                                  }
                                                }
                                              }
                                              var valid0 = _errs61 === errors;
                                              if (valid0) {
                                                let data20 = data.http2SessionTimeout;
                                                const _errs63 = errors;
                                                if (!(typeof data20 == "number" && (!(data20 % 1) && !isNaN(data20)) && isFinite(data20))) {
                                                  let dataType23 = typeof data20;
                                                  let coerced23 = undefined;
                                                  if (!(coerced23 !== undefined)) {
                                                    if (dataType23 === "boolean" || data20 === null || dataType23 === "string" && data20 && data20 == +data20 && !(data20 % 1)) {
                                                      coerced23 = +data20;
                                                    } else {
                                                      validate10.errors = [{ instancePath: instancePath + "/http2SessionTimeout", schemaPath: "#/properties/http2SessionTimeout/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                                                      return false;
                                                    }
                                                  }
                                                  if (coerced23 !== undefined) {
                                                    data20 = coerced23;
                                                    if (data !== undefined) {
                                                      data["http2SessionTimeout"] = coerced23;
                                                    }
                                                  }
                                                }
                                                var valid0 = _errs63 === errors;
                                                if (valid0) {
                                                  let data21 = data.exposeHeadRoutes;
                                                  const _errs65 = errors;
                                                  if (typeof data21 !== "boolean") {
                                                    let coerced24 = undefined;
                                                    if (!(coerced24 !== undefined)) {
                                                      if (data21 === "false" || data21 === 0 || data21 === null) {
                                                        coerced24 = false;
                                                      } else if (data21 === "true" || data21 === 1) {
                                                        coerced24 = true;
                                                      } else {
                                                        validate10.errors = [{ instancePath: instancePath + "/exposeHeadRoutes", schemaPath: "#/properties/exposeHeadRoutes/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                        return false;
                                                      }
                                                    }
                                                    if (coerced24 !== undefined) {
                                                      data21 = coerced24;
                                                      if (data !== undefined) {
                                                        data["exposeHeadRoutes"] = coerced24;
                                                      }
                                                    }
                                                  }
                                                  var valid0 = _errs65 === errors;
                                                  if (valid0) {
                                                    let data22 = data.useSemicolonDelimiter;
                                                    const _errs67 = errors;
                                                    if (typeof data22 !== "boolean") {
                                                      let coerced25 = undefined;
                                                      if (!(coerced25 !== undefined)) {
                                                        if (data22 === "false" || data22 === 0 || data22 === null) {
                                                          coerced25 = false;
                                                        } else if (data22 === "true" || data22 === 1) {
                                                          coerced25 = true;
                                                        } else {
                                                          validate10.errors = [{ instancePath: instancePath + "/useSemicolonDelimiter", schemaPath: "#/properties/useSemicolonDelimiter/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                          return false;
                                                        }
                                                      }
                                                      if (coerced25 !== undefined) {
                                                        data22 = coerced25;
                                                        if (data !== undefined) {
                                                          data["useSemicolonDelimiter"] = coerced25;
                                                        }
                                                      }
                                                    }
                                                    var valid0 = _errs67 === errors;
                                                    if (valid0) {
                                                      if (data.constraints !== undefined) {
                                                        let data23 = data.constraints;
                                                        const _errs69 = errors;
                                                        if (errors === _errs69) {
                                                          if (data23 && typeof data23 == "object" && !Array.isArray(data23)) {
                                                            for (const key2 in data23) {
                                                              let data24 = data23[key2];
                                                              const _errs72 = errors;
                                                              if (errors === _errs72) {
                                                                if (data24 && typeof data24 == "object" && !Array.isArray(data24)) {
                                                                  let missing1;
                                                                  if (data24.name === undefined && (missing1 = "name") || data24.storage === undefined && (missing1 = "storage") || data24.validate === undefined && (missing1 = "validate") || data24.deriveConstraint === undefined && (missing1 = "deriveConstraint")) {
                                                                    validate10.errors = [{ instancePath: instancePath + "/constraints/" + key2.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/constraints/additionalProperties/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                                                    return false;
                                                                  } else {
                                                                    if (data24.name !== undefined) {
                                                                      let data25 = data24.name;
                                                                      if (typeof data25 !== "string") {
                                                                        let dataType26 = typeof data25;
                                                                        let coerced26 = undefined;
                                                                        if (!(coerced26 !== undefined)) {
                                                                          if (dataType26 == "number" || dataType26 == "boolean") {
                                                                            coerced26 = "" + data25;
                                                                          } else if (data25 === null) {
                                                                            coerced26 = "";
                                                                          } else {
                                                                            validate10.errors = [{ instancePath: instancePath + "/constraints/" + key2.replace(/~/g, "~0").replace(/\//g, "~1") + "/name", schemaPath: "#/properties/constraints/additionalProperties/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                            return false;
                                                                          }
                                                                        }
                                                                        if (coerced26 !== undefined) {
                                                                          data25 = coerced26;
                                                                          if (data24 !== undefined) {
                                                                            data24["name"] = coerced26;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                } else {
                                                                  validate10.errors = [{ instancePath: instancePath + "/constraints/" + key2.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/constraints/additionalProperties/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                  return false;
                                                                }
                                                              }
                                                              var valid7 = _errs72 === errors;
                                                              if (!valid7) {
                                                                break;
                                                              }
                                                            }
                                                          } else {
                                                            validate10.errors = [{ instancePath: instancePath + "/constraints", schemaPath: "#/properties/constraints/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                            return false;
                                                          }
                                                        }
                                                        var valid0 = _errs69 === errors;
                                                      } else {
                                                        var valid0 = true;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        validate10.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
      }
    }
    validate10.errors = vErrors;
    return errors === 0;
  }
  module.exports.defaultInitOptions = { connectionTimeout: 0, keepAliveTimeout: 72000, maxRequestsPerSocket: 0, requestTimeout: 0, bodyLimit: 1048576, caseSensitive: true, allowUnsafeRegex: false, disableRequestLogging: false, ignoreTrailingSlash: false, ignoreDuplicateSlashes: false, maxParamLength: 100, onProtoPoisoning: "error", onConstructorPoisoning: "error", pluginTimeout: 1e4, requestIdHeader: false, requestIdLogLabel: "reqId", http2SessionTimeout: 72000, exposeHeadRoutes: true, useSemicolonDelimiter: false };
});

// node_modules/fastify/lib/initialConfigValidation.js
var require_initialConfigValidation = __commonJS((exports, module) => {
  var validate = require_configValidator();
  var deepClone = require_rfdc()({ circles: true, proto: false });
  var { FST_ERR_INIT_OPTS_INVALID } = require_errors4();
  function validateInitialConfig(options) {
    const opts = deepClone(options);
    if (!validate(opts)) {
      const error = new FST_ERR_INIT_OPTS_INVALID(JSON.stringify(validate.errors.map((e) => e.message)));
      error.errors = validate.errors;
      throw error;
    }
    return deepFreezeObject(opts);
  }
  function deepFreezeObject(object) {
    const properties = Object.getOwnPropertyNames(object);
    for (const name of properties) {
      const value = object[name];
      if (ArrayBuffer.isView(value) && !(value instanceof DataView)) {
        continue;
      }
      object[name] = value && typeof value === "object" ? deepFreezeObject(value) : value;
    }
    return Object.freeze(object);
  }
  module.exports = validateInitialConfig;
  module.exports.defaultInitOptions = validate.defaultInitOptions;
  module.exports.utils = { deepFreezeObject };
});

// node_modules/fastify/lib/pluginOverride.js
var require_pluginOverride = __commonJS((exports, module) => {
  var {
    kAvvioBoot,
    kChildren,
    kRoutePrefix,
    kLogLevel,
    kLogSerializers,
    kHooks,
    kSchemaController,
    kContentTypeParser,
    kReply,
    kRequest,
    kFourOhFour,
    kPluginNameChain
  } = require_symbols3();
  var Reply = require_reply();
  var Request = require_request();
  var SchemaController = require_schema_controller();
  var ContentTypeParser = require_contentTypeParser();
  var { buildHooks } = require_hooks();
  var pluginUtils = require_pluginUtils();
  module.exports = function override(old, fn, opts) {
    const shouldSkipOverride = pluginUtils.registerPlugin.call(old, fn);
    const fnName = pluginUtils.getPluginName(fn) || pluginUtils.getFuncPreview(fn);
    if (shouldSkipOverride) {
      old[kPluginNameChain].push(fnName);
      return old;
    }
    const instance = Object.create(old);
    old[kChildren].push(instance);
    instance.ready = old[kAvvioBoot].bind(instance);
    instance[kChildren] = [];
    instance[kReply] = Reply.buildReply(instance[kReply]);
    instance[kRequest] = Request.buildRequest(instance[kRequest]);
    instance[kContentTypeParser] = ContentTypeParser.helpers.buildContentTypeParser(instance[kContentTypeParser]);
    instance[kHooks] = buildHooks(instance[kHooks]);
    instance[kRoutePrefix] = buildRoutePrefix(instance[kRoutePrefix], opts.prefix);
    instance[kLogLevel] = opts.logLevel || instance[kLogLevel];
    instance[kSchemaController] = SchemaController.buildSchemaController(old[kSchemaController]);
    instance.getSchema = instance[kSchemaController].getSchema.bind(instance[kSchemaController]);
    instance.getSchemas = instance[kSchemaController].getSchemas.bind(instance[kSchemaController]);
    instance[pluginUtils.kRegisteredPlugins] = Object.create(instance[pluginUtils.kRegisteredPlugins]);
    instance[kPluginNameChain] = [fnName];
    if (instance[kLogSerializers] || opts.logSerializers) {
      instance[kLogSerializers] = Object.assign(Object.create(instance[kLogSerializers]), opts.logSerializers);
    }
    if (opts.prefix) {
      instance[kFourOhFour].arrange404(instance);
    }
    for (const hook of instance[kHooks].onRegister)
      hook.call(old, instance, opts);
    return instance;
  };
  function buildRoutePrefix(instancePrefix, pluginPrefix) {
    if (!pluginPrefix) {
      return instancePrefix;
    }
    if (instancePrefix.endsWith("/") && pluginPrefix[0] === "/") {
      pluginPrefix = pluginPrefix.slice(1);
    } else if (pluginPrefix[0] !== "/") {
      pluginPrefix = "/" + pluginPrefix;
    }
    return instancePrefix + pluginPrefix;
  }
});

// node_modules/fastify/lib/noop-set.js
var require_noop_set = __commonJS((exports, module) => {
  module.exports = function noopSet() {
    return {
      [Symbol.iterator]: function* () {
      },
      add() {
      },
      delete() {
      },
      has() {
        return true;
      }
    };
  };
});

// node_modules/cookie/dist/index.js
var require_dist6 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.parse = parse;
  exports.serialize = serialize;
  var cookieNameRegExp = /^[\u0021-\u003A\u003C\u003E-\u007E]+$/;
  var cookieValueRegExp = /^[\u0021-\u003A\u003C-\u007E]*$/;
  var domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;
  var pathValueRegExp = /^[\u0020-\u003A\u003D-\u007E]*$/;
  var __toString = Object.prototype.toString;
  var NullObject = /* @__PURE__ */ (() => {
    const C = function() {
    };
    C.prototype = Object.create(null);
    return C;
  })();
  function parse(str, options) {
    const obj = new NullObject;
    const len = str.length;
    if (len < 2)
      return obj;
    const dec = options?.decode || decode;
    let index = 0;
    do {
      const eqIdx = str.indexOf("=", index);
      if (eqIdx === -1)
        break;
      const colonIdx = str.indexOf(";", index);
      const endIdx = colonIdx === -1 ? len : colonIdx;
      if (eqIdx > endIdx) {
        index = str.lastIndexOf(";", eqIdx - 1) + 1;
        continue;
      }
      const keyStartIdx = startIndex(str, index, eqIdx);
      const keyEndIdx = endIndex(str, eqIdx, keyStartIdx);
      const key = str.slice(keyStartIdx, keyEndIdx);
      if (obj[key] === undefined) {
        let valStartIdx = startIndex(str, eqIdx + 1, endIdx);
        let valEndIdx = endIndex(str, endIdx, valStartIdx);
        const value = dec(str.slice(valStartIdx, valEndIdx));
        obj[key] = value;
      }
      index = endIdx + 1;
    } while (index < len);
    return obj;
  }
  function startIndex(str, index, max) {
    do {
      const code = str.charCodeAt(index);
      if (code !== 32 && code !== 9)
        return index;
    } while (++index < max);
    return max;
  }
  function endIndex(str, index, min) {
    while (index > min) {
      const code = str.charCodeAt(--index);
      if (code !== 32 && code !== 9)
        return index + 1;
    }
    return min;
  }
  function serialize(name, val, options) {
    const enc = options?.encode || encodeURIComponent;
    if (!cookieNameRegExp.test(name)) {
      throw new TypeError(`argument name is invalid: ${name}`);
    }
    const value = enc(val);
    if (!cookieValueRegExp.test(value)) {
      throw new TypeError(`argument val is invalid: ${val}`);
    }
    let str = name + "=" + value;
    if (!options)
      return str;
    if (options.maxAge !== undefined) {
      if (!Number.isInteger(options.maxAge)) {
        throw new TypeError(`option maxAge is invalid: ${options.maxAge}`);
      }
      str += "; Max-Age=" + options.maxAge;
    }
    if (options.domain) {
      if (!domainValueRegExp.test(options.domain)) {
        throw new TypeError(`option domain is invalid: ${options.domain}`);
      }
      str += "; Domain=" + options.domain;
    }
    if (options.path) {
      if (!pathValueRegExp.test(options.path)) {
        throw new TypeError(`option path is invalid: ${options.path}`);
      }
      str += "; Path=" + options.path;
    }
    if (options.expires) {
      if (!isDate(options.expires) || !Number.isFinite(options.expires.valueOf())) {
        throw new TypeError(`option expires is invalid: ${options.expires}`);
      }
      str += "; Expires=" + options.expires.toUTCString();
    }
    if (options.httpOnly) {
      str += "; HttpOnly";
    }
    if (options.secure) {
      str += "; Secure";
    }
    if (options.partitioned) {
      str += "; Partitioned";
    }
    if (options.priority) {
      const priority = typeof options.priority === "string" ? options.priority.toLowerCase() : undefined;
      switch (priority) {
        case "low":
          str += "; Priority=Low";
          break;
        case "medium":
          str += "; Priority=Medium";
          break;
        case "high":
          str += "; Priority=High";
          break;
        default:
          throw new TypeError(`option priority is invalid: ${options.priority}`);
      }
    }
    if (options.sameSite) {
      const sameSite = typeof options.sameSite === "string" ? options.sameSite.toLowerCase() : options.sameSite;
      switch (sameSite) {
        case true:
        case "strict":
          str += "; SameSite=Strict";
          break;
        case "lax":
          str += "; SameSite=Lax";
          break;
        case "none":
          str += "; SameSite=None";
          break;
        default:
          throw new TypeError(`option sameSite is invalid: ${options.sameSite}`);
      }
    }
    return str;
  }
  function decode(str) {
    if (str.indexOf("%") === -1)
      return str;
    try {
      return decodeURIComponent(str);
    } catch (e) {
      return str;
    }
  }
  function isDate(val) {
    return __toString.call(val) === "[object Date]";
  }
});

// node_modules/light-my-request/lib/parse-url.js
var require_parse_url = __commonJS((exports, module) => {
  var { URL: URL2 } = __require("node:url");
  var BASE_URL = "http://localhost";
  module.exports = function parseURL(url, query) {
    if ((typeof url === "string" || Object.prototype.toString.call(url) === "[object String]") && url.startsWith("//")) {
      url = BASE_URL + url;
    }
    const result = typeof url === "object" ? Object.assign(new URL2(BASE_URL), url) : new URL2(url, BASE_URL);
    if (typeof query === "string") {
      query = new URLSearchParams(query);
      for (const key of query.keys()) {
        result.searchParams.delete(key);
        for (const value of query.getAll(key)) {
          result.searchParams.append(key, value);
        }
      }
    } else {
      const merged = Object.assign({}, url.query, query);
      for (const key in merged) {
        const value = merged[key];
        if (Array.isArray(value)) {
          result.searchParams.delete(key);
          for (const param of value) {
            result.searchParams.append(key, param);
          }
        } else {
          result.searchParams.set(key, value);
        }
      }
    }
    return result;
  };
});

// node_modules/light-my-request/lib/form-data.js
var require_form_data = __commonJS((exports, module) => {
  var { randomUUID } = __require("node:crypto");
  var { Readable } = __require("node:stream");
  var textEncoder;
  function isFormDataLike(payload) {
    return payload && typeof payload === "object" && typeof payload.append === "function" && typeof payload.delete === "function" && typeof payload.get === "function" && typeof payload.getAll === "function" && typeof payload.has === "function" && typeof payload.set === "function" && payload[Symbol.toStringTag] === "FormData";
  }
  function formDataToStream(formdata) {
    textEncoder = textEncoder ?? new TextEncoder;
    const boundary = `----formdata-${randomUUID()}`;
    const prefix = `--${boundary}\r
Content-Disposition: form-data`;
    /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
    const escape2 = (str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
    const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, `\r
`);
    const linebreak = new Uint8Array([13, 10]);
    async function* asyncIterator() {
      for (const [name, value] of formdata) {
        if (typeof value === "string") {
          yield textEncoder.encode(`${prefix}; name="${escape2(normalizeLinefeeds(name))}"\r
\r
`);
          yield textEncoder.encode(`${normalizeLinefeeds(value)}\r
`);
        } else {
          let header = `${prefix}; name="${escape2(normalizeLinefeeds(name))}"`;
          value.name && (header += `; filename="${escape2(value.name)}"`);
          header += `\r
Content-Type: ${value.type || "application/octet-stream"}\r
\r
`;
          yield textEncoder.encode(header);
          if (value.stream) {
            yield* value.stream();
          } else {
            yield value;
          }
          yield linebreak;
        }
      }
      yield textEncoder.encode(`--${boundary}--`);
    }
    const stream = Readable.from(asyncIterator());
    return {
      stream,
      contentType: `multipart/form-data; boundary=${boundary}`
    };
  }
  exports.isFormDataLike = isFormDataLike;
  exports.formDataToStream = formDataToStream;
});

// node_modules/light-my-request/lib/request.js
var require_request2 = __commonJS((exports, module) => {
  var { Readable, addAbortSignal } = __require("node:stream");
  var util = __require("node:util");
  var cookie = require_dist6();
  var assert = __require("node:assert");
  var { createDeprecation } = require_process_warning();
  var parseURL = require_parse_url();
  var { isFormDataLike, formDataToStream } = require_form_data();
  var { EventEmitter } = __require("node:events");
  var FST_LIGHTMYREQUEST_DEP01 = createDeprecation({
    name: "FastifyDeprecationLightMyRequest",
    code: "FST_LIGHTMYREQUEST_DEP01",
    message: 'You are accessing "request.connection", use "request.socket" instead.'
  });
  function hostHeaderFromURL(parsedURL) {
    return parsedURL.port ? parsedURL.host : parsedURL.hostname + (parsedURL.protocol === "https:" ? ":443" : ":80");
  }

  class MockSocket extends EventEmitter {
    constructor(remoteAddress) {
      super();
      this.remoteAddress = remoteAddress;
    }
  }
  function CustomRequest(options) {
    return new _CustomLMRRequest(this);
    function _CustomLMRRequest(obj) {
      Request.call(obj, {
        ...options,
        Request: undefined
      });
      Object.assign(this, obj);
      for (const fn of Object.keys(Request.prototype)) {
        this.constructor.prototype[fn] = Request.prototype[fn];
      }
      util.inherits(this.constructor, options.Request);
      return this;
    }
  }
  function Request(options) {
    Readable.call(this, {
      autoDestroy: false
    });
    const parsedURL = parseURL(options.url || options.path, options.query);
    this.url = parsedURL.pathname + parsedURL.search;
    this.aborted = false;
    this.httpVersionMajor = 1;
    this.httpVersionMinor = 1;
    this.httpVersion = "1.1";
    this.method = options.method ? options.method.toUpperCase() : "GET";
    this.headers = {};
    this.rawHeaders = [];
    const headers = options.headers || {};
    for (const field in headers) {
      const fieldLowerCase = field.toLowerCase();
      if ((fieldLowerCase === "user-agent" || fieldLowerCase === "content-type") && headers[field] === undefined) {
        this.headers[fieldLowerCase] = undefined;
        continue;
      }
      const value = headers[field];
      assert(value !== undefined, 'invalid value "undefined" for header ' + field);
      this.headers[fieldLowerCase] = "" + value;
    }
    if ("user-agent" in this.headers === false) {
      this.headers["user-agent"] = "lightMyRequest";
    }
    this.headers.host = this.headers.host || options.authority || hostHeaderFromURL(parsedURL);
    if (options.cookies) {
      const { cookies } = options;
      const cookieValues = Object.keys(cookies).map((key) => cookie.serialize(key, cookies[key]));
      if (this.headers.cookie) {
        cookieValues.unshift(this.headers.cookie);
      }
      this.headers.cookie = cookieValues.join("; ");
    }
    this.socket = new MockSocket(options.remoteAddress || "127.0.0.1");
    Object.defineProperty(this, "connection", {
      get() {
        FST_LIGHTMYREQUEST_DEP01();
        return this.socket;
      },
      configurable: true
    });
    let payload = options.payload || options.body || null;
    let payloadResume = payload && typeof payload.resume === "function";
    if (isFormDataLike(payload)) {
      const stream = formDataToStream(payload);
      payload = stream.stream;
      payloadResume = true;
      this.headers["content-type"] = stream.contentType;
      this.headers["transfer-encoding"] = "chunked";
    }
    if (payload && typeof payload !== "string" && !payloadResume && !Buffer.isBuffer(payload)) {
      payload = JSON.stringify(payload);
      if ("content-type" in this.headers === false) {
        this.headers["content-type"] = "application/json";
      }
    }
    if (payload && !payloadResume && !Object.hasOwn(this.headers, "content-length")) {
      this.headers["content-length"] = (Buffer.isBuffer(payload) ? payload.length : Buffer.byteLength(payload)).toString();
    }
    for (const header of Object.keys(this.headers)) {
      this.rawHeaders.push(header, this.headers[header]);
    }
    this._lightMyRequest = {
      payload,
      isDone: false,
      simulate: options.simulate || {},
      payloadAsStream: options.payloadAsStream,
      signal: options.signal
    };
    const signal = options.signal;
    if (signal) {
      addAbortSignal(signal, this);
    }
    {
      const payload2 = this._lightMyRequest.payload;
      if (payload2?._readableState) {
        this._read = readStream;
        payload2.on("error", (err) => {
          this.destroy(err);
        });
        payload2.on("end", () => {
          this.push(null);
        });
      } else {
        this._read = readEverythingElse;
      }
    }
    return this;
  }
  function readStream() {
    const payload = this._lightMyRequest.payload;
    let more = true;
    let pushed = false;
    let chunk;
    while (more && (chunk = payload.read())) {
      pushed = true;
      more = this.push(chunk);
    }
    if (more && !pushed) {
      this._lightMyRequest.payload.once("readable", this._read.bind(this));
    }
  }
  function readEverythingElse() {
    setImmediate(() => {
      if (this._lightMyRequest.isDone) {
        if (this._lightMyRequest.simulate.end !== false) {
          this.push(null);
        }
        return;
      }
      this._lightMyRequest.isDone = true;
      if (this._lightMyRequest.payload) {
        if (this._lightMyRequest.simulate.split) {
          this.push(this._lightMyRequest.payload.slice(0, 1));
          this.push(this._lightMyRequest.payload.slice(1));
        } else {
          this.push(this._lightMyRequest.payload);
        }
      }
      if (this._lightMyRequest.simulate.error) {
        this.emit("error", new Error("Simulated"));
      }
      if (this._lightMyRequest.simulate.close) {
        this.emit("close");
      }
      if (this._lightMyRequest.simulate.end !== false) {
        this.push(null);
      }
    });
  }
  util.inherits(Request, Readable);
  util.inherits(CustomRequest, Request);
  Request.prototype.destroy = function(error) {
    if (this.destroyed || this._lightMyRequest.isDone)
      return;
    this.destroyed = true;
    if (error) {
      this._error = true;
      process.nextTick(() => this.emit("error", error));
    }
    process.nextTick(() => this.emit("close"));
  };
  module.exports = Request;
  module.exports.Request = Request;
  module.exports.CustomRequest = CustomRequest;
});

// node_modules/set-cookie-parser/lib/set-cookie.js
var require_set_cookie = __commonJS((exports, module) => {
  var defaultParseOptions = {
    decodeValues: true,
    map: false,
    silent: false
  };
  function isNonEmptyString(str) {
    return typeof str === "string" && !!str.trim();
  }
  function parseString(setCookieValue, options) {
    var parts = setCookieValue.split(";").filter(isNonEmptyString);
    var nameValuePairStr = parts.shift();
    var parsed = parseNameValuePair(nameValuePairStr);
    var name = parsed.name;
    var value = parsed.value;
    options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
    try {
      value = options.decodeValues ? decodeURIComponent(value) : value;
    } catch (e) {
      console.error("set-cookie-parser encountered an error while decoding a cookie with value '" + value + "'. Set options.decodeValues to false to disable this feature.", e);
    }
    var cookie = {
      name,
      value
    };
    parts.forEach(function(part) {
      var sides = part.split("=");
      var key = sides.shift().trimLeft().toLowerCase();
      var value2 = sides.join("=");
      if (key === "expires") {
        cookie.expires = new Date(value2);
      } else if (key === "max-age") {
        cookie.maxAge = parseInt(value2, 10);
      } else if (key === "secure") {
        cookie.secure = true;
      } else if (key === "httponly") {
        cookie.httpOnly = true;
      } else if (key === "samesite") {
        cookie.sameSite = value2;
      } else if (key === "partitioned") {
        cookie.partitioned = true;
      } else {
        cookie[key] = value2;
      }
    });
    return cookie;
  }
  function parseNameValuePair(nameValuePairStr) {
    var name = "";
    var value = "";
    var nameValueArr = nameValuePairStr.split("=");
    if (nameValueArr.length > 1) {
      name = nameValueArr.shift();
      value = nameValueArr.join("=");
    } else {
      value = nameValuePairStr;
    }
    return { name, value };
  }
  function parse(input, options) {
    options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
    if (!input) {
      if (!options.map) {
        return [];
      } else {
        return {};
      }
    }
    if (input.headers) {
      if (typeof input.headers.getSetCookie === "function") {
        input = input.headers.getSetCookie();
      } else if (input.headers["set-cookie"]) {
        input = input.headers["set-cookie"];
      } else {
        var sch = input.headers[Object.keys(input.headers).find(function(key) {
          return key.toLowerCase() === "set-cookie";
        })];
        if (!sch && input.headers.cookie && !options.silent) {
          console.warn("Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.");
        }
        input = sch;
      }
    }
    if (!Array.isArray(input)) {
      input = [input];
    }
    if (!options.map) {
      return input.filter(isNonEmptyString).map(function(str) {
        return parseString(str, options);
      });
    } else {
      var cookies = {};
      return input.filter(isNonEmptyString).reduce(function(cookies2, str) {
        var cookie = parseString(str, options);
        cookies2[cookie.name] = cookie;
        return cookies2;
      }, cookies);
    }
  }
  function splitCookiesString(cookiesString) {
    if (Array.isArray(cookiesString)) {
      return cookiesString;
    }
    if (typeof cookiesString !== "string") {
      return [];
    }
    var cookiesStrings = [];
    var pos = 0;
    var start;
    var ch;
    var lastComma;
    var nextStart;
    var cookiesSeparatorFound;
    function skipWhitespace() {
      while (pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos))) {
        pos += 1;
      }
      return pos < cookiesString.length;
    }
    function notSpecialChar() {
      ch = cookiesString.charAt(pos);
      return ch !== "=" && ch !== ";" && ch !== ",";
    }
    while (pos < cookiesString.length) {
      start = pos;
      cookiesSeparatorFound = false;
      while (skipWhitespace()) {
        ch = cookiesString.charAt(pos);
        if (ch === ",") {
          lastComma = pos;
          pos += 1;
          skipWhitespace();
          nextStart = pos;
          while (pos < cookiesString.length && notSpecialChar()) {
            pos += 1;
          }
          if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {
            cookiesSeparatorFound = true;
            pos = nextStart;
            cookiesStrings.push(cookiesString.substring(start, lastComma));
            start = pos;
          } else {
            pos = lastComma + 1;
          }
        } else {
          pos += 1;
        }
      }
      if (!cookiesSeparatorFound || pos >= cookiesString.length) {
        cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
      }
    }
    return cookiesStrings;
  }
  module.exports = parse;
  module.exports.parse = parse;
  module.exports.parseString = parseString;
  module.exports.splitCookiesString = splitCookiesString;
});

// node_modules/light-my-request/lib/response.js
var require_response = __commonJS((exports, module) => {
  var http = __require("node:http");
  var { Writable, Readable, addAbortSignal } = __require("node:stream");
  var util = __require("node:util");
  var setCookie = require_set_cookie();
  function Response(req, onEnd, reject) {
    http.ServerResponse.call(this, req);
    if (req._lightMyRequest?.payloadAsStream) {
      const read = this.emit.bind(this, "drain");
      this._lightMyRequest = { headers: null, trailers: {}, stream: new Readable({ read }) };
      const signal = req._lightMyRequest.signal;
      if (signal) {
        addAbortSignal(signal, this._lightMyRequest.stream);
      }
    } else {
      this._lightMyRequest = { headers: null, trailers: {}, payloadChunks: [] };
    }
    this.setHeader("foo", "bar");
    this.removeHeader("foo");
    this.assignSocket(getNullSocket());
    this._promiseCallback = typeof reject === "function";
    let called = false;
    const onEndSuccess = (payload) => {
      if (called)
        return;
      called = true;
      if (this._promiseCallback) {
        return process.nextTick(() => onEnd(payload));
      }
      process.nextTick(() => onEnd(null, payload));
    };
    this._lightMyRequest.onEndSuccess = onEndSuccess;
    let finished = false;
    const onEndFailure = (err) => {
      if (called) {
        if (this._lightMyRequest.stream && !finished) {
          if (!err) {
            err = new Error("response destroyed before completion");
            err.code = "LIGHT_ECONNRESET";
          }
          this._lightMyRequest.stream.destroy(err);
          this._lightMyRequest.stream.on("error", () => {
          });
        }
        return;
      }
      called = true;
      if (!err) {
        err = new Error("response destroyed before completion");
        err.code = "LIGHT_ECONNRESET";
      }
      if (this._promiseCallback) {
        return process.nextTick(() => reject(err));
      }
      process.nextTick(() => onEnd(err, null));
    };
    if (this._lightMyRequest.stream) {
      this.once("finish", () => {
        finished = true;
        this._lightMyRequest.stream.push(null);
      });
    } else {
      this.once("finish", () => {
        const res = generatePayload(this);
        res.raw.req = req;
        onEndSuccess(res);
      });
    }
    this.connection.once("error", onEndFailure);
    this.once("error", onEndFailure);
    this.once("close", onEndFailure);
  }
  util.inherits(Response, http.ServerResponse);
  Response.prototype.setTimeout = function(msecs, callback) {
    this.timeoutHandle = setTimeout(() => {
      this.emit("timeout");
    }, msecs);
    this.on("timeout", callback);
    return this;
  };
  Response.prototype.writeHead = function() {
    const result = http.ServerResponse.prototype.writeHead.apply(this, arguments);
    copyHeaders(this);
    if (this._lightMyRequest.stream) {
      this._lightMyRequest.onEndSuccess(generatePayload(this));
    }
    return result;
  };
  Response.prototype.write = function(data, encoding, callback) {
    if (this.timeoutHandle) {
      clearTimeout(this.timeoutHandle);
    }
    http.ServerResponse.prototype.write.call(this, data, encoding, callback);
    if (this._lightMyRequest.stream) {
      return this._lightMyRequest.stream.push(Buffer.from(data, encoding));
    } else {
      this._lightMyRequest.payloadChunks.push(Buffer.from(data, encoding));
      return true;
    }
  };
  Response.prototype.end = function(data, encoding, callback) {
    if (data) {
      this.write(data, encoding);
    }
    http.ServerResponse.prototype.end.call(this, callback);
    this.emit("finish");
    this.destroy();
  };
  Response.prototype.destroy = function(error) {
    if (this.destroyed)
      return;
    this.destroyed = true;
    if (error) {
      process.nextTick(() => this.emit("error", error));
    }
    process.nextTick(() => this.emit("close"));
  };
  Response.prototype.addTrailers = function(trailers) {
    for (const key in trailers) {
      this._lightMyRequest.trailers[key.toLowerCase().trim()] = trailers[key].toString().trim();
    }
  };
  function generatePayload(response) {
    if (response._lightMyRequest.headers === null) {
      copyHeaders(response);
    }
    serializeHeaders(response);
    const res = {
      raw: {
        res: response
      },
      headers: response._lightMyRequest.headers,
      statusCode: response.statusCode,
      statusMessage: response.statusMessage,
      trailers: {},
      get cookies() {
        return setCookie.parse(this);
      }
    };
    res.trailers = response._lightMyRequest.trailers;
    if (response._lightMyRequest.payloadChunks) {
      const rawBuffer = Buffer.concat(response._lightMyRequest.payloadChunks);
      res.rawPayload = rawBuffer;
      res.payload = rawBuffer.toString();
      res.body = res.payload;
      res.json = function parseJsonPayload() {
        return JSON.parse(res.payload);
      };
    } else {
      res.json = function() {
        throw new Error("Response payload is not available with payloadAsStream: true");
      };
    }
    res.stream = function streamPayload() {
      if (response._lightMyRequest.stream) {
        return response._lightMyRequest.stream;
      }
      return Readable.from(response._lightMyRequest.payloadChunks);
    };
    return res;
  }
  function getNullSocket() {
    return new Writable({
      write(_chunk, _encoding, callback) {
        setImmediate(callback);
      }
    });
  }
  function serializeHeaders(response) {
    const headers = response._lightMyRequest.headers;
    for (const headerName of Object.keys(headers)) {
      const headerValue = headers[headerName];
      if (Array.isArray(headerValue)) {
        headers[headerName] = headerValue.map((value) => "" + value);
      } else {
        headers[headerName] = "" + headerValue;
      }
    }
  }
  function copyHeaders(response) {
    response._lightMyRequest.headers = Object.assign({}, response.getHeaders());
    ["Date", "Connection", "Transfer-Encoding"].forEach((name) => {
      const regex = new RegExp("\\r\\n" + name + ": ([^\\r]*)\\r\\n");
      const field = response._header?.match(regex);
      if (field) {
        response._lightMyRequest.headers[name.toLowerCase()] = field[1];
      }
    });
  }
  module.exports = Response;
});

// node_modules/light-my-request/lib/config-validator.js
var require_config_validator = __commonJS((exports, module) => {
  module.exports = validate10;
  module.exports.default = validate10;
  var schema11 = { type: "object", properties: { url: { oneOf: [{ type: "string" }, { type: "object", properties: { protocol: { type: "string" }, hostname: { type: "string" }, pathname: { type: "string" } }, additionalProperties: true, required: ["pathname"] }] }, path: { oneOf: [{ type: "string" }, { type: "object", properties: { protocol: { type: "string" }, hostname: { type: "string" }, pathname: { type: "string" } }, additionalProperties: true, required: ["pathname"] }] }, cookies: { type: "object", additionalProperties: true }, headers: { type: "object", additionalProperties: true }, query: { anyOf: [{ type: "object", additionalProperties: true }, { type: "string" }] }, simulate: { type: "object", properties: { end: { type: "boolean" }, split: { type: "boolean" }, error: { type: "boolean" }, close: { type: "boolean" } } }, authority: { type: "string" }, remoteAddress: { type: "string" }, method: { type: "string", enum: ["ACL", "BIND", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LINK", "LOCK", "M-SEARCH", "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "QUERY", "REBIND", "REPORT", "SEARCH", "SOURCE", "SUBSCRIBE", "TRACE", "UNBIND", "UNLINK", "UNLOCK", "UNSUBSCRIBE", "acl", "bind", "checkout", "connect", "copy", "delete", "get", "head", "link", "lock", "m-search", "merge", "mkactivity", "mkcalendar", "mkcol", "move", "notify", "options", "patch", "post", "propfind", "proppatch", "purge", "put", "query", "rebind", "report", "search", "source", "subscribe", "trace", "unbind", "unlink", "unlock", "unsubscribe"] }, validate: { type: "boolean" } }, additionalProperties: true, oneOf: [{ required: ["url"] }, { required: ["path"] }] };
  function validate10(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {
    let vErrors = null;
    let errors = 0;
    const _errs1 = errors;
    let valid0 = false;
    let passing0 = null;
    const _errs2 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
      let missing0;
      if (data.url === undefined && (missing0 = "url")) {
        const err0 = { instancePath, schemaPath: "#/oneOf/0/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
        if (vErrors === null) {
          vErrors = [err0];
        } else {
          vErrors.push(err0);
        }
        errors++;
      }
    }
    var _valid0 = _errs2 === errors;
    if (_valid0) {
      valid0 = true;
      passing0 = 0;
    }
    const _errs3 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
      let missing1;
      if (data.path === undefined && (missing1 = "path")) {
        const err1 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
        if (vErrors === null) {
          vErrors = [err1];
        } else {
          vErrors.push(err1);
        }
        errors++;
      }
    }
    var _valid0 = _errs3 === errors;
    if (_valid0 && valid0) {
      valid0 = false;
      passing0 = [passing0, 1];
    } else {
      if (_valid0) {
        valid0 = true;
        passing0 = 1;
      }
    }
    if (!valid0) {
      const err2 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
      if (vErrors === null) {
        vErrors = [err2];
      } else {
        vErrors.push(err2);
      }
      errors++;
      validate10.errors = vErrors;
      return false;
    } else {
      errors = _errs1;
      if (vErrors !== null) {
        if (_errs1) {
          vErrors.length = _errs1;
        } else {
          vErrors = null;
        }
      }
    }
    if (errors === 0) {
      if (data && typeof data == "object" && !Array.isArray(data)) {
        if (data.url !== undefined) {
          let data0 = data.url;
          const _errs5 = errors;
          const _errs6 = errors;
          let valid2 = false;
          let passing1 = null;
          const _errs7 = errors;
          if (typeof data0 !== "string") {
            let dataType0 = typeof data0;
            let coerced0 = undefined;
            if (!(coerced0 !== undefined)) {
              if (dataType0 == "number" || dataType0 == "boolean") {
                coerced0 = "" + data0;
              } else if (data0 === null) {
                coerced0 = "";
              } else {
                const err3 = { instancePath: instancePath + "/url", schemaPath: "#/properties/url/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                if (vErrors === null) {
                  vErrors = [err3];
                } else {
                  vErrors.push(err3);
                }
                errors++;
              }
            }
            if (coerced0 !== undefined) {
              data0 = coerced0;
              if (data !== undefined) {
                data["url"] = coerced0;
              }
            }
          }
          var _valid1 = _errs7 === errors;
          if (_valid1) {
            valid2 = true;
            passing1 = 0;
          }
          const _errs9 = errors;
          if (errors === _errs9) {
            if (data0 && typeof data0 == "object" && !Array.isArray(data0)) {
              let missing2;
              if (data0.pathname === undefined && (missing2 = "pathname")) {
                const err4 = { instancePath: instancePath + "/url", schemaPath: "#/properties/url/oneOf/1/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" };
                if (vErrors === null) {
                  vErrors = [err4];
                } else {
                  vErrors.push(err4);
                }
                errors++;
              } else {
                if (data0.protocol !== undefined) {
                  let data1 = data0.protocol;
                  const _errs12 = errors;
                  if (typeof data1 !== "string") {
                    let dataType1 = typeof data1;
                    let coerced1 = undefined;
                    if (!(coerced1 !== undefined)) {
                      if (dataType1 == "number" || dataType1 == "boolean") {
                        coerced1 = "" + data1;
                      } else if (data1 === null) {
                        coerced1 = "";
                      } else {
                        const err5 = { instancePath: instancePath + "/url/protocol", schemaPath: "#/properties/url/oneOf/1/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                          vErrors = [err5];
                        } else {
                          vErrors.push(err5);
                        }
                        errors++;
                      }
                    }
                    if (coerced1 !== undefined) {
                      data1 = coerced1;
                      if (data0 !== undefined) {
                        data0["protocol"] = coerced1;
                      }
                    }
                  }
                  var valid3 = _errs12 === errors;
                } else {
                  var valid3 = true;
                }
                if (valid3) {
                  if (data0.hostname !== undefined) {
                    let data2 = data0.hostname;
                    const _errs14 = errors;
                    if (typeof data2 !== "string") {
                      let dataType2 = typeof data2;
                      let coerced2 = undefined;
                      if (!(coerced2 !== undefined)) {
                        if (dataType2 == "number" || dataType2 == "boolean") {
                          coerced2 = "" + data2;
                        } else if (data2 === null) {
                          coerced2 = "";
                        } else {
                          const err6 = { instancePath: instancePath + "/url/hostname", schemaPath: "#/properties/url/oneOf/1/properties/hostname/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                          if (vErrors === null) {
                            vErrors = [err6];
                          } else {
                            vErrors.push(err6);
                          }
                          errors++;
                        }
                      }
                      if (coerced2 !== undefined) {
                        data2 = coerced2;
                        if (data0 !== undefined) {
                          data0["hostname"] = coerced2;
                        }
                      }
                    }
                    var valid3 = _errs14 === errors;
                  } else {
                    var valid3 = true;
                  }
                  if (valid3) {
                    if (data0.pathname !== undefined) {
                      let data3 = data0.pathname;
                      const _errs16 = errors;
                      if (typeof data3 !== "string") {
                        let dataType3 = typeof data3;
                        let coerced3 = undefined;
                        if (!(coerced3 !== undefined)) {
                          if (dataType3 == "number" || dataType3 == "boolean") {
                            coerced3 = "" + data3;
                          } else if (data3 === null) {
                            coerced3 = "";
                          } else {
                            const err7 = { instancePath: instancePath + "/url/pathname", schemaPath: "#/properties/url/oneOf/1/properties/pathname/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                              vErrors = [err7];
                            } else {
                              vErrors.push(err7);
                            }
                            errors++;
                          }
                        }
                        if (coerced3 !== undefined) {
                          data3 = coerced3;
                          if (data0 !== undefined) {
                            data0["pathname"] = coerced3;
                          }
                        }
                      }
                      var valid3 = _errs16 === errors;
                    } else {
                      var valid3 = true;
                    }
                  }
                }
              }
            } else {
              const err8 = { instancePath: instancePath + "/url", schemaPath: "#/properties/url/oneOf/1/type", keyword: "type", params: { type: "object" }, message: "must be object" };
              if (vErrors === null) {
                vErrors = [err8];
              } else {
                vErrors.push(err8);
              }
              errors++;
            }
          }
          var _valid1 = _errs9 === errors;
          if (_valid1 && valid2) {
            valid2 = false;
            passing1 = [passing1, 1];
          } else {
            if (_valid1) {
              valid2 = true;
              passing1 = 1;
            }
          }
          if (!valid2) {
            const err9 = { instancePath: instancePath + "/url", schemaPath: "#/properties/url/oneOf", keyword: "oneOf", params: { passingSchemas: passing1 }, message: "must match exactly one schema in oneOf" };
            if (vErrors === null) {
              vErrors = [err9];
            } else {
              vErrors.push(err9);
            }
            errors++;
            validate10.errors = vErrors;
            return false;
          } else {
            errors = _errs6;
            if (vErrors !== null) {
              if (_errs6) {
                vErrors.length = _errs6;
              } else {
                vErrors = null;
              }
            }
          }
          var valid1 = _errs5 === errors;
        } else {
          var valid1 = true;
        }
        if (valid1) {
          if (data.path !== undefined) {
            let data4 = data.path;
            const _errs18 = errors;
            const _errs19 = errors;
            let valid4 = false;
            let passing2 = null;
            const _errs20 = errors;
            if (typeof data4 !== "string") {
              let dataType4 = typeof data4;
              let coerced4 = undefined;
              if (!(coerced4 !== undefined)) {
                if (dataType4 == "number" || dataType4 == "boolean") {
                  coerced4 = "" + data4;
                } else if (data4 === null) {
                  coerced4 = "";
                } else {
                  const err10 = { instancePath: instancePath + "/path", schemaPath: "#/properties/path/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                  if (vErrors === null) {
                    vErrors = [err10];
                  } else {
                    vErrors.push(err10);
                  }
                  errors++;
                }
              }
              if (coerced4 !== undefined) {
                data4 = coerced4;
                if (data !== undefined) {
                  data["path"] = coerced4;
                }
              }
            }
            var _valid2 = _errs20 === errors;
            if (_valid2) {
              valid4 = true;
              passing2 = 0;
            }
            const _errs22 = errors;
            if (errors === _errs22) {
              if (data4 && typeof data4 == "object" && !Array.isArray(data4)) {
                let missing3;
                if (data4.pathname === undefined && (missing3 = "pathname")) {
                  const err11 = { instancePath: instancePath + "/path", schemaPath: "#/properties/path/oneOf/1/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" };
                  if (vErrors === null) {
                    vErrors = [err11];
                  } else {
                    vErrors.push(err11);
                  }
                  errors++;
                } else {
                  if (data4.protocol !== undefined) {
                    let data5 = data4.protocol;
                    const _errs25 = errors;
                    if (typeof data5 !== "string") {
                      let dataType5 = typeof data5;
                      let coerced5 = undefined;
                      if (!(coerced5 !== undefined)) {
                        if (dataType5 == "number" || dataType5 == "boolean") {
                          coerced5 = "" + data5;
                        } else if (data5 === null) {
                          coerced5 = "";
                        } else {
                          const err12 = { instancePath: instancePath + "/path/protocol", schemaPath: "#/properties/path/oneOf/1/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                          if (vErrors === null) {
                            vErrors = [err12];
                          } else {
                            vErrors.push(err12);
                          }
                          errors++;
                        }
                      }
                      if (coerced5 !== undefined) {
                        data5 = coerced5;
                        if (data4 !== undefined) {
                          data4["protocol"] = coerced5;
                        }
                      }
                    }
                    var valid5 = _errs25 === errors;
                  } else {
                    var valid5 = true;
                  }
                  if (valid5) {
                    if (data4.hostname !== undefined) {
                      let data6 = data4.hostname;
                      const _errs27 = errors;
                      if (typeof data6 !== "string") {
                        let dataType6 = typeof data6;
                        let coerced6 = undefined;
                        if (!(coerced6 !== undefined)) {
                          if (dataType6 == "number" || dataType6 == "boolean") {
                            coerced6 = "" + data6;
                          } else if (data6 === null) {
                            coerced6 = "";
                          } else {
                            const err13 = { instancePath: instancePath + "/path/hostname", schemaPath: "#/properties/path/oneOf/1/properties/hostname/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                              vErrors = [err13];
                            } else {
                              vErrors.push(err13);
                            }
                            errors++;
                          }
                        }
                        if (coerced6 !== undefined) {
                          data6 = coerced6;
                          if (data4 !== undefined) {
                            data4["hostname"] = coerced6;
                          }
                        }
                      }
                      var valid5 = _errs27 === errors;
                    } else {
                      var valid5 = true;
                    }
                    if (valid5) {
                      if (data4.pathname !== undefined) {
                        let data7 = data4.pathname;
                        const _errs29 = errors;
                        if (typeof data7 !== "string") {
                          let dataType7 = typeof data7;
                          let coerced7 = undefined;
                          if (!(coerced7 !== undefined)) {
                            if (dataType7 == "number" || dataType7 == "boolean") {
                              coerced7 = "" + data7;
                            } else if (data7 === null) {
                              coerced7 = "";
                            } else {
                              const err14 = { instancePath: instancePath + "/path/pathname", schemaPath: "#/properties/path/oneOf/1/properties/pathname/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                              if (vErrors === null) {
                                vErrors = [err14];
                              } else {
                                vErrors.push(err14);
                              }
                              errors++;
                            }
                          }
                          if (coerced7 !== undefined) {
                            data7 = coerced7;
                            if (data4 !== undefined) {
                              data4["pathname"] = coerced7;
                            }
                          }
                        }
                        var valid5 = _errs29 === errors;
                      } else {
                        var valid5 = true;
                      }
                    }
                  }
                }
              } else {
                const err15 = { instancePath: instancePath + "/path", schemaPath: "#/properties/path/oneOf/1/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                if (vErrors === null) {
                  vErrors = [err15];
                } else {
                  vErrors.push(err15);
                }
                errors++;
              }
            }
            var _valid2 = _errs22 === errors;
            if (_valid2 && valid4) {
              valid4 = false;
              passing2 = [passing2, 1];
            } else {
              if (_valid2) {
                valid4 = true;
                passing2 = 1;
              }
            }
            if (!valid4) {
              const err16 = { instancePath: instancePath + "/path", schemaPath: "#/properties/path/oneOf", keyword: "oneOf", params: { passingSchemas: passing2 }, message: "must match exactly one schema in oneOf" };
              if (vErrors === null) {
                vErrors = [err16];
              } else {
                vErrors.push(err16);
              }
              errors++;
              validate10.errors = vErrors;
              return false;
            } else {
              errors = _errs19;
              if (vErrors !== null) {
                if (_errs19) {
                  vErrors.length = _errs19;
                } else {
                  vErrors = null;
                }
              }
            }
            var valid1 = _errs18 === errors;
          } else {
            var valid1 = true;
          }
          if (valid1) {
            if (data.cookies !== undefined) {
              let data8 = data.cookies;
              const _errs31 = errors;
              if (errors === _errs31) {
                if (!(data8 && typeof data8 == "object" && !Array.isArray(data8))) {
                  validate10.errors = [{ instancePath: instancePath + "/cookies", schemaPath: "#/properties/cookies/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                  return false;
                }
              }
              var valid1 = _errs31 === errors;
            } else {
              var valid1 = true;
            }
            if (valid1) {
              if (data.headers !== undefined) {
                let data9 = data.headers;
                const _errs34 = errors;
                if (errors === _errs34) {
                  if (!(data9 && typeof data9 == "object" && !Array.isArray(data9))) {
                    validate10.errors = [{ instancePath: instancePath + "/headers", schemaPath: "#/properties/headers/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                    return false;
                  }
                }
                var valid1 = _errs34 === errors;
              } else {
                var valid1 = true;
              }
              if (valid1) {
                if (data.query !== undefined) {
                  let data10 = data.query;
                  const _errs37 = errors;
                  const _errs38 = errors;
                  let valid6 = false;
                  const _errs39 = errors;
                  if (errors === _errs39) {
                    if (!(data10 && typeof data10 == "object" && !Array.isArray(data10))) {
                      const err17 = { instancePath: instancePath + "/query", schemaPath: "#/properties/query/anyOf/0/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                      if (vErrors === null) {
                        vErrors = [err17];
                      } else {
                        vErrors.push(err17);
                      }
                      errors++;
                    }
                  }
                  var _valid3 = _errs39 === errors;
                  valid6 = valid6 || _valid3;
                  if (!valid6) {
                    const _errs42 = errors;
                    if (typeof data10 !== "string") {
                      let dataType8 = typeof data10;
                      let coerced8 = undefined;
                      if (!(coerced8 !== undefined)) {
                        if (dataType8 == "number" || dataType8 == "boolean") {
                          coerced8 = "" + data10;
                        } else if (data10 === null) {
                          coerced8 = "";
                        } else {
                          const err18 = { instancePath: instancePath + "/query", schemaPath: "#/properties/query/anyOf/1/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                          if (vErrors === null) {
                            vErrors = [err18];
                          } else {
                            vErrors.push(err18);
                          }
                          errors++;
                        }
                      }
                      if (coerced8 !== undefined) {
                        data10 = coerced8;
                        if (data !== undefined) {
                          data["query"] = coerced8;
                        }
                      }
                    }
                    var _valid3 = _errs42 === errors;
                    valid6 = valid6 || _valid3;
                  }
                  if (!valid6) {
                    const err19 = { instancePath: instancePath + "/query", schemaPath: "#/properties/query/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                    if (vErrors === null) {
                      vErrors = [err19];
                    } else {
                      vErrors.push(err19);
                    }
                    errors++;
                    validate10.errors = vErrors;
                    return false;
                  } else {
                    errors = _errs38;
                    if (vErrors !== null) {
                      if (_errs38) {
                        vErrors.length = _errs38;
                      } else {
                        vErrors = null;
                      }
                    }
                  }
                  var valid1 = _errs37 === errors;
                } else {
                  var valid1 = true;
                }
                if (valid1) {
                  if (data.simulate !== undefined) {
                    let data11 = data.simulate;
                    const _errs44 = errors;
                    if (errors === _errs44) {
                      if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                        if (data11.end !== undefined) {
                          let data12 = data11.end;
                          const _errs46 = errors;
                          if (typeof data12 !== "boolean") {
                            let coerced9 = undefined;
                            if (!(coerced9 !== undefined)) {
                              if (data12 === "false" || data12 === 0 || data12 === null) {
                                coerced9 = false;
                              } else if (data12 === "true" || data12 === 1) {
                                coerced9 = true;
                              } else {
                                validate10.errors = [{ instancePath: instancePath + "/simulate/end", schemaPath: "#/properties/simulate/properties/end/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                return false;
                              }
                            }
                            if (coerced9 !== undefined) {
                              data12 = coerced9;
                              if (data11 !== undefined) {
                                data11["end"] = coerced9;
                              }
                            }
                          }
                          var valid7 = _errs46 === errors;
                        } else {
                          var valid7 = true;
                        }
                        if (valid7) {
                          if (data11.split !== undefined) {
                            let data13 = data11.split;
                            const _errs48 = errors;
                            if (typeof data13 !== "boolean") {
                              let coerced10 = undefined;
                              if (!(coerced10 !== undefined)) {
                                if (data13 === "false" || data13 === 0 || data13 === null) {
                                  coerced10 = false;
                                } else if (data13 === "true" || data13 === 1) {
                                  coerced10 = true;
                                } else {
                                  validate10.errors = [{ instancePath: instancePath + "/simulate/split", schemaPath: "#/properties/simulate/properties/split/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                  return false;
                                }
                              }
                              if (coerced10 !== undefined) {
                                data13 = coerced10;
                                if (data11 !== undefined) {
                                  data11["split"] = coerced10;
                                }
                              }
                            }
                            var valid7 = _errs48 === errors;
                          } else {
                            var valid7 = true;
                          }
                          if (valid7) {
                            if (data11.error !== undefined) {
                              let data14 = data11.error;
                              const _errs50 = errors;
                              if (typeof data14 !== "boolean") {
                                let coerced11 = undefined;
                                if (!(coerced11 !== undefined)) {
                                  if (data14 === "false" || data14 === 0 || data14 === null) {
                                    coerced11 = false;
                                  } else if (data14 === "true" || data14 === 1) {
                                    coerced11 = true;
                                  } else {
                                    validate10.errors = [{ instancePath: instancePath + "/simulate/error", schemaPath: "#/properties/simulate/properties/error/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                    return false;
                                  }
                                }
                                if (coerced11 !== undefined) {
                                  data14 = coerced11;
                                  if (data11 !== undefined) {
                                    data11["error"] = coerced11;
                                  }
                                }
                              }
                              var valid7 = _errs50 === errors;
                            } else {
                              var valid7 = true;
                            }
                            if (valid7) {
                              if (data11.close !== undefined) {
                                let data15 = data11.close;
                                const _errs52 = errors;
                                if (typeof data15 !== "boolean") {
                                  let coerced12 = undefined;
                                  if (!(coerced12 !== undefined)) {
                                    if (data15 === "false" || data15 === 0 || data15 === null) {
                                      coerced12 = false;
                                    } else if (data15 === "true" || data15 === 1) {
                                      coerced12 = true;
                                    } else {
                                      validate10.errors = [{ instancePath: instancePath + "/simulate/close", schemaPath: "#/properties/simulate/properties/close/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                      return false;
                                    }
                                  }
                                  if (coerced12 !== undefined) {
                                    data15 = coerced12;
                                    if (data11 !== undefined) {
                                      data11["close"] = coerced12;
                                    }
                                  }
                                }
                                var valid7 = _errs52 === errors;
                              } else {
                                var valid7 = true;
                              }
                            }
                          }
                        }
                      } else {
                        validate10.errors = [{ instancePath: instancePath + "/simulate", schemaPath: "#/properties/simulate/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                        return false;
                      }
                    }
                    var valid1 = _errs44 === errors;
                  } else {
                    var valid1 = true;
                  }
                  if (valid1) {
                    if (data.authority !== undefined) {
                      let data16 = data.authority;
                      const _errs54 = errors;
                      if (typeof data16 !== "string") {
                        let dataType13 = typeof data16;
                        let coerced13 = undefined;
                        if (!(coerced13 !== undefined)) {
                          if (dataType13 == "number" || dataType13 == "boolean") {
                            coerced13 = "" + data16;
                          } else if (data16 === null) {
                            coerced13 = "";
                          } else {
                            validate10.errors = [{ instancePath: instancePath + "/authority", schemaPath: "#/properties/authority/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                          }
                        }
                        if (coerced13 !== undefined) {
                          data16 = coerced13;
                          if (data !== undefined) {
                            data["authority"] = coerced13;
                          }
                        }
                      }
                      var valid1 = _errs54 === errors;
                    } else {
                      var valid1 = true;
                    }
                    if (valid1) {
                      if (data.remoteAddress !== undefined) {
                        let data17 = data.remoteAddress;
                        const _errs56 = errors;
                        if (typeof data17 !== "string") {
                          let dataType14 = typeof data17;
                          let coerced14 = undefined;
                          if (!(coerced14 !== undefined)) {
                            if (dataType14 == "number" || dataType14 == "boolean") {
                              coerced14 = "" + data17;
                            } else if (data17 === null) {
                              coerced14 = "";
                            } else {
                              validate10.errors = [{ instancePath: instancePath + "/remoteAddress", schemaPath: "#/properties/remoteAddress/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                              return false;
                            }
                          }
                          if (coerced14 !== undefined) {
                            data17 = coerced14;
                            if (data !== undefined) {
                              data["remoteAddress"] = coerced14;
                            }
                          }
                        }
                        var valid1 = _errs56 === errors;
                      } else {
                        var valid1 = true;
                      }
                      if (valid1) {
                        if (data.method !== undefined) {
                          let data18 = data.method;
                          const _errs58 = errors;
                          if (typeof data18 !== "string") {
                            let dataType15 = typeof data18;
                            let coerced15 = undefined;
                            if (!(coerced15 !== undefined)) {
                              if (dataType15 == "number" || dataType15 == "boolean") {
                                coerced15 = "" + data18;
                              } else if (data18 === null) {
                                coerced15 = "";
                              } else {
                                validate10.errors = [{ instancePath: instancePath + "/method", schemaPath: "#/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                              }
                            }
                            if (coerced15 !== undefined) {
                              data18 = coerced15;
                              if (data !== undefined) {
                                data["method"] = coerced15;
                              }
                            }
                          }
                          if (!(data18 === "ACL" || data18 === "BIND" || data18 === "CHECKOUT" || data18 === "CONNECT" || data18 === "COPY" || data18 === "DELETE" || data18 === "GET" || data18 === "HEAD" || data18 === "LINK" || data18 === "LOCK" || data18 === "M-SEARCH" || data18 === "MERGE" || data18 === "MKACTIVITY" || data18 === "MKCALENDAR" || data18 === "MKCOL" || data18 === "MOVE" || data18 === "NOTIFY" || data18 === "OPTIONS" || data18 === "PATCH" || data18 === "POST" || data18 === "PROPFIND" || data18 === "PROPPATCH" || data18 === "PURGE" || data18 === "PUT" || data18 === "QUERY" || data18 === "REBIND" || data18 === "REPORT" || data18 === "SEARCH" || data18 === "SOURCE" || data18 === "SUBSCRIBE" || data18 === "TRACE" || data18 === "UNBIND" || data18 === "UNLINK" || data18 === "UNLOCK" || data18 === "UNSUBSCRIBE" || data18 === "acl" || data18 === "bind" || data18 === "checkout" || data18 === "connect" || data18 === "copy" || data18 === "delete" || data18 === "get" || data18 === "head" || data18 === "link" || data18 === "lock" || data18 === "m-search" || data18 === "merge" || data18 === "mkactivity" || data18 === "mkcalendar" || data18 === "mkcol" || data18 === "move" || data18 === "notify" || data18 === "options" || data18 === "patch" || data18 === "post" || data18 === "propfind" || data18 === "proppatch" || data18 === "purge" || data18 === "put" || data18 === "query" || data18 === "rebind" || data18 === "report" || data18 === "search" || data18 === "source" || data18 === "subscribe" || data18 === "trace" || data18 === "unbind" || data18 === "unlink" || data18 === "unlock" || data18 === "unsubscribe")) {
                            validate10.errors = [{ instancePath: instancePath + "/method", schemaPath: "#/properties/method/enum", keyword: "enum", params: { allowedValues: schema11.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                            return false;
                          }
                          var valid1 = _errs58 === errors;
                        } else {
                          var valid1 = true;
                        }
                        if (valid1) {
                          if (data.validate !== undefined) {
                            let data19 = data.validate;
                            const _errs60 = errors;
                            if (typeof data19 !== "boolean") {
                              let coerced16 = undefined;
                              if (!(coerced16 !== undefined)) {
                                if (data19 === "false" || data19 === 0 || data19 === null) {
                                  coerced16 = false;
                                } else if (data19 === "true" || data19 === 1) {
                                  coerced16 = true;
                                } else {
                                  validate10.errors = [{ instancePath: instancePath + "/validate", schemaPath: "#/properties/validate/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                  return false;
                                }
                              }
                              if (coerced16 !== undefined) {
                                data19 = coerced16;
                                if (data !== undefined) {
                                  data["validate"] = coerced16;
                                }
                              }
                            }
                            var valid1 = _errs60 === errors;
                          } else {
                            var valid1 = true;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        validate10.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
      }
    }
    validate10.errors = vErrors;
    return errors === 0;
  }
});

// node_modules/light-my-request/index.js
var require_light_my_request = __commonJS((exports, module) => {
  var assert = __require("node:assert");
  var Request = require_request2();
  var Response = require_response();
  var errorMessage = "The dispatch function has already been invoked";
  var optsValidator = require_config_validator();
  function inject(dispatchFunc, options, callback) {
    if (callback === undefined) {
      return new Chain(dispatchFunc, options);
    } else {
      return doInject(dispatchFunc, options, callback);
    }
  }
  function supportStream1(req, next) {
    const payload = req._lightMyRequest.payload;
    if (!payload || payload._readableState || typeof payload.resume !== "function") {
      return next();
    }
    const chunks = [];
    payload.on("data", (chunk) => chunks.push(Buffer.from(chunk)));
    payload.on("end", () => {
      const payload2 = Buffer.concat(chunks);
      req.headers["content-length"] = req.headers["content-length"] || "" + payload2.length;
      delete req.headers["transfer-encoding"];
      req._lightMyRequest.payload = payload2;
      return next();
    });
    payload.resume();
  }
  function makeRequest(dispatchFunc, server, req, res) {
    req.once("error", function(err) {
      if (this.destroyed)
        res.destroy(err);
    });
    req.once("close", function() {
      if (this.destroyed && !this._error) {
        res.destroy();
      }
    });
    return supportStream1(req, () => dispatchFunc.call(server, req, res));
  }
  function doInject(dispatchFunc, options, callback) {
    options = typeof options === "string" ? { url: options } : options;
    if (options.validate !== false) {
      assert(typeof dispatchFunc === "function", "dispatchFunc should be a function");
      const isOptionValid = optsValidator(options);
      if (!isOptionValid) {
        throw new Error(optsValidator.errors.map((e) => e.message));
      }
    }
    const server = options.server || {};
    const RequestConstructor = options.Request ? Request.CustomRequest : Request;
    if (dispatchFunc.request && dispatchFunc.request.app === dispatchFunc) {
      Object.setPrototypeOf(Object.getPrototypeOf(dispatchFunc.request), RequestConstructor.prototype);
      Object.setPrototypeOf(Object.getPrototypeOf(dispatchFunc.response), Response.prototype);
    }
    if (typeof callback === "function") {
      const req = new RequestConstructor(options);
      const res = new Response(req, callback);
      return makeRequest(dispatchFunc, server, req, res);
    } else {
      return new Promise((resolve, reject) => {
        const req = new RequestConstructor(options);
        const res = new Response(req, resolve, reject);
        makeRequest(dispatchFunc, server, req, res);
      });
    }
  }
  function Chain(dispatch, option) {
    if (typeof option === "string") {
      this.option = { url: option };
    } else {
      this.option = Object.assign({}, option);
    }
    this.dispatch = dispatch;
    this._hasInvoked = false;
    this._promise = null;
    if (this.option.autoStart !== false) {
      process.nextTick(() => {
        if (!this._hasInvoked) {
          this.end();
        }
      });
    }
  }
  var httpMethods = [
    "delete",
    "get",
    "head",
    "options",
    "patch",
    "post",
    "put",
    "trace"
  ];
  httpMethods.forEach((method) => {
    Chain.prototype[method] = function(url) {
      if (this._hasInvoked === true || this._promise) {
        throw new Error(errorMessage);
      }
      this.option.url = url;
      this.option.method = method.toUpperCase();
      return this;
    };
  });
  var chainMethods = [
    "body",
    "cookies",
    "headers",
    "payload",
    "query"
  ];
  chainMethods.forEach((method) => {
    Chain.prototype[method] = function(value) {
      if (this._hasInvoked === true || this._promise) {
        throw new Error(errorMessage);
      }
      this.option[method] = value;
      return this;
    };
  });
  Chain.prototype.end = function(callback) {
    if (this._hasInvoked === true || this._promise) {
      throw new Error(errorMessage);
    }
    this._hasInvoked = true;
    if (typeof callback === "function") {
      doInject(this.dispatch, this.option, callback);
    } else {
      this._promise = doInject(this.dispatch, this.option);
      return this._promise;
    }
  };
  Object.getOwnPropertyNames(Promise.prototype).forEach((method) => {
    if (method === "constructor")
      return;
    Chain.prototype[method] = function(...args) {
      if (!this._promise) {
        if (this._hasInvoked === true) {
          throw new Error(errorMessage);
        }
        this._hasInvoked = true;
        this._promise = doInject(this.dispatch, this.option);
      }
      return this._promise[method](...args);
    };
  });
  function isInjection(obj) {
    return obj instanceof Request || obj instanceof Response || obj?.constructor?.name === "_CustomLMRRequest";
  }
  module.exports = inject;
  module.exports.default = inject;
  module.exports.inject = inject;
  module.exports.isInjection = isInjection;
});

// node_modules/fastify/fastify.js
var require_fastify = __commonJS((exports, module) => {
  var VERSION = "5.2.2";
  var Avvio = require_boot();
  var http = __require("node:http");
  var diagnostics = __require("node:diagnostics_channel");
  var lightMyRequest;
  var {
    kAvvioBoot,
    kChildren,
    kServerBindings,
    kBodyLimit,
    kSupportedHTTPMethods,
    kRoutePrefix,
    kLogLevel,
    kLogSerializers,
    kHooks,
    kSchemaController,
    kRequestAcceptVersion,
    kReplySerializerDefault,
    kContentTypeParser,
    kReply,
    kRequest,
    kFourOhFour,
    kState,
    kOptions,
    kPluginNameChain,
    kSchemaErrorFormatter,
    kErrorHandler,
    kKeepAliveConnections,
    kChildLoggerFactory,
    kGenReqId
  } = require_symbols3();
  var { createServer } = require_server();
  var Reply = require_reply();
  var Request = require_request();
  var Context = require_context();
  var decorator = require_decorate();
  var ContentTypeParser = require_contentTypeParser();
  var SchemaController = require_schema_controller();
  var { Hooks, hookRunnerApplication, supportedHooks } = require_hooks();
  var { createChildLogger, defaultChildLoggerFactory, createLogger } = require_logger_factory();
  var pluginUtils = require_pluginUtils();
  var { getGenReqId, reqIdGenFactory } = require_reqIdGenFactory();
  var { buildRouting, validateBodyLimitOption } = require_route();
  var build404 = require_fourOhFour();
  var getSecuredInitialConfig = require_initialConfigValidation();
  var override = require_pluginOverride();
  var noopSet = require_noop_set();
  var {
    appendStackTrace,
    AVVIO_ERRORS_MAP,
    ...errorCodes
  } = require_errors4();
  var { defaultInitOptions } = getSecuredInitialConfig;
  var {
    FST_ERR_ASYNC_CONSTRAINT,
    FST_ERR_BAD_URL,
    FST_ERR_FORCE_CLOSE_CONNECTIONS_IDLE_NOT_AVAILABLE,
    FST_ERR_OPTIONS_NOT_OBJ,
    FST_ERR_QSP_NOT_FN,
    FST_ERR_SCHEMA_CONTROLLER_BUCKET_OPT_NOT_FN,
    FST_ERR_AJV_CUSTOM_OPTIONS_OPT_NOT_OBJ,
    FST_ERR_AJV_CUSTOM_OPTIONS_OPT_NOT_ARR,
    FST_ERR_INSTANCE_ALREADY_LISTENING,
    FST_ERR_REOPENED_CLOSE_SERVER,
    FST_ERR_ROUTE_REWRITE_NOT_STR,
    FST_ERR_SCHEMA_ERROR_FORMATTER_NOT_FN,
    FST_ERR_ERROR_HANDLER_NOT_FN,
    FST_ERR_ROUTE_METHOD_INVALID
  } = errorCodes;
  var { buildErrorHandler } = require_error_handler();
  var initChannel = diagnostics.channel("fastify.initialization");
  function defaultBuildPrettyMeta(route) {
    const cleanKeys = {};
    const allowedProps = ["errorHandler", "logLevel", "logSerializers"];
    allowedProps.concat(supportedHooks).forEach((k) => {
      cleanKeys[k] = route.store[k];
    });
    return Object.assign({}, cleanKeys);
  }
  function fastify(options) {
    if (options && typeof options !== "object") {
      throw new FST_ERR_OPTIONS_NOT_OBJ;
    } else {
      options = Object.assign({}, options);
    }
    if (options.querystringParser && typeof options.querystringParser !== "function") {
      throw new FST_ERR_QSP_NOT_FN(typeof options.querystringParser);
    }
    if (options.schemaController && options.schemaController.bucket && typeof options.schemaController.bucket !== "function") {
      throw new FST_ERR_SCHEMA_CONTROLLER_BUCKET_OPT_NOT_FN(typeof options.schemaController.bucket);
    }
    validateBodyLimitOption(options.bodyLimit);
    const requestIdHeader = typeof options.requestIdHeader === "string" && options.requestIdHeader.length !== 0 ? options.requestIdHeader.toLowerCase() : options.requestIdHeader === true && "request-id";
    const genReqId = reqIdGenFactory(requestIdHeader, options.genReqId);
    const requestIdLogLabel = options.requestIdLogLabel || "reqId";
    const bodyLimit = options.bodyLimit || defaultInitOptions.bodyLimit;
    const disableRequestLogging = options.disableRequestLogging || false;
    const ajvOptions = Object.assign({
      customOptions: {},
      plugins: []
    }, options.ajv);
    const frameworkErrors = options.frameworkErrors;
    if (!ajvOptions.customOptions || Object.prototype.toString.call(ajvOptions.customOptions) !== "[object Object]") {
      throw new FST_ERR_AJV_CUSTOM_OPTIONS_OPT_NOT_OBJ(typeof ajvOptions.customOptions);
    }
    if (!ajvOptions.plugins || !Array.isArray(ajvOptions.plugins)) {
      throw new FST_ERR_AJV_CUSTOM_OPTIONS_OPT_NOT_ARR(typeof ajvOptions.plugins);
    }
    const { logger, hasLogger } = createLogger(options);
    options.connectionTimeout = options.connectionTimeout || defaultInitOptions.connectionTimeout;
    options.keepAliveTimeout = options.keepAliveTimeout || defaultInitOptions.keepAliveTimeout;
    options.maxRequestsPerSocket = options.maxRequestsPerSocket || defaultInitOptions.maxRequestsPerSocket;
    options.requestTimeout = options.requestTimeout || defaultInitOptions.requestTimeout;
    options.logger = logger;
    options.requestIdHeader = requestIdHeader;
    options.requestIdLogLabel = requestIdLogLabel;
    options.disableRequestLogging = disableRequestLogging;
    options.ajv = ajvOptions;
    options.clientErrorHandler = options.clientErrorHandler || defaultClientErrorHandler;
    const initialConfig = getSecuredInitialConfig(options);
    options.exposeHeadRoutes = initialConfig.exposeHeadRoutes;
    const router = buildRouting({
      config: {
        defaultRoute,
        onBadUrl,
        constraints: options.constraints,
        ignoreTrailingSlash: options.ignoreTrailingSlash || defaultInitOptions.ignoreTrailingSlash,
        ignoreDuplicateSlashes: options.ignoreDuplicateSlashes || defaultInitOptions.ignoreDuplicateSlashes,
        maxParamLength: options.maxParamLength || defaultInitOptions.maxParamLength,
        caseSensitive: options.caseSensitive,
        allowUnsafeRegex: options.allowUnsafeRegex || defaultInitOptions.allowUnsafeRegex,
        buildPrettyMeta: defaultBuildPrettyMeta,
        querystringParser: options.querystringParser,
        useSemicolonDelimiter: options.useSemicolonDelimiter ?? defaultInitOptions.useSemicolonDelimiter
      }
    });
    const fourOhFour = build404(options);
    const httpHandler = wrapRouting(router, options);
    options.http2SessionTimeout = initialConfig.http2SessionTimeout;
    const { server, listen } = createServer(options, httpHandler);
    const serverHasCloseAllConnections = typeof server.closeAllConnections === "function";
    const serverHasCloseIdleConnections = typeof server.closeIdleConnections === "function";
    let forceCloseConnections = options.forceCloseConnections;
    if (forceCloseConnections === "idle" && !serverHasCloseIdleConnections) {
      throw new FST_ERR_FORCE_CLOSE_CONNECTIONS_IDLE_NOT_AVAILABLE;
    } else if (typeof forceCloseConnections !== "boolean") {
      forceCloseConnections = serverHasCloseIdleConnections ? "idle" : false;
    }
    const keepAliveConnections = !serverHasCloseAllConnections && forceCloseConnections === true ? new Set : noopSet();
    const setupResponseListeners = Reply.setupResponseListeners;
    const schemaController = SchemaController.buildSchemaController(null, options.schemaController);
    const fastify2 = {
      [kState]: {
        listening: false,
        closing: false,
        started: false,
        ready: false,
        booting: false,
        readyPromise: null
      },
      [kKeepAliveConnections]: keepAliveConnections,
      [kSupportedHTTPMethods]: {
        bodyless: new Set([
          "GET",
          "HEAD",
          "TRACE"
        ]),
        bodywith: new Set([
          "DELETE",
          "OPTIONS",
          "PATCH",
          "PUT",
          "POST"
        ])
      },
      [kOptions]: options,
      [kChildren]: [],
      [kServerBindings]: [],
      [kBodyLimit]: bodyLimit,
      [kRoutePrefix]: "",
      [kLogLevel]: "",
      [kLogSerializers]: null,
      [kHooks]: new Hooks,
      [kSchemaController]: schemaController,
      [kSchemaErrorFormatter]: null,
      [kErrorHandler]: buildErrorHandler(),
      [kChildLoggerFactory]: defaultChildLoggerFactory,
      [kReplySerializerDefault]: null,
      [kContentTypeParser]: new ContentTypeParser(bodyLimit, options.onProtoPoisoning || defaultInitOptions.onProtoPoisoning, options.onConstructorPoisoning || defaultInitOptions.onConstructorPoisoning),
      [kReply]: Reply.buildReply(Reply),
      [kRequest]: Request.buildRequest(Request, options.trustProxy),
      [kFourOhFour]: fourOhFour,
      [pluginUtils.kRegisteredPlugins]: [],
      [kPluginNameChain]: ["fastify"],
      [kAvvioBoot]: null,
      [kGenReqId]: genReqId,
      routing: httpHandler,
      delete: function _delete(url, options2, handler) {
        return router.prepareRoute.call(this, { method: "DELETE", url, options: options2, handler });
      },
      get: function _get(url, options2, handler) {
        return router.prepareRoute.call(this, { method: "GET", url, options: options2, handler });
      },
      head: function _head(url, options2, handler) {
        return router.prepareRoute.call(this, { method: "HEAD", url, options: options2, handler });
      },
      trace: function _trace(url, options2, handler) {
        return router.prepareRoute.call(this, { method: "TRACE", url, options: options2, handler });
      },
      patch: function _patch(url, options2, handler) {
        return router.prepareRoute.call(this, { method: "PATCH", url, options: options2, handler });
      },
      post: function _post(url, options2, handler) {
        return router.prepareRoute.call(this, { method: "POST", url, options: options2, handler });
      },
      put: function _put(url, options2, handler) {
        return router.prepareRoute.call(this, { method: "PUT", url, options: options2, handler });
      },
      options: function _options(url, options2, handler) {
        return router.prepareRoute.call(this, { method: "OPTIONS", url, options: options2, handler });
      },
      all: function _all(url, options2, handler) {
        return router.prepareRoute.call(this, { method: this.supportedMethods, url, options: options2, handler });
      },
      route: function _route(options2) {
        return router.route.call(this, { options: options2 });
      },
      hasRoute: function _route(options2) {
        return router.hasRoute.call(this, { options: options2 });
      },
      findRoute: function _findRoute(options2) {
        return router.findRoute(options2);
      },
      log: logger,
      withTypeProvider,
      addHook,
      addSchema,
      getSchema: schemaController.getSchema.bind(schemaController),
      getSchemas: schemaController.getSchemas.bind(schemaController),
      setValidatorCompiler,
      setSerializerCompiler,
      setSchemaController,
      setReplySerializer,
      setSchemaErrorFormatter,
      setGenReqId,
      addContentTypeParser: ContentTypeParser.helpers.addContentTypeParser,
      hasContentTypeParser: ContentTypeParser.helpers.hasContentTypeParser,
      getDefaultJsonParser: ContentTypeParser.defaultParsers.getDefaultJsonParser,
      defaultTextParser: ContentTypeParser.defaultParsers.defaultTextParser,
      removeContentTypeParser: ContentTypeParser.helpers.removeContentTypeParser,
      removeAllContentTypeParsers: ContentTypeParser.helpers.removeAllContentTypeParsers,
      register: null,
      after: null,
      ready: null,
      onClose: null,
      close: null,
      printPlugins: null,
      hasPlugin: function(name) {
        return this[pluginUtils.kRegisteredPlugins].includes(name) || this[kPluginNameChain].includes(name);
      },
      listen,
      server,
      addresses: function() {
        const binded = this[kServerBindings].map((b) => b.address());
        binded.push(this.server.address());
        return binded.filter((adr) => adr);
      },
      decorate: decorator.add,
      hasDecorator: decorator.exist,
      decorateReply: decorator.decorateReply,
      decorateRequest: decorator.decorateRequest,
      hasRequestDecorator: decorator.existRequest,
      hasReplyDecorator: decorator.existReply,
      addHttpMethod,
      inject,
      printRoutes,
      setNotFoundHandler,
      setErrorHandler,
      setChildLoggerFactory,
      initialConfig,
      addConstraintStrategy: router.addConstraintStrategy.bind(router),
      hasConstraintStrategy: router.hasConstraintStrategy.bind(router)
    };
    Object.defineProperties(fastify2, {
      listeningOrigin: {
        get() {
          const address = this.addresses().slice(-1).pop();
          if (typeof address === "string") {
            return address;
          }
          const host = address.family === "IPv6" ? `[${address.address}]` : address.address;
          return `${this[kOptions].https ? "https" : "http"}://${host}:${address.port}`;
        }
      },
      pluginName: {
        configurable: true,
        get() {
          if (this[kPluginNameChain].length > 1) {
            return this[kPluginNameChain].join(" -> ");
          }
          return this[kPluginNameChain][0];
        }
      },
      prefix: {
        configurable: true,
        get() {
          return this[kRoutePrefix];
        }
      },
      validatorCompiler: {
        configurable: true,
        get() {
          return this[kSchemaController].getValidatorCompiler();
        }
      },
      serializerCompiler: {
        configurable: true,
        get() {
          return this[kSchemaController].getSerializerCompiler();
        }
      },
      childLoggerFactory: {
        configurable: true,
        get() {
          return this[kChildLoggerFactory];
        }
      },
      version: {
        configurable: true,
        get() {
          return VERSION;
        }
      },
      errorHandler: {
        configurable: true,
        get() {
          return this[kErrorHandler].func;
        }
      },
      genReqId: {
        configurable: true,
        get() {
          return this[kGenReqId];
        }
      },
      supportedMethods: {
        configurable: false,
        get() {
          return [
            ...this[kSupportedHTTPMethods].bodyless,
            ...this[kSupportedHTTPMethods].bodywith
          ];
        }
      }
    });
    if (options.schemaErrorFormatter) {
      validateSchemaErrorFormatter(options.schemaErrorFormatter);
      fastify2[kSchemaErrorFormatter] = options.schemaErrorFormatter.bind(fastify2);
    }
    const avvioPluginTimeout = Number(options.pluginTimeout);
    const avvio = Avvio(fastify2, {
      autostart: false,
      timeout: isNaN(avvioPluginTimeout) === false ? avvioPluginTimeout : defaultInitOptions.pluginTimeout,
      expose: {
        use: "register"
      }
    });
    avvio.override = override;
    avvio.on("start", () => fastify2[kState].started = true);
    fastify2[kAvvioBoot] = fastify2.ready;
    fastify2.ready = ready;
    fastify2.printPlugins = avvio.prettyPrint.bind(avvio);
    avvio.once("preReady", () => {
      fastify2.onClose((instance, done) => {
        fastify2[kState].closing = true;
        router.closeRoutes();
        hookRunnerApplication("preClose", fastify2[kAvvioBoot], fastify2, function() {
          if (fastify2[kState].listening) {
            if (forceCloseConnections === "idle") {
              instance.server.closeIdleConnections();
            } else if (serverHasCloseAllConnections && forceCloseConnections) {
              instance.server.closeAllConnections();
            } else if (forceCloseConnections === true) {
              for (const conn of fastify2[kKeepAliveConnections]) {
                conn.destroy();
                fastify2[kKeepAliveConnections].delete(conn);
              }
            }
          }
          if (!options.serverFactory || fastify2[kState].listening) {
            instance.server.close(function(err) {
              if (err && err.code !== "ERR_SERVER_NOT_RUNNING") {
                done(null);
              } else {
                done();
              }
            });
          } else {
            process.nextTick(done, null);
          }
        });
      });
    });
    const onBadUrlContext = new Context({
      server: fastify2,
      config: {}
    });
    fastify2.setNotFoundHandler();
    fourOhFour.arrange404(fastify2);
    router.setup(options, {
      avvio,
      fourOhFour,
      logger,
      hasLogger,
      setupResponseListeners,
      throwIfAlreadyStarted,
      keepAliveConnections
    });
    server.on("clientError", options.clientErrorHandler.bind(fastify2));
    if (initChannel.hasSubscribers) {
      initChannel.publish({ fastify: fastify2 });
    }
    if ("asyncDispose" in Symbol) {
      fastify2[Symbol.asyncDispose] = function dispose() {
        return fastify2.close();
      };
    }
    return fastify2;
    function throwIfAlreadyStarted(msg) {
      if (fastify2[kState].started)
        throw new FST_ERR_INSTANCE_ALREADY_LISTENING(msg);
    }
    function inject(opts, cb) {
      if (lightMyRequest === undefined) {
        lightMyRequest = require_light_my_request();
      }
      if (fastify2[kState].started) {
        if (fastify2[kState].closing) {
          const error = new FST_ERR_REOPENED_CLOSE_SERVER;
          if (cb) {
            cb(error);
            return;
          } else {
            return Promise.reject(error);
          }
        }
        return lightMyRequest(httpHandler, opts, cb);
      }
      if (cb) {
        this.ready((err) => {
          if (err)
            cb(err, null);
          else
            lightMyRequest(httpHandler, opts, cb);
        });
      } else {
        return lightMyRequest((req, res) => {
          this.ready(function(err) {
            if (err) {
              res.emit("error", err);
              return;
            }
            httpHandler(req, res);
          });
        }, opts);
      }
    }
    function ready(cb) {
      if (this[kState].readyPromise !== null) {
        if (cb != null) {
          this[kState].readyPromise.then(() => cb(null, fastify2), cb);
          return;
        }
        return this[kState].readyPromise;
      }
      let resolveReady;
      let rejectReady;
      process.nextTick(runHooks);
      this[kState].readyPromise = new Promise(function(resolve, reject) {
        resolveReady = resolve;
        rejectReady = reject;
      });
      if (!cb) {
        return this[kState].readyPromise;
      } else {
        this[kState].readyPromise.then(() => cb(null, fastify2), cb);
      }
      function runHooks() {
        fastify2[kAvvioBoot]((err, done) => {
          if (err || fastify2[kState].started || fastify2[kState].ready || fastify2[kState].booting) {
            manageErr(err);
          } else {
            fastify2[kState].booting = true;
            hookRunnerApplication("onReady", fastify2[kAvvioBoot], fastify2, manageErr);
          }
          done();
        });
      }
      function manageErr(err) {
        err = err != null && AVVIO_ERRORS_MAP[err.code] != null ? appendStackTrace(err, new AVVIO_ERRORS_MAP[err.code](err.message)) : err;
        if (err) {
          return rejectReady(err);
        }
        resolveReady(fastify2);
        fastify2[kState].booting = false;
        fastify2[kState].ready = true;
        fastify2[kState].promise = null;
      }
    }
    function withTypeProvider() {
      return this;
    }
    function addHook(name, fn) {
      throwIfAlreadyStarted('Cannot call "addHook"!');
      if (fn == null) {
        throw new errorCodes.FST_ERR_HOOK_INVALID_HANDLER(name, fn);
      }
      if (name === "onSend" || name === "preSerialization" || name === "onError" || name === "preParsing") {
        if (fn.constructor.name === "AsyncFunction" && fn.length === 4) {
          throw new errorCodes.FST_ERR_HOOK_INVALID_ASYNC_HANDLER;
        }
      } else if (name === "onReady" || name === "onListen") {
        if (fn.constructor.name === "AsyncFunction" && fn.length !== 0) {
          throw new errorCodes.FST_ERR_HOOK_INVALID_ASYNC_HANDLER;
        }
      } else if (name === "onRequestAbort") {
        if (fn.constructor.name === "AsyncFunction" && fn.length !== 1) {
          throw new errorCodes.FST_ERR_HOOK_INVALID_ASYNC_HANDLER;
        }
      } else {
        if (fn.constructor.name === "AsyncFunction" && fn.length === 3) {
          throw new errorCodes.FST_ERR_HOOK_INVALID_ASYNC_HANDLER;
        }
      }
      if (name === "onClose") {
        this.onClose(fn.bind(this));
      } else if (name === "onReady" || name === "onListen" || name === "onRoute") {
        this[kHooks].add(name, fn);
      } else {
        this.after((err, done) => {
          _addHook.call(this, name, fn);
          done(err);
        });
      }
      return this;
      function _addHook(name2, fn2) {
        this[kHooks].add(name2, fn2);
        this[kChildren].forEach((child) => _addHook.call(child, name2, fn2));
      }
    }
    function addSchema(schema) {
      throwIfAlreadyStarted('Cannot call "addSchema"!');
      this[kSchemaController].add(schema);
      this[kChildren].forEach((child) => child.addSchema(schema));
      return this;
    }
    function defaultClientErrorHandler(err, socket) {
      if (err.code === "ECONNRESET" || socket.destroyed) {
        return;
      }
      let body, errorCode, errorStatus, errorLabel;
      if (err.code === "ERR_HTTP_REQUEST_TIMEOUT") {
        errorCode = "408";
        errorStatus = http.STATUS_CODES[errorCode];
        body = `{"error":"${errorStatus}","message":"Client Timeout","statusCode":408}`;
        errorLabel = "timeout";
      } else if (err.code === "HPE_HEADER_OVERFLOW") {
        errorCode = "431";
        errorStatus = http.STATUS_CODES[errorCode];
        body = `{"error":"${errorStatus}","message":"Exceeded maximum allowed HTTP header size","statusCode":431}`;
        errorLabel = "header_overflow";
      } else {
        errorCode = "400";
        errorStatus = http.STATUS_CODES[errorCode];
        body = `{"error":"${errorStatus}","message":"Client Error","statusCode":400}`;
        errorLabel = "error";
      }
      this.log.trace({ err }, `client ${errorLabel}`);
      if (socket.writable) {
        socket.write(`HTTP/1.1 ${errorCode} ${errorStatus}\r
Content-Length: ${body.length}\r
Content-Type: application/json\r
\r
${body}`);
      }
      socket.destroy(err);
    }
    function defaultRoute(req, res) {
      if (req.headers["accept-version"] !== undefined) {
        req.headers[kRequestAcceptVersion] = req.headers["accept-version"];
        req.headers["accept-version"] = undefined;
      }
      fourOhFour.router.lookup(req, res);
    }
    function onBadUrl(path, req, res) {
      if (frameworkErrors) {
        const id = getGenReqId(onBadUrlContext.server, req);
        const childLogger = createChildLogger(onBadUrlContext, logger, req, id);
        const request = new Request(id, null, req, null, childLogger, onBadUrlContext);
        const reply = new Reply(res, request, childLogger);
        if (disableRequestLogging === false) {
          childLogger.info({ req: request }, "incoming request");
        }
        return frameworkErrors(new FST_ERR_BAD_URL(path), request, reply);
      }
      const body = `{"error":"Bad Request","code":"FST_ERR_BAD_URL","message":"'${path}' is not a valid url component","statusCode":400}`;
      res.writeHead(400, {
        "Content-Type": "application/json",
        "Content-Length": body.length
      });
      res.end(body);
    }
    function buildAsyncConstraintCallback(isAsync, req, res) {
      if (isAsync === false)
        return;
      return function onAsyncConstraintError(err) {
        if (err) {
          if (frameworkErrors) {
            const id = getGenReqId(onBadUrlContext.server, req);
            const childLogger = createChildLogger(onBadUrlContext, logger, req, id);
            const request = new Request(id, null, req, null, childLogger, onBadUrlContext);
            const reply = new Reply(res, request, childLogger);
            if (disableRequestLogging === false) {
              childLogger.info({ req: request }, "incoming request");
            }
            return frameworkErrors(new FST_ERR_ASYNC_CONSTRAINT, request, reply);
          }
          const body = '{"error":"Internal Server Error","message":"Unexpected error from async constraint","statusCode":500}';
          res.writeHead(500, {
            "Content-Type": "application/json",
            "Content-Length": body.length
          });
          res.end(body);
        }
      };
    }
    function setNotFoundHandler(opts, handler) {
      throwIfAlreadyStarted('Cannot call "setNotFoundHandler"!');
      fourOhFour.setNotFoundHandler.call(this, opts, handler, avvio, router.routeHandler);
      return this;
    }
    function setValidatorCompiler(validatorCompiler) {
      throwIfAlreadyStarted('Cannot call "setValidatorCompiler"!');
      this[kSchemaController].setValidatorCompiler(validatorCompiler);
      return this;
    }
    function setSchemaErrorFormatter(errorFormatter) {
      throwIfAlreadyStarted('Cannot call "setSchemaErrorFormatter"!');
      validateSchemaErrorFormatter(errorFormatter);
      this[kSchemaErrorFormatter] = errorFormatter.bind(this);
      return this;
    }
    function setSerializerCompiler(serializerCompiler) {
      throwIfAlreadyStarted('Cannot call "setSerializerCompiler"!');
      this[kSchemaController].setSerializerCompiler(serializerCompiler);
      return this;
    }
    function setSchemaController(schemaControllerOpts) {
      throwIfAlreadyStarted('Cannot call "setSchemaController"!');
      const old = this[kSchemaController];
      const schemaController2 = SchemaController.buildSchemaController(old, Object.assign({}, old.opts, schemaControllerOpts));
      this[kSchemaController] = schemaController2;
      this.getSchema = schemaController2.getSchema.bind(schemaController2);
      this.getSchemas = schemaController2.getSchemas.bind(schemaController2);
      return this;
    }
    function setReplySerializer(replySerializer) {
      throwIfAlreadyStarted('Cannot call "setReplySerializer"!');
      this[kReplySerializerDefault] = replySerializer;
      return this;
    }
    function setErrorHandler(func) {
      throwIfAlreadyStarted('Cannot call "setErrorHandler"!');
      if (typeof func !== "function") {
        throw new FST_ERR_ERROR_HANDLER_NOT_FN;
      }
      this[kErrorHandler] = buildErrorHandler(this[kErrorHandler], func.bind(this));
      return this;
    }
    function setChildLoggerFactory(factory) {
      throwIfAlreadyStarted('Cannot call "setChildLoggerFactory"!');
      this[kChildLoggerFactory] = factory;
      return this;
    }
    function printRoutes(opts = {}) {
      opts.includeMeta = opts.includeHooks ? opts.includeMeta ? supportedHooks.concat(opts.includeMeta) : supportedHooks : opts.includeMeta;
      return router.printRoutes(opts);
    }
    function wrapRouting(router2, { rewriteUrl, logger: logger2 }) {
      let isAsync;
      return function preRouting(req, res) {
        if (isAsync === undefined)
          isAsync = router2.isAsyncConstraint();
        if (rewriteUrl) {
          req.originalUrl = req.url;
          const url = rewriteUrl.call(fastify2, req);
          if (typeof url === "string") {
            req.url = url;
          } else {
            const err = new FST_ERR_ROUTE_REWRITE_NOT_STR(req.url, typeof url);
            req.destroy(err);
          }
        }
        router2.routing(req, res, buildAsyncConstraintCallback(isAsync, req, res));
      };
    }
    function setGenReqId(func) {
      throwIfAlreadyStarted('Cannot call "setGenReqId"!');
      this[kGenReqId] = reqIdGenFactory(this[kOptions].requestIdHeader, func);
      return this;
    }
    function addHttpMethod(method, { hasBody = false } = {}) {
      if (typeof method !== "string" || http.METHODS.indexOf(method) === -1) {
        throw new FST_ERR_ROUTE_METHOD_INVALID;
      }
      if (hasBody === true) {
        this[kSupportedHTTPMethods].bodywith.add(method);
        this[kSupportedHTTPMethods].bodyless.delete(method);
      } else {
        this[kSupportedHTTPMethods].bodywith.delete(method);
        this[kSupportedHTTPMethods].bodyless.add(method);
      }
      const _method = method.toLowerCase();
      if (!this.hasDecorator(_method)) {
        this.decorate(_method, function(url, options2, handler) {
          return router.prepareRoute.call(this, { method, url, options: options2, handler });
        });
      }
      return this;
    }
  }
  function validateSchemaErrorFormatter(schemaErrorFormatter) {
    if (typeof schemaErrorFormatter !== "function") {
      throw new FST_ERR_SCHEMA_ERROR_FORMATTER_NOT_FN(typeof schemaErrorFormatter);
    } else if (schemaErrorFormatter.constructor.name === "AsyncFunction") {
      throw new FST_ERR_SCHEMA_ERROR_FORMATTER_NOT_FN("AsyncFunction");
    }
  }
  module.exports = fastify;
  module.exports.errorCodes = errorCodes;
  module.exports.fastify = fastify;
  module.exports.default = fastify;
});

// tau-bench/retail/data/users.json
var require_users = __commonJS((exports, module) => {
  module.exports = {
    noah_brown_6181: {
      name: { first_name: "Noah", last_name: "Brown" },
      address: {
        address1: "986 Sunset Drive",
        address2: "Suite 259",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80279"
      },
      email: "noah.brown7922@example.com",
      payment_methods: {
        paypal_5727330: { source: "paypal", id: "paypal_5727330" },
        credit_card_7815826: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9212",
          id: "credit_card_7815826"
        }
      },
      orders: ["#W7678072"]
    },
    ivan_santos_6635: {
      name: { first_name: "Ivan", last_name: "Santos" },
      address: {
        address1: "477 Park Avenue",
        address2: "Suite 558",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75277"
      },
      email: "ivan.santos3158@example.com",
      payment_methods: {
        paypal_6151711: { source: "paypal", id: "paypal_6151711" }
      },
      orders: ["#W6893533", "#W8770097", "#W5183325", "#W3913498"]
    },
    anya_garcia_3271: {
      name: { first_name: "Anya", last_name: "Garcia" },
      address: {
        address1: "615 Laurel Lane",
        address2: "Suite 552",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19036"
      },
      email: "anya.garcia2061@example.com",
      payment_methods: {
        gift_card_4374071: {
          source: "gift_card",
          balance: 51,
          id: "gift_card_4374071"
        },
        credit_card_8955149: {
          source: "credit_card",
          brand: "visa",
          last_four: "8674",
          id: "credit_card_8955149"
        }
      },
      orders: ["#W4140680", "#W6310710", "#W6436609"]
    },
    yara_sanchez_1902: {
      name: { first_name: "Yara", last_name: "Sanchez" },
      address: {
        address1: "772 Hickory Lane",
        address2: "Suite 990",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75255"
      },
      email: "yara.sanchez4385@example.com",
      payment_methods: {
        credit_card_5884162: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6830",
          id: "credit_card_5884162"
        }
      },
      orders: ["#W6015009"]
    },
    yara_li_8961: {
      name: { first_name: "Yara", last_name: "Li" },
      address: {
        address1: "713 Hillcrest Drive",
        address2: "Suite 400",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10126"
      },
      email: "yara.li6570@example.com",
      payment_methods: {
        paypal_4970705: { source: "paypal", id: "paypal_4970705" }
      },
      orders: ["#W2497857", "#W3400144"]
    },
    aarav_anderson_8794: {
      name: { first_name: "Aarav", last_name: "Anderson" },
      address: {
        address1: "931 Maple Drive",
        address2: "Suite 985",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19031"
      },
      email: "aarav.anderson9752@example.com",
      payment_methods: {
        gift_card_7245904: {
          source: "gift_card",
          balance: 17,
          id: "gift_card_7245904"
        }
      },
      orders: ["#W4316152", "#W9311069", "#W9300146", "#W3220203", "#W3470184"]
    },
    isabella_sanchez_2068: {
      name: { first_name: "Isabella", last_name: "Sanchez" },
      address: {
        address1: "854 Broadway",
        address2: "Suite 293",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85093"
      },
      email: "isabella.sanchez6218@example.com",
      payment_methods: {
        paypal_8516781: { source: "paypal", id: "paypal_8516781" }
      },
      orders: ["#W4386313", "#W1713682", "#W4277243"]
    },
    raj_sanchez_2970: {
      name: { first_name: "Raj", last_name: "Sanchez" },
      address: {
        address1: "557 Sunset Drive",
        address2: "Suite 454",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92147"
      },
      email: "raj.sanchez2046@example.com",
      payment_methods: {
        credit_card_3362387: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2130",
          id: "credit_card_3362387"
        },
        gift_card_2259499: {
          source: "gift_card",
          balance: 30,
          id: "gift_card_2259499"
        }
      },
      orders: ["#W7736708", "#W4566809", "#W1067251"]
    },
    chen_silva_7485: {
      name: { first_name: "Chen", last_name: "Silva" },
      address: {
        address1: "139 River Road",
        address2: "Suite 418",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46281"
      },
      email: "chen.silva2698@example.com",
      payment_methods: {
        gift_card_7250692: {
          source: "gift_card",
          balance: 59,
          id: "gift_card_7250692"
        },
        credit_card_1565124: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2732",
          id: "credit_card_1565124"
        }
      },
      orders: ["#W3069600", "#W2598834", "#W8171054", "#W9571698"]
    },
    olivia_jackson_1219: {
      name: { first_name: "Olivia", last_name: "Jackson" },
      address: {
        address1: "208 Cedar Street",
        address2: "Suite 993",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95119"
      },
      email: "olivia.jackson2465@example.com",
      payment_methods: {
        paypal_3999493: { source: "paypal", id: "paypal_3999493" }
      },
      orders: [
        "#W3168895",
        "#W5663445",
        "#W2090453",
        "#W6975922",
        "#W3895186",
        "#W6116680"
      ]
    },
    omar_lopez_3107: {
      name: { first_name: "Omar", last_name: "Lopez" },
      address: {
        address1: "959 Broadway",
        address2: "Suite 363",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90339"
      },
      email: "omar.lopez1868@example.com",
      payment_methods: {
        paypal_1530316: { source: "paypal", id: "paypal_1530316" }
      },
      orders: ["#W7273336", "#W7073860", "#W1764038"]
    },
    ava_nguyen_2175: {
      name: { first_name: "Ava", last_name: "Nguyen" },
      address: {
        address1: "346 Laurel Lane",
        address2: "Suite 175",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78786"
      },
      email: "ava.nguyen3664@example.com",
      payment_methods: {
        paypal_6262583: { source: "paypal", id: "paypal_6262583" },
        gift_card_3324938: {
          source: "gift_card",
          balance: 1,
          id: "gift_card_3324938"
        }
      },
      orders: ["#W1504875", "#W3779151", "#W9126675"]
    },
    sofia_li_9219: {
      name: { first_name: "Sofia", last_name: "Li" },
      address: {
        address1: "786 Elm Street",
        address2: "Suite 546",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78260"
      },
      email: "sofia.li7352@example.com",
      payment_methods: {
        paypal_8194385: { source: "paypal", id: "paypal_8194385" },
        credit_card_3951670: {
          source: "credit_card",
          brand: "visa",
          last_four: "6791",
          id: "credit_card_3951670"
        },
        credit_card_8105988: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "8484",
          id: "credit_card_8105988"
        }
      },
      orders: ["#W4689314", "#W8855135", "#W3916020", "#W5416052"]
    },
    emma_brown_8847: {
      name: { first_name: "Emma", last_name: "Brown" },
      address: {
        address1: "984 Hickory Lane",
        address2: "Suite 834",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32165"
      },
      email: "emma.brown5032@example.com",
      payment_methods: {
        credit_card_8850930: {
          source: "credit_card",
          brand: "visa",
          last_four: "9135",
          id: "credit_card_8850930"
        },
        paypal_9039769: { source: "paypal", id: "paypal_9039769" }
      },
      orders: ["#W6460787", "#W9196189"]
    },
    yusuf_khan_2015: {
      name: { first_name: "Yusuf", last_name: "Khan" },
      address: {
        address1: "975 Broadway",
        address2: "Suite 250",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78242"
      },
      email: "yusuf.khan4494@example.com",
      payment_methods: {
        gift_card_7711842: {
          source: "gift_card",
          balance: 63,
          id: "gift_card_7711842"
        }
      },
      orders: []
    },
    amelia_kim_4338: {
      name: { first_name: "Amelia", last_name: "Kim" },
      address: {
        address1: "250 River Road",
        address2: "Suite 668",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28230"
      },
      email: "amelia.kim6460@example.com",
      payment_methods: {
        paypal_1742092: { source: "paypal", id: "paypal_1742092" },
        gift_card_4019778: {
          source: "gift_card",
          balance: 17,
          id: "gift_card_4019778"
        }
      },
      orders: ["#W7634667"]
    },
    chen_smith_8425: {
      name: { first_name: "Chen", last_name: "Smith" },
      address: {
        address1: "932 Hickory Lane",
        address2: "Suite 309",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32278"
      },
      email: "chen.smith7677@example.com",
      payment_methods: {
        gift_card_4796172: {
          source: "gift_card",
          balance: 47,
          id: "gift_card_4796172"
        },
        credit_card_6177109: {
          source: "credit_card",
          brand: "visa",
          last_four: "9488",
          id: "credit_card_6177109"
        },
        paypal_9175769: { source: "paypal", id: "paypal_9175769" }
      },
      orders: ["#W8859225"]
    },
    harper_silva_8534: {
      name: { first_name: "Harper", last_name: "Silva" },
      address: {
        address1: "293 Main Street",
        address2: "Suite 497",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92188"
      },
      email: "harper.silva1192@example.com",
      payment_methods: {
        credit_card_7453883: {
          source: "credit_card",
          brand: "visa",
          last_four: "8726",
          id: "credit_card_7453883"
        }
      },
      orders: ["#W3323013", "#W1578930"]
    },
    evelyn_kovacs_6742: {
      name: { first_name: "Evelyn", last_name: "Kovacs" },
      address: {
        address1: "505 Cedar Avenue",
        address2: "Suite 539",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32117"
      },
      email: "evelyn.kovacs5369@example.com",
      payment_methods: {
        paypal_7732922: { source: "paypal", id: "paypal_7732922" }
      },
      orders: ["#W5694685", "#W9651773", "#W2768683", "#W7398274", "#W6689278"]
    },
    yusuf_ahmed_6232: {
      name: { first_name: "Yusuf", last_name: "Ahmed" },
      address: {
        address1: "409 Elm Street",
        address2: "Suite 697",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91075"
      },
      email: "yusuf.ahmed5476@example.com",
      payment_methods: {
        credit_card_2167533: {
          source: "credit_card",
          brand: "visa",
          last_four: "4015",
          id: "credit_card_2167533"
        }
      },
      orders: ["#W7007896", "#W1302858", "#W7756209"]
    },
    yusuf_hernandez_6467: {
      name: { first_name: "Yusuf", last_name: "Hernandez" },
      address: {
        address1: "943 Maple Drive",
        address2: "Suite 837",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43175"
      },
      email: "yusuf.hernandez6086@example.com",
      payment_methods: {
        paypal_9426036: { source: "paypal", id: "paypal_9426036" }
      },
      orders: ["#W2033238", "#W1633718", "#W7133840"]
    },
    aarav_sanchez_6568: {
      name: { first_name: "Aarav", last_name: "Sanchez" },
      address: {
        address1: "782 Cedar Street",
        address2: "Suite 790",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94130"
      },
      email: "aarav.sanchez7602@example.com",
      payment_methods: {
        gift_card_1504465: {
          source: "gift_card",
          balance: 95,
          id: "gift_card_1504465"
        }
      },
      orders: []
    },
    emma_smith_8564: {
      name: { first_name: "Emma", last_name: "Smith" },
      address: {
        address1: "243 Hillcrest Drive",
        address2: "Suite 113",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10192"
      },
      email: "emma.smith3991@example.com",
      payment_methods: {
        gift_card_8541487: {
          source: "gift_card",
          balance: 62,
          id: "gift_card_8541487"
        },
        paypal_6228291: { source: "paypal", id: "paypal_6228291" }
      },
      orders: ["#W2417020", "#W5605613", "#W3614011"]
    },
    omar_hernandez_1365: {
      name: { first_name: "Omar", last_name: "Hernandez" },
      address: {
        address1: "998 Sunset Drive",
        address2: "Suite 385",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76185"
      },
      email: "omar.hernandez3089@example.com",
      payment_methods: {
        paypal_8914532: { source: "paypal", id: "paypal_8914532" }
      },
      orders: []
    },
    yusuf_khan_7091: {
      name: { first_name: "Yusuf", last_name: "Khan" },
      address: {
        address1: "621 Highland Drive",
        address2: "Suite 629",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75313"
      },
      email: "yusuf.khan7390@example.com",
      payment_methods: {
        paypal_5796936: { source: "paypal", id: "paypal_5796936" }
      },
      orders: ["#W1787190", "#W3579467"]
    },
    evelyn_gonzalez_8876: {
      name: { first_name: "Evelyn", last_name: "Gonzalez" },
      address: {
        address1: "350 River Road",
        address2: "Suite 544",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19186"
      },
      email: "evelyn.gonzalez2110@example.com",
      payment_methods: {
        paypal_4191414: { source: "paypal", id: "paypal_4191414" }
      },
      orders: ["#W8341134", "#W1508165"]
    },
    ava_martin_2430: {
      name: { first_name: "Ava", last_name: "Martin" },
      address: {
        address1: "544 Hickory Lane",
        address2: "Suite 796",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20236"
      },
      email: "ava.martin4669@example.com",
      payment_methods: {
        gift_card_9217594: {
          source: "gift_card",
          balance: 90,
          id: "gift_card_9217594"
        },
        credit_card_5124011: {
          source: "credit_card",
          brand: "visa",
          last_four: "9429",
          id: "credit_card_5124011"
        }
      },
      orders: []
    },
    lei_patel_3139: {
      name: { first_name: "Lei", last_name: "Patel" },
      address: {
        address1: "865 Park Avenue",
        address2: "Suite 944",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60604"
      },
      email: "lei.patel2400@example.com",
      payment_methods: {
        credit_card_4589919: {
          source: "credit_card",
          brand: "visa",
          last_four: "4494",
          id: "credit_card_4589919"
        }
      },
      orders: ["#W2403263", "#W9506777"]
    },
    liam_lee_5696: {
      name: { first_name: "Liam", last_name: "Lee" },
      address: {
        address1: "668 Highland Drive",
        address2: "Suite 584",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76176"
      },
      email: "liam.lee9297@example.com",
      payment_methods: {
        credit_card_5809636: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3695",
          id: "credit_card_5809636"
        }
      },
      orders: ["#W2624389", "#W7208030", "#W9710999"]
    },
    amelia_nguyen_5209: {
      name: { first_name: "Amelia", last_name: "Nguyen" },
      address: {
        address1: "453 Cedar Avenue",
        address2: "Suite 743",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94113"
      },
      email: "amelia.nguyen3376@example.com",
      payment_methods: {
        credit_card_1413281: {
          source: "credit_card",
          brand: "visa",
          last_four: "8055",
          id: "credit_card_1413281"
        }
      },
      orders: ["#W9324386"]
    },
    emma_ito_4529: {
      name: { first_name: "Emma", last_name: "Ito" },
      address: {
        address1: "965 Broadway",
        address2: "Suite 140",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19022"
      },
      email: "emma.ito3790@example.com",
      payment_methods: {
        paypal_9995021: { source: "paypal", id: "paypal_9995021" },
        credit_card_8058445: {
          source: "credit_card",
          brand: "visa",
          last_four: "3660",
          id: "credit_card_8058445"
        }
      },
      orders: ["#W3780282", "#W8664580"]
    },
    yusuf_garcia_5427: {
      name: { first_name: "Yusuf", last_name: "Garcia" },
      address: {
        address1: "370 Maple Drive",
        address2: "Suite 371",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10155"
      },
      email: "yusuf.garcia5261@example.com",
      payment_methods: {
        gift_card_6337815: {
          source: "gift_card",
          balance: 32,
          id: "gift_card_6337815"
        }
      },
      orders: ["#W5763385", "#W4731920"]
    },
    olivia_brown_4616: {
      name: { first_name: "Olivia", last_name: "Brown" },
      address: {
        address1: "287 Pine Lane",
        address2: "Suite 248",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43118"
      },
      email: "olivia.brown9075@example.com",
      payment_methods: {
        credit_card_3081930: {
          source: "credit_card",
          brand: "visa",
          last_four: "7183",
          id: "credit_card_3081930"
        },
        paypal_4598117: { source: "paypal", id: "paypal_4598117" }
      },
      orders: ["#W2912153", "#W8033354"]
    },
    daiki_johnson_9523: {
      name: { first_name: "Daiki", last_name: "Johnson" },
      address: {
        address1: "834 Park Avenue",
        address2: "Suite 947",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80273"
      },
      email: "daiki.johnson2279@example.com",
      payment_methods: {
        paypal_2433177: { source: "paypal", id: "paypal_2433177" }
      },
      orders: ["#W1436802", "#W5282037", "#W9502127"]
    },
    omar_silva_7446: {
      name: { first_name: "Omar", last_name: "Silva" },
      address: {
        address1: "510 Hickory Lane",
        address2: "Suite 712",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92107"
      },
      email: "omar.silva4147@example.com",
      payment_methods: {
        paypal_2192303: { source: "paypal", id: "paypal_2192303" },
        credit_card_5322562: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "5859",
          id: "credit_card_5322562"
        },
        gift_card_5540683: {
          source: "gift_card",
          balance: 68,
          id: "gift_card_5540683"
        }
      },
      orders: ["#W9728773", "#W9673784", "#W1216601"]
    },
    amelia_patel_7834: {
      name: { first_name: "Amelia", last_name: "Patel" },
      address: {
        address1: "923 Elm Street",
        address2: "Suite 362",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85051"
      },
      email: "amelia.patel6926@example.com",
      payment_methods: {
        gift_card_3751659: {
          source: "gift_card",
          balance: 20,
          id: "gift_card_3751659"
        }
      },
      orders: ["#W2079779", "#W6497157", "#W9077472"]
    },
    isabella_lopez_6490: {
      name: { first_name: "Isabella", last_name: "Lopez" },
      address: {
        address1: "710 Sunset Drive",
        address2: "Suite 176",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85034"
      },
      email: "isabella.lopez3271@example.com",
      payment_methods: {
        credit_card_8897086: {
          source: "credit_card",
          brand: "visa",
          last_four: "8902",
          id: "credit_card_8897086"
        },
        gift_card_8245350: {
          source: "gift_card",
          balance: 60,
          id: "gift_card_8245350"
        },
        credit_card_8554680: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4336",
          id: "credit_card_8554680"
        },
        paypal_1621947: { source: "paypal", id: "paypal_1621947" }
      },
      orders: ["#W4923227"]
    },
    harper_santos_8115: {
      name: { first_name: "Harper", last_name: "Santos" },
      address: {
        address1: "195 Oak Street",
        address2: "Suite 791",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46237"
      },
      email: "harper.santos8390@example.com",
      payment_methods: {
        credit_card_7507679: {
          source: "credit_card",
          brand: "visa",
          last_four: "8643",
          id: "credit_card_7507679"
        },
        paypal_2870241: { source: "paypal", id: "paypal_2870241" }
      },
      orders: ["#W6629830", "#W4941028"]
    },
    james_johansson_2031: {
      name: { first_name: "James", last_name: "Johansson" },
      address: {
        address1: "242 Lakeview Drive",
        address2: "Suite 372",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28260"
      },
      email: "james.johansson4005@example.com",
      payment_methods: {
        credit_card_7827590: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9503",
          id: "credit_card_7827590"
        },
        gift_card_9136273: {
          source: "gift_card",
          balance: 88,
          id: "gift_card_9136273"
        }
      },
      orders: []
    },
    evelyn_wilson_8460: {
      name: { first_name: "Evelyn", last_name: "Wilson" },
      address: {
        address1: "664 Oak Street",
        address2: "Suite 956",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98148"
      },
      email: "evelyn.wilson8748@example.com",
      payment_methods: {
        gift_card_8931217: {
          source: "gift_card",
          balance: 64,
          id: "gift_card_8931217"
        }
      },
      orders: ["#W7381650", "#W6392164", "#W8042635"]
    },
    lucas_johnson_2067: {
      name: { first_name: "Lucas", last_name: "Johnson" },
      address: {
        address1: "350 Park Avenue",
        address2: "Suite 946",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98147"
      },
      email: "lucas.johnson1683@example.com",
      payment_methods: {
        credit_card_3956549: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9761",
          id: "credit_card_3956549"
        },
        gift_card_1870765: {
          source: "gift_card",
          balance: 40,
          id: "gift_card_1870765"
        }
      },
      orders: ["#W7016806"]
    },
    ivan_rossi_9776: {
      name: { first_name: "Ivan", last_name: "Rossi" },
      address: {
        address1: "653 Elm Avenue",
        address2: "Suite 531",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10056"
      },
      email: "ivan.rossi1946@example.com",
      payment_methods: {
        credit_card_8621045: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3448",
          id: "credit_card_8621045"
        },
        gift_card_9293123: {
          source: "gift_card",
          balance: 19,
          id: "gift_card_9293123"
        }
      },
      orders: ["#W7008160"]
    },
    james_lee_9638: {
      name: { first_name: "James", last_name: "Lee" },
      address: {
        address1: "935 Cedar Street",
        address2: "Suite 338",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43138"
      },
      email: "james.lee7204@example.com",
      payment_methods: {
        gift_card_8731546: {
          source: "gift_card",
          balance: 13,
          id: "gift_card_8731546"
        }
      },
      orders: ["#W7846319"]
    },
    sofia_hernandez_8513: {
      name: { first_name: "Sofia", last_name: "Hernandez" },
      address: {
        address1: "971 Park Avenue",
        address2: "Suite 556",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78219"
      },
      email: "sofia.hernandez7150@example.com",
      payment_methods: {
        credit_card_3753643: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2067",
          id: "credit_card_3753643"
        },
        gift_card_9111522: {
          source: "gift_card",
          balance: 32,
          id: "gift_card_9111522"
        }
      },
      orders: ["#W1090976"]
    },
    amelia_nguyen_7748: {
      name: { first_name: "Amelia", last_name: "Nguyen" },
      address: {
        address1: "874 River Road",
        address2: "Suite 727",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76124"
      },
      email: "amelia.nguyen6010@example.com",
      payment_methods: {
        paypal_3393717: { source: "paypal", id: "paypal_3393717" }
      },
      orders: ["#W7898533"]
    },
    evelyn_ito_7643: {
      name: { first_name: "Evelyn", last_name: "Ito" },
      address: {
        address1: "890 Elm Street",
        address2: "Suite 306",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92127"
      },
      email: "evelyn.ito2168@example.com",
      payment_methods: {
        paypal_5377635: { source: "paypal", id: "paypal_5377635" },
        credit_card_1461379: {
          source: "credit_card",
          brand: "visa",
          last_four: "5896",
          id: "credit_card_1461379"
        }
      },
      orders: ["#W6207110"]
    },
    ava_kim_8450: {
      name: { first_name: "Ava", last_name: "Kim" },
      address: {
        address1: "109 Sunset Drive",
        address2: "Suite 539",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75378"
      },
      email: "ava.kim5653@example.com",
      payment_methods: {
        gift_card_7781771: {
          source: "gift_card",
          balance: 23,
          id: "gift_card_7781771"
        }
      },
      orders: []
    },
    noah_patel_1311: {
      name: { first_name: "Noah", last_name: "Patel" },
      address: {
        address1: "229 Maple Drive",
        address2: "Suite 494",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91103"
      },
      email: "noah.patel9232@example.com",
      payment_methods: {
        paypal_3720127: { source: "paypal", id: "paypal_3720127" },
        credit_card_2869868: {
          source: "credit_card",
          brand: "visa",
          last_four: "9193",
          id: "credit_card_2869868"
        },
        gift_card_7733255: {
          source: "gift_card",
          balance: 68,
          id: "gift_card_7733255"
        }
      },
      orders: ["#W9784474", "#W1659844"]
    },
    omar_silva_9907: {
      name: { first_name: "Omar", last_name: "Silva" },
      address: {
        address1: "480 Cedar Street",
        address2: "Suite 404",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98141"
      },
      email: "omar.silva6106@example.com",
      payment_methods: {
        gift_card_5193172: {
          source: "gift_card",
          balance: 17,
          id: "gift_card_5193172"
        }
      },
      orders: ["#W6151519"]
    },
    juan_kim_6026: {
      name: { first_name: "Juan", last_name: "Kim" },
      address: {
        address1: "538 Spruce Street",
        address2: "Suite 567",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95120"
      },
      email: "juan.kim2574@example.com",
      payment_methods: {
        paypal_5061070: { source: "paypal", id: "paypal_5061070" }
      },
      orders: ["#W2002172", "#W5730905"]
    },
    mei_martin_4260: {
      name: { first_name: "Mei", last_name: "Martin" },
      address: {
        address1: "121 Cedar Avenue",
        address2: "Suite 971",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32124"
      },
      email: "mei.martin4637@example.com",
      payment_methods: {
        paypal_2299608: { source: "paypal", id: "paypal_2299608" }
      },
      orders: ["#W7017301", "#W3288665", "#W5564375"]
    },
    sophia_garcia_1101: {
      name: { first_name: "Sophia", last_name: "Garcia" },
      address: {
        address1: "197 Elm Street",
        address2: "Suite 737",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78263"
      },
      email: "sophia.garcia9791@example.com",
      payment_methods: {
        gift_card_9450778: {
          source: "gift_card",
          balance: 5,
          id: "gift_card_9450778"
        }
      },
      orders: ["#W8727985", "#W1023987"]
    },
    juan_sanchez_8249: {
      name: { first_name: "Juan", last_name: "Sanchez" },
      address: {
        address1: "281 Main Street",
        address2: "Suite 979",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20156"
      },
      email: "juan.sanchez3280@example.com",
      payment_methods: {
        paypal_2849300: { source: "paypal", id: "paypal_2849300" }
      },
      orders: ["#W6483628"]
    },
    evelyn_brown_7612: {
      name: { first_name: "Evelyn", last_name: "Brown" },
      address: {
        address1: "899 Highland Drive",
        address2: "Suite 515",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94148"
      },
      email: "evelyn.brown5837@example.com",
      payment_methods: {
        paypal_7053405: { source: "paypal", id: "paypal_7053405" }
      },
      orders: ["#W7647404"]
    },
    liam_thomas_7882: {
      name: { first_name: "Liam", last_name: "Thomas" },
      address: {
        address1: "629 Pine Lane",
        address2: "Suite 380",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85049"
      },
      email: "liam.thomas9081@example.com",
      payment_methods: {
        paypal_3650980: { source: "paypal", id: "paypal_3650980" },
        credit_card_3261838: {
          source: "credit_card",
          brand: "visa",
          last_four: "3194",
          id: "credit_card_3261838"
        }
      },
      orders: ["#W1654931", "#W8488728", "#W6397299", "#W6231698", "#W3295833"]
    },
    sophia_nguyen_2370: {
      name: { first_name: "Sophia", last_name: "Nguyen" },
      address: {
        address1: "464 Main Street",
        address2: "Suite 450",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20171"
      },
      email: "sophia.nguyen1498@example.com",
      payment_methods: {
        paypal_3738584: { source: "paypal", id: "paypal_3738584" }
      },
      orders: ["#W6619432", "#W3504269", "#W6070601"]
    },
    olivia_smith_8953: {
      name: { first_name: "Olivia", last_name: "Smith" },
      address: {
        address1: "915 Elm Street",
        address2: "Suite 995",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32177"
      },
      email: "olivia.smith9157@example.com",
      payment_methods: {
        paypal_2076152: { source: "paypal", id: "paypal_2076152" }
      },
      orders: ["#W1348609", "#W3794101"]
    },
    fatima_wilson_6873: {
      name: { first_name: "Fatima", last_name: "Wilson" },
      address: {
        address1: "788 Park Avenue",
        address2: "Suite 932",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78746"
      },
      email: "fatima.wilson5906@example.com",
      payment_methods: {
        credit_card_9557278: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9779",
          id: "credit_card_9557278"
        },
        paypal_7685859: { source: "paypal", id: "paypal_7685859" }
      },
      orders: ["#W7990410", "#W4556683", "#W1443906"]
    },
    james_kim_7213: {
      name: { first_name: "James", last_name: "Kim" },
      address: {
        address1: "579 Highland Drive",
        address2: "Suite 492",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92199"
      },
      email: "james.kim1995@example.com",
      payment_methods: {
        paypal_8963303: { source: "paypal", id: "paypal_8963303" }
      },
      orders: ["#W9154975", "#W3289292", "#W7284266", "#W9722559"]
    },
    yusuf_rossi_9620: {
      name: { first_name: "Yusuf", last_name: "Rossi" },
      address: {
        address1: "763 Broadway",
        address2: "Suite 135",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19122"
      },
      email: "yusuf.rossi7301@example.com",
      payment_methods: {
        credit_card_9513926: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2478",
          id: "credit_card_9513926"
        }
      },
      orders: ["#W6247578", "#W9711842", "#W4776164", "#W6679257", "#W2378156"]
    },
    olivia_taylor_7362: {
      name: { first_name: "Olivia", last_name: "Taylor" },
      address: {
        address1: "747 Lakeview Drive",
        address2: "Suite 547",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98125"
      },
      email: "olivia.taylor1481@example.com",
      payment_methods: {
        paypal_9468739: { source: "paypal", id: "paypal_9468739" },
        credit_card_8341168: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "8545",
          id: "credit_card_8341168"
        }
      },
      orders: []
    },
    raj_anderson_3167: {
      name: { first_name: "Raj", last_name: "Anderson" },
      address: {
        address1: "747 Spruce Street",
        address2: "Suite 125",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46207"
      },
      email: "raj.anderson6756@example.com",
      payment_methods: {
        gift_card_6662365: {
          source: "gift_card",
          balance: 59,
          id: "gift_card_6662365"
        }
      },
      orders: ["#W6378322"]
    },
    liam_silva_3628: {
      name: { first_name: "Liam", last_name: "Silva" },
      address: {
        address1: "904 Highland Drive",
        address2: "Suite 585",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95110"
      },
      email: "liam.silva6470@example.com",
      payment_methods: {
        paypal_6137664: { source: "paypal", id: "paypal_6137664" }
      },
      orders: ["#W8367567", "#W6072865"]
    },
    olivia_ito_3591: {
      name: { first_name: "Olivia", last_name: "Ito" },
      address: {
        address1: "570 Elm Avenue",
        address2: "Suite 175",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80218"
      },
      email: "olivia.ito5204@example.com",
      payment_methods: {
        gift_card_7794233: {
          source: "gift_card",
          balance: 56,
          id: "gift_card_7794233"
        },
        paypal_8049766: { source: "paypal", id: "paypal_8049766" },
        credit_card_9753331: {
          source: "credit_card",
          brand: "visa",
          last_four: "9182",
          id: "credit_card_9753331"
        }
      },
      orders: ["#W5866402", "#W5353646", "#W5442520", "#W7941031", "#W3657213"]
    },
    mia_jackson_2250: {
      name: { first_name: "Mia", last_name: "Jackson" },
      address: {
        address1: "816 Spruce Street",
        address2: "Suite 114",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46227"
      },
      email: "mia.jackson5798@example.com",
      payment_methods: {
        gift_card_5715854: {
          source: "gift_card",
          balance: 70,
          id: "gift_card_5715854"
        },
        paypal_2031016: { source: "paypal", id: "paypal_2031016" }
      },
      orders: ["#W7807323", "#W1205816", "#W6236251", "#W2618034"]
    },
    ivan_kim_7727: {
      name: { first_name: "Ivan", last_name: "Kim" },
      address: {
        address1: "712 Chestnut Street",
        address2: "Suite 103",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60636"
      },
      email: "ivan.kim1689@example.com",
      payment_methods: {
        credit_card_1920989: {
          source: "credit_card",
          brand: "visa",
          last_four: "6545",
          id: "credit_card_1920989"
        }
      },
      orders: ["#W6443279", "#W2493472"]
    },
    liam_wilson_3178: {
      name: { first_name: "Liam", last_name: "Wilson" },
      address: {
        address1: "112 Broadway",
        address2: "Suite 951",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85060"
      },
      email: "liam.wilson7017@example.com",
      payment_methods: {
        paypal_5515374: { source: "paypal", id: "paypal_5515374" }
      },
      orders: []
    },
    ava_nguyen_4072: {
      name: { first_name: "Ava", last_name: "Nguyen" },
      address: {
        address1: "895 Pine Lane",
        address2: "Suite 907",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28251"
      },
      email: "ava.nguyen1851@example.com",
      payment_methods: {
        paypal_3180577: { source: "paypal", id: "paypal_3180577" },
        credit_card_3975380: {
          source: "credit_card",
          brand: "visa",
          last_four: "3061",
          id: "credit_card_3975380"
        }
      },
      orders: ["#W8732376", "#W2601346"]
    },
    daiki_moore_8567: {
      name: { first_name: "Daiki", last_name: "Moore" },
      address: {
        address1: "139 Cedar Avenue",
        address2: "Suite 899",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85078"
      },
      email: "daiki.moore7228@example.com",
      payment_methods: {
        gift_card_2977513: {
          source: "gift_card",
          balance: 39,
          id: "gift_card_2977513"
        }
      },
      orders: ["#W8032761", "#W7766102", "#W3109038"]
    },
    ivan_santos_7021: {
      name: { first_name: "Ivan", last_name: "Santos" },
      address: {
        address1: "847 River Road",
        address2: "Suite 431",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10264"
      },
      email: "ivan.santos5925@example.com",
      payment_methods: {
        paypal_5543657: { source: "paypal", id: "paypal_5543657" },
        gift_card_1377853: {
          source: "gift_card",
          balance: 12,
          id: "gift_card_1377853"
        }
      },
      orders: ["#W5801125"]
    },
    mia_moore_8366: {
      name: { first_name: "Mia", last_name: "Moore" },
      address: {
        address1: "200 Oak Street",
        address2: "Suite 453",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94180"
      },
      email: "mia.moore8091@example.com",
      payment_methods: {
        credit_card_2641784: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2992",
          id: "credit_card_2641784"
        },
        paypal_5181300: { source: "paypal", id: "paypal_5181300" },
        gift_card_7471275: {
          source: "gift_card",
          balance: 70,
          id: "gift_card_7471275"
        }
      },
      orders: ["#W5544629", "#W3130288", "#W8377068"]
    },
    daiki_silva_5033: {
      name: { first_name: "Daiki", last_name: "Silva" },
      address: {
        address1: "866 Hillcrest Drive",
        address2: "Suite 737",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28268"
      },
      email: "daiki.silva2239@example.com",
      payment_methods: {
        paypal_2233507: { source: "paypal", id: "paypal_2233507" }
      },
      orders: ["#W6564160", "#W7142527", "#W1579160"]
    },
    raj_lee_3061: {
      name: { first_name: "Raj", last_name: "Lee" },
      address: {
        address1: "723 Hickory Lane",
        address2: "Suite 917",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75368"
      },
      email: "raj.lee6137@example.com",
      payment_methods: {
        paypal_4133936: { source: "paypal", id: "paypal_4133936" }
      },
      orders: ["#W9933266"]
    },
    fatima_muller_6713: {
      name: { first_name: "Fatima", last_name: "Muller" },
      address: {
        address1: "377 River Road",
        address2: "Suite 307",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60644"
      },
      email: "fatima.muller6448@example.com",
      payment_methods: {
        paypal_5541158: { source: "paypal", id: "paypal_5541158" }
      },
      orders: [
        "#W9962383",
        "#W6851636",
        "#W4160705",
        "#W2435638",
        "#W2040365",
        "#W3899829"
      ]
    },
    omar_kim_3528: {
      name: { first_name: "Omar", last_name: "Kim" },
      address: {
        address1: "542 Lakeview Drive",
        address2: "Suite 811",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32214"
      },
      email: "omar.kim8981@example.com",
      payment_methods: {
        gift_card_3749819: {
          source: "gift_card",
          balance: 91,
          id: "gift_card_3749819"
        },
        credit_card_3577130: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9843",
          id: "credit_card_3577130"
        }
      },
      orders: ["#W8557584", "#W1080318", "#W7111824"]
    },
    harper_brown_7363: {
      name: { first_name: "Harper", last_name: "Brown" },
      address: {
        address1: "723 Park Avenue",
        address2: "Suite 802",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76112"
      },
      email: "harper.brown3965@example.com",
      payment_methods: {
        paypal_2306935: { source: "paypal", id: "paypal_2306935" },
        credit_card_3240550: {
          source: "credit_card",
          brand: "visa",
          last_four: "3356",
          id: "credit_card_3240550"
        }
      },
      orders: ["#W1840144", "#W2693718", "#W2273069"]
    },
    mason_sanchez_7536: {
      name: { first_name: "Mason", last_name: "Sanchez" },
      address: {
        address1: "737 Elm Avenue",
        address2: "Suite 780",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78213"
      },
      email: "mason.sanchez2341@example.com",
      payment_methods: {
        gift_card_2647591: {
          source: "gift_card",
          balance: 85,
          id: "gift_card_2647591"
        }
      },
      orders: ["#W9469249", "#W9342124", "#W6209538"]
    },
    ava_khan_1840: {
      name: { first_name: "Ava", last_name: "Khan" },
      address: {
        address1: "137 Laurel Lane",
        address2: "Suite 525",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94171"
      },
      email: "ava.khan5983@example.com",
      payment_methods: {
        gift_card_7557546: {
          source: "gift_card",
          balance: 18,
          id: "gift_card_7557546"
        }
      },
      orders: ["#W1123136"]
    },
    emma_nguyen_6662: {
      name: { first_name: "Emma", last_name: "Nguyen" },
      address: {
        address1: "131 Cedar Street",
        address2: "Suite 325",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80221"
      },
      email: "emma.nguyen8892@example.com",
      payment_methods: {
        paypal_2499655: { source: "paypal", id: "paypal_2499655" }
      },
      orders: ["#W3754544", "#W2092674", "#W3906608", "#W9018868", "#W9397272"]
    },
    mei_kim_6875: {
      name: { first_name: "Mei", last_name: "Kim" },
      address: {
        address1: "578 Maple Drive",
        address2: "Suite 523",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94121"
      },
      email: "mei.kim7945@example.com",
      payment_methods: {
        gift_card_1841267: {
          source: "gift_card",
          balance: 4,
          id: "gift_card_1841267"
        }
      },
      orders: []
    },
    amelia_gonzalez_4098: {
      name: { first_name: "Amelia", last_name: "Gonzalez" },
      address: {
        address1: "722 Sunset Drive",
        address2: "Suite 670",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80245"
      },
      email: "amelia.gonzalez4271@example.com",
      payment_methods: {
        gift_card_2611937: {
          source: "gift_card",
          balance: 11,
          id: "gift_card_2611937"
        }
      },
      orders: ["#W7209932", "#W1762492"]
    },
    fatima_anderson_6252: {
      name: { first_name: "Fatima", last_name: "Anderson" },
      address: {
        address1: "541 Cedar Avenue",
        address2: "Suite 589",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78773"
      },
      email: "fatima.anderson8791@example.com",
      payment_methods: {
        paypal_8202738: { source: "paypal", id: "paypal_8202738" },
        credit_card_7668429: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4906",
          id: "credit_card_7668429"
        }
      },
      orders: ["#W5666460"]
    },
    anya_silva_8688: {
      name: { first_name: "Anya", last_name: "Silva" },
      address: {
        address1: "261 Spruce Street",
        address2: "Suite 470",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32221"
      },
      email: "anya.silva9408@example.com",
      payment_methods: {
        credit_card_8341551: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3688",
          id: "credit_card_8341551"
        }
      },
      orders: ["#W2570197"]
    },
    james_sanchez_3954: {
      name: { first_name: "James", last_name: "Sanchez" },
      address: {
        address1: "219 Park Avenue",
        address2: "Suite 437",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60623"
      },
      email: "james.sanchez6979@example.com",
      payment_methods: {
        paypal_1261484: { source: "paypal", id: "paypal_1261484" }
      },
      orders: ["#W7464385", "#W8499625", "#W1279004"]
    },
    yara_sanchez_9145: {
      name: { first_name: "Yara", last_name: "Sanchez" },
      address: {
        address1: "883 Pine Lane",
        address2: "Suite 823",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43097"
      },
      email: "yara.sanchez9547@example.com",
      payment_methods: {
        credit_card_5353742: {
          source: "credit_card",
          brand: "visa",
          last_four: "7423",
          id: "credit_card_5353742"
        }
      },
      orders: ["#W9102482", "#W6519831"]
    },
    isabella_garcia_7753: {
      name: { first_name: "Isabella", last_name: "Garcia" },
      address: {
        address1: "500 Maple Drive",
        address2: "Suite 379",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78275"
      },
      email: "isabella.garcia6540@example.com",
      payment_methods: {
        credit_card_2985263: {
          source: "credit_card",
          brand: "visa",
          last_four: "1658",
          id: "credit_card_2985263"
        },
        gift_card_6752724: {
          source: "gift_card",
          balance: 6,
          id: "gift_card_6752724"
        },
        credit_card_3644266: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "8963",
          id: "credit_card_3644266"
        }
      },
      orders: []
    },
    emma_rossi_6933: {
      name: { first_name: "Emma", last_name: "Rossi" },
      address: {
        address1: "478 Highland Drive",
        address2: "Suite 397",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43215"
      },
      email: "emma.rossi7853@example.com",
      payment_methods: {
        gift_card_2601062: {
          source: "gift_card",
          balance: 58,
          id: "gift_card_2601062"
        },
        credit_card_1278736: {
          source: "credit_card",
          brand: "visa",
          last_four: "6954",
          id: "credit_card_1278736"
        }
      },
      orders: ["#W4213437"]
    },
    anya_rossi_7776: {
      name: { first_name: "Anya", last_name: "Rossi" },
      address: {
        address1: "696 Oak Street",
        address2: "Suite 159",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10176"
      },
      email: "anya.rossi3136@example.com",
      payment_methods: {
        gift_card_2331379: {
          source: "gift_card",
          balance: 77,
          id: "gift_card_2331379"
        },
        credit_card_4307494: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4848",
          id: "credit_card_4307494"
        }
      },
      orders: []
    },
    lucas_davis_5124: {
      name: { first_name: "Lucas", last_name: "Davis" },
      address: {
        address1: "852 Oak Street",
        address2: "Suite 747",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32187"
      },
      email: "lucas.davis5911@example.com",
      payment_methods: {
        credit_card_5844220: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4393",
          id: "credit_card_5844220"
        }
      },
      orders: []
    },
    isabella_johnson_1272: {
      name: { first_name: "Isabella", last_name: "Johnson" },
      address: {
        address1: "513 River Road",
        address2: "Suite 768",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46215"
      },
      email: "isabella.johnson6797@example.com",
      payment_methods: {
        gift_card_5401084: {
          source: "gift_card",
          balance: 10,
          id: "gift_card_5401084"
        }
      },
      orders: ["#W7454537"]
    },
    mia_gonzalez_5269: {
      name: { first_name: "Mia", last_name: "Gonzalez" },
      address: {
        address1: "771 Broadway",
        address2: "Suite 214",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28216"
      },
      email: "mia.gonzalez7079@example.com",
      payment_methods: {
        gift_card_7000567: {
          source: "gift_card",
          balance: 1,
          id: "gift_card_7000567"
        }
      },
      orders: ["#W8991836"]
    },
    mason_lopez_8519: {
      name: { first_name: "Mason", last_name: "Lopez" },
      address: {
        address1: "330 Maple Drive",
        address2: "Suite 316",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28221"
      },
      email: "mason.lopez8921@example.com",
      payment_methods: {
        credit_card_2327218: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4629",
          id: "credit_card_2327218"
        }
      },
      orders: ["#W7752859", "#W9892169"]
    },
    juan_smith_3283: {
      name: { first_name: "Juan", last_name: "Smith" },
      address: {
        address1: "994 Highland Drive",
        address2: "Suite 536",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92138"
      },
      email: "juan.smith5371@example.com",
      payment_methods: {
        gift_card_9584904: {
          source: "gift_card",
          balance: 91,
          id: "gift_card_9584904"
        }
      },
      orders: []
    },
    yara_silva_7567: {
      name: { first_name: "Yara", last_name: "Silva" },
      address: {
        address1: "116 Laurel Lane",
        address2: "Suite 319",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77159"
      },
      email: "yara.silva2443@example.com",
      payment_methods: {
        gift_card_7252880: {
          source: "gift_card",
          balance: 56,
          id: "gift_card_7252880"
        }
      },
      orders: ["#W9810810", "#W9034102", "#W3964602", "#W3730488"]
    },
    emma_kim_1076: {
      name: { first_name: "Emma", last_name: "Kim" },
      address: {
        address1: "562 Elm Avenue",
        address2: "Suite 656",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46214"
      },
      email: "emma.kim7876@example.com",
      payment_methods: {
        gift_card_5402003: {
          source: "gift_card",
          balance: 91,
          id: "gift_card_5402003"
        }
      },
      orders: ["#W2768383", "#W9538924", "#W3698202", "#W4646940"]
    },
    ava_moore_4814: {
      name: { first_name: "Ava", last_name: "Moore" },
      address: {
        address1: "603 Maple Drive",
        address2: "Suite 859",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85032"
      },
      email: "ava.moore2450@example.com",
      payment_methods: {
        paypal_7478252: { source: "paypal", id: "paypal_7478252" }
      },
      orders: ["#W8331214", "#W8495163", "#W6257064", "#W9907310"]
    },
    daiki_sanchez_2422: {
      name: { first_name: "Daiki", last_name: "Sanchez" },
      address: {
        address1: "807 Spruce Street",
        address2: "Suite 108",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43240"
      },
      email: "daiki.sanchez7213@example.com",
      payment_methods: {
        paypal_5357282: { source: "paypal", id: "paypal_5357282" }
      },
      orders: []
    },
    chen_ahmed_3232: {
      name: { first_name: "Chen", last_name: "Ahmed" },
      address: {
        address1: "571 Broadway",
        address2: "Suite 486",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46210"
      },
      email: "chen.ahmed5266@example.com",
      payment_methods: {
        gift_card_1402922: {
          source: "gift_card",
          balance: 47,
          id: "gift_card_1402922"
        }
      },
      orders: ["#W1841226", "#W8268544"]
    },
    anya_brown_2024: {
      name: { first_name: "Anya", last_name: "Brown" },
      address: {
        address1: "391 Lakeview Drive",
        address2: "Suite 326",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10121"
      },
      email: "anya.brown8893@example.com",
      payment_methods: {
        credit_card_3414703: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9625",
          id: "credit_card_3414703"
        },
        paypal_5206520: { source: "paypal", id: "paypal_5206520" }
      },
      orders: ["#W2922433", "#W8883368", "#W1170711", "#W7533832", "#W1430028"]
    },
    emma_silva_1269: {
      name: { first_name: "Emma", last_name: "Silva" },
      address: {
        address1: "594 Park Avenue",
        address2: "Suite 236",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75217"
      },
      email: "emma.silva6593@example.com",
      payment_methods: {
        credit_card_4492026: {
          source: "credit_card",
          brand: "visa",
          last_four: "4628",
          id: "credit_card_4492026"
        }
      },
      orders: []
    },
    omar_anderson_5940: {
      name: { first_name: "Omar", last_name: "Anderson" },
      address: {
        address1: "157 Spruce Street",
        address2: "Suite 979",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85011"
      },
      email: "omar.anderson9999@example.com",
      payment_methods: {
        paypal_2055565: { source: "paypal", id: "paypal_2055565" }
      },
      orders: ["#W2091016"]
    },
    raj_davis_2615: {
      name: { first_name: "Raj", last_name: "Davis" },
      address: {
        address1: "185 River Road",
        address2: "Suite 809",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85050"
      },
      email: "raj.davis3587@example.com",
      payment_methods: {
        gift_card_8006222: {
          source: "gift_card",
          balance: 38,
          id: "gift_card_8006222"
        }
      },
      orders: ["#W5463717", "#W9894882"]
    },
    isabella_johansson_7408: {
      name: { first_name: "Isabella", last_name: "Johansson" },
      address: {
        address1: "289 Willow Lane",
        address2: "Suite 172",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60625"
      },
      email: "isabella.johansson1233@example.com",
      payment_methods: {
        paypal_8540436: { source: "paypal", id: "paypal_8540436" }
      },
      orders: ["#W6783532", "#W8882972", "#W3489690", "#W2591905"]
    },
    sophia_hernandez_2054: {
      name: { first_name: "Sophia", last_name: "Hernandez" },
      address: {
        address1: "318 Laurel Lane",
        address2: "Suite 297",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76197"
      },
      email: "sophia.hernandez3499@example.com",
      payment_methods: {
        gift_card_1139567: {
          source: "gift_card",
          balance: 75,
          id: "gift_card_1139567"
        }
      },
      orders: ["#W4614740", "#W1748126", "#W1326557"]
    },
    yara_johansson_1629: {
      name: { first_name: "Yara", last_name: "Johansson" },
      address: {
        address1: "748 Hillcrest Drive",
        address2: "Suite 504",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76114"
      },
      email: "yara.johansson3155@example.com",
      payment_methods: {
        credit_card_4582364: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "5736",
          id: "credit_card_4582364"
        }
      },
      orders: ["#W3372648", "#W9994227"]
    },
    emma_kim_5391: {
      name: { first_name: "Emma", last_name: "Kim" },
      address: {
        address1: "852 Park Avenue",
        address2: "Suite 172",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94142"
      },
      email: "emma.kim2129@example.com",
      payment_methods: {
        gift_card_8967157: {
          source: "gift_card",
          balance: 85,
          id: "gift_card_8967157"
        }
      },
      orders: ["#W6087266", "#W6018481"]
    },
    sofia_ito_5484: {
      name: { first_name: "Sofia", last_name: "Ito" },
      address: {
        address1: "118 Cedar Street",
        address2: "Suite 461",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19169"
      },
      email: "sofia.ito3877@example.com",
      payment_methods: {
        paypal_6882355: { source: "paypal", id: "paypal_6882355" }
      },
      orders: ["#W5257743", "#W7992925", "#W1514731"]
    },
    sofia_kovacs_7075: {
      name: { first_name: "Sofia", last_name: "Kovacs" },
      address: {
        address1: "546 Lakeview Drive",
        address2: "Suite 491",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19049"
      },
      email: "sofia.kovacs4505@example.com",
      payment_methods: {
        paypal_6840891: { source: "paypal", id: "paypal_6840891" }
      },
      orders: ["#W7736983", "#W9869592", "#W8562406", "#W5765741"]
    },
    emma_nguyen_5878: {
      name: { first_name: "Emma", last_name: "Nguyen" },
      address: {
        address1: "388 Lakeview Drive",
        address2: "Suite 184",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75302"
      },
      email: "emma.nguyen6944@example.com",
      payment_methods: {
        gift_card_7713234: {
          source: "gift_card",
          balance: 99,
          id: "gift_card_7713234"
        },
        credit_card_1392586: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3305",
          id: "credit_card_1392586"
        }
      },
      orders: ["#W5445067", "#W5809689"]
    },
    emma_santos_9753: {
      name: { first_name: "Emma", last_name: "Santos" },
      address: {
        address1: "463 Pine Lane",
        address2: "Suite 570",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78228"
      },
      email: "emma.santos7683@example.com",
      payment_methods: {
        credit_card_5869505: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6380",
          id: "credit_card_5869505"
        },
        gift_card_6023546: {
          source: "gift_card",
          balance: 36,
          id: "gift_card_6023546"
        }
      },
      orders: [
        "#W3113816",
        "#W9903153",
        "#W1620235",
        "#W2918688",
        "#W8160318",
        "#W1539823",
        "#W9655299"
      ]
    },
    anya_lee_8315: {
      name: { first_name: "Anya", last_name: "Lee" },
      address: {
        address1: "912 Elm Avenue",
        address2: "Suite 936",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78227"
      },
      email: "anya.lee3013@example.com",
      payment_methods: {
        paypal_3728317: { source: "paypal", id: "paypal_3728317" }
      },
      orders: ["#W3176007", "#W1335809", "#W2989580"]
    },
    evelyn_lopez_5487: {
      name: { first_name: "Evelyn", last_name: "Lopez" },
      address: {
        address1: "142 Chestnut Street",
        address2: "Suite 757",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92195"
      },
      email: "evelyn.lopez6910@example.com",
      payment_methods: {
        credit_card_3566337: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "8951",
          id: "credit_card_3566337"
        }
      },
      orders: ["#W1355800", "#W1890669", "#W3007862"]
    },
    raj_li_8594: {
      name: { first_name: "Raj", last_name: "Li" },
      address: {
        address1: "422 Elm Street",
        address2: "Suite 893",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20369"
      },
      email: "raj.li3320@example.com",
      payment_methods: {
        credit_card_3425145: {
          source: "credit_card",
          brand: "visa",
          last_four: "6063",
          id: "credit_card_3425145"
        }
      },
      orders: ["#W8935389"]
    },
    yusuf_gonzalez_8900: {
      name: { first_name: "Yusuf", last_name: "Gonzalez" },
      address: {
        address1: "285 Lakeview Drive",
        address2: "Suite 657",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91455"
      },
      email: "yusuf.gonzalez2399@example.com",
      payment_methods: {
        credit_card_7918119: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9928",
          id: "credit_card_7918119"
        },
        paypal_3022415: { source: "paypal", id: "paypal_3022415" }
      },
      orders: ["#W2806889", "#W2230795", "#W1679211"]
    },
    sofia_ito_7804: {
      name: { first_name: "Sofia", last_name: "Ito" },
      address: {
        address1: "264 River Road",
        address2: "Suite 392",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94125"
      },
      email: "sofia.ito7258@example.com",
      payment_methods: {
        credit_card_7039111: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "8089",
          id: "credit_card_7039111"
        },
        credit_card_7183597: {
          source: "credit_card",
          brand: "visa",
          last_four: "8566",
          id: "credit_card_7183597"
        }
      },
      orders: ["#W4825004", "#W6075915"]
    },
    sophia_lee_8294: {
      name: { first_name: "Sophia", last_name: "Lee" },
      address: {
        address1: "987 Lakeview Drive",
        address2: "Suite 196",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78254"
      },
      email: "sophia.lee4144@example.com",
      payment_methods: {
        gift_card_7803378: {
          source: "gift_card",
          balance: 65,
          id: "gift_card_7803378"
        },
        paypal_9905859: { source: "paypal", id: "paypal_9905859" }
      },
      orders: ["#W7366745"]
    },
    liam_li_5260: {
      name: { first_name: "Liam", last_name: "Li" },
      address: {
        address1: "205 Highland Drive",
        address2: "Suite 104",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94120"
      },
      email: "liam.li2557@example.com",
      payment_methods: {
        credit_card_7933535: {
          source: "credit_card",
          brand: "visa",
          last_four: "3867",
          id: "credit_card_7933535"
        }
      },
      orders: ["#W9653558", "#W8512927"]
    },
    daiki_li_8218: {
      name: { first_name: "Daiki", last_name: "Li" },
      address: {
        address1: "560 Main Street",
        address2: "Suite 402",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75201"
      },
      email: "daiki.li3093@example.com",
      payment_methods: {
        credit_card_1687024: {
          source: "credit_card",
          brand: "visa",
          last_four: "3665",
          id: "credit_card_1687024"
        },
        gift_card_5730441: {
          source: "gift_card",
          balance: 60,
          id: "gift_card_5730441"
        }
      },
      orders: ["#W6958840"]
    },
    sophia_davis_9653: {
      name: { first_name: "Sophia", last_name: "Davis" },
      address: {
        address1: "335 Chestnut Street",
        address2: "Suite 396",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28240"
      },
      email: "sophia.davis1718@example.com",
      payment_methods: {
        paypal_2723782: { source: "paypal", id: "paypal_2723782" }
      },
      orders: ["#W7273405"]
    },
    juan_martin_4740: {
      name: { first_name: "Juan", last_name: "Martin" },
      address: {
        address1: "200 River Road",
        address2: "Suite 928",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94102"
      },
      email: "juan.martin6980@example.com",
      payment_methods: {
        paypal_7603967: { source: "paypal", id: "paypal_7603967" }
      },
      orders: ["#W5815923"]
    },
    mason_ahmed_2061: {
      name: { first_name: "Mason", last_name: "Ahmed" },
      address: {
        address1: "871 Hickory Lane",
        address2: "Suite 687",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78739"
      },
      email: "mason.ahmed2802@example.com",
      payment_methods: {
        gift_card_2233321: {
          source: "gift_card",
          balance: 93,
          id: "gift_card_2233321"
        }
      },
      orders: ["#W2101159"]
    },
    harper_ito_4653: {
      name: { first_name: "Harper", last_name: "Ito" },
      address: {
        address1: "220 Laurel Lane",
        address2: "Suite 687",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80256"
      },
      email: "harper.ito2682@example.com",
      payment_methods: {
        paypal_1053133: { source: "paypal", id: "paypal_1053133" }
      },
      orders: ["#W5673917", "#W1941216"]
    },
    olivia_lopez_9494: {
      name: { first_name: "Olivia", last_name: "Lopez" },
      address: {
        address1: "180 Oak Street",
        address2: "Suite 373",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92107"
      },
      email: "olivia.lopez8783@example.com",
      payment_methods: {
        gift_card_6682391: {
          source: "gift_card",
          balance: 35,
          id: "gift_card_6682391"
        },
        credit_card_6044108: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6976",
          id: "credit_card_6044108"
        }
      },
      orders: ["#W8955613"]
    },
    evelyn_anderson_9102: {
      name: { first_name: "Evelyn", last_name: "Anderson" },
      address: {
        address1: "268 Broadway",
        address2: "Suite 151",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28257"
      },
      email: "evelyn.anderson6912@example.com",
      payment_methods: {
        gift_card_6765112: {
          source: "gift_card",
          balance: 82,
          id: "gift_card_6765112"
        },
        credit_card_8033789: {
          source: "credit_card",
          brand: "visa",
          last_four: "1829",
          id: "credit_card_8033789"
        }
      },
      orders: ["#W5931168"]
    },
    aarav_nguyen_7344: {
      name: { first_name: "Aarav", last_name: "Nguyen" },
      address: {
        address1: "918 Hickory Lane",
        address2: "Suite 613",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75268"
      },
      email: "aarav.nguyen1293@example.com",
      payment_methods: {
        gift_card_2742113: {
          source: "gift_card",
          balance: 22,
          id: "gift_card_2742113"
        },
        paypal_7859314: { source: "paypal", id: "paypal_7859314" }
      },
      orders: ["#W7728728", "#W2443586"]
    },
    juan_anderson_7655: {
      name: { first_name: "Juan", last_name: "Anderson" },
      address: {
        address1: "676 Sunset Drive",
        address2: "Suite 106",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94157"
      },
      email: "juan.anderson7744@example.com",
      payment_methods: {
        gift_card_5433808: {
          source: "gift_card",
          balance: 51,
          id: "gift_card_5433808"
        }
      },
      orders: []
    },
    harper_kim_2998: {
      name: { first_name: "Harper", last_name: "Kim" },
      address: {
        address1: "853 Broadway",
        address2: "Suite 947",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78222"
      },
      email: "harper.kim4003@example.com",
      payment_methods: {
        gift_card_5328393: {
          source: "gift_card",
          balance: 51,
          id: "gift_card_5328393"
        }
      },
      orders: ["#W2959713", "#W3433080", "#W7807988", "#W5030602", "#W8121088"]
    },
    james_martin_1500: {
      name: { first_name: "James", last_name: "Martin" },
      address: {
        address1: "153 Cedar Street",
        address2: "Suite 769",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92112"
      },
      email: "james.martin9857@example.com",
      payment_methods: {
        paypal_6661566: { source: "paypal", id: "paypal_6661566" },
        credit_card_6932154: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2067",
          id: "credit_card_6932154"
        },
        credit_card_7083997: {
          source: "credit_card",
          brand: "visa",
          last_four: "1826",
          id: "credit_card_7083997"
        }
      },
      orders: ["#W3043531", "#W3809933", "#W3529525"]
    },
    sofia_khan_9820: {
      name: { first_name: "Sofia", last_name: "Khan" },
      address: {
        address1: "256 Cedar Street",
        address2: "Suite 981",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43149"
      },
      email: "sofia.khan2628@example.com",
      payment_methods: {
        paypal_8955373: { source: "paypal", id: "paypal_8955373" }
      },
      orders: ["#W7532822"]
    },
    yara_muller_8652: {
      name: { first_name: "Yara", last_name: "Muller" },
      address: {
        address1: "575 Oak Street",
        address2: "Suite 866",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85041"
      },
      email: "yara.muller9246@example.com",
      payment_methods: {
        credit_card_3095586: {
          source: "credit_card",
          brand: "visa",
          last_four: "6918",
          id: "credit_card_3095586"
        }
      },
      orders: ["#W9384736", "#W5056519", "#W5995614", "#W8277957"]
    },
    lucas_johansson_1090: {
      name: { first_name: "Lucas", last_name: "Johansson" },
      address: {
        address1: "813 Oak Street",
        address2: "Suite 412",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94147"
      },
      email: "lucas.johansson7741@example.com",
      payment_methods: {
        credit_card_1864112: {
          source: "credit_card",
          brand: "visa",
          last_four: "9452",
          id: "credit_card_1864112"
        },
        credit_card_1814983: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3088",
          id: "credit_card_1814983"
        }
      },
      orders: ["#W5073920", "#W8379216"]
    },
    mia_anderson_7288: {
      name: { first_name: "Mia", last_name: "Anderson" },
      address: {
        address1: "296 Elm Street",
        address2: "Suite 262",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80298"
      },
      email: "mia.anderson7595@example.com",
      payment_methods: {
        paypal_5080503: { source: "paypal", id: "paypal_5080503" }
      },
      orders: []
    },
    omar_martin_3329: {
      name: { first_name: "Omar", last_name: "Martin" },
      address: {
        address1: "156 Lakeview Drive",
        address2: "Suite 923",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80244"
      },
      email: "omar.martin1276@example.com",
      payment_methods: {
        gift_card_6784145: {
          source: "gift_card",
          balance: 21,
          id: "gift_card_6784145"
        }
      },
      orders: ["#W7028924"]
    },
    liam_santos_5468: {
      name: { first_name: "Liam", last_name: "Santos" },
      address: {
        address1: "441 Hillcrest Drive",
        address2: "Suite 386",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78762"
      },
      email: "liam.santos7226@example.com",
      payment_methods: {
        credit_card_1055108: {
          source: "credit_card",
          brand: "visa",
          last_four: "3530",
          id: "credit_card_1055108"
        }
      },
      orders: ["#W6794581", "#W4011814"]
    },
    daiki_kim_3197: {
      name: { first_name: "Daiki", last_name: "Kim" },
      address: {
        address1: "110 Willow Lane",
        address2: "Suite 769",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28232"
      },
      email: "daiki.kim1307@example.com",
      payment_methods: {
        paypal_2299555: { source: "paypal", id: "paypal_2299555" }
      },
      orders: []
    },
    sophia_smith_8223: {
      name: { first_name: "Sophia", last_name: "Smith" },
      address: {
        address1: "138 River Road",
        address2: "Suite 534",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28204"
      },
      email: "sophia.smith9861@example.com",
      payment_methods: {
        paypal_6651356: { source: "paypal", id: "paypal_6651356" },
        gift_card_8630599: {
          source: "gift_card",
          balance: 78,
          id: "gift_card_8630599"
        }
      },
      orders: ["#W6760641"]
    },
    liam_thomas_8833: {
      name: { first_name: "Liam", last_name: "Thomas" },
      address: {
        address1: "994 Highland Drive",
        address2: "Suite 717",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20119"
      },
      email: "liam.thomas4271@example.com",
      payment_methods: {
        paypal_8229936: { source: "paypal", id: "paypal_8229936" },
        credit_card_5089597: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "1208",
          id: "credit_card_5089597"
        },
        credit_card_7287775: {
          source: "credit_card",
          brand: "visa",
          last_four: "6994",
          id: "credit_card_7287775"
        }
      },
      orders: ["#W3761872", "#W1129578", "#W8213163"]
    },
    sofia_hernandez_5364: {
      name: { first_name: "Sofia", last_name: "Hernandez" },
      address: {
        address1: "652 Laurel Lane",
        address2: "Suite 398",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98193"
      },
      email: "sofia.hernandez3039@example.com",
      payment_methods: {
        credit_card_7901829: {
          source: "credit_card",
          brand: "visa",
          last_four: "7312",
          id: "credit_card_7901829"
        }
      },
      orders: ["#W3561391", "#W6876713", "#W9609649", "#W3947049"]
    },
    harper_johansson_2663: {
      name: { first_name: "Harper", last_name: "Johansson" },
      address: {
        address1: "490 River Road",
        address2: "Suite 486",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80281"
      },
      email: "harper.johansson4006@example.com",
      payment_methods: {
        paypal_4820484: { source: "paypal", id: "paypal_4820484" }
      },
      orders: [
        "#W3525030",
        "#W2912646",
        "#W3955289",
        "#W3282177",
        "#W9163472",
        "#W4866703",
        "#W4720269",
        "#W1780552",
        "#W9677982"
      ]
    },
    lei_hernandez_8500: {
      name: { first_name: "Lei", last_name: "Hernandez" },
      address: {
        address1: "196 Main Street",
        address2: "Suite 800",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43222"
      },
      email: "lei.hernandez7247@example.com",
      payment_methods: {
        gift_card_5245016: {
          source: "gift_card",
          balance: 31,
          id: "gift_card_5245016"
        }
      },
      orders: ["#W2982823", "#W6146740", "#W3101067"]
    },
    daiki_jackson_4362: {
      name: { first_name: "Daiki", last_name: "Jackson" },
      address: {
        address1: "616 Spruce Street",
        address2: "Suite 737",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80284"
      },
      email: "daiki.jackson9202@example.com",
      payment_methods: {
        gift_card_9164233: {
          source: "gift_card",
          balance: 61,
          id: "gift_card_9164233"
        }
      },
      orders: ["#W8306539"]
    },
    mia_johansson_8911: {
      name: { first_name: "Mia", last_name: "Johansson" },
      address: {
        address1: "819 Hillcrest Drive",
        address2: "Suite 268",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32129"
      },
      email: "mia.johansson5744@example.com",
      payment_methods: {
        gift_card_4061948: {
          source: "gift_card",
          balance: 46,
          id: "gift_card_4061948"
        }
      },
      orders: []
    },
    anya_kim_6731: {
      name: { first_name: "Anya", last_name: "Kim" },
      address: {
        address1: "584 Main Street",
        address2: "Suite 933",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80218"
      },
      email: "anya.kim9008@example.com",
      payment_methods: {
        paypal_5023612: { source: "paypal", id: "paypal_5023612" }
      },
      orders: ["#W9801796"]
    },
    mia_santos_8853: {
      name: { first_name: "Mia", last_name: "Santos" },
      address: {
        address1: "905 Chestnut Street",
        address2: "Suite 162",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19185"
      },
      email: "mia.santos9063@example.com",
      payment_methods: {
        gift_card_6585052: {
          source: "gift_card",
          balance: 89,
          id: "gift_card_6585052"
        }
      },
      orders: []
    },
    aarav_khan_2797: {
      name: { first_name: "Aarav", last_name: "Khan" },
      address: {
        address1: "696 Hillcrest Drive",
        address2: "Suite 804",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19066"
      },
      email: "aarav.khan8893@example.com",
      payment_methods: {
        gift_card_5462474: {
          source: "gift_card",
          balance: 14,
          id: "gift_card_5462474"
        },
        paypal_6627442: { source: "paypal", id: "paypal_6627442" }
      },
      orders: ["#W5497052"]
    },
    noah_sanchez_2690: {
      name: { first_name: "Noah", last_name: "Sanchez" },
      address: {
        address1: "297 Highland Drive",
        address2: "Suite 550",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20056"
      },
      email: "noah.sanchez7461@example.com",
      payment_methods: {
        gift_card_9909795: {
          source: "gift_card",
          balance: 31,
          id: "gift_card_9909795"
        }
      },
      orders: ["#W8645374", "#W4864669", "#W7293142"]
    },
    yusuf_lee_5921: {
      name: { first_name: "Yusuf", last_name: "Lee" },
      address: {
        address1: "159 Cedar Street",
        address2: "Suite 525",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75379"
      },
      email: "yusuf.lee4349@example.com",
      payment_methods: {
        paypal_2785678: { source: "paypal", id: "paypal_2785678" }
      },
      orders: ["#W3631991"]
    },
    yara_brown_1051: {
      name: { first_name: "Yara", last_name: "Brown" },
      address: {
        address1: "786 Cedar Street",
        address2: "Suite 538",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90027"
      },
      email: "yara.brown4024@example.com",
      payment_methods: {
        gift_card_3576760: {
          source: "gift_card",
          balance: 3,
          id: "gift_card_3576760"
        },
        credit_card_6440634: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3962",
          id: "credit_card_6440634"
        }
      },
      orders: []
    },
    daiki_johansson_4856: {
      name: { first_name: "Daiki", last_name: "Johansson" },
      address: {
        address1: "339 Hickory Lane",
        address2: "Suite 945",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46248"
      },
      email: "daiki.johansson8388@example.com",
      payment_methods: {
        paypal_5830506: { source: "paypal", id: "paypal_5830506" }
      },
      orders: ["#W4306096", "#W4680317"]
    },
    isabella_anderson_9894: {
      name: { first_name: "Isabella", last_name: "Anderson" },
      address: {
        address1: "444 Highland Drive",
        address2: "Suite 394",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46225"
      },
      email: "isabella.anderson5665@example.com",
      payment_methods: {
        paypal_8024442: { source: "paypal", id: "paypal_8024442" },
        gift_card_7535421: {
          source: "gift_card",
          balance: 66,
          id: "gift_card_7535421"
        }
      },
      orders: []
    },
    liam_lopez_7019: {
      name: { first_name: "Liam", last_name: "Lopez" },
      address: {
        address1: "380 Laurel Lane",
        address2: "Suite 960",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75388"
      },
      email: "liam.lopez8056@example.com",
      payment_methods: {
        gift_card_8483518: {
          source: "gift_card",
          balance: 21,
          id: "gift_card_8483518"
        }
      },
      orders: ["#W2000719", "#W7345822", "#W7555783"]
    },
    liam_li_8526: {
      name: { first_name: "Liam", last_name: "Li" },
      address: {
        address1: "638 Hickory Lane",
        address2: "Suite 502",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28226"
      },
      email: "liam.li8523@example.com",
      payment_methods: {
        paypal_9619477: { source: "paypal", id: "paypal_9619477" },
        gift_card_5427896: {
          source: "gift_card",
          balance: 11,
          id: "gift_card_5427896"
        }
      },
      orders: ["#W4931754", "#W8838515", "#W1130240"]
    },
    raj_santos_9079: {
      name: { first_name: "Raj", last_name: "Santos" },
      address: {
        address1: "863 Lakeview Drive",
        address2: "Suite 424",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98157"
      },
      email: "raj.santos4322@example.com",
      payment_methods: {
        paypal_2417743: { source: "paypal", id: "paypal_2417743" }
      },
      orders: ["#W4680753", "#W1630030"]
    },
    ethan_johnson_5450: {
      name: { first_name: "Ethan", last_name: "Johnson" },
      address: {
        address1: "392 Main Street",
        address2: "Suite 730",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10021"
      },
      email: "ethan.johnson4052@example.com",
      payment_methods: {
        gift_card_8545954: {
          source: "gift_card",
          balance: 47,
          id: "gift_card_8545954"
        }
      },
      orders: ["#W4250290", "#W9631970"]
    },
    emma_martin_7942: {
      name: { first_name: "Emma", last_name: "Martin" },
      address: {
        address1: "758 Lakeview Drive",
        address2: "Suite 691",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92185"
      },
      email: "emma.martin8719@example.com",
      payment_methods: {
        gift_card_4961843: {
          source: "gift_card",
          balance: 48,
          id: "gift_card_4961843"
        }
      },
      orders: []
    },
    harper_kovacs_7861: {
      name: { first_name: "Harper", last_name: "Kovacs" },
      address: {
        address1: "362 Broadway",
        address2: "Suite 219",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94145"
      },
      email: "harper.kovacs6946@example.com",
      payment_methods: {
        paypal_3246095: { source: "paypal", id: "paypal_3246095" }
      },
      orders: ["#W7775097", "#W5955464", "#W8904134"]
    },
    daiki_kim_2165: {
      name: { first_name: "Daiki", last_name: "Kim" },
      address: {
        address1: "554 Main Street",
        address2: "Suite 638",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80298"
      },
      email: "daiki.kim7376@example.com",
      payment_methods: {
        gift_card_9919420: {
          source: "gift_card",
          balance: 11,
          id: "gift_card_9919420"
        }
      },
      orders: ["#W4824466"]
    },
    daiki_muller_5243: {
      name: { first_name: "Daiki", last_name: "Muller" },
      address: {
        address1: "705 Cedar Street",
        address2: "Suite 568",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10188"
      },
      email: "daiki.muller3868@example.com",
      payment_methods: {
        gift_card_8620752: {
          source: "gift_card",
          balance: 90,
          id: "gift_card_8620752"
        }
      },
      orders: []
    },
    fatima_li_8519: {
      name: { first_name: "Fatima", last_name: "Li" },
      address: {
        address1: "509 Broadway",
        address2: "Suite 417",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94180"
      },
      email: "fatima.li2845@example.com",
      payment_methods: {
        gift_card_4220746: {
          source: "gift_card",
          balance: 47,
          id: "gift_card_4220746"
        }
      },
      orders: ["#W5267498"]
    },
    harper_kovacs_9747: {
      name: { first_name: "Harper", last_name: "Kovacs" },
      address: {
        address1: "859 Chestnut Street",
        address2: "Suite 840",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10206"
      },
      email: "harper.kovacs6209@example.com",
      payment_methods: {
        gift_card_5087631: {
          source: "gift_card",
          balance: 80,
          id: "gift_card_5087631"
        }
      },
      orders: ["#W3876856", "#W6221400"]
    },
    liam_muller_2272: {
      name: { first_name: "Liam", last_name: "Muller" },
      address: {
        address1: "421 Chestnut Street",
        address2: "Suite 191",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60642"
      },
      email: "liam.muller1860@example.com",
      payment_methods: {
        credit_card_7598260: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3344",
          id: "credit_card_7598260"
        },
        paypal_3976765: { source: "paypal", id: "paypal_3976765" },
        gift_card_5437583: {
          source: "gift_card",
          balance: 80,
          id: "gift_card_5437583"
        }
      },
      orders: ["#W6818211"]
    },
    sophia_patel_6833: {
      name: { first_name: "Sophia", last_name: "Patel" },
      address: {
        address1: "624 Cedar Avenue",
        address2: "Suite 554",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76169"
      },
      email: "sophia.patel9841@example.com",
      payment_methods: {
        credit_card_6017489: {
          source: "credit_card",
          brand: "visa",
          last_four: "8025",
          id: "credit_card_6017489"
        },
        credit_card_6419343: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "1639",
          id: "credit_card_6419343"
        }
      },
      orders: ["#W2923184", "#W7905419"]
    },
    noah_li_2316: {
      name: { first_name: "Noah", last_name: "Li" },
      address: {
        address1: "332 Hillcrest Drive",
        address2: "Suite 437",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19019"
      },
      email: "noah.li7327@example.com",
      payment_methods: {
        credit_card_4467209: {
          source: "credit_card",
          brand: "visa",
          last_four: "5915",
          id: "credit_card_4467209"
        }
      },
      orders: ["#W8553554", "#W6126711"]
    },
    isabella_santos_1643: {
      name: { first_name: "Isabella", last_name: "Santos" },
      address: {
        address1: "474 Chestnut Street",
        address2: "Suite 601",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10020"
      },
      email: "isabella.santos9317@example.com",
      payment_methods: {
        credit_card_4056740: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4971",
          id: "credit_card_4056740"
        }
      },
      orders: ["#W9527030", "#W1654332", "#W9667707"]
    },
    evelyn_moore_6558: {
      name: { first_name: "Evelyn", last_name: "Moore" },
      address: {
        address1: "467 Willow Lane",
        address2: "Suite 184",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19019"
      },
      email: "evelyn.moore7564@example.com",
      payment_methods: {
        gift_card_6321992: {
          source: "gift_card",
          balance: 45,
          id: "gift_card_6321992"
        }
      },
      orders: ["#W9958106", "#W4308578"]
    },
    isabella_kim_3697: {
      name: { first_name: "Isabella", last_name: "Kim" },
      address: {
        address1: "658 Hickory Lane",
        address2: "Suite 515",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92183"
      },
      email: "isabella.kim5989@example.com",
      payment_methods: {
        gift_card_8486944: {
          source: "gift_card",
          balance: 23,
          id: "gift_card_8486944"
        },
        paypal_5870751: { source: "paypal", id: "paypal_5870751" }
      },
      orders: []
    },
    noah_patel_6952: {
      name: { first_name: "Noah", last_name: "Patel" },
      address: {
        address1: "224 Elm Street",
        address2: "Suite 491",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10108"
      },
      email: "noah.patel1792@example.com",
      payment_methods: {
        paypal_3169710: { source: "paypal", id: "paypal_3169710" }
      },
      orders: ["#W1845024", "#W7043598", "#W6111398"]
    },
    anya_jackson_7061: {
      name: { first_name: "Anya", last_name: "Jackson" },
      address: {
        address1: "387 Hillcrest Drive",
        address2: "Suite 659",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78252"
      },
      email: "anya.jackson9742@example.com",
      payment_methods: {
        gift_card_6880042: {
          source: "gift_card",
          balance: 15,
          id: "gift_card_6880042"
        }
      },
      orders: []
    },
    evelyn_patel_8882: {
      name: { first_name: "Evelyn", last_name: "Patel" },
      address: {
        address1: "829 Chestnut Street",
        address2: "Suite 252",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28262"
      },
      email: "evelyn.patel2010@example.com",
      payment_methods: {
        paypal_3704667: { source: "paypal", id: "paypal_3704667" }
      },
      orders: ["#W3927847", "#W6385395", "#W9158156", "#W3561024"]
    },
    james_johnson_9321: {
      name: { first_name: "James", last_name: "Johnson" },
      address: {
        address1: "593 Cedar Avenue",
        address2: "Suite 826",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60625"
      },
      email: "james.johnson7869@example.com",
      payment_methods: {
        credit_card_4998749: {
          source: "credit_card",
          brand: "visa",
          last_four: "2429",
          id: "credit_card_4998749"
        }
      },
      orders: ["#W1006327", "#W3723163", "#W7836908", "#W6266831"]
    },
    lucas_brown_6720: {
      name: { first_name: "Lucas", last_name: "Brown" },
      address: {
        address1: "921 Park Avenue",
        address2: "Suite 892",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60612"
      },
      email: "lucas.brown9344@example.com",
      payment_methods: {
        credit_card_2112420: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "1276",
          id: "credit_card_2112420"
        }
      },
      orders: ["#W6239298", "#W8660475", "#W1154986", "#W9218746", "#W4860251"]
    },
    chen_taylor_6919: {
      name: { first_name: "Chen", last_name: "Taylor" },
      address: {
        address1: "123 River Road",
        address2: "Suite 841",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78272"
      },
      email: "chen.taylor8995@example.com",
      payment_methods: {
        gift_card_9563562: {
          source: "gift_card",
          balance: 82,
          id: "gift_card_9563562"
        }
      },
      orders: ["#W4111999", "#W4633848", "#W2297062"]
    },
    mei_ahmed_5058: {
      name: { first_name: "Mei", last_name: "Ahmed" },
      address: {
        address1: "833 Hickory Lane",
        address2: "Suite 999",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43197"
      },
      email: "mei.ahmed5231@example.com",
      payment_methods: {
        paypal_7160322: { source: "paypal", id: "paypal_7160322" }
      },
      orders: ["#W2631563", "#W9931224"]
    },
    lei_johansson_7574: {
      name: { first_name: "Lei", last_name: "Johansson" },
      address: {
        address1: "397 Spruce Street",
        address2: "Suite 216",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80238"
      },
      email: "lei.johansson4954@example.com",
      payment_methods: {
        credit_card_1457424: {
          source: "credit_card",
          brand: "visa",
          last_four: "7557",
          id: "credit_card_1457424"
        }
      },
      orders: []
    },
    james_kovacs_9247: {
      name: { first_name: "James", last_name: "Kovacs" },
      address: {
        address1: "518 Main Street",
        address2: "Suite 155",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95190"
      },
      email: "james.kovacs7629@example.com",
      payment_methods: {
        gift_card_2582853: {
          source: "gift_card",
          balance: 72,
          id: "gift_card_2582853"
        },
        paypal_1443389: { source: "paypal", id: "paypal_1443389" }
      },
      orders: ["#W5362037"]
    },
    mohamed_smith_9224: {
      name: { first_name: "Mohamed", last_name: "Smith" },
      address: {
        address1: "372 Main Street",
        address2: "Suite 578",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77252"
      },
      email: "mohamed.smith3152@example.com",
      payment_methods: {
        gift_card_9832062: {
          source: "gift_card",
          balance: 64,
          id: "gift_card_9832062"
        },
        credit_card_7801956: {
          source: "credit_card",
          brand: "visa",
          last_four: "7970",
          id: "credit_card_7801956"
        },
        paypal_3684705: { source: "paypal", id: "paypal_3684705" }
      },
      orders: ["#W7808613", "#W4125188"]
    },
    mia_moore_7778: {
      name: { first_name: "Mia", last_name: "Moore" },
      address: {
        address1: "621 Elm Street",
        address2: "Suite 356",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46245"
      },
      email: "mia.moore9541@example.com",
      payment_methods: {
        gift_card_7610276: {
          source: "gift_card",
          balance: 4,
          id: "gift_card_7610276"
        },
        paypal_2720658: { source: "paypal", id: "paypal_2720658" }
      },
      orders: ["#W9427138"]
    },
    omar_anderson_3203: {
      name: { first_name: "Omar", last_name: "Anderson" },
      address: {
        address1: "845 Willow Lane",
        address2: "Suite 906",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19031"
      },
      email: "omar.anderson7675@example.com",
      payment_methods: {
        credit_card_4190576: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4300",
          id: "credit_card_4190576"
        },
        paypal_6213278: { source: "paypal", id: "paypal_6213278" }
      },
      orders: ["#W6067464"]
    },
    ava_silva_2543: {
      name: { first_name: "Ava", last_name: "Silva" },
      address: {
        address1: "290 Cedar Avenue",
        address2: "Suite 120",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78706"
      },
      email: "ava.silva7586@example.com",
      payment_methods: {
        credit_card_3451690: {
          source: "credit_card",
          brand: "visa",
          last_four: "7848",
          id: "credit_card_3451690"
        }
      },
      orders: ["#W8074062"]
    },
    yusuf_hernandez_5411: {
      name: { first_name: "Yusuf", last_name: "Hernandez" },
      address: {
        address1: "474 Broadway",
        address2: "Suite 628",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43223"
      },
      email: "yusuf.hernandez9721@example.com",
      payment_methods: {
        paypal_6753664: { source: "paypal", id: "paypal_6753664" }
      },
      orders: ["#W9978601", "#W4817567"]
    },
    chen_johnson_4204: {
      name: { first_name: "Chen", last_name: "Johnson" },
      address: {
        address1: "503 Elm Avenue",
        address2: "Suite 641",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77004"
      },
      email: "chen.johnson3889@example.com",
      payment_methods: {
        paypal_3742148: { source: "paypal", id: "paypal_3742148" },
        gift_card_3406421: {
          source: "gift_card",
          balance: 79,
          id: "gift_card_3406421"
        }
      },
      orders: ["#W5797164", "#W5061109", "#W3973757"]
    },
    mia_sanchez_3401: {
      name: { first_name: "Mia", last_name: "Sanchez" },
      address: {
        address1: "615 Cedar Avenue",
        address2: "Suite 968",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98179"
      },
      email: "mia.sanchez1556@example.com",
      payment_methods: {
        gift_card_3488934: {
          source: "gift_card",
          balance: 57,
          id: "gift_card_3488934"
        },
        paypal_9064553: { source: "paypal", id: "paypal_9064553" }
      },
      orders: ["#W4096800", "#W9537686", "#W7170967", "#W9279351"]
    },
    mia_garcia_4516: {
      name: { first_name: "Mia", last_name: "Garcia" },
      address: {
        address1: "537 Main Street",
        address2: "Suite 572",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46229"
      },
      email: "mia.garcia2723@example.com",
      payment_methods: {
        paypal_9497703: { source: "paypal", id: "paypal_9497703" },
        credit_card_3124723: {
          source: "credit_card",
          brand: "visa",
          last_four: "7285",
          id: "credit_card_3124723"
        }
      },
      orders: ["#W5490111", "#W7387996"]
    },
    noah_wilson_6623: {
      name: { first_name: "Noah", last_name: "Wilson" },
      address: {
        address1: "163 Elm Street",
        address2: "Suite 714",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43134"
      },
      email: "noah.wilson7285@example.com",
      payment_methods: {
        credit_card_3163940: {
          source: "credit_card",
          brand: "visa",
          last_four: "7551",
          id: "credit_card_3163940"
        },
        credit_card_6346500: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2231",
          id: "credit_card_6346500"
        }
      },
      orders: ["#W9288362", "#W5791505"]
    },
    sofia_ahmed_9514: {
      name: { first_name: "Sofia", last_name: "Ahmed" },
      address: {
        address1: "904 Hillcrest Drive",
        address2: "Suite 499",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90819"
      },
      email: "sofia.ahmed2872@example.com",
      payment_methods: {
        gift_card_6117300: {
          source: "gift_card",
          balance: 1,
          id: "gift_card_6117300"
        }
      },
      orders: ["#W2002395", "#W4806309"]
    },
    daiki_moore_2077: {
      name: { first_name: "Daiki", last_name: "Moore" },
      address: {
        address1: "682 Highland Drive",
        address2: "Suite 383",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28226"
      },
      email: "daiki.moore4201@example.com",
      payment_methods: {
        credit_card_9952746: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "7978",
          id: "credit_card_9952746"
        },
        credit_card_2503656: {
          source: "credit_card",
          brand: "visa",
          last_four: "3684",
          id: "credit_card_2503656"
        }
      },
      orders: ["#W9956813"]
    },
    yara_moore_6466: {
      name: { first_name: "Yara", last_name: "Moore" },
      address: {
        address1: "485 Lakeview Drive",
        address2: "Suite 839",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92162"
      },
      email: "yara.moore6859@example.com",
      payment_methods: {
        paypal_3473552: { source: "paypal", id: "paypal_3473552" },
        credit_card_7161839: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "8254",
          id: "credit_card_7161839"
        }
      },
      orders: ["#W8336711", "#W5791782", "#W1605168"]
    },
    raj_smith_7423: {
      name: { first_name: "Raj", last_name: "Smith" },
      address: {
        address1: "603 Sunset Drive",
        address2: "Suite 202",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20174"
      },
      email: "raj.smith2661@example.com",
      payment_methods: {
        credit_card_5903671: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9718",
          id: "credit_card_5903671"
        }
      },
      orders: ["#W4512389", "#W8704143"]
    },
    ava_kovacs_3448: {
      name: { first_name: "Ava", last_name: "Kovacs" },
      address: {
        address1: "993 Laurel Lane",
        address2: "Suite 185",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85052"
      },
      email: "ava.kovacs4827@example.com",
      payment_methods: {
        credit_card_9699699: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3598",
          id: "credit_card_9699699"
        },
        paypal_7443913: { source: "paypal", id: "paypal_7443913" }
      },
      orders: ["#W4184032", "#W6344370"]
    },
    mia_johansson_7000: {
      name: { first_name: "Mia", last_name: "Johansson" },
      address: {
        address1: "734 Oak Street",
        address2: "Suite 397",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78280"
      },
      email: "mia.johansson6766@example.com",
      payment_methods: {
        credit_card_6706014: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2181",
          id: "credit_card_6706014"
        },
        gift_card_8883122: {
          source: "gift_card",
          balance: 67,
          id: "gift_card_8883122"
        }
      },
      orders: ["#W8346517"]
    },
    noah_garcia_8073: {
      name: { first_name: "Noah", last_name: "Garcia" },
      address: {
        address1: "310 Broadway",
        address2: "Suite 260",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91042"
      },
      email: "noah.garcia9427@example.com",
      payment_methods: {
        credit_card_9451898: {
          source: "credit_card",
          brand: "visa",
          last_four: "1992",
          id: "credit_card_9451898"
        }
      },
      orders: []
    },
    fatima_brown_2588: {
      name: { first_name: "Fatima", last_name: "Brown" },
      address: {
        address1: "699 Hillcrest Drive",
        address2: "Suite 939",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94132"
      },
      email: "fatima.brown8196@example.com",
      payment_methods: {
        paypal_8445813: { source: "paypal", id: "paypal_8445813" }
      },
      orders: ["#W8008214"]
    },
    sophia_thomas_5301: {
      name: { first_name: "Sophia", last_name: "Thomas" },
      address: {
        address1: "963 Lakeview Drive",
        address2: "Suite 696",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75396"
      },
      email: "sophia.thomas1364@example.com",
      payment_methods: {
        credit_card_7326294: {
          source: "credit_card",
          brand: "visa",
          last_four: "9858",
          id: "credit_card_7326294"
        },
        paypal_5297429: { source: "paypal", id: "paypal_5297429" },
        gift_card_9178183: {
          source: "gift_card",
          balance: 66,
          id: "gift_card_9178183"
        },
        credit_card_1034663: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2378",
          id: "credit_card_1034663"
        }
      },
      orders: ["#W4862767", "#W1867876"]
    },
    lucas_santos_6600: {
      name: { first_name: "Lucas", last_name: "Santos" },
      address: {
        address1: "986 Lakeview Drive",
        address2: "Suite 237",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80239"
      },
      email: "lucas.santos4998@example.com",
      payment_methods: {
        paypal_3820631: { source: "paypal", id: "paypal_3820631" }
      },
      orders: ["#W1588712", "#W7895761"]
    },
    chen_lopez_3345: {
      name: { first_name: "Chen", last_name: "Lopez" },
      address: {
        address1: "720 Lakeview Drive",
        address2: "Suite 785",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98155"
      },
      email: "chen.lopez1681@example.com",
      payment_methods: {
        paypal_2833385: { source: "paypal", id: "paypal_2833385" }
      },
      orders: ["#W9360566", "#W1790752"]
    },
    olivia_lopez_3865: {
      name: { first_name: "Olivia", last_name: "Lopez" },
      address: {
        address1: "310 Laurel Lane",
        address2: "Suite 480",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76171"
      },
      email: "olivia.lopez4535@example.com",
      payment_methods: {
        gift_card_7711863: {
          source: "gift_card",
          balance: 44,
          id: "gift_card_7711863"
        }
      },
      orders: ["#W9319364", "#W9373487", "#W2692684", "#W5481803", "#W7449508"]
    },
    ethan_moore_3587: {
      name: { first_name: "Ethan", last_name: "Moore" },
      address: {
        address1: "102 Elm Street",
        address2: "Suite 496",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90651"
      },
      email: "ethan.moore4935@example.com",
      payment_methods: {
        credit_card_6173085: {
          source: "credit_card",
          brand: "visa",
          last_four: "4491",
          id: "credit_card_6173085"
        }
      },
      orders: ["#W3035044", "#W7584328", "#W6353188", "#W7156413"]
    },
    aarav_thomas_2711: {
      name: { first_name: "Aarav", last_name: "Thomas" },
      address: {
        address1: "422 Oak Street",
        address2: "Suite 149",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32175"
      },
      email: "aarav.thomas4351@example.com",
      payment_methods: {
        gift_card_6253568: {
          source: "gift_card",
          balance: 65,
          id: "gift_card_6253568"
        }
      },
      orders: ["#W5158064", "#W9767156", "#W9833379"]
    },
    sofia_moore_9773: {
      name: { first_name: "Sofia", last_name: "Moore" },
      address: {
        address1: "181 Elm Street",
        address2: "Suite 178",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20030"
      },
      email: "sofia.moore4274@example.com",
      payment_methods: {
        credit_card_1893409: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4061",
          id: "credit_card_1893409"
        }
      },
      orders: ["#W3338814", "#W2782461", "#W6386665", "#W8808917", "#W1812830"]
    },
    mason_li_6934: {
      name: { first_name: "Mason", last_name: "Li" },
      address: {
        address1: "773 Park Avenue",
        address2: "Suite 707",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98131"
      },
      email: "mason.li4862@example.com",
      payment_methods: {
        gift_card_6486968: {
          source: "gift_card",
          balance: 70,
          id: "gift_card_6486968"
        }
      },
      orders: ["#W8998368", "#W2392556"]
    },
    mei_patel_7272: {
      name: { first_name: "Mei", last_name: "Patel" },
      address: {
        address1: "443 Maple Drive",
        address2: "Suite 394",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76165"
      },
      email: "mei.patel3193@example.com",
      payment_methods: {
        credit_card_9503061: {
          source: "credit_card",
          brand: "visa",
          last_four: "9904",
          id: "credit_card_9503061"
        },
        paypal_4768213: { source: "paypal", id: "paypal_4768213" }
      },
      orders: ["#W9583042", "#W4082615"]
    },
    sofia_davis_2103: {
      name: { first_name: "Sofia", last_name: "Davis" },
      address: {
        address1: "729 Highland Drive",
        address2: "Suite 883",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98151"
      },
      email: "sofia.davis8164@example.com",
      payment_methods: {
        gift_card_3377580: {
          source: "gift_card",
          balance: 18,
          id: "gift_card_3377580"
        }
      },
      orders: ["#W2112666", "#W8494984", "#W2541482"]
    },
    emma_lopez_8196: {
      name: { first_name: "Emma", last_name: "Lopez" },
      address: {
        address1: "709 Elm Avenue",
        address2: "Suite 710",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80236"
      },
      email: "emma.lopez8126@example.com",
      payment_methods: {
        credit_card_9469680: {
          source: "credit_card",
          brand: "visa",
          last_four: "5356",
          id: "credit_card_9469680"
        },
        credit_card_8603854: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "5661",
          id: "credit_card_8603854"
        },
        gift_card_5439120: {
          source: "gift_card",
          balance: 33,
          id: "gift_card_5439120"
        }
      },
      orders: ["#W4686509", "#W9663142"]
    },
    daiki_muller_8062: {
      name: { first_name: "Daiki", last_name: "Muller" },
      address: {
        address1: "538 Elm Avenue",
        address2: "Suite 294",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94157"
      },
      email: "daiki.muller6278@example.com",
      payment_methods: {
        gift_card_8385925: {
          source: "gift_card",
          balance: 53,
          id: "gift_card_8385925"
        }
      },
      orders: ["#W5961635", "#W7822344", "#W6790887"]
    },
    mia_smith_1623: {
      name: { first_name: "Mia", last_name: "Smith" },
      address: {
        address1: "275 Oak Street",
        address2: "Suite 332",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80246"
      },
      email: "mia.smith4644@example.com",
      payment_methods: {
        credit_card_9175729: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3234",
          id: "credit_card_9175729"
        },
        paypal_3839332: { source: "paypal", id: "paypal_3839332" }
      },
      orders: ["#W2922379", "#W4744949", "#W5254379"]
    },
    james_wilson_1842: {
      name: { first_name: "James", last_name: "Wilson" },
      address: {
        address1: "480 Cedar Street",
        address2: "Suite 740",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80224"
      },
      email: "james.wilson1461@example.com",
      payment_methods: {
        credit_card_7871433: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4617",
          id: "credit_card_7871433"
        }
      },
      orders: ["#W7826235"]
    },
    james_lee_5010: {
      name: { first_name: "James", last_name: "Lee" },
      address: {
        address1: "870 Oak Street",
        address2: "Suite 766",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95161"
      },
      email: "james.lee4131@example.com",
      payment_methods: {
        paypal_2684483: { source: "paypal", id: "paypal_2684483" }
      },
      orders: ["#W8520591", "#W5356919"]
    },
    ethan_sanchez_2952: {
      name: { first_name: "Ethan", last_name: "Sanchez" },
      address: {
        address1: "799 Lakeview Drive",
        address2: "Suite 510",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78782"
      },
      email: "ethan.sanchez6360@example.com",
      payment_methods: {
        gift_card_4817478: {
          source: "gift_card",
          balance: 53,
          id: "gift_card_4817478"
        },
        paypal_3574041: { source: "paypal", id: "paypal_3574041" }
      },
      orders: ["#W9102111", "#W9250394"]
    },
    ethan_wilson_5687: {
      name: { first_name: "Ethan", last_name: "Wilson" },
      address: {
        address1: "312 Chestnut Street",
        address2: "Suite 578",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92152"
      },
      email: "ethan.wilson8440@example.com",
      payment_methods: {
        gift_card_6470461: {
          source: "gift_card",
          balance: 29,
          id: "gift_card_6470461"
        }
      },
      orders: []
    },
    fatima_anderson_7445: {
      name: { first_name: "Fatima", last_name: "Anderson" },
      address: {
        address1: "928 Elm Avenue",
        address2: "Suite 398",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78786"
      },
      email: "fatima.anderson1082@example.com",
      payment_methods: {
        gift_card_8070316: {
          source: "gift_card",
          balance: 64,
          id: "gift_card_8070316"
        },
        paypal_7697967: { source: "paypal", id: "paypal_7697967" }
      },
      orders: ["#W9183908", "#W1842597", "#W6368178"]
    },
    sofia_garcia_9089: {
      name: { first_name: "Sofia", last_name: "Garcia" },
      address: {
        address1: "200 Lakeview Drive",
        address2: "Suite 627",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32290"
      },
      email: "sofia.garcia6175@example.com",
      payment_methods: {
        credit_card_5481553: {
          source: "credit_card",
          brand: "visa",
          last_four: "4757",
          id: "credit_card_5481553"
        }
      },
      orders: []
    },
    isabella_brown_3584: {
      name: { first_name: "Isabella", last_name: "Brown" },
      address: {
        address1: "881 Elm Avenue",
        address2: "Suite 140",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80257"
      },
      email: "isabella.brown8771@example.com",
      payment_methods: {
        paypal_2143483: { source: "paypal", id: "paypal_2143483" }
      },
      orders: ["#W7752779", "#W7868134"]
    },
    fatima_johnson_7581: {
      name: { first_name: "Fatima", last_name: "Johnson" },
      address: {
        address1: "123 Elm Street",
        address2: "Suite 640",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78712"
      },
      email: "fatima.johnson2300@example.com",
      payment_methods: {
        paypal_5364164: { source: "paypal", id: "paypal_5364164" },
        gift_card_1675628: {
          source: "gift_card",
          balance: 99,
          id: "gift_card_1675628"
        }
      },
      orders: ["#W5199551", "#W8665881", "#W9389413"]
    },
    yara_martin_9470: {
      name: { first_name: "Yara", last_name: "Martin" },
      address: {
        address1: "413 Elm Street",
        address2: "Suite 681",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80209"
      },
      email: "yara.martin8360@example.com",
      payment_methods: {
        paypal_9012851: { source: "paypal", id: "paypal_9012851" },
        credit_card_1006622: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "7291",
          id: "credit_card_1006622"
        },
        gift_card_3902147: {
          source: "gift_card",
          balance: 8,
          id: "gift_card_3902147"
        }
      },
      orders: ["#W4538969"]
    },
    ethan_smith_9087: {
      name: { first_name: "Ethan", last_name: "Smith" },
      address: {
        address1: "544 Sunset Drive",
        address2: "Suite 663",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10280"
      },
      email: "ethan.smith2338@example.com",
      payment_methods: {
        paypal_3296755: { source: "paypal", id: "paypal_3296755" }
      },
      orders: ["#W4635485", "#W6711349", "#W2148041", "#W6731310"]
    },
    liam_moore_4057: {
      name: { first_name: "Liam", last_name: "Moore" },
      address: {
        address1: "244 Elm Street",
        address2: "Suite 422",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43209"
      },
      email: "liam.moore6985@example.com",
      payment_methods: {
        paypal_4518393: { source: "paypal", id: "paypal_4518393" }
      },
      orders: ["#W7571356", "#W6908222", "#W3169501"]
    },
    mason_lopez_5208: {
      name: { first_name: "Mason", last_name: "Lopez" },
      address: {
        address1: "760 Maple Drive",
        address2: "Suite 631",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10257"
      },
      email: "mason.lopez2966@example.com",
      payment_methods: {
        paypal_9591556: { source: "paypal", id: "paypal_9591556" }
      },
      orders: ["#W9222585", "#W3130816", "#W8185761", "#W9939424"]
    },
    yara_sanchez_9692: {
      name: { first_name: "Yara", last_name: "Sanchez" },
      address: {
        address1: "704 Laurel Lane",
        address2: "Suite 604",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19093"
      },
      email: "yara.sanchez8417@example.com",
      payment_methods: {
        credit_card_9277564: {
          source: "credit_card",
          brand: "visa",
          last_four: "5490",
          id: "credit_card_9277564"
        }
      },
      orders: ["#W2651562", "#W8541484", "#W2593291"]
    },
    ethan_garcia_1261: {
      name: { first_name: "Ethan", last_name: "Garcia" },
      address: {
        address1: "667 Highland Drive",
        address2: "Suite 865",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80280"
      },
      email: "ethan.garcia8085@example.com",
      payment_methods: {
        paypal_3798357: { source: "paypal", id: "paypal_3798357" },
        gift_card_4332117: {
          source: "gift_card",
          balance: 86,
          id: "gift_card_4332117"
        }
      },
      orders: ["#W4967593", "#W9911714", "#W5733668"]
    },
    yara_santos_1202: {
      name: { first_name: "Yara", last_name: "Santos" },
      address: {
        address1: "206 Cedar Avenue",
        address2: "Suite 376",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91163"
      },
      email: "yara.santos5257@example.com",
      payment_methods: {
        gift_card_4543462: {
          source: "gift_card",
          balance: 99,
          id: "gift_card_4543462"
        }
      },
      orders: ["#W6371438", "#W3232025"]
    },
    raj_moore_7909: {
      name: { first_name: "Raj", last_name: "Moore" },
      address: {
        address1: "869 Cedar Street",
        address2: "Suite 921",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20566"
      },
      email: "raj.moore4245@example.com",
      payment_methods: {
        gift_card_6009199: {
          source: "gift_card",
          balance: 89,
          id: "gift_card_6009199"
        }
      },
      orders: ["#W9929926", "#W7048824", "#W3467101"]
    },
    ethan_johnson_7053: {
      name: { first_name: "Ethan", last_name: "Johnson" },
      address: {
        address1: "369 Oak Street",
        address2: "Suite 889",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80298"
      },
      email: "ethan.johnson2557@example.com",
      payment_methods: {
        gift_card_6892585: {
          source: "gift_card",
          balance: 46,
          id: "gift_card_6892585"
        }
      },
      orders: ["#W7450915", "#W5321777"]
    },
    isabella_lopez_5733: {
      name: { first_name: "Isabella", last_name: "Lopez" },
      address: {
        address1: "500 River Road",
        address2: "Suite 209",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98127"
      },
      email: "isabella.lopez4599@example.com",
      payment_methods: {
        paypal_5789912: { source: "paypal", id: "paypal_5789912" }
      },
      orders: ["#W9291999", "#W6581939"]
    },
    isabella_nguyen_1748: {
      name: { first_name: "Isabella", last_name: "Nguyen" },
      address: {
        address1: "406 Maple Drive",
        address2: "Suite 975",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78716"
      },
      email: "isabella.nguyen2797@example.com",
      payment_methods: {
        gift_card_9452856: {
          source: "gift_card",
          balance: 24,
          id: "gift_card_9452856"
        }
      },
      orders: ["#W9660692"]
    },
    ava_moore_1238: {
      name: { first_name: "Ava", last_name: "Moore" },
      address: {
        address1: "838 Lakeview Drive",
        address2: "Suite 555",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32217"
      },
      email: "ava.moore2866@example.com",
      payment_methods: {
        gift_card_6498300: {
          source: "gift_card",
          balance: 64,
          id: "gift_card_6498300"
        }
      },
      orders: []
    },
    mia_thomas_4629: {
      name: { first_name: "Mia", last_name: "Thomas" },
      address: {
        address1: "616 Hillcrest Drive",
        address2: "Suite 320",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60654"
      },
      email: "mia.thomas7243@example.com",
      payment_methods: {
        paypal_2977884: { source: "paypal", id: "paypal_2977884" }
      },
      orders: ["#W6872071", "#W5208989"]
    },
    yusuf_jackson_7865: {
      name: { first_name: "Yusuf", last_name: "Jackson" },
      address: {
        address1: "391 Broadway",
        address2: "Suite 435",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98127"
      },
      email: "yusuf.jackson4654@example.com",
      payment_methods: {
        paypal_3392566: { source: "paypal", id: "paypal_3392566" },
        gift_card_7037673: {
          source: "gift_card",
          balance: 34,
          id: "gift_card_7037673"
        }
      },
      orders: ["#W2087737", "#W7128968"]
    },
    emma_kovacs_9839: {
      name: { first_name: "Emma", last_name: "Kovacs" },
      address: {
        address1: "637 Pine Lane",
        address2: "Suite 443",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32190"
      },
      email: "emma.kovacs2974@example.com",
      payment_methods: {
        credit_card_7239357: {
          source: "credit_card",
          brand: "visa",
          last_four: "8676",
          id: "credit_card_7239357"
        }
      },
      orders: ["#W8661412", "#W2273457", "#W9284598"]
    },
    anya_taylor_1082: {
      name: { first_name: "Anya", last_name: "Taylor" },
      address: {
        address1: "223 Willow Lane",
        address2: "Suite 676",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10006"
      },
      email: "anya.taylor7813@example.com",
      payment_methods: {
        gift_card_7296062: {
          source: "gift_card",
          balance: 23,
          id: "gift_card_7296062"
        }
      },
      orders: ["#W2727221", "#W9980894"]
    },
    ethan_lopez_6291: {
      name: { first_name: "Ethan", last_name: "Lopez" },
      address: {
        address1: "103 Hillcrest Drive",
        address2: "Suite 162",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43275"
      },
      email: "ethan.lopez8943@example.com",
      payment_methods: {
        credit_card_9789590: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "1020",
          id: "credit_card_9789590"
        },
        gift_card_7219486: {
          source: "gift_card",
          balance: 49,
          id: "gift_card_7219486"
        }
      },
      orders: ["#W6779827", "#W6426438", "#W8632528", "#W8073920", "#W9409203"]
    },
    chen_martin_7230: {
      name: { first_name: "Chen", last_name: "Martin" },
      address: {
        address1: "440 Oak Street",
        address2: "Suite 202",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78202"
      },
      email: "chen.martin5236@example.com",
      payment_methods: {
        gift_card_6459897: {
          source: "gift_card",
          balance: 17,
          id: "gift_card_6459897"
        }
      },
      orders: []
    },
    harper_patel_2628: {
      name: { first_name: "Harper", last_name: "Patel" },
      address: {
        address1: "950 Lakeview Drive",
        address2: "Suite 918",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98198"
      },
      email: "harper.patel1498@example.com",
      payment_methods: {
        gift_card_1461059: {
          source: "gift_card",
          balance: 14,
          id: "gift_card_1461059"
        },
        credit_card_9122185: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2620",
          id: "credit_card_9122185"
        }
      },
      orders: ["#W6701662"]
    },
    sophia_garcia_5025: {
      name: { first_name: "Sophia", last_name: "Garcia" },
      address: {
        address1: "418 Park Avenue",
        address2: "Suite 351",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20156"
      },
      email: "sophia.garcia1495@example.com",
      payment_methods: {
        credit_card_4147840: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "5956",
          id: "credit_card_4147840"
        }
      },
      orders: ["#W5777276", "#W9336725", "#W2082172"]
    },
    ava_nguyen_6986: {
      name: { first_name: "Ava", last_name: "Nguyen" },
      address: {
        address1: "743 Elm Avenue",
        address2: "Suite 752",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28293"
      },
      email: "ava.nguyen4196@example.com",
      payment_methods: {
        gift_card_3857768: {
          source: "gift_card",
          balance: 76,
          id: "gift_card_3857768"
        },
        credit_card_7018899: {
          source: "credit_card",
          brand: "visa",
          last_four: "9417",
          id: "credit_card_7018899"
        }
      },
      orders: ["#W7966786"]
    },
    mason_kovacs_3062: {
      name: { first_name: "Mason", last_name: "Kovacs" },
      address: {
        address1: "885 Park Avenue",
        address2: "Suite 952",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60625"
      },
      email: "mason.kovacs5711@example.com",
      payment_methods: {
        gift_card_3734426: {
          source: "gift_card",
          balance: 68,
          id: "gift_card_3734426"
        }
      },
      orders: ["#W1855881", "#W9608525"]
    },
    aarav_ito_1827: {
      name: { first_name: "Aarav", last_name: "Ito" },
      address: {
        address1: "830 Main Street",
        address2: "Suite 500",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90131"
      },
      email: "aarav.ito1554@example.com",
      payment_methods: {
        gift_card_1468632: {
          source: "gift_card",
          balance: 69,
          id: "gift_card_1468632"
        }
      },
      orders: ["#W2239230", "#W6478051"]
    },
    evelyn_ahmed_3960: {
      name: { first_name: "Evelyn", last_name: "Ahmed" },
      address: {
        address1: "400 Willow Lane",
        address2: "Suite 502",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80256"
      },
      email: "evelyn.ahmed2006@example.com",
      payment_methods: {
        gift_card_5683713: {
          source: "gift_card",
          balance: 95,
          id: "gift_card_5683713"
        },
        credit_card_7898168: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9838",
          id: "credit_card_7898168"
        }
      },
      orders: ["#W1416704", "#W3746173", "#W4423731"]
    },
    juan_anderson_5671: {
      name: { first_name: "Juan", last_name: "Anderson" },
      address: {
        address1: "399 Oak Street",
        address2: "Suite 551",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32234"
      },
      email: "juan.anderson5522@example.com",
      payment_methods: {
        paypal_6388408: { source: "paypal", id: "paypal_6388408" }
      },
      orders: []
    },
    daiki_johnson_6200: {
      name: { first_name: "Daiki", last_name: "Johnson" },
      address: {
        address1: "375 Elm Avenue",
        address2: "Suite 947",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85017"
      },
      email: "daiki.johnson9215@example.com",
      payment_methods: {
        credit_card_8934029: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4141",
          id: "credit_card_8934029"
        }
      },
      orders: []
    },
    mei_martin_6103: {
      name: { first_name: "Mei", last_name: "Martin" },
      address: {
        address1: "120 Elm Street",
        address2: "Suite 759",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78270"
      },
      email: "mei.martin5518@example.com",
      payment_methods: {
        credit_card_8398849: {
          source: "credit_card",
          brand: "visa",
          last_four: "4161",
          id: "credit_card_8398849"
        },
        paypal_9325306: { source: "paypal", id: "paypal_9325306" }
      },
      orders: ["#W1759614"]
    },
    aarav_davis_4756: {
      name: { first_name: "Aarav", last_name: "Davis" },
      address: {
        address1: "178 Lakeview Drive",
        address2: "Suite 576",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76150"
      },
      email: "aarav.davis1165@example.com",
      payment_methods: {
        gift_card_9708163: {
          source: "gift_card",
          balance: 90,
          id: "gift_card_9708163"
        }
      },
      orders: ["#W7430166", "#W2403075", "#W3196599", "#W3223435"]
    },
    chen_brown_8075: {
      name: { first_name: "Chen", last_name: "Brown" },
      address: {
        address1: "945 Hickory Lane",
        address2: "Suite 262",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95190"
      },
      email: "chen.brown4062@example.com",
      payment_methods: {
        gift_card_7497429: {
          source: "gift_card",
          balance: 13,
          id: "gift_card_7497429"
        }
      },
      orders: ["#W4296426", "#W3381155"]
    },
    fatima_lee_3440: {
      name: { first_name: "Fatima", last_name: "Lee" },
      address: {
        address1: "339 Lakeview Drive",
        address2: "Suite 683",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95109"
      },
      email: "fatima.lee1693@example.com",
      payment_methods: {
        credit_card_3395407: {
          source: "credit_card",
          brand: "visa",
          last_four: "1827",
          id: "credit_card_3395407"
        }
      },
      orders: ["#W5232476", "#W1860706", "#W8098147"]
    },
    aarav_santos_4279: {
      name: { first_name: "Aarav", last_name: "Santos" },
      address: {
        address1: "307 Laurel Lane",
        address2: "Suite 982",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85070"
      },
      email: "aarav.santos2789@example.com",
      payment_methods: {
        credit_card_3816099: {
          source: "credit_card",
          brand: "visa",
          last_four: "1747",
          id: "credit_card_3816099"
        }
      },
      orders: ["#W8309293", "#W6111820"]
    },
    yusuf_moore_6437: {
      name: { first_name: "Yusuf", last_name: "Moore" },
      address: {
        address1: "815 Sunset Drive",
        address2: "Suite 651",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10144"
      },
      email: "yusuf.moore9422@example.com",
      payment_methods: {
        credit_card_6302410: {
          source: "credit_card",
          brand: "visa",
          last_four: "3452",
          id: "credit_card_6302410"
        },
        paypal_4755504: { source: "paypal", id: "paypal_4755504" }
      },
      orders: ["#W8295890"]
    },
    amelia_silva_5103: {
      name: { first_name: "Amelia", last_name: "Silva" },
      address: {
        address1: "984 Broadway",
        address2: "Suite 638",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95109"
      },
      email: "amelia.silva2111@example.com",
      payment_methods: {
        paypal_5716091: { source: "paypal", id: "paypal_5716091" }
      },
      orders: ["#W3220387", "#W8578646"]
    },
    harper_moore_3210: {
      name: { first_name: "Harper", last_name: "Moore" },
      address: {
        address1: "123 Spruce Street",
        address2: "Suite 146",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85025"
      },
      email: "harper.moore2816@example.com",
      payment_methods: {
        credit_card_7665260: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3161",
          id: "credit_card_7665260"
        }
      },
      orders: ["#W3942868"]
    },
    omar_lopez_7451: {
      name: { first_name: "Omar", last_name: "Lopez" },
      address: {
        address1: "462 Maple Drive",
        address2: "Suite 273",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92185"
      },
      email: "omar.lopez9490@example.com",
      payment_methods: {
        paypal_2167589: { source: "paypal", id: "paypal_2167589" }
      },
      orders: ["#W1106948"]
    },
    raj_li_9474: {
      name: { first_name: "Raj", last_name: "Li" },
      address: {
        address1: "187 Broadway",
        address2: "Suite 268",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76184"
      },
      email: "raj.li2787@example.com",
      payment_methods: {
        credit_card_9582448: {
          source: "credit_card",
          brand: "visa",
          last_four: "3917",
          id: "credit_card_9582448"
        },
        paypal_2028062: { source: "paypal", id: "paypal_2028062" }
      },
      orders: ["#W8967935", "#W6120232"]
    },
    juan_brown_8562: {
      name: { first_name: "Juan", last_name: "Brown" },
      address: {
        address1: "314 Highland Drive",
        address2: "Suite 426",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75347"
      },
      email: "juan.brown2055@example.com",
      payment_methods: {
        credit_card_2288437: {
          source: "credit_card",
          brand: "visa",
          last_four: "6661",
          id: "credit_card_2288437"
        }
      },
      orders: ["#W3611574", "#W4960069"]
    },
    fatima_brown_5229: {
      name: { first_name: "Fatima", last_name: "Brown" },
      address: {
        address1: "800 Park Avenue",
        address2: "Suite 843",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95187"
      },
      email: "fatima.brown7817@example.com",
      payment_methods: {
        credit_card_1982124: {
          source: "credit_card",
          brand: "visa",
          last_four: "2364",
          id: "credit_card_1982124"
        },
        gift_card_8633125: {
          source: "gift_card",
          balance: 12,
          id: "gift_card_8633125"
        }
      },
      orders: ["#W9045919", "#W1649831"]
    },
    fatima_taylor_2349: {
      name: { first_name: "Fatima", last_name: "Taylor" },
      address: {
        address1: "940 Oak Street",
        address2: "Suite 612",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43224"
      },
      email: "fatima.taylor8616@example.com",
      payment_methods: {
        paypal_4421257: { source: "paypal", id: "paypal_4421257" }
      },
      orders: ["#W9854700"]
    },
    olivia_nguyen_6241: {
      name: { first_name: "Olivia", last_name: "Nguyen" },
      address: {
        address1: "100 Elm Street",
        address2: "Suite 120",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10171"
      },
      email: "olivia.nguyen4794@example.com",
      payment_methods: {
        paypal_7706317: { source: "paypal", id: "paypal_7706317" }
      },
      orders: ["#W1126085", "#W8921199"]
    },
    sophia_nguyen_7885: {
      name: { first_name: "Sophia", last_name: "Nguyen" },
      address: {
        address1: "181 Elm Street",
        address2: "Suite 870",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60647"
      },
      email: "sophia.nguyen3545@example.com",
      payment_methods: {
        paypal_5763294: { source: "paypal", id: "paypal_5763294" },
        gift_card_2415038: {
          source: "gift_card",
          balance: 94,
          id: "gift_card_2415038"
        }
      },
      orders: ["#W4183735"]
    },
    yusuf_garcia_1670: {
      name: { first_name: "Yusuf", last_name: "Garcia" },
      address: {
        address1: "691 Park Avenue",
        address2: "Suite 274",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46202"
      },
      email: "yusuf.garcia2532@example.com",
      payment_methods: {
        gift_card_4303603: {
          source: "gift_card",
          balance: 6,
          id: "gift_card_4303603"
        }
      },
      orders: ["#W7639559", "#W9447995", "#W3691773"]
    },
    aarav_brown_3744: {
      name: { first_name: "Aarav", last_name: "Brown" },
      address: {
        address1: "556 Spruce Street",
        address2: "Suite 899",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94132"
      },
      email: "aarav.brown3708@example.com",
      payment_methods: {
        credit_card_3627996: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4249",
          id: "credit_card_3627996"
        }
      },
      orders: ["#W5065081", "#W6584521"]
    },
    liam_ahmed_6523: {
      name: { first_name: "Liam", last_name: "Ahmed" },
      address: {
        address1: "364 Elm Street",
        address2: "Suite 504",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94140"
      },
      email: "liam.ahmed8540@example.com",
      payment_methods: {
        gift_card_5327033: {
          source: "gift_card",
          balance: 88,
          id: "gift_card_5327033"
        }
      },
      orders: ["#W3916748", "#W7534214", "#W1558044"]
    },
    yusuf_li_7255: {
      name: { first_name: "Yusuf", last_name: "Li" },
      address: {
        address1: "909 Spruce Street",
        address2: "Suite 599",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91148"
      },
      email: "yusuf.li3523@example.com",
      payment_methods: {
        paypal_8080730: { source: "paypal", id: "paypal_8080730" }
      },
      orders: ["#W6750959", "#W3407479"]
    },
    mia_silva_4504: {
      name: { first_name: "Mia", last_name: "Silva" },
      address: {
        address1: "325 Main Street",
        address2: "Suite 298",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95173"
      },
      email: "mia.silva2639@example.com",
      payment_methods: {
        credit_card_9308469: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4463",
          id: "credit_card_9308469"
        }
      },
      orders: ["#W6319233"]
    },
    harper_smith_4233: {
      name: { first_name: "Harper", last_name: "Smith" },
      address: {
        address1: "182 Main Street",
        address2: "Suite 668",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43193"
      },
      email: "harper.smith5467@example.com",
      payment_methods: {
        paypal_5681464: { source: "paypal", id: "paypal_5681464" }
      },
      orders: ["#W2954950"]
    },
    aarav_sanchez_6636: {
      name: { first_name: "Aarav", last_name: "Sanchez" },
      address: {
        address1: "751 Spruce Street",
        address2: "Suite 140",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60653"
      },
      email: "aarav.sanchez5467@example.com",
      payment_methods: {
        gift_card_8922351: {
          source: "gift_card",
          balance: 38,
          id: "gift_card_8922351"
        }
      },
      orders: ["#W9552705"]
    },
    ava_moore_2033: {
      name: { first_name: "Ava", last_name: "Moore" },
      address: {
        address1: "996 Cedar Street",
        address2: "Suite 656",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78234"
      },
      email: "ava.moore6020@example.com",
      payment_methods: {
        gift_card_8168843: {
          source: "gift_card",
          balance: 69,
          id: "gift_card_8168843"
        }
      },
      orders: ["#W4817420", "#W4135875", "#W2173715", "#W8951014"]
    },
    mei_johansson_5847: {
      name: { first_name: "Mei", last_name: "Johansson" },
      address: {
        address1: "257 Maple Drive",
        address2: "Suite 338",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20509"
      },
      email: "mei.johansson4313@example.com",
      payment_methods: {
        gift_card_6568084: {
          source: "gift_card",
          balance: 95,
          id: "gift_card_6568084"
        }
      },
      orders: ["#W7538736"]
    },
    yusuf_johnson_8087: {
      name: { first_name: "Yusuf", last_name: "Johnson" },
      address: {
        address1: "779 Main Street",
        address2: "Suite 318",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32234"
      },
      email: "yusuf.johnson6185@example.com",
      payment_methods: {
        credit_card_8151608: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6354",
          id: "credit_card_8151608"
        }
      },
      orders: ["#W6735441"]
    },
    daiki_patel_5953: {
      name: { first_name: "Daiki", last_name: "Patel" },
      address: {
        address1: "670 Chestnut Street",
        address2: "Suite 982",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94111"
      },
      email: "daiki.patel3402@example.com",
      payment_methods: {
        paypal_1009053: { source: "paypal", id: "paypal_1009053" }
      },
      orders: ["#W3135192", "#W8969494", "#W8068454"]
    },
    emma_martin_6993: {
      name: { first_name: "Emma", last_name: "Martin" },
      address: {
        address1: "727 Sunset Drive",
        address2: "Suite 930",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78750"
      },
      email: "emma.martin1207@example.com",
      payment_methods: {
        paypal_6129397: { source: "paypal", id: "paypal_6129397" },
        gift_card_4129829: {
          source: "gift_card",
          balance: 57,
          id: "gift_card_4129829"
        }
      },
      orders: ["#W5432440", "#W9432206", "#W7988753", "#W2800409"]
    },
    mei_moore_8248: {
      name: { first_name: "Mei", last_name: "Moore" },
      address: {
        address1: "928 Cedar Street",
        address2: "Suite 316",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90980"
      },
      email: "mei.moore6624@example.com",
      payment_methods: {
        credit_card_2902980: {
          source: "credit_card",
          brand: "visa",
          last_four: "8232",
          id: "credit_card_2902980"
        }
      },
      orders: ["#W9694847", "#W2694395", "#W9924897"]
    },
    omar_santos_4830: {
      name: { first_name: "Omar", last_name: "Santos" },
      address: {
        address1: "621 Spruce Street",
        address2: "Suite 698",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76180"
      },
      email: "omar.santos1752@example.com",
      payment_methods: {
        credit_card_8992222: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4466",
          id: "credit_card_8992222"
        },
        gift_card_3895897: {
          source: "gift_card",
          balance: 75,
          id: "gift_card_3895897"
        }
      },
      orders: ["#W9121070"]
    },
    daiki_silva_2903: {
      name: { first_name: "Daiki", last_name: "Silva" },
      address: {
        address1: "713 Park Avenue",
        address2: "Suite 800",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94102"
      },
      email: "daiki.silva6295@example.com",
      payment_methods: {
        gift_card_2652153: {
          source: "gift_card",
          balance: 19,
          id: "gift_card_2652153"
        }
      },
      orders: ["#W7999678", "#W8835847"]
    },
    liam_gonzalez_4265: {
      name: { first_name: "Liam", last_name: "Gonzalez" },
      address: {
        address1: "647 Laurel Lane",
        address2: "Suite 627",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78747"
      },
      email: "liam.gonzalez4478@example.com",
      payment_methods: {
        paypal_1697207: { source: "paypal", id: "paypal_1697207" },
        credit_card_6341155: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4422",
          id: "credit_card_6341155"
        }
      },
      orders: ["#W8747662"]
    },
    anya_ahmed_9564: {
      name: { first_name: "Anya", last_name: "Ahmed" },
      address: {
        address1: "277 Spruce Street",
        address2: "Suite 625",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43245"
      },
      email: "anya.ahmed8072@example.com",
      payment_methods: {
        gift_card_9342594: {
          source: "gift_card",
          balance: 11,
          id: "gift_card_9342594"
        },
        credit_card_5937293: {
          source: "credit_card",
          brand: "visa",
          last_four: "7710",
          id: "credit_card_5937293"
        }
      },
      orders: []
    },
    mason_johansson_8128: {
      name: { first_name: "Mason", last_name: "Johansson" },
      address: {
        address1: "745 Chestnut Street",
        address2: "Suite 617",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98103"
      },
      email: "mason.johansson9549@example.com",
      payment_methods: {
        gift_card_1401311: {
          source: "gift_card",
          balance: 64,
          id: "gift_card_1401311"
        }
      },
      orders: ["#W9233394", "#W4352605", "#W4536116"]
    },
    isabella_gonzalez_4546: {
      name: { first_name: "Isabella", last_name: "Gonzalez" },
      address: {
        address1: "472 Cedar Avenue",
        address2: "Suite 275",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76151"
      },
      email: "isabella.gonzalez1317@example.com",
      payment_methods: {
        credit_card_9878778: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9364",
          id: "credit_card_9878778"
        },
        credit_card_1619986: {
          source: "credit_card",
          brand: "visa",
          last_four: "4920",
          id: "credit_card_1619986"
        }
      },
      orders: ["#W1258841"]
    },
    mason_wilson_4597: {
      name: { first_name: "Mason", last_name: "Wilson" },
      address: {
        address1: "142 Oak Street",
        address2: "Suite 780",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85028"
      },
      email: "mason.wilson6954@example.com",
      payment_methods: {
        gift_card_6767859: {
          source: "gift_card",
          balance: 0,
          id: "gift_card_6767859"
        }
      },
      orders: ["#W4318885", "#W8161562"]
    },
    mei_garcia_1676: {
      name: { first_name: "Mei", last_name: "Garcia" },
      address: {
        address1: "812 Spruce Street",
        address2: "Suite 342",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32204"
      },
      email: "mei.garcia1841@example.com",
      payment_methods: {
        credit_card_2924258: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9004",
          id: "credit_card_2924258"
        }
      },
      orders: ["#W5767256"]
    },
    ava_ahmed_8757: {
      name: { first_name: "Ava", last_name: "Ahmed" },
      address: {
        address1: "232 Oak Street",
        address2: "Suite 217",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91312"
      },
      email: "ava.ahmed9921@example.com",
      payment_methods: {
        paypal_2506356: { source: "paypal", id: "paypal_2506356" },
        credit_card_3009760: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6321",
          id: "credit_card_3009760"
        }
      },
      orders: []
    },
    juan_jackson_6087: {
      name: { first_name: "Juan", last_name: "Jackson" },
      address: {
        address1: "242 Highland Drive",
        address2: "Suite 248",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77173"
      },
      email: "juan.jackson3788@example.com",
      payment_methods: {
        credit_card_1367142: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "8446",
          id: "credit_card_1367142"
        },
        gift_card_5942553: {
          source: "gift_card",
          balance: 29,
          id: "gift_card_5942553"
        }
      },
      orders: ["#W5616509"]
    },
    liam_anderson_5973: {
      name: { first_name: "Liam", last_name: "Anderson" },
      address: {
        address1: "730 Highland Drive",
        address2: "Suite 148",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43107"
      },
      email: "liam.anderson5932@example.com",
      payment_methods: {
        credit_card_9185943: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3518",
          id: "credit_card_9185943"
        },
        paypal_6282316: { source: "paypal", id: "paypal_6282316" }
      },
      orders: ["#W2119065", "#W2870123", "#W1544028"]
    },
    lucas_moore_6941: {
      name: { first_name: "Lucas", last_name: "Moore" },
      address: {
        address1: "899 Maple Drive",
        address2: "Suite 284",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77213"
      },
      email: "lucas.moore2343@example.com",
      payment_methods: {
        paypal_3345717: { source: "paypal", id: "paypal_3345717" }
      },
      orders: ["#W5299644"]
    },
    mohamed_khan_3010: {
      name: { first_name: "Mohamed", last_name: "Khan" },
      address: {
        address1: "320 Cedar Avenue",
        address2: "Suite 201",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60651"
      },
      email: "mohamed.khan5338@example.com",
      payment_methods: {
        paypal_1249653: { source: "paypal", id: "paypal_1249653" }
      },
      orders: ["#W4887592", "#W7390432"]
    },
    sophia_martin_8570: {
      name: { first_name: "Sophia", last_name: "Martin" },
      address: {
        address1: "760 Elm Avenue",
        address2: "Suite 564",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77034"
      },
      email: "sophia.martin4832@example.com",
      payment_methods: {
        credit_card_5694100: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3292",
          id: "credit_card_5694100"
        }
      },
      orders: ["#W1603792", "#W1092119"]
    },
    raj_moore_4568: {
      name: { first_name: "Raj", last_name: "Moore" },
      address: {
        address1: "622 Willow Lane",
        address2: "Suite 674",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28231"
      },
      email: "raj.moore2307@example.com",
      payment_methods: {
        paypal_3977244: { source: "paypal", id: "paypal_3977244" }
      },
      orders: []
    },
    ivan_moore_2682: {
      name: { first_name: "Ivan", last_name: "Moore" },
      address: {
        address1: "725 Willow Lane",
        address2: "Suite 863",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90872"
      },
      email: "ivan.moore5217@example.com",
      payment_methods: {
        paypal_1634943: { source: "paypal", id: "paypal_1634943" },
        credit_card_5121230: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "5915",
          id: "credit_card_5121230"
        },
        credit_card_2649501: {
          source: "credit_card",
          brand: "visa",
          last_four: "5043",
          id: "credit_card_2649501"
        }
      },
      orders: []
    },
    mohamed_santos_2427: {
      name: { first_name: "Mohamed", last_name: "Santos" },
      address: {
        address1: "842 River Road",
        address2: "Suite 576",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76188"
      },
      email: "mohamed.santos7676@example.com",
      payment_methods: {
        gift_card_4710915: {
          source: "gift_card",
          balance: 34,
          id: "gift_card_4710915"
        }
      },
      orders: ["#W4840405", "#W8976713"]
    },
    aarav_garcia_9402: {
      name: { first_name: "Aarav", last_name: "Garcia" },
      address: {
        address1: "822 Chestnut Street",
        address2: "Suite 868",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10129"
      },
      email: "aarav.garcia8277@example.com",
      payment_methods: {
        credit_card_6821943: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "8219",
          id: "credit_card_6821943"
        }
      },
      orders: ["#W3038897", "#W7821216"]
    },
    raj_johnson_1989: {
      name: { first_name: "Raj", last_name: "Johnson" },
      address: {
        address1: "969 River Road",
        address2: "Suite 291",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90888"
      },
      email: "raj.johnson3981@example.com",
      payment_methods: {
        paypal_2183164: { source: "paypal", id: "paypal_2183164" }
      },
      orders: ["#W6030591"]
    },
    daiki_sanchez_3253: {
      name: { first_name: "Daiki", last_name: "Sanchez" },
      address: {
        address1: "661 Elm Avenue",
        address2: "Suite 517",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46236"
      },
      email: "daiki.sanchez1479@example.com",
      payment_methods: {
        credit_card_8853416: {
          source: "credit_card",
          brand: "visa",
          last_four: "6593",
          id: "credit_card_8853416"
        }
      },
      orders: ["#W9348897"]
    },
    evelyn_davis_7541: {
      name: { first_name: "Evelyn", last_name: "Davis" },
      address: {
        address1: "296 Elm Street",
        address2: "Suite 128",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32136"
      },
      email: "evelyn.davis9453@example.com",
      payment_methods: {
        paypal_9734841: { source: "paypal", id: "paypal_9734841" }
      },
      orders: ["#W6798117"]
    },
    ethan_santos_6104: {
      name: { first_name: "Ethan", last_name: "Santos" },
      address: {
        address1: "654 Spruce Street",
        address2: "Suite 503",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80278"
      },
      email: "ethan.santos9082@example.com",
      payment_methods: {
        credit_card_9784468: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9443",
          id: "credit_card_9784468"
        },
        paypal_3549141: { source: "paypal", id: "paypal_3549141" }
      },
      orders: ["#W5320242", "#W4642822", "#W1930780"]
    },
    harper_ito_5985: {
      name: { first_name: "Harper", last_name: "Ito" },
      address: {
        address1: "473 Cedar Avenue",
        address2: "Suite 949",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90152"
      },
      email: "harper.ito1501@example.com",
      payment_methods: {
        gift_card_4058084: {
          source: "gift_card",
          balance: 100,
          id: "gift_card_4058084"
        }
      },
      orders: ["#W3137176", "#W5367110"]
    },
    mei_kovacs_8020: {
      name: { first_name: "Mei", last_name: "Kovacs" },
      address: {
        address1: "317 Elm Street",
        address2: "Suite 461",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28236"
      },
      email: "mei.kovacs8232@example.com",
      payment_methods: {
        paypal_7644869: { source: "paypal", id: "paypal_7644869" }
      },
      orders: ["#W6390527", "#W7800651", "#W8065207"]
    },
    noah_hernandez_4232: {
      name: { first_name: "Noah", last_name: "Hernandez" },
      address: {
        address1: "778 Main Street",
        address2: "Suite 388",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60636"
      },
      email: "noah.hernandez4161@example.com",
      payment_methods: {
        gift_card_3410768: {
          source: "gift_card",
          balance: 56,
          id: "gift_card_3410768"
        }
      },
      orders: ["#W3897284", "#W4802126"]
    },
    anya_patel_3710: {
      name: { first_name: "Anya", last_name: "Patel" },
      address: {
        address1: "374 Willow Lane",
        address2: "Suite 314",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77256"
      },
      email: "anya.patel9309@example.com",
      payment_methods: {
        gift_card_6566420: {
          source: "gift_card",
          balance: 50,
          id: "gift_card_6566420"
        },
        credit_card_4142574: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2340",
          id: "credit_card_4142574"
        }
      },
      orders: ["#W4604258", "#W6174054", "#W6131421"]
    },
    emma_kovacs_7176: {
      name: { first_name: "Emma", last_name: "Kovacs" },
      address: {
        address1: "463 Main Street",
        address2: "Suite 430",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32254"
      },
      email: "emma.kovacs6621@example.com",
      payment_methods: {
        paypal_1038468: { source: "paypal", id: "paypal_1038468" },
        gift_card_7777844: {
          source: "gift_card",
          balance: 79,
          id: "gift_card_7777844"
        }
      },
      orders: ["#W2307204", "#W7841787"]
    },
    mia_rossi_6568: {
      name: { first_name: "Mia", last_name: "Rossi" },
      address: {
        address1: "680 Cedar Avenue",
        address2: "Suite 884",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43274"
      },
      email: "mia.rossi3684@example.com",
      payment_methods: {
        paypal_9422805: { source: "paypal", id: "paypal_9422805" }
      },
      orders: []
    },
    harper_garcia_5438: {
      name: { first_name: "Harper", last_name: "Garcia" },
      address: {
        address1: "527 Spruce Street",
        address2: "Suite 767",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80242"
      },
      email: "harper.garcia9090@example.com",
      payment_methods: {
        credit_card_2369458: {
          source: "credit_card",
          brand: "visa",
          last_four: "6583",
          id: "credit_card_2369458"
        }
      },
      orders: ["#W8360923", "#W5737680"]
    },
    sophia_jackson_6355: {
      name: { first_name: "Sophia", last_name: "Jackson" },
      address: {
        address1: "474 Spruce Street",
        address2: "Suite 678",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60651"
      },
      email: "sophia.jackson1954@example.com",
      payment_methods: {
        credit_card_8041020: {
          source: "credit_card",
          brand: "visa",
          last_four: "2043",
          id: "credit_card_8041020"
        },
        credit_card_6547060: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2162",
          id: "credit_card_6547060"
        },
        paypal_7425862: { source: "paypal", id: "paypal_7425862" },
        gift_card_6052478: {
          source: "gift_card",
          balance: 10,
          id: "gift_card_6052478"
        }
      },
      orders: ["#W6977171", "#W4250821"]
    },
    lucas_martin_4549: {
      name: { first_name: "Lucas", last_name: "Martin" },
      address: {
        address1: "758 Lakeview Drive",
        address2: "Suite 382",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20517"
      },
      email: "lucas.martin5733@example.com",
      payment_methods: {
        gift_card_7728021: {
          source: "gift_card",
          balance: 68,
          id: "gift_card_7728021"
        },
        credit_card_7862034: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9536",
          id: "credit_card_7862034"
        }
      },
      orders: ["#W9318778", "#W9144718", "#W3929227"]
    },
    fatima_wilson_7472: {
      name: { first_name: "Fatima", last_name: "Wilson" },
      address: {
        address1: "167 Willow Lane",
        address2: "Suite 624",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92183"
      },
      email: "fatima.wilson5721@example.com",
      payment_methods: {
        credit_card_6824399: {
          source: "credit_card",
          brand: "visa",
          last_four: "8991",
          id: "credit_card_6824399"
        }
      },
      orders: ["#W5272531"]
    },
    sofia_li_3261: {
      name: { first_name: "Sofia", last_name: "Li" },
      address: {
        address1: "130 Hickory Lane",
        address2: "Suite 869",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10199"
      },
      email: "sofia.li5953@example.com",
      payment_methods: {
        credit_card_4046723: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "8609",
          id: "credit_card_4046723"
        }
      },
      orders: ["#W1557241", "#W6874763"]
    },
    noah_khan_5763: {
      name: { first_name: "Noah", last_name: "Khan" },
      address: {
        address1: "143 Highland Drive",
        address2: "Suite 928",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94140"
      },
      email: "noah.khan7453@example.com",
      payment_methods: {
        paypal_2319812: { source: "paypal", id: "paypal_2319812" }
      },
      orders: ["#W1483350", "#W3818056"]
    },
    liam_patel_2946: {
      name: { first_name: "Liam", last_name: "Patel" },
      address: {
        address1: "631 Highland Drive",
        address2: "Suite 935",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46232"
      },
      email: "liam.patel1315@example.com",
      payment_methods: {
        gift_card_6054461: {
          source: "gift_card",
          balance: 53,
          id: "gift_card_6054461"
        }
      },
      orders: []
    },
    aarav_lee_1982: {
      name: { first_name: "Aarav", last_name: "Lee" },
      address: {
        address1: "828 River Road",
        address2: "Suite 312",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85025"
      },
      email: "aarav.lee6460@example.com",
      payment_methods: {
        credit_card_1640996: {
          source: "credit_card",
          brand: "visa",
          last_four: "4451",
          id: "credit_card_1640996"
        }
      },
      orders: ["#W3361211", "#W3586556"]
    },
    harper_kim_3380: {
      name: { first_name: "Harper", last_name: "Kim" },
      address: {
        address1: "319 Laurel Lane",
        address2: "Suite 110",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10132"
      },
      email: "harper.kim7658@example.com",
      payment_methods: {
        credit_card_7644789: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3439",
          id: "credit_card_7644789"
        }
      },
      orders: ["#W2470317"]
    },
    ethan_smith_7905: {
      name: { first_name: "Ethan", last_name: "Smith" },
      address: {
        address1: "218 Main Street",
        address2: "Suite 792",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85001"
      },
      email: "ethan.smith4017@example.com",
      payment_methods: {
        credit_card_3185406: {
          source: "credit_card",
          brand: "visa",
          last_four: "6696",
          id: "credit_card_3185406"
        }
      },
      orders: ["#W1138897"]
    },
    harper_thomas_9402: {
      name: { first_name: "Harper", last_name: "Thomas" },
      address: {
        address1: "367 Spruce Street",
        address2: "Suite 642",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90891"
      },
      email: "harper.thomas1454@example.com",
      payment_methods: {
        credit_card_1199336: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "7287",
          id: "credit_card_1199336"
        },
        credit_card_1283450: {
          source: "credit_card",
          brand: "visa",
          last_four: "5768",
          id: "credit_card_1283450"
        }
      },
      orders: ["#W7425646"]
    },
    juan_nguyen_7430: {
      name: { first_name: "Juan", last_name: "Nguyen" },
      address: {
        address1: "810 Highland Drive",
        address2: "Suite 282",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85099"
      },
      email: "juan.nguyen7877@example.com",
      payment_methods: {
        credit_card_3522913: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9548",
          id: "credit_card_3522913"
        }
      },
      orders: ["#W2430890", "#W9537685"]
    },
    noah_kovacs_1216: {
      name: { first_name: "Noah", last_name: "Kovacs" },
      address: {
        address1: "191 Lakeview Drive",
        address2: "Suite 781",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20566"
      },
      email: "noah.kovacs8240@example.com",
      payment_methods: {
        gift_card_2486551: {
          source: "gift_card",
          balance: 96,
          id: "gift_card_2486551"
        }
      },
      orders: ["#W9440076", "#W8826221", "#W3002300"]
    },
    emma_kovacs_5477: {
      name: { first_name: "Emma", last_name: "Kovacs" },
      address: {
        address1: "809 Main Street",
        address2: "Suite 716",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95111"
      },
      email: "emma.kovacs5723@example.com",
      payment_methods: {
        gift_card_9246707: {
          source: "gift_card",
          balance: 96,
          id: "gift_card_9246707"
        }
      },
      orders: ["#W3618959", "#W7109609", "#W3723334", "#W6554908", "#W8063026"]
    },
    yara_davis_8348: {
      name: { first_name: "Yara", last_name: "Davis" },
      address: {
        address1: "772 Hickory Lane",
        address2: "Suite 724",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92122"
      },
      email: "yara.davis2174@example.com",
      payment_methods: {
        credit_card_1248375: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2169",
          id: "credit_card_1248375"
        }
      },
      orders: ["#W3952055", "#W6985008"]
    },
    harper_moore_6183: {
      name: { first_name: "Harper", last_name: "Moore" },
      address: {
        address1: "419 Maple Drive",
        address2: "Suite 178",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75212"
      },
      email: "harper.moore3555@example.com",
      payment_methods: {
        gift_card_5757768: {
          source: "gift_card",
          balance: 57,
          id: "gift_card_5757768"
        }
      },
      orders: ["#W9270202", "#W5703958"]
    },
    isabella_thomas_4211: {
      name: { first_name: "Isabella", last_name: "Thomas" },
      address: {
        address1: "811 Elm Street",
        address2: "Suite 144",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28243"
      },
      email: "isabella.thomas1701@example.com",
      payment_methods: {
        gift_card_5826260: {
          source: "gift_card",
          balance: 64,
          id: "gift_card_5826260"
        }
      },
      orders: ["#W1770559"]
    },
    daiki_moore_2408: {
      name: { first_name: "Daiki", last_name: "Moore" },
      address: {
        address1: "111 Pine Lane",
        address2: "Suite 653",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75338"
      },
      email: "daiki.moore1031@example.com",
      payment_methods: {
        credit_card_5613268: {
          source: "credit_card",
          brand: "visa",
          last_four: "4204",
          id: "credit_card_5613268"
        },
        gift_card_7999104: {
          source: "gift_card",
          balance: 77,
          id: "gift_card_7999104"
        },
        credit_card_7591273: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6934",
          id: "credit_card_7591273"
        },
        paypal_6542279: { source: "paypal", id: "paypal_6542279" }
      },
      orders: ["#W4843514"]
    },
    yara_hernandez_3670: {
      name: { first_name: "Yara", last_name: "Hernandez" },
      address: {
        address1: "804 Willow Lane",
        address2: "Suite 167",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32121"
      },
      email: "yara.hernandez7166@example.com",
      payment_methods: {
        gift_card_3985012: {
          source: "gift_card",
          balance: 14,
          id: "gift_card_3985012"
        },
        credit_card_5528301: {
          source: "credit_card",
          brand: "visa",
          last_four: "1947",
          id: "credit_card_5528301"
        },
        paypal_5589935: { source: "paypal", id: "paypal_5589935" }
      },
      orders: ["#W7860975", "#W2156941"]
    },
    isabella_ahmed_5527: {
      name: { first_name: "Isabella", last_name: "Ahmed" },
      address: {
        address1: "674 Elm Street",
        address2: "Suite 936",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92136"
      },
      email: "isabella.ahmed4297@example.com",
      payment_methods: {
        paypal_5957185: { source: "paypal", id: "paypal_5957185" }
      },
      orders: []
    },
    anya_sanchez_9707: {
      name: { first_name: "Anya", last_name: "Sanchez" },
      address: {
        address1: "308 Main Street",
        address2: "Suite 214",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43171"
      },
      email: "anya.sanchez7626@example.com",
      payment_methods: {
        paypal_1191071: { source: "paypal", id: "paypal_1191071" }
      },
      orders: ["#W5402785", "#W2136962", "#W4442043", "#W6002958"]
    },
    ethan_sanchez_7289: {
      name: { first_name: "Ethan", last_name: "Sanchez" },
      address: {
        address1: "132 Hillcrest Drive",
        address2: "Suite 744",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85093"
      },
      email: "ethan.sanchez3299@example.com",
      payment_methods: {
        gift_card_5917510: {
          source: "gift_card",
          balance: 73,
          id: "gift_card_5917510"
        }
      },
      orders: ["#W7147989", "#W5560533", "#W3251536"]
    },
    isabella_brown_4999: {
      name: { first_name: "Isabella", last_name: "Brown" },
      address: {
        address1: "956 Chestnut Street",
        address2: "Suite 302",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46288"
      },
      email: "isabella.brown6764@example.com",
      payment_methods: {
        gift_card_5681264: {
          source: "gift_card",
          balance: 70,
          id: "gift_card_5681264"
        }
      },
      orders: ["#W7810809", "#W7152670"]
    },
    fatima_martin_9326: {
      name: { first_name: "Fatima", last_name: "Martin" },
      address: {
        address1: "512 Maple Drive",
        address2: "Suite 729",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92151"
      },
      email: "fatima.martin1284@example.com",
      payment_methods: {
        credit_card_6513839: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3295",
          id: "credit_card_6513839"
        }
      },
      orders: ["#W3376947", "#W7538230"]
    },
    ava_hernandez_9365: {
      name: { first_name: "Ava", last_name: "Hernandez" },
      address: {
        address1: "661 Highland Drive",
        address2: "Suite 881",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46205"
      },
      email: "ava.hernandez8232@example.com",
      payment_methods: {
        paypal_7565289: { source: "paypal", id: "paypal_7565289" }
      },
      orders: ["#W4506173"]
    },
    omar_taylor_7361: {
      name: { first_name: "Omar", last_name: "Taylor" },
      address: {
        address1: "838 Elm Street",
        address2: "Suite 224",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80266"
      },
      email: "omar.taylor5701@example.com",
      payment_methods: {
        credit_card_4646026: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3929",
          id: "credit_card_4646026"
        },
        paypal_5100305: { source: "paypal", id: "paypal_5100305" }
      },
      orders: []
    },
    mei_davis_8935: {
      name: { first_name: "Mei", last_name: "Davis" },
      address: {
        address1: "698 Maple Drive",
        address2: "Suite 465",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80217"
      },
      email: "mei.davis6811@example.com",
      payment_methods: {
        credit_card_1061405: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "1037",
          id: "credit_card_1061405"
        }
      },
      orders: ["#W2890441", "#W1267569"]
    },
    ava_smith_1453: {
      name: { first_name: "Ava", last_name: "Smith" },
      address: {
        address1: "121 River Road",
        address2: "Suite 510",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80227"
      },
      email: "ava.smith4465@example.com",
      payment_methods: {
        credit_card_6291943: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3744",
          id: "credit_card_6291943"
        },
        gift_card_8836799: {
          source: "gift_card",
          balance: 78,
          id: "gift_card_8836799"
        }
      },
      orders: ["#W8328622", "#W3197825"]
    },
    liam_kovacs_4286: {
      name: { first_name: "Liam", last_name: "Kovacs" },
      address: {
        address1: "260 Sunset Drive",
        address2: "Suite 279",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20065"
      },
      email: "liam.kovacs5432@example.com",
      payment_methods: {
        gift_card_4544711: {
          source: "gift_card",
          balance: 37,
          id: "gift_card_4544711"
        }
      },
      orders: ["#W1547606", "#W5762451", "#W3417600", "#W4622215"]
    },
    olivia_khan_9030: {
      name: { first_name: "Olivia", last_name: "Khan" },
      address: {
        address1: "615 Park Avenue",
        address2: "Suite 519",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92110"
      },
      email: "olivia.khan2360@example.com",
      payment_methods: {
        gift_card_8367886: {
          source: "gift_card",
          balance: 58,
          id: "gift_card_8367886"
        },
        paypal_4992138: { source: "paypal", id: "paypal_4992138" },
        credit_card_7376788: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2184",
          id: "credit_card_7376788"
        },
        credit_card_1936578: {
          source: "credit_card",
          brand: "visa",
          last_four: "9765",
          id: "credit_card_1936578"
        }
      },
      orders: ["#W3840181"]
    },
    lucas_muller_4380: {
      name: { first_name: "Lucas", last_name: "Muller" },
      address: {
        address1: "125 River Road",
        address2: "Suite 131",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78763"
      },
      email: "lucas.muller7899@example.com",
      payment_methods: {
        gift_card_2748512: {
          source: "gift_card",
          balance: 9,
          id: "gift_card_2748512"
        }
      },
      orders: ["#W7259850", "#W3206099", "#W1523776"]
    },
    lucas_johansson_7634: {
      name: { first_name: "Lucas", last_name: "Johansson" },
      address: {
        address1: "443 Hickory Lane",
        address2: "Suite 851",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98128"
      },
      email: "lucas.johansson5389@example.com",
      payment_methods: {
        gift_card_4896125: {
          source: "gift_card",
          balance: 75,
          id: "gift_card_4896125"
        }
      },
      orders: []
    },
    liam_thomas_1090: {
      name: { first_name: "Liam", last_name: "Thomas" },
      address: {
        address1: "977 Willow Lane",
        address2: "Suite 445",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43088"
      },
      email: "liam.thomas7599@example.com",
      payment_methods: {
        credit_card_8989144: {
          source: "credit_card",
          brand: "visa",
          last_four: "3374",
          id: "credit_card_8989144"
        },
        credit_card_5903613: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4767",
          id: "credit_card_5903613"
        }
      },
      orders: ["#W8808605"]
    },
    harper_khan_9597: {
      name: { first_name: "Harper", last_name: "Khan" },
      address: {
        address1: "371 River Road",
        address2: "Suite 726",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19029"
      },
      email: "harper.khan1177@example.com",
      payment_methods: {
        gift_card_6445682: {
          source: "gift_card",
          balance: 99,
          id: "gift_card_6445682"
        },
        credit_card_1719121: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "7159",
          id: "credit_card_1719121"
        }
      },
      orders: ["#W3134391", "#W8073958"]
    },
    noah_ito_3850: {
      name: { first_name: "Noah", last_name: "Ito" },
      address: {
        address1: "619 Broadway",
        address2: "Suite 484",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98187"
      },
      email: "noah.ito4296@example.com",
      payment_methods: {
        credit_card_1620755: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "1065",
          id: "credit_card_1620755"
        }
      },
      orders: ["#W3445693", "#W4219264", "#W6729841"]
    },
    mia_nguyen_6399: {
      name: { first_name: "Mia", last_name: "Nguyen" },
      address: {
        address1: "412 Lakeview Drive",
        address2: "Suite 698",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78229"
      },
      email: "mia.nguyen5072@example.com",
      payment_methods: {
        paypal_3722088: { source: "paypal", id: "paypal_3722088" }
      },
      orders: ["#W4657527", "#W7259788"]
    },
    fatima_garcia_8472: {
      name: { first_name: "Fatima", last_name: "Garcia" },
      address: {
        address1: "243 Willow Lane",
        address2: "Suite 681",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78763"
      },
      email: "fatima.garcia4587@example.com",
      payment_methods: {
        gift_card_5482463: {
          source: "gift_card",
          balance: 15,
          id: "gift_card_5482463"
        },
        credit_card_8133285: {
          source: "credit_card",
          brand: "visa",
          last_four: "3739",
          id: "credit_card_8133285"
        }
      },
      orders: []
    },
    liam_li_6251: {
      name: { first_name: "Liam", last_name: "Li" },
      address: {
        address1: "674 Willow Lane",
        address2: "Suite 375",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75285"
      },
      email: "liam.li5782@example.com",
      payment_methods: {
        gift_card_5800903: {
          source: "gift_card",
          balance: 40,
          id: "gift_card_5800903"
        }
      },
      orders: ["#W4503264", "#W6611080", "#W7554786"]
    },
    raj_kim_8554: {
      name: { first_name: "Raj", last_name: "Kim" },
      address: {
        address1: "312 Chestnut Street",
        address2: "Suite 305",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32145"
      },
      email: "raj.kim9998@example.com",
      payment_methods: {
        credit_card_4591662: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3954",
          id: "credit_card_4591662"
        },
        paypal_5040828: { source: "paypal", id: "paypal_5040828" }
      },
      orders: ["#W5697187"]
    },
    yusuf_hernandez_6785: {
      name: { first_name: "Yusuf", last_name: "Hernandez" },
      address: {
        address1: "580 Broadway",
        address2: "Suite 162",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80265"
      },
      email: "yusuf.hernandez8836@example.com",
      payment_methods: {
        paypal_7529813: { source: "paypal", id: "paypal_7529813" }
      },
      orders: ["#W2166301", "#W2466703", "#W6832752", "#W7739115", "#W1994898"]
    },
    amelia_silva_7726: {
      name: { first_name: "Amelia", last_name: "Silva" },
      address: {
        address1: "182 Elm Avenue",
        address2: "Suite 875",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19117"
      },
      email: "amelia.silva7872@example.com",
      payment_methods: {
        gift_card_3491931: {
          source: "gift_card",
          balance: 73,
          id: "gift_card_3491931"
        }
      },
      orders: [
        "#W2586676",
        "#W5400801",
        "#W4597054",
        "#W4836353",
        "#W7773202",
        "#W7342738"
      ]
    },
    liam_johnson_5676: {
      name: { first_name: "Liam", last_name: "Johnson" },
      address: {
        address1: "239 Cedar Street",
        address2: "Suite 337",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46244"
      },
      email: "liam.johnson8037@example.com",
      payment_methods: {
        paypal_6529289: { source: "paypal", id: "paypal_6529289" },
        credit_card_7120747: {
          source: "credit_card",
          brand: "visa",
          last_four: "1393",
          id: "credit_card_7120747"
        }
      },
      orders: ["#W7190291", "#W1177016"]
    },
    juan_rossi_6696: {
      name: { first_name: "Juan", last_name: "Rossi" },
      address: {
        address1: "101 Broadway",
        address2: "Suite 408",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77209"
      },
      email: "juan.rossi2348@example.com",
      payment_methods: {
        gift_card_8893815: {
          source: "gift_card",
          balance: 18,
          id: "gift_card_8893815"
        },
        credit_card_9801224: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "5791",
          id: "credit_card_9801224"
        }
      },
      orders: ["#W7602708"]
    },
    raj_johnson_3377: {
      name: { first_name: "Raj", last_name: "Johnson" },
      address: {
        address1: "880 Hillcrest Drive",
        address2: "Suite 759",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95133"
      },
      email: "raj.johnson2993@example.com",
      payment_methods: {
        credit_card_5409039: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3742",
          id: "credit_card_5409039"
        }
      },
      orders: []
    },
    fatima_nguyen_7539: {
      name: { first_name: "Fatima", last_name: "Nguyen" },
      address: {
        address1: "592 Broadway",
        address2: "Suite 330",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43211"
      },
      email: "fatima.nguyen1348@example.com",
      payment_methods: {
        paypal_2613218: { source: "paypal", id: "paypal_2613218" }
      },
      orders: ["#W8808563", "#W2904339", "#W5256976"]
    },
    anya_ahmed_2271: {
      name: { first_name: "Anya", last_name: "Ahmed" },
      address: {
        address1: "892 Lakeview Drive",
        address2: "Suite 301",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10133"
      },
      email: "anya.ahmed2185@example.com",
      payment_methods: {
        paypal_7881036: { source: "paypal", id: "paypal_7881036" }
      },
      orders: ["#W6217120", "#W6309286"]
    },
    harper_ahmed_4844: {
      name: { first_name: "Harper", last_name: "Ahmed" },
      address: {
        address1: "744 Maple Drive",
        address2: "Suite 403",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19147"
      },
      email: "harper.ahmed7911@example.com",
      payment_methods: {
        gift_card_4529075: {
          source: "gift_card",
          balance: 92,
          id: "gift_card_4529075"
        }
      },
      orders: ["#W7857572", "#W8750911", "#W5911118"]
    },
    fatima_anderson_2157: {
      name: { first_name: "Fatima", last_name: "Anderson" },
      address: {
        address1: "334 Broadway",
        address2: "Suite 326",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32100"
      },
      email: "fatima.anderson1447@example.com",
      payment_methods: {
        paypal_7916550: { source: "paypal", id: "paypal_7916550" }
      },
      orders: ["#W2974929", "#W4111294", "#W4514908"]
    },
    anya_muller_4683: {
      name: { first_name: "Anya", last_name: "Muller" },
      address: {
        address1: "552 Spruce Street",
        address2: "Suite 364",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80240"
      },
      email: "anya.muller7371@example.com",
      payment_methods: {
        credit_card_5730240: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6671",
          id: "credit_card_5730240"
        },
        gift_card_9684611: {
          source: "gift_card",
          balance: 80,
          id: "gift_card_9684611"
        },
        paypal_8465963: { source: "paypal", id: "paypal_8465963" }
      },
      orders: ["#W8339330", "#W3248320"]
    },
    noah_patel_2927: {
      name: { first_name: "Noah", last_name: "Patel" },
      address: {
        address1: "143 Oak Street",
        address2: "Suite 106",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95163"
      },
      email: "noah.patel7500@example.com",
      payment_methods: {
        paypal_5515419: { source: "paypal", id: "paypal_5515419" }
      },
      orders: []
    },
    olivia_davis_3316: {
      name: { first_name: "Olivia", last_name: "Davis" },
      address: {
        address1: "416 Broadway",
        address2: "Suite 222",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77244"
      },
      email: "olivia.davis4495@example.com",
      payment_methods: {
        credit_card_8278346: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4805",
          id: "credit_card_8278346"
        },
        paypal_8673863: { source: "paypal", id: "paypal_8673863" },
        credit_card_9631403: {
          source: "credit_card",
          brand: "visa",
          last_four: "7777",
          id: "credit_card_9631403"
        }
      },
      orders: ["#W7623533"]
    },
    sofia_lee_1386: {
      name: { first_name: "Sofia", last_name: "Lee" },
      address: {
        address1: "552 Sunset Drive",
        address2: "Suite 742",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95112"
      },
      email: "sofia.lee8671@example.com",
      payment_methods: {
        gift_card_2078315: {
          source: "gift_card",
          balance: 84,
          id: "gift_card_2078315"
        }
      },
      orders: []
    },
    harper_khan_8862: {
      name: { first_name: "Harper", last_name: "Khan" },
      address: {
        address1: "363 Cedar Avenue",
        address2: "Suite 894",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85063"
      },
      email: "harper.khan8303@example.com",
      payment_methods: {
        credit_card_1586014: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "1192",
          id: "credit_card_1586014"
        }
      },
      orders: ["#W9051575", "#W4725115"]
    },
    harper_lee_2110: {
      name: { first_name: "Harper", last_name: "Lee" },
      address: {
        address1: "788 Park Avenue",
        address2: "Suite 618",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76157"
      },
      email: "harper.lee5642@example.com",
      payment_methods: {
        gift_card_8417258: {
          source: "gift_card",
          balance: 97,
          id: "gift_card_8417258"
        }
      },
      orders: ["#W8584917", "#W8413040", "#W4363379"]
    },
    james_nguyen_3360: {
      name: { first_name: "James", last_name: "Nguyen" },
      address: {
        address1: "190 Cedar Avenue",
        address2: "Suite 809",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43296"
      },
      email: "james.nguyen6448@example.com",
      payment_methods: {
        paypal_9745646: { source: "paypal", id: "paypal_9745646" },
        gift_card_1247437: {
          source: "gift_card",
          balance: 82,
          id: "gift_card_1247437"
        }
      },
      orders: []
    },
    ivan_johnson_6036: {
      name: { first_name: "Ivan", last_name: "Johnson" },
      address: {
        address1: "581 Hillcrest Drive",
        address2: "Suite 869",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94183"
      },
      email: "ivan.johnson5749@example.com",
      payment_methods: {
        paypal_6918118: { source: "paypal", id: "paypal_6918118" }
      },
      orders: ["#W1671835"]
    },
    mia_jackson_5377: {
      name: { first_name: "Mia", last_name: "Jackson" },
      address: {
        address1: "489 Cedar Avenue",
        address2: "Suite 877",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19044"
      },
      email: "mia.jackson2679@example.com",
      payment_methods: {
        paypal_1231496: { source: "paypal", id: "paypal_1231496" }
      },
      orders: ["#W1298962", "#W8411016"]
    },
    mei_gonzalez_4785: {
      name: { first_name: "Mei", last_name: "Gonzalez" },
      address: {
        address1: "858 Elm Street",
        address2: "Suite 912",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95170"
      },
      email: "mei.gonzalez8775@example.com",
      payment_methods: {
        credit_card_4387170: {
          source: "credit_card",
          brand: "visa",
          last_four: "3742",
          id: "credit_card_4387170"
        },
        paypal_2568958: { source: "paypal", id: "paypal_2568958" }
      },
      orders: ["#W7303089", "#W2052757"]
    },
    juan_garcia_9528: {
      name: { first_name: "Juan", last_name: "Garcia" },
      address: {
        address1: "963 Elm Avenue",
        address2: "Suite 469",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75253"
      },
      email: "juan.garcia2336@example.com",
      payment_methods: {
        gift_card_6369065: {
          source: "gift_card",
          balance: 24,
          id: "gift_card_6369065"
        }
      },
      orders: ["#W3858003", "#W1013897"]
    },
    ava_lopez_2676: {
      name: { first_name: "Ava", last_name: "Lopez" },
      address: {
        address1: "836 Hickory Lane",
        address2: "Suite 848",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92168"
      },
      email: "ava.lopez3569@example.com",
      payment_methods: {
        credit_card_7772870: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9677",
          id: "credit_card_7772870"
        },
        gift_card_4855547: {
          source: "gift_card",
          balance: 6,
          id: "gift_card_4855547"
        }
      },
      orders: ["#W8327915", "#W5911003", "#W2941275"]
    },
    lei_patel_5376: {
      name: { first_name: "Lei", last_name: "Patel" },
      address: {
        address1: "690 Elm Avenue",
        address2: "Suite 631",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98119"
      },
      email: "lei.patel3765@example.com",
      payment_methods: {
        credit_card_6450011: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2836",
          id: "credit_card_6450011"
        }
      },
      orders: ["#W4172216"]
    },
    yara_ito_8499: {
      name: { first_name: "Yara", last_name: "Ito" },
      address: {
        address1: "179 Broadway",
        address2: "Suite 256",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75284"
      },
      email: "yara.ito7353@example.com",
      payment_methods: {
        paypal_1679017: { source: "paypal", id: "paypal_1679017" }
      },
      orders: ["#W1304208", "#W8353027", "#W3191978", "#W1809337"]
    },
    chen_wilson_4378: {
      name: { first_name: "Chen", last_name: "Wilson" },
      address: {
        address1: "274 Highland Drive",
        address2: "Suite 982",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80217"
      },
      email: "chen.wilson5208@example.com",
      payment_methods: {
        gift_card_1806650: {
          source: "gift_card",
          balance: 12,
          id: "gift_card_1806650"
        },
        credit_card_6945568: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2556",
          id: "credit_card_6945568"
        }
      },
      orders: ["#W8328493"]
    },
    fatima_jackson_2346: {
      name: { first_name: "Fatima", last_name: "Jackson" },
      address: {
        address1: "192 Elm Avenue",
        address2: "Suite 360",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94182"
      },
      email: "fatima.jackson7472@example.com",
      payment_methods: {
        gift_card_5990250: {
          source: "gift_card",
          balance: 84,
          id: "gift_card_5990250"
        }
      },
      orders: ["#W5185761"]
    },
    omar_muller_8833: {
      name: { first_name: "Omar", last_name: "Muller" },
      address: {
        address1: "217 Hickory Lane",
        address2: "Suite 646",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78252"
      },
      email: "omar.muller2208@example.com",
      payment_methods: {
        paypal_4439305: { source: "paypal", id: "paypal_4439305" }
      },
      orders: ["#W9941744", "#W8343509"]
    },
    harper_ahmed_5055: {
      name: { first_name: "Harper", last_name: "Ahmed" },
      address: {
        address1: "610 Elm Street",
        address2: "Suite 768",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85041"
      },
      email: "harper.ahmed2148@example.com",
      payment_methods: {
        gift_card_9196678: {
          source: "gift_card",
          balance: 81,
          id: "gift_card_9196678"
        }
      },
      orders: ["#W9532616"]
    },
    raj_martin_9275: {
      name: { first_name: "Raj", last_name: "Martin" },
      address: {
        address1: "355 Chestnut Street",
        address2: "Suite 271",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85092"
      },
      email: "raj.martin1299@example.com",
      payment_methods: {
        credit_card_4834117: {
          source: "credit_card",
          brand: "visa",
          last_four: "3303",
          id: "credit_card_4834117"
        }
      },
      orders: ["#W9879411", "#W7040556"]
    },
    mohamed_li_1979: {
      name: { first_name: "Mohamed", last_name: "Li" },
      address: {
        address1: "615 Elm Avenue",
        address2: "Suite 790",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43209"
      },
      email: "mohamed.li8414@example.com",
      payment_methods: {
        paypal_6045911: { source: "paypal", id: "paypal_6045911" }
      },
      orders: ["#W7824724", "#W2437730", "#W8844578", "#W8864622"]
    },
    yara_lee_7701: {
      name: { first_name: "Yara", last_name: "Lee" },
      address: {
        address1: "944 Laurel Lane",
        address2: "Suite 386",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77243"
      },
      email: "yara.lee9368@example.com",
      payment_methods: {
        credit_card_6450164: {
          source: "credit_card",
          brand: "visa",
          last_four: "6367",
          id: "credit_card_6450164"
        },
        credit_card_6680679: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "5715",
          id: "credit_card_6680679"
        }
      },
      orders: ["#W2832660", "#W1341845", "#W3320020"]
    },
    lucas_martin_7509: {
      name: { first_name: "Lucas", last_name: "Martin" },
      address: {
        address1: "966 Willow Lane",
        address2: "Suite 647",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78753"
      },
      email: "lucas.martin9430@example.com",
      payment_methods: {
        credit_card_2325059: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "8198",
          id: "credit_card_2325059"
        }
      },
      orders: ["#W5502903", "#W4998173"]
    },
    sophia_wilson_7936: {
      name: { first_name: "Sophia", last_name: "Wilson" },
      address: {
        address1: "916 Pine Lane",
        address2: "Suite 113",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78775"
      },
      email: "sophia.wilson1992@example.com",
      payment_methods: {
        credit_card_6428848: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6365",
          id: "credit_card_6428848"
        }
      },
      orders: ["#W3386455", "#W8209112"]
    },
    mei_muller_4350: {
      name: { first_name: "Mei", last_name: "Muller" },
      address: {
        address1: "266 Chestnut Street",
        address2: "Suite 218",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76106"
      },
      email: "mei.muller2733@example.com",
      payment_methods: {
        gift_card_4513225: {
          source: "gift_card",
          balance: 94,
          id: "gift_card_4513225"
        }
      },
      orders: []
    },
    yusuf_patel_7767: {
      name: { first_name: "Yusuf", last_name: "Patel" },
      address: {
        address1: "646 Highland Drive",
        address2: "Suite 881",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94117"
      },
      email: "yusuf.patel5348@example.com",
      payment_methods: {
        gift_card_3372949: {
          source: "gift_card",
          balance: 60,
          id: "gift_card_3372949"
        }
      },
      orders: ["#W9924173", "#W2274128", "#W2236333", "#W1052399"]
    },
    isabella_johnson_6293: {
      name: { first_name: "Isabella", last_name: "Johnson" },
      address: {
        address1: "360 Pine Lane",
        address2: "Suite 137",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98119"
      },
      email: "isabella.johnson5435@example.com",
      payment_methods: {
        gift_card_7172261: {
          source: "gift_card",
          balance: 98,
          id: "gift_card_7172261"
        },
        paypal_5071744: { source: "paypal", id: "paypal_5071744" }
      },
      orders: ["#W3431083"]
    },
    ava_sanchez_8588: {
      name: { first_name: "Ava", last_name: "Sanchez" },
      address: {
        address1: "408 Oak Street",
        address2: "Suite 179",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20500"
      },
      email: "ava.sanchez1133@example.com",
      payment_methods: {
        credit_card_6044650: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9885",
          id: "credit_card_6044650"
        }
      },
      orders: ["#W8587412"]
    },
    noah_johnson_1366: {
      name: { first_name: "Noah", last_name: "Johnson" },
      address: {
        address1: "432 Cedar Street",
        address2: "Suite 889",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85092"
      },
      email: "noah.johnson5178@example.com",
      payment_methods: {
        credit_card_2884251: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2027",
          id: "credit_card_2884251"
        },
        gift_card_2322032: {
          source: "gift_card",
          balance: 85,
          id: "gift_card_2322032"
        },
        paypal_1955539: { source: "paypal", id: "paypal_1955539" }
      },
      orders: []
    },
    isabella_anderson_7248: {
      name: { first_name: "Isabella", last_name: "Anderson" },
      address: {
        address1: "243 Pine Lane",
        address2: "Suite 317",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95125"
      },
      email: "isabella.anderson3065@example.com",
      payment_methods: {
        paypal_7004489: { source: "paypal", id: "paypal_7004489" }
      },
      orders: ["#W9588597"]
    },
    anya_kovacs_9542: {
      name: { first_name: "Anya", last_name: "Kovacs" },
      address: {
        address1: "841 Hillcrest Drive",
        address2: "Suite 278",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95132"
      },
      email: "anya.kovacs3474@example.com",
      payment_methods: {
        credit_card_4829249: {
          source: "credit_card",
          brand: "visa",
          last_four: "1635",
          id: "credit_card_4829249"
        }
      },
      orders: ["#W6821773"]
    },
    aarav_martin_9556: {
      name: { first_name: "Aarav", last_name: "Martin" },
      address: {
        address1: "179 Spruce Street",
        address2: "Suite 788",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92143"
      },
      email: "aarav.martin3986@example.com",
      payment_methods: {
        gift_card_4232974: {
          source: "gift_card",
          balance: 14,
          id: "gift_card_4232974"
        }
      },
      orders: ["#W2530531"]
    },
    raj_anderson_8746: {
      name: { first_name: "Raj", last_name: "Anderson" },
      address: {
        address1: "854 Broadway",
        address2: "Suite 872",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76134"
      },
      email: "raj.anderson8179@example.com",
      payment_methods: {
        gift_card_2161766: {
          source: "gift_card",
          balance: 95,
          id: "gift_card_2161766"
        },
        paypal_4104940: { source: "paypal", id: "paypal_4104940" }
      },
      orders: ["#W8389220"]
    },
    mei_jackson_1214: {
      name: { first_name: "Mei", last_name: "Jackson" },
      address: {
        address1: "798 Maple Drive",
        address2: "Suite 884",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78729"
      },
      email: "mei.jackson3801@example.com",
      payment_methods: {
        paypal_8305620: { source: "paypal", id: "paypal_8305620" }
      },
      orders: ["#W5881725", "#W6867036"]
    },
    amelia_wilson_4614: {
      name: { first_name: "Amelia", last_name: "Wilson" },
      address: {
        address1: "388 Elm Avenue",
        address2: "Suite 384",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75215"
      },
      email: "amelia.wilson1598@example.com",
      payment_methods: {
        paypal_4101143: { source: "paypal", id: "paypal_4101143" },
        gift_card_7108145: {
          source: "gift_card",
          balance: 97,
          id: "gift_card_7108145"
        }
      },
      orders: ["#W9077205", "#W4420044", "#W3062096"]
    },
    juan_lopez_5820: {
      name: { first_name: "Juan", last_name: "Lopez" },
      address: {
        address1: "411 Park Avenue",
        address2: "Suite 987",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85060"
      },
      email: "juan.lopez7539@example.com",
      payment_methods: {
        paypal_6729210: { source: "paypal", id: "paypal_6729210" }
      },
      orders: ["#W3386832", "#W3700848", "#W4466964"]
    },
    noah_taylor_8533: {
      name: { first_name: "Noah", last_name: "Taylor" },
      address: {
        address1: "134 Cedar Avenue",
        address2: "Suite 989",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85010"
      },
      email: "noah.taylor5369@example.com",
      payment_methods: {
        gift_card_5354170: {
          source: "gift_card",
          balance: 5,
          id: "gift_card_5354170"
        }
      },
      orders: ["#W8061371", "#W2286993"]
    },
    mei_li_2872: {
      name: { first_name: "Mei", last_name: "Li" },
      address: {
        address1: "121 Main Street",
        address2: "Suite 575",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92149"
      },
      email: "mei.li4718@example.com",
      payment_methods: {
        paypal_4060450: { source: "paypal", id: "paypal_4060450" }
      },
      orders: ["#W2936099", "#W2491829", "#W5036595"]
    },
    lucas_silva_7435: {
      name: { first_name: "Lucas", last_name: "Silva" },
      address: {
        address1: "990 Pine Lane",
        address2: "Suite 426",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78777"
      },
      email: "lucas.silva5146@example.com",
      payment_methods: {
        credit_card_8865901: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "5197",
          id: "credit_card_8865901"
        }
      },
      orders: ["#W1814268"]
    },
    omar_muller_7891: {
      name: { first_name: "Omar", last_name: "Muller" },
      address: {
        address1: "292 Chestnut Street",
        address2: "Suite 262",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60628"
      },
      email: "omar.muller4197@example.com",
      payment_methods: {
        gift_card_3689412: {
          source: "gift_card",
          balance: 52,
          id: "gift_card_3689412"
        }
      },
      orders: ["#W8736148", "#W7044833", "#W9474165", "#W8642391", "#W6573840"]
    },
    aarav_moore_6923: {
      name: { first_name: "Aarav", last_name: "Moore" },
      address: {
        address1: "330 Cedar Avenue",
        address2: "Suite 311",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85041"
      },
      email: "aarav.moore6937@example.com",
      payment_methods: {
        paypal_4751854: { source: "paypal", id: "paypal_4751854" }
      },
      orders: ["#W2842410", "#W8496475"]
    },
    aarav_santos_2259: {
      name: { first_name: "Aarav", last_name: "Santos" },
      address: {
        address1: "822 Elm Avenue",
        address2: "Suite 500",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76134"
      },
      email: "aarav.santos8320@example.com",
      payment_methods: {
        paypal_7664977: { source: "paypal", id: "paypal_7664977" }
      },
      orders: ["#W9672333", "#W8528674"]
    },
    sophia_jackson_7119: {
      name: { first_name: "Sophia", last_name: "Jackson" },
      address: {
        address1: "673 Spruce Street",
        address2: "Suite 583",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77035"
      },
      email: "sophia.jackson9875@example.com",
      payment_methods: {
        credit_card_6748580: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "8337",
          id: "credit_card_6748580"
        }
      },
      orders: ["#W3977493"]
    },
    noah_martin_5764: {
      name: { first_name: "Noah", last_name: "Martin" },
      address: {
        address1: "660 Maple Drive",
        address2: "Suite 853",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43090"
      },
      email: "noah.martin8712@example.com",
      payment_methods: {
        paypal_7383471: { source: "paypal", id: "paypal_7383471" }
      },
      orders: ["#W1971958", "#W7594624"]
    },
    olivia_ahmed_6778: {
      name: { first_name: "Olivia", last_name: "Ahmed" },
      address: {
        address1: "553 Main Street",
        address2: "Suite 389",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94152"
      },
      email: "olivia.ahmed5620@example.com",
      payment_methods: {
        gift_card_1044904: {
          source: "gift_card",
          balance: 16,
          id: "gift_card_1044904"
        },
        credit_card_9698900: {
          source: "credit_card",
          brand: "visa",
          last_four: "5022",
          id: "credit_card_9698900"
        }
      },
      orders: ["#W2609687", "#W1579621", "#W2260828", "#W3972714"]
    },
    ethan_muller_6097: {
      name: { first_name: "Ethan", last_name: "Muller" },
      address: {
        address1: "668 Spruce Street",
        address2: "Suite 237",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98128"
      },
      email: "ethan.muller6617@example.com",
      payment_methods: {
        credit_card_5721095: {
          source: "credit_card",
          brand: "visa",
          last_four: "1399",
          id: "credit_card_5721095"
        }
      },
      orders: ["#W3155037", "#W4683557", "#W4398027"]
    },
    ava_johnson_5052: {
      name: { first_name: "Ava", last_name: "Johnson" },
      address: {
        address1: "344 Park Avenue",
        address2: "Suite 727",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92171"
      },
      email: "ava.johnson1445@example.com",
      payment_methods: {
        paypal_3846161: { source: "paypal", id: "paypal_3846161" }
      },
      orders: ["#W7843431", "#W9178204", "#W2317937"]
    },
    omar_nguyen_4272: {
      name: { first_name: "Omar", last_name: "Nguyen" },
      address: {
        address1: "288 Cedar Avenue",
        address2: "Suite 809",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46242"
      },
      email: "omar.nguyen1923@example.com",
      payment_methods: {
        credit_card_8657352: {
          source: "credit_card",
          brand: "visa",
          last_four: "4109",
          id: "credit_card_8657352"
        },
        paypal_1031050: { source: "paypal", id: "paypal_1031050" }
      },
      orders: []
    },
    aarav_gonzalez_5113: {
      name: { first_name: "Aarav", last_name: "Gonzalez" },
      address: {
        address1: "264 River Road",
        address2: "Suite 604",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78268"
      },
      email: "aarav.gonzalez9269@example.com",
      payment_methods: {
        paypal_6121064: { source: "paypal", id: "paypal_6121064" },
        gift_card_5979071: {
          source: "gift_card",
          balance: 96,
          id: "gift_card_5979071"
        }
      },
      orders: ["#W6979932", "#W6797115", "#W9160732"]
    },
    mei_wilson_1792: {
      name: { first_name: "Mei", last_name: "Wilson" },
      address: {
        address1: "892 Maple Drive",
        address2: "Suite 319",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28260"
      },
      email: "mei.wilson5728@example.com",
      payment_methods: {
        gift_card_1888303: {
          source: "gift_card",
          balance: 52,
          id: "gift_card_1888303"
        }
      },
      orders: ["#W4498118"]
    },
    olivia_silva_7273: {
      name: { first_name: "Olivia", last_name: "Silva" },
      address: {
        address1: "894 Cedar Street",
        address2: "Suite 938",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32240"
      },
      email: "olivia.silva3776@example.com",
      payment_methods: {
        paypal_9379149: { source: "paypal", id: "paypal_9379149" }
      },
      orders: ["#W6940125", "#W7613749", "#W1524774"]
    },
    mei_hernandez_3296: {
      name: { first_name: "Mei", last_name: "Hernandez" },
      address: {
        address1: "401 Oak Street",
        address2: "Suite 332",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75237"
      },
      email: "mei.hernandez3608@example.com",
      payment_methods: {
        paypal_1768431: { source: "paypal", id: "paypal_1768431" }
      },
      orders: ["#W3864587"]
    },
    evelyn_gonzalez_8209: {
      name: { first_name: "Evelyn", last_name: "Gonzalez" },
      address: {
        address1: "635 Cedar Avenue",
        address2: "Suite 408",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10053"
      },
      email: "evelyn.gonzalez7152@example.com",
      payment_methods: {
        paypal_6069934: { source: "paypal", id: "paypal_6069934" },
        credit_card_2025256: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9188",
          id: "credit_card_2025256"
        }
      },
      orders: ["#W4500945"]
    },
    mei_silva_6882: {
      name: { first_name: "Mei", last_name: "Silva" },
      address: {
        address1: "980 Laurel Lane",
        address2: "Suite 654",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91147"
      },
      email: "mei.silva1182@example.com",
      payment_methods: {
        paypal_6619428: { source: "paypal", id: "paypal_6619428" }
      },
      orders: ["#W2640384"]
    },
    evelyn_lee_1924: {
      name: { first_name: "Evelyn", last_name: "Lee" },
      address: {
        address1: "885 Laurel Lane",
        address2: "Suite 756",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20122"
      },
      email: "evelyn.lee1200@example.com",
      payment_methods: {
        paypal_8719727: { source: "paypal", id: "paypal_8719727" }
      },
      orders: ["#W2015099", "#W3181060"]
    },
    lucas_brown_7591: {
      name: { first_name: "Lucas", last_name: "Brown" },
      address: {
        address1: "812 Chestnut Street",
        address2: "Suite 337",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10088"
      },
      email: "lucas.brown4474@example.com",
      payment_methods: {
        credit_card_5596164: {
          source: "credit_card",
          brand: "visa",
          last_four: "6096",
          id: "credit_card_5596164"
        }
      },
      orders: []
    },
    chen_moore_6080: {
      name: { first_name: "Chen", last_name: "Moore" },
      address: {
        address1: "275 Cedar Avenue",
        address2: "Suite 148",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91087"
      },
      email: "chen.moore4507@example.com",
      payment_methods: {
        credit_card_4041739: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3075",
          id: "credit_card_4041739"
        }
      },
      orders: ["#W9205196"]
    },
    ethan_moore_9003: {
      name: { first_name: "Ethan", last_name: "Moore" },
      address: {
        address1: "873 Hillcrest Drive",
        address2: "Suite 471",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75339"
      },
      email: "ethan.moore4109@example.com",
      payment_methods: {
        credit_card_5788451: {
          source: "credit_card",
          brand: "visa",
          last_four: "6169",
          id: "credit_card_5788451"
        },
        credit_card_6361025: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4275",
          id: "credit_card_6361025"
        }
      },
      orders: ["#W6026015"]
    },
    mohamed_lee_5442: {
      name: { first_name: "Mohamed", last_name: "Lee" },
      address: {
        address1: "961 Pine Lane",
        address2: "Suite 277",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75372"
      },
      email: "mohamed.lee1888@example.com",
      payment_methods: {
        credit_card_8169552: {
          source: "credit_card",
          brand: "visa",
          last_four: "4433",
          id: "credit_card_8169552"
        }
      },
      orders: ["#W7913362", "#W6114312", "#W6302827"]
    },
    olivia_garcia_1208: {
      name: { first_name: "Olivia", last_name: "Garcia" },
      address: {
        address1: "358 Laurel Lane",
        address2: "Suite 658",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20570"
      },
      email: "olivia.garcia2695@example.com",
      payment_methods: {
        gift_card_5115976: {
          source: "gift_card",
          balance: 92,
          id: "gift_card_5115976"
        }
      },
      orders: ["#W1075114"]
    },
    mason_kovacs_7590: {
      name: { first_name: "Mason", last_name: "Kovacs" },
      address: {
        address1: "202 Willow Lane",
        address2: "Suite 183",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98137"
      },
      email: "mason.kovacs6466@example.com",
      payment_methods: {
        credit_card_4314033: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4608",
          id: "credit_card_4314033"
        },
        gift_card_5372803: {
          source: "gift_card",
          balance: 63,
          id: "gift_card_5372803"
        }
      },
      orders: ["#W6030855"]
    },
    isabella_taylor_7478: {
      name: { first_name: "Isabella", last_name: "Taylor" },
      address: {
        address1: "723 Oak Street",
        address2: "Suite 245",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60646"
      },
      email: "isabella.taylor7762@example.com",
      payment_methods: {
        gift_card_5501047: {
          source: "gift_card",
          balance: 49,
          id: "gift_card_5501047"
        }
      },
      orders: ["#W4892278", "#W6717215"]
    },
    mei_moore_5844: {
      name: { first_name: "Mei", last_name: "Moore" },
      address: {
        address1: "133 Pine Lane",
        address2: "Suite 125",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78778"
      },
      email: "mei.moore3279@example.com",
      payment_methods: {
        gift_card_7855900: {
          source: "gift_card",
          balance: 97,
          id: "gift_card_7855900"
        },
        paypal_2273719: { source: "paypal", id: "paypal_2273719" }
      },
      orders: []
    },
    daiki_khan_6856: {
      name: { first_name: "Daiki", last_name: "Khan" },
      address: {
        address1: "456 Laurel Lane",
        address2: "Suite 904",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28279"
      },
      email: "daiki.khan2146@example.com",
      payment_methods: {
        paypal_8879986: { source: "paypal", id: "paypal_8879986" },
        gift_card_2491643: {
          source: "gift_card",
          balance: 96,
          id: "gift_card_2491643"
        }
      },
      orders: ["#W2329074", "#W5861600", "#W8461477", "#W5875596"]
    },
    raj_kovacs_9859: {
      name: { first_name: "Raj", last_name: "Kovacs" },
      address: {
        address1: "644 Spruce Street",
        address2: "Suite 524",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10231"
      },
      email: "raj.kovacs2291@example.com",
      payment_methods: {
        paypal_7525649: { source: "paypal", id: "paypal_7525649" }
      },
      orders: ["#W1473345"]
    },
    omar_taylor_1594: {
      name: { first_name: "Omar", last_name: "Taylor" },
      address: {
        address1: "639 Cedar Avenue",
        address2: "Suite 969",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95112"
      },
      email: "omar.taylor9929@example.com",
      payment_methods: {
        credit_card_7256085: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6531",
          id: "credit_card_7256085"
        }
      },
      orders: ["#W8958831", "#W4928532"]
    },
    evelyn_patel_7348: {
      name: { first_name: "Evelyn", last_name: "Patel" },
      address: {
        address1: "838 Hickory Lane",
        address2: "Suite 409",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77052"
      },
      email: "evelyn.patel2779@example.com",
      payment_methods: {
        gift_card_4710495: {
          source: "gift_card",
          balance: 10,
          id: "gift_card_4710495"
        }
      },
      orders: ["#W4017490", "#W6023202"]
    },
    raj_ito_1740: {
      name: { first_name: "Raj", last_name: "Ito" },
      address: {
        address1: "667 Elm Street",
        address2: "Suite 624",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60641"
      },
      email: "raj.ito2921@example.com",
      payment_methods: {
        credit_card_6480285: {
          source: "credit_card",
          brand: "visa",
          last_four: "1060",
          id: "credit_card_6480285"
        }
      },
      orders: ["#W8448267", "#W1305304", "#W2053532"]
    },
    mia_taylor_6226: {
      name: { first_name: "Mia", last_name: "Taylor" },
      address: {
        address1: "668 Park Avenue",
        address2: "Suite 311",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78257"
      },
      email: "mia.taylor1165@example.com",
      payment_methods: {
        gift_card_2294498: {
          source: "gift_card",
          balance: 42,
          id: "gift_card_2294498"
        }
      },
      orders: ["#W2579604"]
    },
    sofia_thomas_1518: {
      name: { first_name: "Sofia", last_name: "Thomas" },
      address: {
        address1: "529 Cedar Avenue",
        address2: "Suite 371",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75307"
      },
      email: "sofia.thomas3069@example.com",
      payment_methods: {
        paypal_5334408: { source: "paypal", id: "paypal_5334408" }
      },
      orders: ["#W7619352", "#W3388163", "#W2297866"]
    },
    fatima_taylor_3452: {
      name: { first_name: "Fatima", last_name: "Taylor" },
      address: {
        address1: "922 Pine Lane",
        address2: "Suite 395",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32169"
      },
      email: "fatima.taylor7676@example.com",
      payment_methods: {
        credit_card_7952624: {
          source: "credit_card",
          brand: "visa",
          last_four: "7684",
          id: "credit_card_7952624"
        }
      },
      orders: ["#W5285031"]
    },
    ivan_hernandez_6923: {
      name: { first_name: "Ivan", last_name: "Hernandez" },
      address: {
        address1: "894 Hickory Lane",
        address2: "Suite 665",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92133"
      },
      email: "ivan.hernandez1120@example.com",
      payment_methods: {
        gift_card_9368765: {
          source: "gift_card",
          balance: 85,
          id: "gift_card_9368765"
        },
        credit_card_7455506: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "4127",
          id: "credit_card_7455506"
        }
      },
      orders: ["#W5838674", "#W4284542", "#W2782744"]
    },
    amelia_rossi_5121: {
      name: { first_name: "Amelia", last_name: "Rossi" },
      address: {
        address1: "602 Willow Lane",
        address2: "Suite 258",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28264"
      },
      email: "amelia.rossi1299@example.com",
      payment_methods: {
        paypal_6844511: { source: "paypal", id: "paypal_6844511" },
        gift_card_5591026: {
          source: "gift_card",
          balance: 91,
          id: "gift_card_5591026"
        },
        credit_card_6844118: {
          source: "credit_card",
          brand: "visa",
          last_four: "9402",
          id: "credit_card_6844118"
        }
      },
      orders: ["#W8255453", "#W5100317"]
    },
    mia_davis_8827: {
      name: { first_name: "Mia", last_name: "Davis" },
      address: {
        address1: "123 Elm Street",
        address2: "Suite 325",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28229"
      },
      email: "mia.davis7878@example.com",
      payment_methods: {
        gift_card_5897764: {
          source: "gift_card",
          balance: 98,
          id: "gift_card_5897764"
        }
      },
      orders: ["#W8580621", "#W6577842"]
    },
    yara_patel_8545: {
      name: { first_name: "Yara", last_name: "Patel" },
      address: {
        address1: "736 Willow Lane",
        address2: "Suite 550",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76130"
      },
      email: "yara.patel5445@example.com",
      payment_methods: {
        paypal_5398626: { source: "paypal", id: "paypal_5398626" },
        gift_card_9105630: {
          source: "gift_card",
          balance: 91,
          id: "gift_card_9105630"
        }
      },
      orders: ["#W1068289"]
    },
    anya_thomas_1213: {
      name: { first_name: "Anya", last_name: "Thomas" },
      address: {
        address1: "431 Highland Drive",
        address2: "Suite 272",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80298"
      },
      email: "anya.thomas9688@example.com",
      payment_methods: {
        paypal_2557789: { source: "paypal", id: "paypal_2557789" }
      },
      orders: ["#W7926964", "#W8870011", "#W7909132"]
    },
    ava_sanchez_4699: {
      name: { first_name: "Ava", last_name: "Sanchez" },
      address: {
        address1: "835 Spruce Street",
        address2: "Suite 648",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10189"
      },
      email: "ava.sanchez1281@example.com",
      payment_methods: {
        gift_card_2348024: {
          source: "gift_card",
          balance: 55,
          id: "gift_card_2348024"
        }
      },
      orders: []
    },
    mei_ahmed_4909: {
      name: { first_name: "Mei", last_name: "Ahmed" },
      address: {
        address1: "572 Cedar Street",
        address2: "Suite 469",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78705"
      },
      email: "mei.ahmed4901@example.com",
      payment_methods: {
        credit_card_5902940: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9375",
          id: "credit_card_5902940"
        }
      },
      orders: ["#W7553978", "#W3239882", "#W2598324"]
    },
    noah_nguyen_3444: {
      name: { first_name: "Noah", last_name: "Nguyen" },
      address: {
        address1: "288 Elm Avenue",
        address2: "Suite 811",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28258"
      },
      email: "noah.nguyen6041@example.com",
      payment_methods: {
        gift_card_5544191: {
          source: "gift_card",
          balance: 45,
          id: "gift_card_5544191"
        }
      },
      orders: ["#W4418025"]
    },
    isabella_smith_8805: {
      name: { first_name: "Isabella", last_name: "Smith" },
      address: {
        address1: "405 Highland Drive",
        address2: "Suite 395",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19152"
      },
      email: "isabella.smith2416@example.com",
      payment_methods: {
        gift_card_5476126: {
          source: "gift_card",
          balance: 26,
          id: "gift_card_5476126"
        },
        paypal_8707370: { source: "paypal", id: "paypal_8707370" }
      },
      orders: ["#W6686344"]
    },
    juan_santos_1448: {
      name: { first_name: "Juan", last_name: "Santos" },
      address: {
        address1: "693 Willow Lane",
        address2: "Suite 604",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28258"
      },
      email: "juan.santos3161@example.com",
      payment_methods: {
        gift_card_3767667: {
          source: "gift_card",
          balance: 45,
          id: "gift_card_3767667"
        }
      },
      orders: ["#W2582045"]
    },
    daiki_kovacs_2546: {
      name: { first_name: "Daiki", last_name: "Kovacs" },
      address: {
        address1: "191 Pine Lane",
        address2: "Suite 243",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43196"
      },
      email: "daiki.kovacs3314@example.com",
      payment_methods: {
        paypal_9103096: { source: "paypal", id: "paypal_9103096" }
      },
      orders: ["#W2259015"]
    },
    isabella_johansson_2152: {
      name: { first_name: "Isabella", last_name: "Johansson" },
      address: {
        address1: "313 Chestnut Street",
        address2: "Suite 537",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32286"
      },
      email: "isabella.johansson9391@example.com",
      payment_methods: {
        paypal_3024827: { source: "paypal", id: "paypal_3024827" }
      },
      orders: ["#W3792453", "#W7181492", "#W5565470", "#W2575533"]
    },
    james_li_5688: {
      name: { first_name: "James", last_name: "Li" },
      address: {
        address1: "215 River Road",
        address2: "Suite 991",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10083"
      },
      email: "james.li4495@example.com",
      payment_methods: {
        gift_card_1725971: {
          source: "gift_card",
          balance: 17,
          id: "gift_card_1725971"
        }
      },
      orders: ["#W2611340", "#W3632959", "#W4435622", "#W3638028"]
    },
    liam_muller_2178: {
      name: { first_name: "Liam", last_name: "Muller" },
      address: {
        address1: "371 Elm Avenue",
        address2: "Suite 865",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32250"
      },
      email: "liam.muller6925@example.com",
      payment_methods: {
        credit_card_9615915: {
          source: "credit_card",
          brand: "visa",
          last_four: "2983",
          id: "credit_card_9615915"
        }
      },
      orders: ["#W9486384", "#W9827806"]
    },
    lei_wilson_4541: {
      name: { first_name: "Lei", last_name: "Wilson" },
      address: {
        address1: "119 Elm Avenue",
        address2: "Suite 999",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32255"
      },
      email: "lei.wilson1253@example.com",
      payment_methods: {
        credit_card_3677959: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "1531",
          id: "credit_card_3677959"
        }
      },
      orders: ["#W3826449", "#W2905754", "#W4073673"]
    },
    ethan_thomas_1791: {
      name: { first_name: "Ethan", last_name: "Thomas" },
      address: {
        address1: "973 Laurel Lane",
        address2: "Suite 993",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43188"
      },
      email: "ethan.thomas7730@example.com",
      payment_methods: {
        paypal_6982172: { source: "paypal", id: "paypal_6982172" },
        credit_card_7472558: {
          source: "credit_card",
          brand: "visa",
          last_four: "8901",
          id: "credit_card_7472558"
        },
        gift_card_2519457: {
          source: "gift_card",
          balance: 32,
          id: "gift_card_2519457"
        }
      },
      orders: ["#W8465042", "#W7764382"]
    },
    lei_gonzalez_5407: {
      name: { first_name: "Lei", last_name: "Gonzalez" },
      address: {
        address1: "767 Park Avenue",
        address2: "Suite 594",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92105"
      },
      email: "lei.gonzalez2684@example.com",
      payment_methods: {
        paypal_4563893: { source: "paypal", id: "paypal_4563893" },
        gift_card_4411177: {
          source: "gift_card",
          balance: 78,
          id: "gift_card_4411177"
        }
      },
      orders: ["#W1632213", "#W7870498"]
    },
    yara_johansson_9032: {
      name: { first_name: "Yara", last_name: "Johansson" },
      address: {
        address1: "816 Oak Street",
        address2: "Suite 528",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94128"
      },
      email: "yara.johansson5198@example.com",
      payment_methods: {
        credit_card_6699629: {
          source: "credit_card",
          brand: "visa",
          last_four: "6348",
          id: "credit_card_6699629"
        }
      },
      orders: ["#W6904184", "#W9538251"]
    },
    ethan_kim_6983: {
      name: { first_name: "Ethan", last_name: "Kim" },
      address: {
        address1: "295 Highland Drive",
        address2: "Suite 492",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91517"
      },
      email: "ethan.kim8456@example.com",
      payment_methods: {
        gift_card_8646424: {
          source: "gift_card",
          balance: 7,
          id: "gift_card_8646424"
        }
      },
      orders: []
    },
    mei_kim_3337: {
      name: { first_name: "Mei", last_name: "Kim" },
      address: {
        address1: "878 Highland Drive",
        address2: "Suite 894",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77083"
      },
      email: "mei.kim6594@example.com",
      payment_methods: {
        gift_card_3505897: {
          source: "gift_card",
          balance: 28,
          id: "gift_card_3505897"
        }
      },
      orders: ["#W3263208"]
    },
    omar_moore_9540: {
      name: { first_name: "Omar", last_name: "Moore" },
      address: {
        address1: "548 Broadway",
        address2: "Suite 950",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10096"
      },
      email: "omar.moore7625@example.com",
      payment_methods: {
        credit_card_8008637: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6377",
          id: "credit_card_8008637"
        }
      },
      orders: ["#W8058304", "#W1874267"]
    },
    olivia_sanchez_2914: {
      name: { first_name: "Olivia", last_name: "Sanchez" },
      address: {
        address1: "710 Sunset Drive",
        address2: "Suite 855",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19116"
      },
      email: "olivia.sanchez1894@example.com",
      payment_methods: {
        gift_card_3573484: {
          source: "gift_card",
          balance: 5,
          id: "gift_card_3573484"
        },
        paypal_3388537: { source: "paypal", id: "paypal_3388537" }
      },
      orders: ["#W5101035"]
    },
    ava_nguyen_6971: {
      name: { first_name: "Ava", last_name: "Nguyen" },
      address: {
        address1: "670 Maple Drive",
        address2: "Suite 412",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80286"
      },
      email: "ava.nguyen1860@example.com",
      payment_methods: {
        gift_card_8640626: {
          source: "gift_card",
          balance: 79,
          id: "gift_card_8640626"
        }
      },
      orders: ["#W1773724", "#W2896492", "#W9594011", "#W7597893"]
    },
    sofia_lee_8857: {
      name: { first_name: "Sofia", last_name: "Lee" },
      address: {
        address1: "142 Chestnut Street",
        address2: "Suite 756",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91401"
      },
      email: "sofia.lee5283@example.com",
      payment_methods: {
        credit_card_4530788: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "9100",
          id: "credit_card_4530788"
        },
        paypal_3572679: { source: "paypal", id: "paypal_3572679" }
      },
      orders: ["#W7762997", "#W4143549"]
    },
    harper_kovacs_8617: {
      name: { first_name: "Harper", last_name: "Kovacs" },
      address: {
        address1: "696 Hillcrest Drive",
        address2: "Suite 872",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95154"
      },
      email: "harper.kovacs2446@example.com",
      payment_methods: {
        credit_card_7422485: {
          source: "credit_card",
          brand: "visa",
          last_four: "2080",
          id: "credit_card_7422485"
        }
      },
      orders: ["#W9093821", "#W3065353"]
    },
    liam_nguyen_9081: {
      name: { first_name: "Liam", last_name: "Nguyen" },
      address: {
        address1: "950 Park Avenue",
        address2: "Suite 809",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95184"
      },
      email: "liam.nguyen2434@example.com",
      payment_methods: {
        gift_card_4387500: {
          source: "gift_card",
          balance: 84,
          id: "gift_card_4387500"
        },
        paypal_3226997: { source: "paypal", id: "paypal_3226997" }
      },
      orders: ["#W3919881"]
    },
    sofia_li_8235: {
      name: { first_name: "Sofia", last_name: "Li" },
      address: {
        address1: "430 Cedar Street",
        address2: "Suite 288",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75390"
      },
      email: "sofia.li5731@example.com",
      payment_methods: {
        gift_card_3242199: {
          source: "gift_card",
          balance: 76,
          id: "gift_card_3242199"
        },
        credit_card_8296913: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6193",
          id: "credit_card_8296913"
        }
      },
      orders: ["#W6599568", "#W9323073"]
    },
    amelia_ito_8772: {
      name: { first_name: "Amelia", last_name: "Ito" },
      address: {
        address1: "999 Oak Street",
        address2: "Suite 918",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32184"
      },
      email: "amelia.ito8974@example.com",
      payment_methods: {
        credit_card_1016162: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "7517",
          id: "credit_card_1016162"
        },
        paypal_2767694: { source: "paypal", id: "paypal_2767694" }
      },
      orders: ["#W3733909", "#W3883329"]
    },
    ava_kovacs_8312: {
      name: { first_name: "Ava", last_name: "Kovacs" },
      address: {
        address1: "254 Laurel Lane",
        address2: "Suite 157",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75346"
      },
      email: "ava.kovacs8119@example.com",
      payment_methods: {
        paypal_3610783: { source: "paypal", id: "paypal_3610783" },
        gift_card_8324796: {
          source: "gift_card",
          balance: 62,
          id: "gift_card_8324796"
        }
      },
      orders: ["#W1693830", "#W4901434", "#W9706917"]
    },
    lei_ahmed_1705: {
      name: { first_name: "Lei", last_name: "Ahmed" },
      address: {
        address1: "125 Cedar Street",
        address2: "Suite 574",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19128"
      },
      email: "lei.ahmed1696@example.com",
      payment_methods: {
        credit_card_3593714: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3705",
          id: "credit_card_3593714"
        }
      },
      orders: ["#W9132840", "#W4432568", "#W6724985", "#W9015076", "#W3931703"]
    },
    omar_khan_2363: {
      name: { first_name: "Omar", last_name: "Khan" },
      address: {
        address1: "255 Chestnut Street",
        address2: "Suite 383",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75203"
      },
      email: "omar.khan3563@example.com",
      payment_methods: {
        credit_card_4420174: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "1374",
          id: "credit_card_4420174"
        }
      },
      orders: ["#W6304490", "#W8572370", "#W2421430"]
    },
    juan_smith_9901: {
      name: { first_name: "Juan", last_name: "Smith" },
      address: {
        address1: "127 Oak Street",
        address2: "Suite 727",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78770"
      },
      email: "juan.smith6503@example.com",
      payment_methods: {
        gift_card_9106672: {
          source: "gift_card",
          balance: 81,
          id: "gift_card_9106672"
        }
      },
      orders: ["#W6484127", "#W8271804", "#W3547545"]
    },
    harper_moore_7767: {
      name: { first_name: "Harper", last_name: "Moore" },
      address: {
        address1: "299 Oak Street",
        address2: "Suite 248",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32263"
      },
      email: "harper.moore8392@example.com",
      payment_methods: {
        paypal_6546615: { source: "paypal", id: "paypal_6546615" }
      },
      orders: ["#W5964460", "#W1926021"]
    },
    ivan_khan_7475: {
      name: { first_name: "Ivan", last_name: "Khan" },
      address: {
        address1: "159 Hickory Lane",
        address2: "Suite 995",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28243"
      },
      email: "ivan.khan6479@example.com",
      payment_methods: {
        gift_card_1711656: {
          source: "gift_card",
          balance: 62,
          id: "gift_card_1711656"
        },
        paypal_7729105: { source: "paypal", id: "paypal_7729105" }
      },
      orders: ["#W5270061", "#W7032009", "#W1519594", "#W5782623"]
    },
    sophia_garcia_5795: {
      name: { first_name: "Sophia", last_name: "Garcia" },
      address: {
        address1: "536 Cedar Street",
        address2: "Suite 916",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28212"
      },
      email: "sophia.garcia5907@example.com",
      payment_methods: {
        credit_card_9467292: {
          source: "credit_card",
          brand: "visa",
          last_four: "5114",
          id: "credit_card_9467292"
        }
      },
      orders: ["#W4958652", "#W6447372"]
    },
    lei_khan_6353: {
      name: { first_name: "Lei", last_name: "Khan" },
      address: {
        address1: "263 Laurel Lane",
        address2: "Suite 458",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92182"
      },
      email: "lei.khan8439@example.com",
      payment_methods: {
        gift_card_6786837: {
          source: "gift_card",
          balance: 55,
          id: "gift_card_6786837"
        },
        credit_card_7017098: {
          source: "credit_card",
          brand: "visa",
          last_four: "9288",
          id: "credit_card_7017098"
        }
      },
      orders: ["#W2787996"]
    },
    emma_rossi_2839: {
      name: { first_name: "Emma", last_name: "Rossi" },
      address: {
        address1: "662 Laurel Lane",
        address2: "Suite 917",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43289"
      },
      email: "emma.rossi7277@example.com",
      payment_methods: {
        paypal_3824028: { source: "paypal", id: "paypal_3824028" }
      },
      orders: ["#W9152938"]
    },
    lei_anderson_8271: {
      name: { first_name: "Lei", last_name: "Anderson" },
      address: {
        address1: "461 Willow Lane",
        address2: "Suite 823",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76192"
      },
      email: "lei.anderson3132@example.com",
      payment_methods: {
        paypal_1808675: { source: "paypal", id: "paypal_1808675" }
      },
      orders: ["#W1866533", "#W7242815", "#W4072946", "#W6002467"]
    },
    noah_anderson_1264: {
      name: { first_name: "Noah", last_name: "Anderson" },
      address: {
        address1: "995 Spruce Street",
        address2: "Suite 965",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92101"
      },
      email: "noah.anderson6224@example.com",
      payment_methods: {
        paypal_4907352: { source: "paypal", id: "paypal_4907352" }
      },
      orders: []
    },
    olivia_hernandez_5066: {
      name: { first_name: "Olivia", last_name: "Hernandez" },
      address: {
        address1: "537 Cedar Avenue",
        address2: "Suite 212",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20395"
      },
      email: "olivia.hernandez9440@example.com",
      payment_methods: {
        credit_card_2583849: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2786",
          id: "credit_card_2583849"
        }
      },
      orders: ["#W5671546", "#W6811468"]
    },
    aarav_wilson_9535: {
      name: { first_name: "Aarav", last_name: "Wilson" },
      address: {
        address1: "924 Cedar Avenue",
        address2: "Suite 190",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28214"
      },
      email: "aarav.wilson8531@example.com",
      payment_methods: {
        gift_card_9138722: {
          source: "gift_card",
          balance: 67,
          id: "gift_card_9138722"
        }
      },
      orders: ["#W7553778", "#W1046662"]
    },
    daiki_silva_1055: {
      name: { first_name: "Daiki", last_name: "Silva" },
      address: {
        address1: "576 Main Street",
        address2: "Suite 985",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94106"
      },
      email: "daiki.silva5143@example.com",
      payment_methods: {
        credit_card_8341900: {
          source: "credit_card",
          brand: "visa",
          last_four: "3967",
          id: "credit_card_8341900"
        },
        gift_card_1812639: {
          source: "gift_card",
          balance: 26,
          id: "gift_card_1812639"
        }
      },
      orders: ["#W7554560", "#W8393353"]
    },
    noah_wilson_5178: {
      name: { first_name: "Noah", last_name: "Wilson" },
      address: {
        address1: "103 Pine Lane",
        address2: "Suite 730",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78703"
      },
      email: "noah.wilson9263@example.com",
      payment_methods: {
        paypal_1521508: { source: "paypal", id: "paypal_1521508" }
      },
      orders: ["#W8863729"]
    },
    olivia_garcia_4691: {
      name: { first_name: "Olivia", last_name: "Garcia" },
      address: {
        address1: "308 Spruce Street",
        address2: "Suite 978",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32237"
      },
      email: "olivia.garcia6676@example.com",
      payment_methods: {
        gift_card_4584785: {
          source: "gift_card",
          balance: 60,
          id: "gift_card_4584785"
        }
      },
      orders: ["#W3279695"]
    },
    amelia_moore_7658: {
      name: { first_name: "Amelia", last_name: "Moore" },
      address: {
        address1: "782 Spruce Street",
        address2: "Suite 227",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75281"
      },
      email: "amelia.moore8572@example.com",
      payment_methods: {
        gift_card_3785349: {
          source: "gift_card",
          balance: 89,
          id: "gift_card_3785349"
        }
      },
      orders: ["#W5502159"]
    },
    raj_lopez_5873: {
      name: { first_name: "Raj", last_name: "Lopez" },
      address: {
        address1: "575 Chestnut Street",
        address2: "Suite 251",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76195"
      },
      email: "raj.lopez2997@example.com",
      payment_methods: {
        credit_card_6731308: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3803",
          id: "credit_card_6731308"
        },
        paypal_7007375: { source: "paypal", id: "paypal_7007375" }
      },
      orders: ["#W3502364", "#W7162915", "#W5107138"]
    },
    aarav_sanchez_9729: {
      name: { first_name: "Aarav", last_name: "Sanchez" },
      address: {
        address1: "800 Cedar Avenue",
        address2: "Suite 828",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77015"
      },
      email: "aarav.sanchez1292@example.com",
      payment_methods: {
        credit_card_2690859: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "5506",
          id: "credit_card_2690859"
        }
      },
      orders: ["#W5455653", "#W6348442", "#W4304974"]
    },
    sofia_muller_1555: {
      name: { first_name: "Sofia", last_name: "Muller" },
      address: {
        address1: "674 Willow Lane",
        address2: "Suite 397",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20590"
      },
      email: "sofia.muller5339@example.com",
      payment_methods: {
        paypal_6980481: { source: "paypal", id: "paypal_6980481" }
      },
      orders: ["#W2793378", "#W5306703", "#W3025991"]
    },
    mason_brown_2141: {
      name: { first_name: "Mason", last_name: "Brown" },
      address: {
        address1: "783 Laurel Lane",
        address2: "Suite 773",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43139"
      },
      email: "mason.brown5899@example.com",
      payment_methods: {
        credit_card_7506608: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6149",
          id: "credit_card_7506608"
        },
        paypal_1063453: { source: "paypal", id: "paypal_1063453" }
      },
      orders: []
    },
    mei_santos_5526: {
      name: { first_name: "Mei", last_name: "Santos" },
      address: {
        address1: "776 Park Avenue",
        address2: "Suite 522",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19189"
      },
      email: "mei.santos5479@example.com",
      payment_methods: {
        paypal_5784379: { source: "paypal", id: "paypal_5784379" },
        gift_card_1755127: {
          source: "gift_card",
          balance: 58,
          id: "gift_card_1755127"
        }
      },
      orders: ["#W7368828"]
    },
    mia_wilson_4965: {
      name: { first_name: "Mia", last_name: "Wilson" },
      address: {
        address1: "586 Cedar Street",
        address2: "Suite 139",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10149"
      },
      email: "mia.wilson6094@example.com",
      payment_methods: {
        paypal_2454787: { source: "paypal", id: "paypal_2454787" },
        gift_card_9787794: {
          source: "gift_card",
          balance: 68,
          id: "gift_card_9787794"
        }
      },
      orders: []
    },
    aarav_davis_5411: {
      name: { first_name: "Aarav", last_name: "Davis" },
      address: {
        address1: "964 Lakeview Drive",
        address2: "Suite 115",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46233"
      },
      email: "aarav.davis2239@example.com",
      payment_methods: {
        credit_card_5650467: {
          source: "credit_card",
          brand: "visa",
          last_four: "9385",
          id: "credit_card_5650467"
        },
        paypal_7357553: { source: "paypal", id: "paypal_7357553" }
      },
      orders: ["#W6552785"]
    },
    harper_kim_9968: {
      name: { first_name: "Harper", last_name: "Kim" },
      address: {
        address1: "886 Main Street",
        address2: "Suite 578",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95119"
      },
      email: "harper.kim5741@example.com",
      payment_methods: {
        gift_card_5814983: {
          source: "gift_card",
          balance: 38,
          id: "gift_card_5814983"
        }
      },
      orders: ["#W5386730"]
    },
    emma_santos_8025: {
      name: { first_name: "Emma", last_name: "Santos" },
      address: {
        address1: "641 Elm Avenue",
        address2: "Suite 778",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85079"
      },
      email: "emma.santos8623@example.com",
      payment_methods: {
        gift_card_3824537: {
          source: "gift_card",
          balance: 71,
          id: "gift_card_3824537"
        }
      },
      orders: ["#W3117322", "#W7854887", "#W4590951"]
    },
    yusuf_garcia_3055: {
      name: { first_name: "Yusuf", last_name: "Garcia" },
      address: {
        address1: "794 Park Avenue",
        address2: "Suite 828",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20080"
      },
      email: "yusuf.garcia2909@example.com",
      payment_methods: {
        paypal_7503218: { source: "paypal", id: "paypal_7503218" },
        credit_card_8405687: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3762",
          id: "credit_card_8405687"
        },
        gift_card_7588375: {
          source: "gift_card",
          balance: 15,
          id: "gift_card_7588375"
        }
      },
      orders: ["#W2564042", "#W2286012", "#W6885344", "#W4794911", "#W3260419"]
    },
    harper_johansson_3076: {
      name: { first_name: "Harper", last_name: "Johansson" },
      address: {
        address1: "861 River Road",
        address2: "Suite 334",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32156"
      },
      email: "harper.johansson8814@example.com",
      payment_methods: {
        paypal_5895539: { source: "paypal", id: "paypal_5895539" }
      },
      orders: []
    },
    ethan_nguyen_7565: {
      name: { first_name: "Ethan", last_name: "Nguyen" },
      address: {
        address1: "498 Elm Avenue",
        address2: "Suite 953",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95155"
      },
      email: "ethan.nguyen4375@example.com",
      payment_methods: {
        paypal_2764872: { source: "paypal", id: "paypal_2764872" },
        gift_card_2834741: {
          source: "gift_card",
          balance: 90,
          id: "gift_card_2834741"
        }
      },
      orders: ["#W8452063", "#W2325029"]
    },
    harper_lopez_4655: {
      name: { first_name: "Harper", last_name: "Lopez" },
      address: {
        address1: "330 Sunset Drive",
        address2: "Suite 626",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78717"
      },
      email: "harper.lopez4595@example.com",
      payment_methods: {
        gift_card_5408592: {
          source: "gift_card",
          balance: 10,
          id: "gift_card_5408592"
        }
      },
      orders: []
    },
    chen_anderson_8078: {
      name: { first_name: "Chen", last_name: "Anderson" },
      address: {
        address1: "233 Lakeview Drive",
        address2: "Suite 676",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19158"
      },
      email: "chen.anderson4495@example.com",
      payment_methods: {
        credit_card_9389219: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "1178",
          id: "credit_card_9389219"
        },
        gift_card_3434432: {
          source: "gift_card",
          balance: 9,
          id: "gift_card_3434432"
        }
      },
      orders: ["#W5332101", "#W1701126", "#W1348788"]
    },
    mei_johansson_1199: {
      name: { first_name: "Mei", last_name: "Johansson" },
      address: {
        address1: "410 Maple Drive",
        address2: "Suite 913",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10187"
      },
      email: "mei.johansson4671@example.com",
      payment_methods: {
        credit_card_3945811: {
          source: "credit_card",
          brand: "visa",
          last_four: "4044",
          id: "credit_card_3945811"
        },
        credit_card_7574044: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "7930",
          id: "credit_card_7574044"
        }
      },
      orders: ["#W5009508"]
    },
    ava_silva_4632: {
      name: { first_name: "Ava", last_name: "Silva" },
      address: {
        address1: "450 Sunset Drive",
        address2: "Suite 845",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76109"
      },
      email: "ava.silva8820@example.com",
      payment_methods: {
        gift_card_2721181: {
          source: "gift_card",
          balance: 62,
          id: "gift_card_2721181"
        }
      },
      orders: ["#W6399745", "#W6805991"]
    },
    ethan_kim_8860: {
      name: { first_name: "Ethan", last_name: "Kim" },
      address: {
        address1: "848 Willow Lane",
        address2: "Suite 453",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78286"
      },
      email: "ethan.kim3231@example.com",
      payment_methods: {
        gift_card_5701566: {
          source: "gift_card",
          balance: 37,
          id: "gift_card_5701566"
        }
      },
      orders: ["#W8992263", "#W8296441", "#W3942875", "#W1763367"]
    },
    daiki_davis_5031: {
      name: { first_name: "Daiki", last_name: "Davis" },
      address: {
        address1: "702 Elm Avenue",
        address2: "Suite 373",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94102"
      },
      email: "daiki.davis3097@example.com",
      payment_methods: {
        gift_card_1679693: {
          source: "gift_card",
          balance: 2,
          id: "gift_card_1679693"
        }
      },
      orders: ["#W5457973", "#W5012090"]
    },
    ethan_li_6208: {
      name: { first_name: "Ethan", last_name: "Li" },
      address: {
        address1: "408 Sunset Drive",
        address2: "Suite 522",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43135"
      },
      email: "ethan.li9526@example.com",
      payment_methods: {
        credit_card_1397305: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6522",
          id: "credit_card_1397305"
        }
      },
      orders: ["#W7309535", "#W4108782", "#W8783295"]
    },
    ava_nguyen_6646: {
      name: { first_name: "Ava", last_name: "Nguyen" },
      address: {
        address1: "238 Oak Street",
        address2: "Suite 636",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94128"
      },
      email: "ava.nguyen2868@example.com",
      payment_methods: {
        gift_card_1994993: {
          source: "gift_card",
          balance: 78,
          id: "gift_card_1994993"
        },
        credit_card_5683823: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6081",
          id: "credit_card_5683823"
        }
      },
      orders: [
        "#W8367380",
        "#W8668939",
        "#W6272294",
        "#W1242543",
        "#W9232383",
        "#W9892465"
      ]
    },
    evelyn_hernandez_1701: {
      name: { first_name: "Evelyn", last_name: "Hernandez" },
      address: {
        address1: "736 Hillcrest Drive",
        address2: "Suite 196",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92139"
      },
      email: "evelyn.hernandez3060@example.com",
      payment_methods: {
        credit_card_3631888: {
          source: "credit_card",
          brand: "visa",
          last_four: "4171",
          id: "credit_card_3631888"
        }
      },
      orders: ["#W3482034", "#W9628587", "#W4895606"]
    },
    james_nguyen_2792: {
      name: { first_name: "James", last_name: "Nguyen" },
      address: {
        address1: "570 Main Street",
        address2: "Suite 708",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60627"
      },
      email: "james.nguyen3261@example.com",
      payment_methods: {
        credit_card_2645445: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "5197",
          id: "credit_card_2645445"
        }
      },
      orders: []
    },
    fatima_li_5040: {
      name: { first_name: "Fatima", last_name: "Li" },
      address: {
        address1: "177 Spruce Street",
        address2: "Suite 327",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20287"
      },
      email: "fatima.li1185@example.com",
      payment_methods: {
        credit_card_2713802: {
          source: "credit_card",
          brand: "visa",
          last_four: "1373",
          id: "credit_card_2713802"
        },
        paypal_6366157: { source: "paypal", id: "paypal_6366157" }
      },
      orders: ["#W8005719", "#W3510092", "#W4155745"]
    },
    sofia_rossi_8776: {
      name: { first_name: "Sofia", last_name: "Rossi" },
      address: {
        address1: "291 River Road",
        address2: "Suite 271",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78784"
      },
      email: "sofia.rossi2645@example.com",
      payment_methods: {
        credit_card_5051208: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3357",
          id: "credit_card_5051208"
        }
      },
      orders: ["#W5918442", "#W5500815", "#W8535951", "#W2818151"]
    },
    fatima_smith_4908: {
      name: { first_name: "Fatima", last_name: "Smith" },
      address: {
        address1: "980 Hillcrest Drive",
        address2: "Suite 745",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19132"
      },
      email: "fatima.smith9435@example.com",
      payment_methods: {
        credit_card_4736367: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "2320",
          id: "credit_card_4736367"
        },
        paypal_1575973: { source: "paypal", id: "paypal_1575973" }
      },
      orders: ["#W3508684"]
    },
    aarav_nguyen_5688: {
      name: { first_name: "Aarav", last_name: "Nguyen" },
      address: {
        address1: "676 Sunset Drive",
        address2: "Suite 918",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43132"
      },
      email: "aarav.nguyen9723@example.com",
      payment_methods: {
        gift_card_8584555: {
          source: "gift_card",
          balance: 41,
          id: "gift_card_8584555"
        }
      },
      orders: ["#W5493256"]
    },
    fatima_moore_8152: {
      name: { first_name: "Fatima", last_name: "Moore" },
      address: {
        address1: "465 Elm Street",
        address2: "Suite 185",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77122"
      },
      email: "fatima.moore9277@example.com",
      payment_methods: {
        paypal_8105724: { source: "paypal", id: "paypal_8105724" }
      },
      orders: ["#W9172475"]
    },
    mohamed_jackson_1549: {
      name: { first_name: "Mohamed", last_name: "Jackson" },
      address: {
        address1: "998 Lakeview Drive",
        address2: "Suite 605",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75374"
      },
      email: "mohamed.jackson7203@example.com",
      payment_methods: {
        credit_card_3313158: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "3410",
          id: "credit_card_3313158"
        }
      },
      orders: ["#W3504981"]
    },
    mei_kovacs_5767: {
      name: { first_name: "Mei", last_name: "Kovacs" },
      address: {
        address1: "593 Willow Lane",
        address2: "Suite 420",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43295"
      },
      email: "mei.kovacs4296@example.com",
      payment_methods: {
        gift_card_1776915: {
          source: "gift_card",
          balance: 89,
          id: "gift_card_1776915"
        }
      },
      orders: ["#W8193638", "#W8997398", "#W5382576", "#W2022128"]
    },
    harper_nguyen_9170: {
      name: { first_name: "Harper", last_name: "Nguyen" },
      address: {
        address1: "386 Broadway",
        address2: "Suite 145",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78715"
      },
      email: "harper.nguyen5245@example.com",
      payment_methods: {
        gift_card_8578732: {
          source: "gift_card",
          balance: 58,
          id: "gift_card_8578732"
        }
      },
      orders: ["#W8413387", "#W7677118"]
    },
    mason_johansson_2485: {
      name: { first_name: "Mason", last_name: "Johansson" },
      address: {
        address1: "381 Lakeview Drive",
        address2: "Suite 671",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28271"
      },
      email: "mason.johansson9528@example.com",
      payment_methods: {
        gift_card_6915794: {
          source: "gift_card",
          balance: 51,
          id: "gift_card_6915794"
        }
      },
      orders: ["#W9549057", "#W3358610"]
    },
    raj_kovacs_9155: {
      name: { first_name: "Raj", last_name: "Kovacs" },
      address: {
        address1: "118 Elm Street",
        address2: "Suite 558",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19104"
      },
      email: "raj.kovacs6318@example.com",
      payment_methods: {
        gift_card_7032928: {
          source: "gift_card",
          balance: 47,
          id: "gift_card_7032928"
        }
      },
      orders: ["#W8455874", "#W8595443"]
    },
    lei_li_6575: {
      name: { first_name: "Lei", last_name: "Li" },
      address: {
        address1: "604 Pine Lane",
        address2: "Suite 907",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85033"
      },
      email: "lei.li8350@example.com",
      payment_methods: {
        credit_card_4466831: {
          source: "credit_card",
          brand: "visa",
          last_four: "2697",
          id: "credit_card_4466831"
        },
        gift_card_8049813: {
          source: "gift_card",
          balance: 50,
          id: "gift_card_8049813"
        },
        paypal_5914760: { source: "paypal", id: "paypal_5914760" }
      },
      orders: ["#W5166363", "#W3414433", "#W6289770", "#W3189752"]
    },
    juan_gonzalez_6489: {
      name: { first_name: "Juan", last_name: "Gonzalez" },
      address: {
        address1: "920 Laurel Lane",
        address2: "Suite 692",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32182"
      },
      email: "juan.gonzalez7208@example.com",
      payment_methods: {
        gift_card_2446065: {
          source: "gift_card",
          balance: 9,
          id: "gift_card_2446065"
        }
      },
      orders: ["#W8046874", "#W2438921"]
    },
    omar_johnson_2562: {
      name: { first_name: "Omar", last_name: "Johnson" },
      address: {
        address1: "912 Elm Street",
        address2: "Suite 173",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32228"
      },
      email: "omar.johnson6791@example.com",
      payment_methods: {
        gift_card_9532915: {
          source: "gift_card",
          balance: 61,
          id: "gift_card_9532915"
        },
        paypal_6053880: { source: "paypal", id: "paypal_6053880" }
      },
      orders: ["#W2809253", "#W8516166", "#W8797321"]
    },
    mohamed_santos_5711: {
      name: { first_name: "Mohamed", last_name: "Santos" },
      address: {
        address1: "216 Chestnut Street",
        address2: "Suite 810",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28290"
      },
      email: "mohamed.santos9465@example.com",
      payment_methods: {
        gift_card_3986022: {
          source: "gift_card",
          balance: 24,
          id: "gift_card_3986022"
        }
      },
      orders: []
    },
    daiki_hernandez_1356: {
      name: { first_name: "Daiki", last_name: "Hernandez" },
      address: {
        address1: "243 Sunset Drive",
        address2: "Suite 890",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91203"
      },
      email: "daiki.hernandez2148@example.com",
      payment_methods: {
        credit_card_1289579: {
          source: "credit_card",
          brand: "visa",
          last_four: "9104",
          id: "credit_card_1289579"
        }
      },
      orders: ["#W1166549", "#W9228376"]
    },
    harper_li_7655: {
      name: { first_name: "Harper", last_name: "Li" },
      address: {
        address1: "506 Oak Street",
        address2: "Suite 321",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32253"
      },
      email: "harper.li3262@example.com",
      payment_methods: {
        gift_card_8862145: {
          source: "gift_card",
          balance: 95,
          id: "gift_card_8862145"
        }
      },
      orders: ["#W9495141", "#W2047423", "#W6052577"]
    },
    yusuf_taylor_7149: {
      name: { first_name: "Yusuf", last_name: "Taylor" },
      address: {
        address1: "163 Cedar Street",
        address2: "Suite 165",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95154"
      },
      email: "yusuf.taylor6118@example.com",
      payment_methods: {
        credit_card_3599838: {
          source: "credit_card",
          brand: "visa",
          last_four: "4012",
          id: "credit_card_3599838"
        }
      },
      orders: ["#W2702727", "#W5690487", "#W8268610"]
    },
    olivia_smith_5265: {
      name: { first_name: "Olivia", last_name: "Smith" },
      address: {
        address1: "273 Highland Drive",
        address2: "Suite 953",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80216"
      },
      email: "olivia.smith9793@example.com",
      payment_methods: {
        credit_card_7971769: {
          source: "credit_card",
          brand: "mastercard",
          last_four: "6034",
          id: "credit_card_7971769"
        }
      },
      orders: ["#W1974181", "#W5202795", "#W5220869"]
    },
    juan_smith_5229: {
      name: { first_name: "Juan", last_name: "Smith" },
      address: {
        address1: "444 Highland Drive",
        address2: "Suite 419",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75218"
      },
      email: "juan.smith2463@example.com",
      payment_methods: {
        paypal_9679338: { source: "paypal", id: "paypal_9679338" },
        gift_card_8506348: {
          source: "gift_card",
          balance: 63,
          id: "gift_card_8506348"
        }
      },
      orders: ["#W1429524", "#W7546247"]
    },
    ethan_khan_3904: {
      name: { first_name: "Ethan", last_name: "Khan" },
      address: {
        address1: "264 Elm Street",
        address2: "Suite 579",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92117"
      },
      email: "ethan.khan4367@example.com",
      payment_methods: {
        credit_card_5608852: {
          source: "credit_card",
          brand: "visa",
          last_four: "2631",
          id: "credit_card_5608852"
        }
      },
      orders: ["#W4347784"]
    }
  };
});

// tau-bench/retail/data/orders.json
var require_orders = __commonJS((exports, module) => {
  module.exports = {
    "#W2611340": {
      order_id: "#W2611340",
      user_id: "james_li_5688",
      address: {
        address1: "215 River Road",
        address2: "Suite 991",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10083"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6469567736",
          price: 47.84,
          options: {
            capacity: "1000ml",
            material: "glass",
            color: "blue"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8426249116",
          price: 488.81,
          options: {
            material: "fabric",
            color: "black",
            armrest: "fixed",
            "backrest height": "standard"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["357962501027"],
          item_ids: ["6469567736", "8426249116"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 536.65,
          payment_method_id: "gift_card_1725971"
        }
      ]
    },
    "#W4817420": {
      order_id: "#W4817420",
      user_id: "ava_moore_2033",
      address: {
        address1: "996 Cedar Street",
        address2: "Suite 656",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78234"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6777246137",
          price: 47.76,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "red"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "4900661478",
          price: 463.04,
          options: {
            material: "glass",
            color: "black",
            height: "5 ft"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "6700049080",
          price: 466.75,
          options: {
            resolution: "4K",
            waterproof: "yes",
            color: "black"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9624127908",
          price: 158.9,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "silver"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "3812493782",
          price: 244.34,
          options: {
            size: "7",
            material: "leather",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["490313116609"],
          item_ids: [
            "6777246137",
            "4900661478",
            "6700049080",
            "9624127908",
            "3812493782"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1380.79,
          payment_method_id: "gift_card_8168843"
        }
      ]
    },
    "#W6304490": {
      order_id: "#W6304490",
      user_id: "omar_khan_2363",
      address: {
        address1: "255 Chestnut Street",
        address2: "Suite 383",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75203"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6956751343",
          price: 217.06,
          options: {
            "deck material": "bamboo",
            length: "34 inch",
            design: "custom"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "4983901480",
          price: 262.47,
          options: {
            compatibility: "Apple HomeKit",
            color: "black"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "9375701158",
          price: 489.5,
          options: {
            "room size": "medium",
            "filter type": "carbon",
            features: "quiet operation"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "2194493783",
          price: 471.64,
          options: {
            "weight range": "5-25 lbs",
            material: "iron",
            "set type": "fixed"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5753502325",
          price: 96.35,
          options: {
            length: "25ft",
            material: "rubber",
            color: "green"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["574237175837"],
          item_ids: [
            "6956751343",
            "4983901480",
            "9375701158",
            "2194493783",
            "5753502325"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1537.02,
          payment_method_id: "credit_card_4420174"
        }
      ]
    },
    "#W5918442": {
      order_id: "#W5918442",
      user_id: "sofia_rossi_8776",
      address: {
        address1: "291 River Road",
        address2: "Suite 271",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78784"
      },
      items: [
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "1725100896",
          price: 289.66,
          options: {
            "scent family": "oriental",
            size: "30ml",
            gender: "unisex"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5312063289",
          price: 195.15,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "graphic"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "1586641416",
          price: 497.39,
          options: {
            resolution: "5K",
            waterproof: "yes",
            color: "silver"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "6117189161",
          price: 481.5,
          options: {
            resolution: "4K",
            waterproof: "yes",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1463.7,
          payment_method_id: "credit_card_5051208"
        }
      ]
    },
    "#W2974929": {
      order_id: "#W2974929",
      user_id: "fatima_anderson_2157",
      address: {
        address1: "334 Broadway",
        address2: "Suite 326",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32100"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3877188862",
          price: 182.03,
          options: {
            "deck material": "plastic",
            length: "31 inch",
            design: "plain"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 182.03,
          payment_method_id: "paypal_7916550"
        }
      ]
    },
    "#W9077205": {
      order_id: "#W9077205",
      user_id: "amelia_wilson_4614",
      address: {
        address1: "388 Elm Avenue",
        address2: "Suite 384",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75215"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9370300555",
          price: 45.9,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "expert"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3877338112",
          price: 545.68,
          options: {
            "weight range": "5-25 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["882867966563"],
          item_ids: ["9370300555", "3877338112"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 591.58,
          payment_method_id: "gift_card_7108145"
        }
      ]
    },
    "#W9549057": {
      order_id: "#W9549057",
      user_id: "mason_johansson_2485",
      address: {
        address1: "692 Elm Street",
        address2: "Suite 220",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94128"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "5253880258",
          price: 49.52,
          options: {
            color: "black",
            size: "XXL",
            material: "polyester",
            style: "v-neck"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7736359414",
          price: 253.08,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand C"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["367478070474"],
          item_ids: ["5253880258", "7736359414"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 302.6,
          payment_method_id: "gift_card_6915794"
        }
      ]
    },
    "#W8935389": {
      order_id: "#W8935389",
      user_id: "raj_li_8594",
      address: {
        address1: "422 Elm Street",
        address2: "Suite 893",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20369"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "8722653925",
          price: 227.8,
          options: {
            compatibility: "Google Assistant",
            color: "white"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4803681337",
          price: 962.34,
          options: {
            "screen size": "8-inch",
            storage: "64GB",
            color: "black"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3714494375",
          price: 2709.83,
          options: {
            pressure: "15 bar",
            capacity: "1L",
            type: "manual"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "8209752717",
          price: 96.17,
          options: {
            material: "stainless steel",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["343374055447"],
          item_ids: ["8722653925", "4803681337", "3714494375", "8209752717"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3996.14,
          payment_method_id: "credit_card_3425145"
        }
      ]
    },
    "#W2631563": {
      order_id: "#W2631563",
      user_id: "mei_ahmed_5058",
      address: {
        address1: "833 Hickory Lane",
        address2: "Suite 999",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43197"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "2791467853",
          price: 242.53,
          options: {
            compatibility: "Google Assistant",
            color: "stainless steel"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5753502325",
          price: 96.35,
          options: {
            length: "25ft",
            material: "rubber",
            color: "green"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 338.88,
          payment_method_id: "paypal_7160322"
        }
      ]
    },
    "#W6779827": {
      order_id: "#W6779827",
      user_id: "ethan_lopez_6291",
      address: {
        address1: "103 Hillcrest Drive",
        address2: "Suite 162",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43275"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "7896397433",
          price: 457.81,
          options: {
            "weight range": "5-25 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3379843752",
          price: 3203.76,
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "manual"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "1323134954",
          price: 236.95,
          options: {
            color: "stainless steel",
            capacity: "4 cups",
            type: "drip",
            features: "built-in grinder"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "6942241102",
          price: 180.93,
          options: {
            size: "large",
            material: "memory foam",
            color: "beige"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4079.45,
          payment_method_id: "gift_card_7219486"
        }
      ]
    },
    "#W7619352": {
      order_id: "#W7619352",
      user_id: "sofia_thomas_1518",
      address: {
        address1: "529 Cedar Avenue",
        address2: "Suite 371",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75307"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2757705742",
          price: 258.97,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "3526747930",
          price: 540.12,
          options: {
            type: "upright",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8798690242",
          price: 208.07,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "7903094618",
          price: 90.32,
          options: {
            capacity: "5000mAh",
            output: "USB-A",
            color: "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1097.48,
          payment_method_id: "paypal_5334408"
        }
      ]
    },
    "#W9318778": {
      order_id: "#W9318778",
      user_id: "lucas_martin_4549",
      address: {
        address1: "758 Lakeview Drive",
        address2: "Suite 382",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20517"
      },
      items: [
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "2143041831",
          price: 2076.5,
          options: {
            "frame size": "medium",
            color: "black",
            type: "mountain"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "6342039236",
          price: 244.91,
          options: {
            "switch type": "clicky",
            backlight: "white",
            size: "full size"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "9850781806",
          price: 184.48,
          options: {
            diameter: "14 inches",
            color: "white",
            type: "digital"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "5669664287",
          price: 543.68,
          options: {
            "room size": "small",
            "filter type": "ionic",
            features: "quiet operation"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "3076708684",
          price: 535.97,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "quiet operation"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3585.54,
          payment_method_id: "gift_card_7728021"
        }
      ]
    },
    "#W7303089": {
      order_id: "#W7303089",
      user_id: "mei_gonzalez_4785",
      address: {
        address1: "858 Elm Street",
        address2: "Suite 912",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95170"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "2492465580",
          price: 201.95,
          options: {
            color: "navy",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7381052709",
          price: 193.22,
          options: {
            size: "large",
            material: "memory foam",
            color: "brown"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["889070895653"],
          item_ids: ["2492465580", "7381052709"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 395.17,
          payment_method_id: "credit_card_4387170"
        }
      ]
    },
    "#W8327915": {
      order_id: "#W8327915",
      user_id: "ava_lopez_2676",
      address: {
        address1: "229 Lakeview Drive",
        address2: "Suite 364",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60637"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6956751343",
          price: 217.06,
          options: {
            "deck material": "bamboo",
            length: "34 inch",
            design: "custom"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "2025713343",
          price: 336.15,
          options: {
            type: "on-ear",
            connectivity: "wired",
            color: "white"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "1327854740",
          price: 492.65,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "1684786391",
          price: 2508.06,
          options: {
            "screen size": "17-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "black"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4358482460",
          price: 290.94,
          options: {
            "frame color": "black",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3844.86,
          payment_method_id: "gift_card_4855547"
        }
      ]
    },
    "#W9962383": {
      order_id: "#W9962383",
      user_id: "fatima_muller_6713",
      address: {
        address1: "377 River Road",
        address2: "Suite 307",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60644"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1421289881",
          price: 268.77,
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "4238115171",
          price: 91.78,
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "gas"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 360.55,
          payment_method_id: "paypal_5541158"
        }
      ]
    },
    "#W5694685": {
      order_id: "#W5694685",
      user_id: "evelyn_kovacs_6742",
      address: {
        address1: "505 Cedar Avenue",
        address2: "Suite 539",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32117"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3909406921",
          price: 98.25,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "gas"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 98.25,
          payment_method_id: "paypal_7732922"
        }
      ]
    },
    "#W8032761": {
      order_id: "#W8032761",
      user_id: "daiki_moore_8567",
      address: {
        address1: "139 Cedar Avenue",
        address2: "Suite 899",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85078"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "8030558068",
          price: 186.78,
          options: {
            color: "black",
            size: "medium",
            material: "nylon",
            compartment: "hydration"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "8484921793",
          price: 230.15,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "80%"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["765352534260"],
          item_ids: ["8030558068", "8484921793"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 416.93,
          payment_method_id: "gift_card_2977513"
        }
      ]
    },
    "#W3113816": {
      order_id: "#W3113816",
      user_id: "emma_santos_9753",
      address: {
        address1: "463 Pine Lane",
        address2: "Suite 570",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78228"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "2206116040",
          price: 209.91,
          options: {
            size: "L",
            color: "blue",
            ventilation: "high"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "4422467033",
          price: 483.47,
          options: {
            "weight range": "30-50 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "6243148452",
          price: 247,
          options: {
            compatibility: "Amazon Alexa",
            color: "stainless steel"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4274709903",
          price: 544.29,
          options: {
            material: "mesh",
            color: "red",
            armrest: "none",
            "backrest height": "standard"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "4843487907",
          price: 254.84,
          options: {
            "switch type": "clicky",
            backlight: "white",
            size: "80%"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["443521489581"],
          item_ids: [
            "2206116040",
            "4422467033",
            "6243148452",
            "4274709903",
            "4843487907"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1739.51,
          payment_method_id: "credit_card_5869505"
        }
      ]
    },
    "#W1840144": {
      order_id: "#W1840144",
      user_id: "harper_brown_7363",
      address: {
        address1: "723 Park Avenue",
        address2: "Suite 802",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76112"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "8384507844",
          price: 137.94,
          options: {
            color: "white",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6017636844",
          price: 2292.37,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8590708195",
          price: 157.61,
          options: {
            size: "XL",
            color: "navy",
            zipper: "half"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8590708195",
          price: 157.61,
          options: {
            size: "XL",
            color: "navy",
            zipper: "half"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6534134392",
          price: 196.15,
          options: {
            diameter: "10 inches",
            color: "wood",
            type: "analog"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["969011918193"],
          item_ids: [
            "8384507844",
            "6017636844",
            "8590708195",
            "8590708195",
            "6534134392"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2941.68,
          payment_method_id: "paypal_2306935"
        }
      ]
    },
    "#W2959713": {
      order_id: "#W2959713",
      user_id: "harper_kim_2998",
      address: {
        address1: "615 Laurel Lane",
        address2: "Suite 568",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77252"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6130713659",
          price: 483.66,
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3265035808",
          price: 2530.72,
          options: {
            "screen size": "17-inch",
            processor: "i9",
            ram: "8GB",
            storage: "256GB SSD",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["217437691738"],
          item_ids: ["6130713659", "3265035808"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3014.38,
          payment_method_id: "gift_card_5328393"
        }
      ]
    },
    "#W8341134": {
      order_id: "#W8341134",
      user_id: "evelyn_gonzalez_8876",
      address: {
        address1: "350 River Road",
        address2: "Suite 544",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19186"
      },
      items: [
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "7579176349",
          price: 29.28,
          options: {
            size: "A4",
            "cover type": "soft cover"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["424921033505"],
          item_ids: ["7579176349"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 29.28,
          payment_method_id: "paypal_4191414"
        }
      ]
    },
    "#W3069600": {
      order_id: "#W3069600",
      user_id: "chen_silva_7485",
      address: {
        address1: "139 River Road",
        address2: "Suite 418",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46281"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "4545791457",
          price: 186.06,
          options: {
            "deck material": "plastic",
            length: "28 inch",
            design: "plain"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "9494281769",
          price: 252.06,
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "8551474201",
          price: 938.92,
          options: {
            "screen size": "8-inch",
            storage: "64GB",
            color: "silver"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "5012998807",
          price: 258.71,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand B"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["896954309954"],
          item_ids: ["4545791457", "9494281769", "8551474201", "5012998807"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1635.75,
          payment_method_id: "credit_card_1565124"
        }
      ]
    },
    "#W7647404": {
      order_id: "#W7647404",
      user_id: "evelyn_brown_7612",
      address: {
        address1: "899 Highland Drive",
        address2: "Suite 515",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94148"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "6454334990",
          price: 98.82,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9612497925",
          price: 50.88,
          options: {
            color: "blue",
            size: "M",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5855700373",
          price: 293.46,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "2343503231",
          price: 196.86,
          options: {
            "deck material": "maple",
            length: "34 inch",
            design: "graphic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["764489052130"],
          item_ids: ["6454334990", "9612497925", "5855700373", "2343503231"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 640.02,
          payment_method_id: "paypal_7053405"
        }
      ]
    },
    "#W5455653": {
      order_id: "#W5455653",
      user_id: "aarav_sanchez_9729",
      address: {
        address1: "800 Cedar Avenue",
        address2: "Suite 828",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77015"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "8054888773",
          price: 206.03,
          options: {
            color: "grey",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "1323134954",
          price: 236.95,
          options: {
            color: "stainless steel",
            capacity: "4 cups",
            type: "drip",
            features: "built-in grinder"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "1327854740",
          price: 492.65,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1262139877",
          price: 239.99,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9370300555",
          price: 45.9,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["632894717617"],
          item_ids: [
            "8054888773",
            "1323134954",
            "1327854740",
            "1262139877",
            "9370300555"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1221.52,
          payment_method_id: "credit_card_2690859"
        }
      ]
    },
    "#W8808563": {
      order_id: "#W8808563",
      user_id: "fatima_nguyen_7539",
      address: {
        address1: "310 Pine Lane",
        address2: "Suite 589",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43230"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "1111254697",
          price: 531.57,
          options: {
            material: "glass",
            color: "white",
            height: "6 ft"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1631806422",
          price: 339.85,
          options: {
            color: "black",
            "band material": "metal",
            display: "AMOLED"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "8384507844",
          price: 137.94,
          options: {
            color: "white",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "5966895767",
          price: 329.58,
          options: {
            resolution: "2K",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1338.94,
          payment_method_id: "paypal_2613218"
        }
      ]
    },
    "#W5065081": {
      order_id: "#W5065081",
      user_id: "aarav_brown_3744",
      address: {
        address1: "556 Spruce Street",
        address2: "Suite 899",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94132"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6245231688",
          price: 522.03,
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "4579334072",
          price: 54.85,
          options: {
            capacity: "750ml",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "9112290483",
          price: 1925.16,
          options: {
            "strap material": "metal",
            "dial color": "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2502.04,
          payment_method_id: "credit_card_3627996"
        }
      ]
    },
    "#W3361211": {
      order_id: "#W3361211",
      user_id: "aarav_lee_1982",
      address: {
        address1: "828 River Road",
        address2: "Suite 312",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85025"
      },
      items: [
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "7160999700",
          price: 499.29,
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "softshell"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9320099340",
          price: 375.03,
          options: {
            color: "black",
            "band material": "leather",
            display: "AMOLED"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9665100170",
          price: 45.39,
          options: {
            pieces: "1500",
            theme: "animals",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4274709903",
          price: 544.29,
          options: {
            material: "mesh",
            color: "red",
            armrest: "none",
            "backrest height": "standard"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1464,
          payment_method_id: "credit_card_1640996"
        }
      ]
    },
    "#W3220387": {
      order_id: "#W3220387",
      user_id: "amelia_silva_5103",
      address: {
        address1: "984 Broadway",
        address2: "Suite 638",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95109"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "3913310464",
          price: 272.2,
          options: {
            "skin tone": "dark",
            "kit size": "basic",
            brand: "Brand A"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4900990404",
          price: 336.71,
          options: {
            color: "silver",
            "band material": "metal",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["245285646088"],
          item_ids: ["3913310464", "4900990404"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 608.91,
          payment_method_id: "paypal_5716091"
        },
        {
          transaction_type: "refund",
          amount: 608.91,
          payment_method_id: "paypal_5716091"
        }
      ]
    },
    "#W5362037": {
      order_id: "#W5362037",
      user_id: "james_kovacs_9247",
      address: {
        address1: "518 Main Street",
        address2: "Suite 155",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95190"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "4894369688",
          price: 537.01,
          options: {
            material: "glass",
            color: "brown",
            height: "5 ft"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "2405281423",
          price: 204.09,
          options: {
            size: "medium",
            material: "polyester",
            color: "grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["588172446488"],
          item_ids: ["4894369688", "2405281423"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 741.1,
          payment_method_id: "gift_card_2582853"
        }
      ]
    },
    "#W7728728": {
      order_id: "#W7728728",
      user_id: "aarav_nguyen_7344",
      address: {
        address1: "918 Hickory Lane",
        address2: "Suite 613",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75268"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "8555936349",
          price: 226.49,
          options: {
            color: "blue",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1437889264",
          price: 258.09,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["848032489512"],
          item_ids: ["8555936349", "1437889264"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 484.58,
          payment_method_id: "paypal_7859314"
        }
      ]
    },
    "#W2101159": {
      order_id: "#W2101159",
      user_id: "mason_ahmed_2061",
      address: {
        address1: "871 Hickory Lane",
        address2: "Suite 687",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78739"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "6454334990",
          price: 98.82,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "8964750292",
          price: 532.58,
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "hardshell"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "6805564527",
          price: 158.41,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9665000388",
          price: 269.46,
          options: {
            "switch type": "clicky",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "7082455361",
          price: 962.69,
          options: {
            type: "charcoal",
            size: "medium",
            features: "rotisserie"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["773828831201"],
          item_ids: [
            "6454334990",
            "8964750292",
            "6805564527",
            "9665000388",
            "7082455361"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2021.96,
          payment_method_id: "gift_card_2233321"
        }
      ]
    },
    "#W2443586": {
      order_id: "#W2443586",
      user_id: "aarav_nguyen_7344",
      address: {
        address1: "918 Hickory Lane",
        address2: "Suite 613",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75268"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9690244451",
          price: 236.51,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "60%"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1437889264",
          price: 258.09,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "3369928769",
          price: 97.35,
          options: {
            length: "25ft",
            material: "vinyl",
            color: "green"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 591.95,
          payment_method_id: "paypal_7859314"
        }
      ]
    },
    "#W5463717": {
      order_id: "#W5463717",
      user_id: "raj_davis_2615",
      address: {
        address1: "185 River Road",
        address2: "Suite 809",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85050"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "7166996157",
          price: 518.31,
          options: {
            "room size": "small",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "9838673490",
          price: 344.55,
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "red"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "6589665742",
          price: 933.17,
          options: {
            type: "gas",
            size: "large",
            features: "rotisserie"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["748397806850"],
          item_ids: ["7166996157", "9838673490", "6589665742"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1796.03,
          payment_method_id: "gift_card_8006222"
        }
      ]
    },
    "#W7554560": {
      order_id: "#W7554560",
      user_id: "daiki_silva_1055",
      address: {
        address1: "576 Main Street",
        address2: "Suite 985",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94106"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7274158061",
          price: 91.13,
          options: {
            material: "ceramic",
            capacity: "1 liter",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "1906487464",
          price: 102.02,
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "4764314102",
          price: 96.51,
          options: {
            length: "50ft",
            material: "rubber",
            color: "green"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["403338127473"],
          item_ids: ["7274158061", "1906487464", "4764314102"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 289.66,
          payment_method_id: "credit_card_8341900"
        }
      ]
    },
    "#W6552785": {
      order_id: "#W6552785",
      user_id: "aarav_davis_5411",
      address: {
        address1: "964 Lakeview Drive",
        address2: "Suite 115",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46233"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "4385534692",
          price: 138.07,
          options: {
            color: "white",
            brightness: "high",
            "power source": "AC adapter"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "2190871011",
          price: 3105.6,
          options: {
            pressure: "9 bar",
            capacity: "1.5L",
            type: "manual"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9354168549",
          price: 46.85,
          options: {
            color: "red",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["453159654483"],
          item_ids: ["4385534692", "2190871011", "9354168549"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3290.52,
          payment_method_id: "paypal_7357553"
        }
      ]
    },
    "#W9583042": {
      order_id: "#W9583042",
      user_id: "mei_patel_7272",
      address: {
        address1: "443 Maple Drive",
        address2: "Suite 394",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76165"
      },
      items: [
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "5421902839",
          price: 328.25,
          options: {
            "scent family": "oriental",
            size: "100ml",
            gender: "men"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6245231688",
          price: 522.03,
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "7160999700",
          price: 499.29,
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "softshell"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "3230708338",
          price: 99.51,
          options: {
            length: "25ft",
            material: "latex",
            color: "green"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1449.08,
          payment_method_id: "paypal_4768213"
        }
      ]
    },
    "#W4111294": {
      order_id: "#W4111294",
      user_id: "fatima_anderson_2157",
      address: {
        address1: "334 Broadway",
        address2: "Suite 326",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32100"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "4716977452",
          price: 289.69,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8069050545",
          price: 499.28,
          options: {
            material: "leather",
            color: "blue",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "8551474201",
          price: 938.92,
          options: {
            "screen size": "8-inch",
            storage: "64GB",
            color: "silver"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6017636844",
          price: 2292.37,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3709608322",
          price: 2744.7,
          options: {
            pressure: "9 bar",
            capacity: "2L",
            type: "automatic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["883468116659"],
          item_ids: [
            "4716977452",
            "8069050545",
            "8551474201",
            "6017636844",
            "3709608322"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6764.96,
          payment_method_id: "paypal_7916550"
        },
        {
          transaction_type: "refund",
          amount: 6764.96,
          payment_method_id: "paypal_7916550"
        }
      ]
    },
    "#W6247578": {
      order_id: "#W6247578",
      user_id: "yusuf_rossi_9620",
      address: {
        address1: "763 Broadway",
        address2: "Suite 135",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19122"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "3799046073",
          price: 53.27,
          options: {
            color: "black",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 53.27,
          payment_method_id: "credit_card_9513926"
        }
      ]
    },
    "#W8955613": {
      order_id: "#W8955613",
      user_id: "olivia_lopez_9494",
      address: {
        address1: "200 Elm Street",
        address2: "Suite 805",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77277"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2554056026",
          price: 367.38,
          options: {
            color: "gold",
            "band material": "metal",
            display: "AMOLED"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "6309044598",
          price: 218.59,
          options: {
            color: "grey",
            size: "large",
            material: "polyester",
            compartment: "hydration"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 585.97,
          payment_method_id: "gift_card_6682391"
        }
      ]
    },
    "#W2923184": {
      order_id: "#W2923184",
      user_id: "sophia_patel_6833",
      address: {
        address1: "624 Cedar Avenue",
        address2: "Suite 554",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76169"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "1684786391",
          price: 2508.06,
          options: {
            "screen size": "17-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "black"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2757705742",
          price: 258.97,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["757848843226"],
          item_ids: ["1684786391", "2757705742"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2767.03,
          payment_method_id: "credit_card_6419343"
        }
      ]
    },
    "#W3043531": {
      order_id: "#W3043531",
      user_id: "james_martin_1500",
      address: {
        address1: "153 Cedar Street",
        address2: "Suite 769",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92112"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9354168549",
          price: 46.85,
          options: {
            color: "red",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "6243148452",
          price: 247,
          options: {
            compatibility: "Amazon Alexa",
            color: "stainless steel"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "2226219750",
          price: 2009.03,
          options: {
            "strap material": "silicone",
            "dial color": "white"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "1518544029",
          price: 95.39,
          options: {
            length: "100ft",
            material: "rubber",
            color: "black"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "9851293632",
          price: 193.38,
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "camera"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2591.65,
          payment_method_id: "paypal_6661566"
        }
      ]
    },
    "#W1547606": {
      order_id: "#W1547606",
      user_id: "liam_kovacs_4286",
      address: {
        address1: "369 Hillcrest Drive",
        address2: "Suite 712",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75230"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "1657832319",
          price: 2729.32,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "512GB SSD",
            color: "black"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "4859937227",
          price: 503.58,
          options: {
            resolution: "5K",
            waterproof: "no",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3232.9,
          payment_method_id: "gift_card_4544711"
        }
      ]
    },
    "#W2809253": {
      order_id: "#W2809253",
      user_id: "omar_johnson_2562",
      address: {
        address1: "970 River Road",
        address2: "Suite 705",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20472"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5946177616",
          price: 1057.24,
          options: {
            type: "gas",
            size: "portable",
            features: "none"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4068787148",
          price: 52.01,
          options: {
            pieces: "500",
            theme: "art",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1596993217",
          price: 180.02,
          options: {
            size: "S",
            color: "white",
            ventilation: "low"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "7958300294",
          price: 642.72,
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["603676613672"],
          item_ids: ["5946177616", "4068787148", "1596993217", "7958300294"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1931.99,
          payment_method_id: "paypal_6053880"
        }
      ]
    },
    "#W8557584": {
      order_id: "#W8557584",
      user_id: "omar_kim_3528",
      address: {
        address1: "542 Lakeview Drive",
        address2: "Suite 811",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32214"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "1096508426",
          price: 46.13,
          options: {
            pieces: "500",
            theme: "art",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1596993217",
          price: 180.02,
          options: {
            size: "S",
            color: "white",
            ventilation: "low"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9747045638",
          price: 94.01,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "8293778132",
          price: 100.62,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "2492465580",
          price: 201.95,
          options: {
            color: "navy",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 622.73,
          payment_method_id: "gift_card_3749819"
        }
      ]
    },
    "#W7762997": {
      order_id: "#W7762997",
      user_id: "sofia_lee_8857",
      address: {
        address1: "142 Chestnut Street",
        address2: "Suite 756",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91401"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "3330317167",
          price: 137.32,
          options: {
            color: "black",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7401244629",
          price: 188.92,
          options: {
            size: "L",
            color: "red",
            ventilation: "high"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "6867855179",
          price: 319.53,
          options: {
            resolution: "1080p",
            "field of view": "130 degrees",
            connectivity: "Wi-Fi"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["417412644126"],
          item_ids: ["3330317167", "7401244629", "6867855179"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 645.77,
          payment_method_id: "paypal_3572679"
        }
      ]
    },
    "#W4386313": {
      order_id: "#W4386313",
      user_id: "isabella_sanchez_2068",
      address: {
        address1: "854 Broadway",
        address2: "Suite 293",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85093"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "8176740019",
          price: 208.6,
          options: {
            "deck material": "bamboo",
            length: "28 inch",
            design: "plain"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7597543861",
          price: 310.47,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 519.07,
          payment_method_id: "paypal_8516781"
        }
      ]
    },
    "#W7913362": {
      order_id: "#W7913362",
      user_id: "mohamed_lee_5442",
      address: {
        address1: "631 Laurel Lane",
        address2: "Suite 413",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28286"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "5917587651",
          price: 212.79,
          options: {
            color: "grey",
            size: "medium",
            material: "polyester",
            compartment: "laptop"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "6309044598",
          price: 218.59,
          options: {
            color: "grey",
            size: "large",
            material: "polyester",
            compartment: "hydration"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["437744393939"],
          item_ids: ["5917587651", "6309044598"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 431.38,
          payment_method_id: "credit_card_8169552"
        }
      ]
    },
    "#W3035044": {
      order_id: "#W3035044",
      user_id: "ethan_moore_3587",
      address: {
        address1: "102 Elm Street",
        address2: "Suite 496",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90651"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8124970213",
          price: 49.67,
          options: {
            color: "purple",
            size: "XL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "7896397433",
          price: 457.81,
          options: {
            "weight range": "5-25 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "2509076505",
          price: 189.5,
          options: {
            size: "10",
            color: "gray",
            material: "leather"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "7082455361",
          price: 962.69,
          options: {
            type: "charcoal",
            size: "medium",
            features: "rotisserie"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6017636844",
          price: 2292.37,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["569574524556"],
          item_ids: [
            "8124970213",
            "7896397433",
            "2509076505",
            "7082455361",
            "6017636844"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3952.04,
          payment_method_id: "credit_card_6173085"
        }
      ]
    },
    "#W3733909": {
      order_id: "#W3733909",
      user_id: "amelia_ito_8772",
      address: {
        address1: "240 Laurel Lane",
        address2: "Suite 471",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43268"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5650803029",
          price: 324.63,
          options: {
            color: "black",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "9862136885",
          price: 258.32,
          options: {
            color: "black",
            capacity: "2 cups",
            type: "espresso",
            features: "timer"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "2143041831",
          price: 2076.5,
          options: {
            "frame size": "medium",
            color: "black",
            type: "mountain"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "6595128475",
          price: 237.65,
          options: {
            size: "9",
            material: "synthetic",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["135777018271"],
          item_ids: ["5650803029", "9862136885", "2143041831", "6595128475"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2897.1,
          payment_method_id: "credit_card_1016162"
        }
      ]
    },
    "#W3780282": {
      order_id: "#W3780282",
      user_id: "emma_ito_4529",
      address: {
        address1: "965 Broadway",
        address2: "Suite 140",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19022"
      },
      items: [
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "9862136885",
          price: 258.32,
          options: {
            color: "black",
            capacity: "2 cups",
            type: "espresso",
            features: "timer"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["836515258452"],
          item_ids: ["9862136885"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 258.32,
          payment_method_id: "credit_card_8058445"
        }
      ]
    },
    "#W3927847": {
      order_id: "#W3927847",
      user_id: "evelyn_patel_8882",
      address: {
        address1: "765 Maple Drive",
        address2: "Suite 683",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43221"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3714494375",
          price: 2709.83,
          options: {
            pressure: "15 bar",
            capacity: "1L",
            type: "manual"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "2190871011",
          price: 3105.6,
          options: {
            pressure: "9 bar",
            capacity: "1.5L",
            type: "manual"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "1008948180",
          price: 54.34,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7605253559",
          price: 97.88,
          options: {
            material: "stainless steel",
            capacity: "1 liter",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "3876764226",
          price: 981.47,
          options: {
            type: "electric",
            size: "portable",
            features: "side burner"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["922051625693"],
          item_ids: [
            "3714494375",
            "2190871011",
            "1008948180",
            "7605253559",
            "3876764226"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6949.12,
          payment_method_id: "paypal_3704667"
        }
      ]
    },
    "#W6979932": {
      order_id: "#W6979932",
      user_id: "aarav_gonzalez_5113",
      address: {
        address1: "264 River Road",
        address2: "Suite 604",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78268"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "6164262152",
          price: 211.11,
          options: {
            color: "white",
            "speed settings": "low",
            "battery type": "rechargeable"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "1586641416",
          price: 497.39,
          options: {
            resolution: "5K",
            waterproof: "yes",
            color: "silver"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3339188619",
          price: 200.24,
          options: {
            size: "M",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2993891288",
          price: 383.08,
          options: {
            color: "silver",
            "band material": "leather",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1291.82,
          payment_method_id: "paypal_6121064"
        }
      ]
    },
    "#W6940125": {
      order_id: "#W6940125",
      user_id: "olivia_silva_7273",
      address: {
        address1: "894 Cedar Street",
        address2: "Suite 938",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32240"
      },
      items: [
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "6195938807",
          price: 103.98,
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "green"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 103.98,
          payment_method_id: "paypal_9379149"
        }
      ]
    },
    "#W4635485": {
      order_id: "#W4635485",
      user_id: "ethan_smith_9087",
      address: {
        address1: "544 Sunset Drive",
        address2: "Suite 663",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10280"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "7159180318",
          price: 512.88,
          options: {
            "weight range": "30-50 lbs",
            material: "urethane",
            "set type": "fixed"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6843647669",
          price: 180.1,
          options: {
            "deck material": "bamboo",
            length: "28 inch",
            design: "graphic"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "3039787582",
          price: 256.94,
          options: {
            color: "stainless steel",
            capacity: "4 cups",
            type: "drip",
            features: "auto shutoff"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1596993217",
          price: 180.02,
          options: {
            size: "S",
            color: "white",
            ventilation: "low"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["278024409681"],
          item_ids: ["7159180318", "6843647669", "3039787582", "1596993217"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1129.94,
          payment_method_id: "paypal_3296755"
        }
      ]
    },
    "#W8193638": {
      order_id: "#W8193638",
      user_id: "mei_kovacs_5767",
      address: {
        address1: "593 Willow Lane",
        address2: "Suite 420",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43295"
      },
      items: [
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "8349903180",
          price: 102.07,
          options: {
            capacity: "20000mAh",
            output: "Wireless",
            color: "black"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "4404981319",
          price: 1031,
          options: {
            type: "electric",
            size: "large",
            features: "rotisserie"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9624127908",
          price: 158.9,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "silver"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4772738468",
          price: 53.91,
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "9829827210",
          price: 90.43,
          options: {
            length: "25ft",
            material: "vinyl",
            color: "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1436.31,
          payment_method_id: "gift_card_1776915"
        }
      ]
    },
    "#W6711349": {
      order_id: "#W6711349",
      user_id: "ethan_smith_9087",
      address: {
        address1: "544 Sunset Drive",
        address2: "Suite 663",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10280"
      },
      items: [
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "7903094618",
          price: 90.32,
          options: {
            capacity: "5000mAh",
            output: "USB-A",
            color: "white"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "6164262152",
          price: 211.11,
          options: {
            color: "white",
            "speed settings": "low",
            "battery type": "rechargeable"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9690244451",
          price: 236.51,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "60%"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "4326528037",
          price: 2714.51,
          options: {
            resolution: "24MP",
            zoom: "5x",
            storage: "CF card"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3252.45,
          payment_method_id: "paypal_3296755"
        }
      ]
    },
    "#W1304208": {
      order_id: "#W1304208",
      user_id: "yara_ito_8499",
      address: {
        address1: "179 Broadway",
        address2: "Suite 256",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75284"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1615379700",
          price: 253.89,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["989750881076"],
          item_ids: ["1615379700"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 253.89,
          payment_method_id: "paypal_1679017"
        }
      ]
    },
    "#W4172216": {
      order_id: "#W4172216",
      user_id: "lei_patel_5376",
      address: {
        address1: "690 Elm Avenue",
        address2: "Suite 631",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98119"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8798690242",
          price: 208.07,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "2343503231",
          price: 196.86,
          options: {
            "deck material": "maple",
            length: "34 inch",
            design: "graphic"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6171242004",
          price: 462.84,
          options: {
            "weight range": "30-50 lbs",
            material: "rubber",
            "set type": "fixed"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "1133777903",
          price: 359.66,
          options: {
            type: "in-ear",
            connectivity: "wired",
            color: "red"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1227.43,
          payment_method_id: "credit_card_6450011"
        }
      ]
    },
    "#W9132840": {
      order_id: "#W9132840",
      user_id: "lei_ahmed_1705",
      address: {
        address1: "125 Cedar Street",
        address2: "Suite 574",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19128"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3541421151",
          price: 193.79,
          options: {
            "deck material": "bamboo",
            length: "34 inch",
            design: "graphic"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "8573379326",
          price: 196.73,
          options: {
            size: "M",
            color: "red",
            ventilation: "high"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6048672633",
          price: 208.05,
          options: {
            size: "L",
            color: "black",
            ventilation: "low"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 598.57,
          payment_method_id: "credit_card_3593714"
        }
      ]
    },
    "#W4140680": {
      order_id: "#W4140680",
      user_id: "anya_garcia_3271",
      address: {
        address1: "615 Laurel Lane",
        address2: "Suite 552",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19036"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "4273929280",
          price: 244.95,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "32GB"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8895454203",
          price: 504.65,
          options: {
            material: "glass",
            color: "white",
            height: "5 ft"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "9440686670",
          price: 298.91,
          options: {
            color: "green",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["447833475637"],
          item_ids: ["4273929280", "8895454203", "9440686670"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1048.51,
          payment_method_id: "gift_card_4374071"
        },
        {
          transaction_type: "refund",
          amount: 1048.51,
          payment_method_id: "gift_card_4374071"
        }
      ]
    },
    "#W7007896": {
      order_id: "#W7007896",
      user_id: "yusuf_ahmed_6232",
      address: {
        address1: "409 Elm Street",
        address2: "Suite 697",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91075"
      },
      items: [
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5339029584",
          price: 1128.99,
          options: {
            color: "black",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "6.5-inch"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "4859937227",
          price: 503.58,
          options: {
            resolution: "5K",
            waterproof: "no",
            color: "silver"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1631806422",
          price: 339.85,
          options: {
            color: "black",
            "band material": "metal",
            display: "AMOLED"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "8193934556",
          price: 2548.73,
          options: {
            "screen size": "13-inch",
            processor: "i9",
            ram: "8GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4521.15,
          payment_method_id: "credit_card_2167533"
        }
      ]
    },
    "#W3038897": {
      order_id: "#W3038897",
      user_id: "aarav_garcia_9402",
      address: {
        address1: "822 Chestnut Street",
        address2: "Suite 868",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10129"
      },
      items: [
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "9929635042",
          price: 1261.14,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "5.8-inch"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5172162216",
          price: 48.51,
          options: {
            pieces: "2000",
            theme: "landscape",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3098764622",
          price: 202.13,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "plain"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["156754048912"],
          item_ids: ["9929635042", "5172162216", "3098764622"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1511.78,
          payment_method_id: "credit_card_6821943"
        }
      ]
    },
    "#W3502364": {
      order_id: "#W3502364",
      user_id: "raj_lopez_5873",
      address: {
        address1: "575 Chestnut Street",
        address2: "Suite 251",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76195"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "3453331371",
          price: 52.79,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5312063289",
          price: 195.15,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "graphic"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2658930189",
          price: 241.68,
          options: {
            size: "9",
            material: "synthetic",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 489.62,
          payment_method_id: "credit_card_6731308"
        }
      ]
    },
    "#W3897284": {
      order_id: "#W3897284",
      user_id: "noah_hernandez_4232",
      address: {
        address1: "778 Main Street",
        address2: "Suite 388",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60636"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "5418781403",
          price: 267.58,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "8GB"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 267.58,
          payment_method_id: "gift_card_3410768"
        }
      ]
    },
    "#W1974181": {
      order_id: "#W1974181",
      user_id: "olivia_smith_5265",
      address: {
        address1: "273 Highland Drive",
        address2: "Suite 953",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80216"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "4241599783",
          price: 2324.61,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "16GB",
            storage: "1TB SSD",
            color: "black"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "3062461148",
          price: 247.88,
          options: {
            color: "stainless steel",
            capacity: "2 cups",
            type: "french press",
            features: "auto shutoff"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "4894369688",
          price: 537.01,
          options: {
            material: "glass",
            color: "brown",
            height: "5 ft"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "8886009523",
          price: 1944.02,
          options: {
            "strap material": "silicone",
            "dial color": "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5053.52,
          payment_method_id: "credit_card_7971769"
        }
      ]
    },
    "#W9154975": {
      order_id: "#W9154975",
      user_id: "james_kim_7213",
      address: {
        address1: "320 Cedar Avenue",
        address2: "Suite 116",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78219"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "7824298782",
          price: 200.38,
          options: {
            color: "black",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5268233322",
          price: 155.99,
          options: {
            capacity: "1L",
            material: "glass",
            color: "white"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "1157853815",
          price: 3096.7,
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "capsule"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "5669664287",
          price: 543.68,
          options: {
            "room size": "small",
            "filter type": "ionic",
            features: "quiet operation"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "6164262152",
          price: 211.11,
          options: {
            color: "white",
            "speed settings": "low",
            "battery type": "rechargeable"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4207.86,
          payment_method_id: "paypal_8963303"
        }
      ]
    },
    "#W3376947": {
      order_id: "#W3376947",
      user_id: "fatima_martin_9326",
      address: {
        address1: "512 Maple Drive",
        address2: "Suite 729",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92151"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4329558751",
          price: 297.33,
          options: {
            "frame color": "silver",
            "lens color": "blue",
            "lens type": "non-polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4168944673",
          price: 471.82,
          options: {
            material: "leather",
            color: "blue",
            armrest: "none",
            "backrest height": "standard"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "9447903288",
          price: 296.78,
          options: {
            "scent family": "fresh",
            size: "30ml",
            gender: "men"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1065.93,
          payment_method_id: "credit_card_6513839"
        }
      ]
    },
    "#W3916748": {
      order_id: "#W3916748",
      user_id: "liam_ahmed_6523",
      address: {
        address1: "364 Elm Street",
        address2: "Suite 504",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94140"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "2177997696",
          price: 206.6,
          options: {
            "deck material": "plastic",
            length: "28 inch",
            design: "custom"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["621510332346"],
          item_ids: ["2177997696"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 206.6,
          payment_method_id: "gift_card_5327033"
        },
        {
          transaction_type: "refund",
          amount: 206.6,
          payment_method_id: "gift_card_5327033"
        }
      ]
    },
    "#W9270202": {
      order_id: "#W9270202",
      user_id: "harper_moore_6183",
      address: {
        address1: "419 Maple Drive",
        address2: "Suite 178",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75212"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "8193934556",
          price: 2548.73,
          options: {
            "screen size": "13-inch",
            processor: "i9",
            ram: "8GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7583936705",
          price: 3101.43,
          options: {
            resolution: "20MP",
            zoom: "10x",
            storage: "CF card"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "5436236388",
          price: 538.6,
          options: {
            resolution: "1080p",
            waterproof: "yes",
            color: "silver"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4602305039",
          price: 561.05,
          options: {
            type: "robotic",
            "bagged/bagless": "bagged",
            features: "cordless"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3358616356",
          price: 197.33,
          options: {
            size: "S",
            color: "red",
            ventilation: "low"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["349832798095"],
          item_ids: [
            "8193934556",
            "7583936705",
            "5436236388",
            "4602305039",
            "3358616356"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6947.14,
          payment_method_id: "gift_card_5757768"
        }
      ]
    },
    "#W9495141": {
      order_id: "#W9495141",
      user_id: "harper_li_7655",
      address: {
        address1: "506 Oak Street",
        address2: "Suite 321",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32253"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6501071631",
          price: 1018.68,
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "gold"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["996657842275"],
          item_ids: ["6501071631"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1018.68,
          payment_method_id: "gift_card_8862145"
        }
      ]
    },
    "#W7553778": {
      order_id: "#W7553778",
      user_id: "aarav_wilson_9535",
      address: {
        address1: "454 Cedar Street",
        address2: "Suite 294",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77214"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3714494375",
          price: 2709.83,
          options: {
            pressure: "15 bar",
            capacity: "1L",
            type: "manual"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1994478369",
          price: 2025.51,
          options: {
            "strap material": "silicone",
            "dial color": "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["608600941846"],
          item_ids: ["3714494375", "1994478369"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4735.34,
          payment_method_id: "gift_card_9138722"
        }
      ]
    },
    "#W1845024": {
      order_id: "#W1845024",
      user_id: "noah_patel_6952",
      address: {
        address1: "517 Lakeview Drive",
        address2: "Suite 183",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98195"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1340995114",
          price: 235.13,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "full size"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3358616356",
          price: 197.33,
          options: {
            size: "S",
            color: "red",
            ventilation: "low"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "7493556126",
          price: 346.97,
          options: {
            type: "over-ear",
            connectivity: "wireless",
            color: "black"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8323284863",
          price: 511.24,
          options: {
            material: "fabric",
            color: "blue",
            armrest: "adjustable",
            "backrest height": "standard"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8277474082",
          price: 236.57,
          options: {
            size: "12",
            material: "leather",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1527.24,
          payment_method_id: "paypal_3169710"
        }
      ]
    },
    "#W8572370": {
      order_id: "#W8572370",
      user_id: "omar_khan_2363",
      address: {
        address1: "255 Chestnut Street",
        address2: "Suite 383",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75203"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7597543861",
          price: 310.47,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "9083642334",
          price: 164.28,
          options: {
            color: "white",
            brightness: "high",
            "power source": "USB"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "3187628796",
          price: 1205.66,
          options: {
            color: "rose gold",
            storage: "128GB",
            RAM: "8GB",
            "screen size": "6.1-inch"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2768401027",
          price: 2346.49,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "silver"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "6571567889",
          price: 507.06,
          options: {
            resolution: "5K",
            waterproof: "yes",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["630848562061"],
          item_ids: [
            "7597543861",
            "9083642334",
            "3187628796",
            "2768401027",
            "6571567889"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4533.96,
          payment_method_id: "credit_card_4420174"
        },
        {
          transaction_type: "refund",
          amount: 4533.96,
          payment_method_id: "credit_card_4420174"
        }
      ]
    },
    "#W3386455": {
      order_id: "#W3386455",
      user_id: "sophia_wilson_7936",
      address: {
        address1: "916 Pine Lane",
        address2: "Suite 113",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78775"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4725166838",
          price: 602.11,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["720270961740"],
          item_ids: ["4725166838"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 602.11,
          payment_method_id: "credit_card_6428848"
        }
      ]
    },
    "#W2015099": {
      order_id: "#W2015099",
      user_id: "evelyn_lee_1924",
      address: {
        address1: "729 Park Avenue",
        address2: "Suite 924",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92193"
      },
      items: [
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "3039787582",
          price: 256.94,
          options: {
            color: "stainless steel",
            capacity: "4 cups",
            type: "drip",
            features: "auto shutoff"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "1270145486",
          price: 144.07,
          options: {
            color: "white",
            brightness: "high",
            "power source": "battery"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["444712814730"],
          item_ids: ["3039787582", "1270145486"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 401.01,
          payment_method_id: "paypal_8719727"
        }
      ]
    },
    "#W8331214": {
      order_id: "#W8331214",
      user_id: "ava_moore_4814",
      address: {
        address1: "625 Elm Street",
        address2: "Suite 426",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10003"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "7535423717",
          price: 904.46,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "silver"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "9829827210",
          price: 90.43,
          options: {
            length: "25ft",
            material: "vinyl",
            color: "blue"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "6906307980",
          price: 202.39,
          options: {
            color: "black",
            size: "large",
            material: "polyester",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1197.28,
          payment_method_id: "paypal_7478252"
        }
      ]
    },
    "#W8306539": {
      order_id: "#W8306539",
      user_id: "daiki_jackson_4362",
      address: {
        address1: "616 Spruce Street",
        address2: "Suite 737",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80284"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "7624783998",
          price: 154.17,
          options: {
            color: "black",
            brightness: "high",
            "power source": "AC adapter"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 154.17,
          payment_method_id: "gift_card_9164233"
        }
      ]
    },
    "#W6735441": {
      order_id: "#W6735441",
      user_id: "yusuf_johnson_8087",
      address: {
        address1: "779 Main Street",
        address2: "Suite 318",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32234"
      },
      items: [
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "5421902839",
          price: 328.25,
          options: {
            "scent family": "oriental",
            size: "100ml",
            gender: "men"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6401214406",
          price: 187.02,
          options: {
            size: "M",
            color: "red",
            ventilation: "low"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7907773809",
          price: 209.69,
          options: {
            size: "L",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "4537595158",
          price: 193.79,
          options: {
            size: "small",
            material: "fleece",
            color: "brown"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["542931711075"],
          item_ids: ["5421902839", "6401214406", "7907773809", "4537595158"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 918.75,
          payment_method_id: "credit_card_8151608"
        }
      ]
    },
    "#W7613749": {
      order_id: "#W7613749",
      user_id: "olivia_silva_7273",
      address: {
        address1: "894 Cedar Street",
        address2: "Suite 938",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32240"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "8084436579",
          price: 219.43,
          options: {
            color: "navy",
            size: "large",
            material: "polyester",
            compartment: "laptop"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "2190871011",
          price: 3105.6,
          options: {
            pressure: "9 bar",
            capacity: "1.5L",
            type: "manual"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5311660992",
          price: 1161.04,
          options: {
            color: "rose gold",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "5.8-inch"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6508153405",
          price: 191.55,
          options: {
            diameter: "12 inches",
            color: "white",
            type: "analog"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2052249669",
          price: 237.14,
          options: {
            color: "white",
            "battery life": "4 hours",
            "water resistance": "not resistant"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4914.76,
          payment_method_id: "paypal_9379149"
        }
      ]
    },
    "#W3445693": {
      order_id: "#W3445693",
      user_id: "noah_ito_3850",
      address: {
        address1: "144 Lakeview Drive",
        address2: "Suite 925",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10228"
      },
      items: [
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "6477915553",
          price: 186.45,
          options: {
            size: "6",
            color: "black",
            material: "synthetic"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "2206116040",
          price: 209.91,
          options: {
            size: "L",
            color: "blue",
            ventilation: "high"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "6341716129",
          price: 523.31,
          options: {
            "room size": "large",
            "filter type": "HEPA",
            features: "smart sensors"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["870596657470"],
          item_ids: ["6477915553", "2206116040", "6341716129"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 919.67,
          payment_method_id: "credit_card_1620755"
        }
      ]
    },
    "#W2586676": {
      order_id: "#W2586676",
      user_id: "amelia_silva_7726",
      address: {
        address1: "182 Elm Avenue",
        address2: "Suite 875",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19117"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8798690242",
          price: 208.07,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "5436236388",
          price: 538.6,
          options: {
            resolution: "1080p",
            waterproof: "yes",
            color: "silver"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "5788631787",
          price: 375.55,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["577338937201"],
          item_ids: ["8798690242", "5436236388", "5788631787"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1122.22,
          payment_method_id: "gift_card_3491931"
        },
        {
          transaction_type: "refund",
          amount: 1122.22,
          payment_method_id: "gift_card_3491931"
        }
      ]
    },
    "#W4840405": {
      order_id: "#W4840405",
      user_id: "mohamed_santos_2427",
      address: {
        address1: "842 River Road",
        address2: "Suite 576",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76188"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7597543861",
          price: 310.47,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "3557711149",
          price: 205.35,
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "laptop"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "5565631513",
          price: 267.9,
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "7187199153",
          price: 983.62,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6301799585",
          price: 495.87,
          options: {
            "piece count": "3-piece",
            color: "blue",
            material: "softshell"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["302006588502"],
          item_ids: [
            "7597543861",
            "3557711149",
            "5565631513",
            "7187199153",
            "6301799585"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2263.21,
          payment_method_id: "gift_card_4710915"
        }
      ]
    },
    "#W6015009": {
      order_id: "#W6015009",
      user_id: "yara_sanchez_1902",
      address: {
        address1: "678 Cedar Avenue",
        address2: "Suite 914",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28212"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9025753381",
          price: 231.58,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "full size"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3877188862",
          price: 182.03,
          options: {
            "deck material": "plastic",
            length: "31 inch",
            design: "plain"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7597543861",
          price: 310.47,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "4241599783",
          price: 2324.61,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "16GB",
            storage: "1TB SSD",
            color: "black"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "9672174103",
          price: 281.98,
          options: {
            "frame color": "brown",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["170642460568"],
          item_ids: [
            "9025753381",
            "3877188862",
            "7597543861",
            "4241599783",
            "9672174103"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3330.67,
          payment_method_id: "credit_card_5884162"
        }
      ]
    },
    "#W7843431": {
      order_id: "#W7843431",
      user_id: "ava_johnson_5052",
      address: {
        address1: "344 Park Avenue",
        address2: "Suite 727",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92171"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7497340597",
          price: 100.83,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3951031513",
          price: 3289.46,
          options: {
            pressure: "19 bar",
            capacity: "1.5L",
            type: "automatic"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "4983901480",
          price: 262.47,
          options: {
            compatibility: "Apple HomeKit",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["402476151583"],
          item_ids: ["7497340597", "3951031513", "4983901480"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3652.76,
          payment_method_id: "paypal_3846161"
        },
        {
          transaction_type: "refund",
          amount: 3652.76,
          payment_method_id: "paypal_3846161"
        }
      ]
    },
    "#W3876856": {
      order_id: "#W3876856",
      user_id: "harper_kovacs_9747",
      address: {
        address1: "349 Maple Drive",
        address2: "Suite 781",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94136"
      },
      items: [
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "3631875806",
          price: 203.82,
          options: {
            size: "11",
            color: "red",
            material: "leather"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "2001307871",
          price: 302.63,
          options: {
            size: "6 ft",
            color: "blue",
            material: "sunbrella",
            "tilt mechanism": "auto tilt"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5537798301",
          price: 204.47,
          options: {
            size: "S",
            color: "black",
            ventilation: "medium"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["729108335245"],
          item_ids: ["3631875806", "2001307871", "5537798301"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 710.92,
          payment_method_id: "gift_card_5087631"
        },
        {
          transaction_type: "refund",
          amount: 710.92,
          payment_method_id: "gift_card_5087631"
        }
      ]
    },
    "#W8328622": {
      order_id: "#W8328622",
      user_id: "ava_smith_1453",
      address: {
        address1: "121 River Road",
        address2: "Suite 510",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80227"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9192177173",
          price: 335.99,
          options: {
            color: "gold",
            "band material": "metal",
            display: "LCD"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 335.99,
          payment_method_id: "gift_card_8836799"
        }
      ]
    },
    "#W2832660": {
      order_id: "#W2832660",
      user_id: "yara_lee_7701",
      address: {
        address1: "944 Laurel Lane",
        address2: "Suite 386",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77243"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "5839483328",
          price: 2929.06,
          options: {
            pressure: "15 bar",
            capacity: "2L",
            type: "automatic"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8118291112",
          price: 260.56,
          options: {
            size: "12",
            material: "leather",
            waterproof: "no"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9030221155",
          price: 51.98,
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5172162216",
          price: 48.51,
          options: {
            pieces: "2000",
            theme: "landscape",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "7528037711",
          price: 157.86,
          options: {
            size: "XL",
            color: "navy",
            zipper: "full"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["847948717498"],
          item_ids: [
            "5839483328",
            "8118291112",
            "9030221155",
            "5172162216",
            "7528037711"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3447.97,
          payment_method_id: "credit_card_6680679"
        },
        {
          transaction_type: "refund",
          amount: 3447.97,
          payment_method_id: "credit_card_6680679"
        }
      ]
    },
    "#W4825004": {
      order_id: "#W4825004",
      user_id: "sofia_ito_7804",
      address: {
        address1: "264 River Road",
        address2: "Suite 392",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94125"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "3453331371",
          price: 52.79,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "3812493782",
          price: 244.34,
          options: {
            size: "7",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "3892645120",
          price: 3070.64,
          options: {
            resolution: "30MP",
            zoom: "10x",
            storage: "CF card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["802347023880"],
          item_ids: ["3453331371", "3812493782", "3892645120"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3367.77,
          payment_method_id: "credit_card_7183597"
        }
      ]
    },
    "#W5272531": {
      order_id: "#W5272531",
      user_id: "fatima_wilson_7472",
      address: {
        address1: "167 Willow Lane",
        address2: "Suite 624",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92183"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "3320557165",
          price: 188.67,
          options: {
            color: "blue",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2698416822",
          price: 149.45,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "white"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8098621301",
          price: 192.15,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "rechargeable"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "7228247242",
          price: 251.38,
          options: {
            size: "10",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7441167885",
          price: 2866.37,
          options: {
            pressure: "15 bar",
            capacity: "1.5L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["848454071657"],
          item_ids: [
            "3320557165",
            "2698416822",
            "8098621301",
            "7228247242",
            "7441167885"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3648.02,
          payment_method_id: "credit_card_6824399"
        }
      ]
    },
    "#W2890441": {
      order_id: "#W2890441",
      user_id: "mei_davis_8935",
      address: {
        address1: "698 Maple Drive",
        address2: "Suite 465",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80217"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "2366567022",
          price: 54.04,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "blue"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "2751999929",
          price: 195.11,
          options: {
            size: "large",
            material: "memory foam",
            color: "grey"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8069050545",
          price: 499.28,
          options: {
            material: "leather",
            color: "blue",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3877188862",
          price: 182.03,
          options: {
            "deck material": "plastic",
            length: "31 inch",
            design: "plain"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["642796688644"],
          item_ids: ["2366567022", "2751999929", "8069050545", "3877188862"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 930.46,
          payment_method_id: "credit_card_1061405"
        }
      ]
    },
    "#W2148041": {
      order_id: "#W2148041",
      user_id: "ethan_smith_9087",
      address: {
        address1: "381 Maple Drive",
        address2: "Suite 338",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78748"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "9580569596",
          price: 257.38,
          options: {
            color: "black",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4965355367",
          price: 620.07,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["149981485342"],
          item_ids: ["9580569596", "4965355367"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 877.45,
          payment_method_id: "paypal_3296755"
        }
      ]
    },
    "#W6564160": {
      order_id: "#W6564160",
      user_id: "daiki_silva_5033",
      address: {
        address1: "866 Hillcrest Drive",
        address2: "Suite 737",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28268"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "2652637226",
          price: 295.94,
          options: {
            color: "green",
            "battery life": "20 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "8964750292",
          price: 532.58,
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "hardshell"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["342763212076"],
          item_ids: ["2652637226", "8964750292"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 828.52,
          payment_method_id: "paypal_2233507"
        }
      ]
    },
    "#W9102111": {
      order_id: "#W9102111",
      user_id: "ethan_sanchez_2952",
      address: {
        address1: "138 Cedar Street",
        address2: "Suite 356",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10134"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "5418781403",
          price: 267.58,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "8GB"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6469567736",
          price: 47.84,
          options: {
            capacity: "1000ml",
            material: "glass",
            color: "blue"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "5209958006",
          price: 514.72,
          options: {
            "piece count": "2-piece",
            color: "silver",
            material: "hardshell"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "4241599783",
          price: 2324.61,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "16GB",
            storage: "1TB SSD",
            color: "black"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "7082455361",
          price: 962.69,
          options: {
            type: "charcoal",
            size: "medium",
            features: "rotisserie"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4117.44,
          payment_method_id: "gift_card_4817478"
        }
      ]
    },
    "#W4316152": {
      order_id: "#W4316152",
      user_id: "aarav_anderson_8794",
      address: {
        address1: "931 Maple Drive",
        address2: "Suite 985",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19031"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7292993796",
          price: 94.8,
          options: {
            material: "glass",
            capacity: "2 liters",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7292993796",
          price: 94.8,
          options: {
            material: "glass",
            capacity: "2 liters",
            "stovetop compatibility": "induction"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["555227871167"],
          item_ids: ["7292993796", "7292993796"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 189.6,
          payment_method_id: "gift_card_7245904"
        }
      ]
    },
    "#W8495163": {
      order_id: "#W8495163",
      user_id: "ava_moore_4814",
      address: {
        address1: "603 Maple Drive",
        address2: "Suite 859",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85032"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5489028872",
          price: 187.71,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "graphic"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "4064702754",
          price: 159.78,
          options: {
            capacity: "2L",
            material: "glass",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["329179745249"],
          item_ids: ["5489028872", "4064702754"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 347.49,
          payment_method_id: "paypal_7478252"
        }
      ]
    },
    "#W7273336": {
      order_id: "#W7273336",
      user_id: "omar_lopez_3107",
      address: {
        address1: "959 Broadway",
        address2: "Suite 363",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90339"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6200867091",
          price: 2955.17,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "capsule"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8018699955",
          price: 467.86,
          options: {
            material: "metal",
            color: "brown",
            height: "4 ft"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "8214883393",
          price: 150.58,
          options: {
            color: "black",
            "sensor type": "laser",
            connectivity: "wireless"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "6857426243",
          price: 196.53,
          options: {
            size: "medium",
            material: "fleece",
            color: "grey"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "9375701158",
          price: 489.5,
          options: {
            "room size": "medium",
            "filter type": "carbon",
            features: "quiet operation"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["555296392986"],
          item_ids: [
            "6200867091",
            "8018699955",
            "8214883393",
            "6857426243",
            "9375701158"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4259.64,
          payment_method_id: "paypal_1530316"
        }
      ]
    },
    "#W3482034": {
      order_id: "#W3482034",
      user_id: "evelyn_hernandez_1701",
      address: {
        address1: "736 Hillcrest Drive",
        address2: "Suite 196",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92139"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5666020311",
          price: 1058.86,
          options: {
            type: "electric",
            size: "medium",
            features: "side burner"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1058.86,
          payment_method_id: "credit_card_3631888"
        }
      ]
    },
    "#W3338814": {
      order_id: "#W3338814",
      user_id: "sofia_moore_9773",
      address: {
        address1: "181 Elm Street",
        address2: "Suite 178",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20030"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "4273929280",
          price: 244.95,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "32GB"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7539442683",
          price: 461.49,
          options: {
            material: "metal",
            color: "black",
            height: "4 ft"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1151293680",
          price: 272.33,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "full size"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2860956907",
          price: 315.61,
          options: {
            color: "black",
            "band material": "silicone",
            display: "LCD"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["682130923038"],
          item_ids: ["4273929280", "7539442683", "1151293680", "2860956907"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1294.38,
          payment_method_id: "credit_card_1893409"
        }
      ]
    },
    "#W8992263": {
      order_id: "#W8992263",
      user_id: "ethan_kim_8860",
      address: {
        address1: "848 Willow Lane",
        address2: "Suite 453",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78286"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "4900661478",
          price: 463.04,
          options: {
            material: "glass",
            color: "black",
            height: "5 ft"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6690069155",
          price: 466.47,
          options: {
            "piece count": "3-piece",
            color: "silver",
            material: "softshell"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5172162216",
          price: 48.51,
          options: {
            pieces: "2000",
            theme: "landscape",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6301799585",
          price: 495.87,
          options: {
            "piece count": "3-piece",
            color: "blue",
            material: "softshell"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "7848293342",
          price: 942.71,
          options: {
            type: "charcoal",
            size: "medium",
            features: "side burner"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["401046568998"],
          item_ids: [
            "4900661478",
            "6690069155",
            "5172162216",
            "6301799585",
            "7848293342"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2416.6,
          payment_method_id: "gift_card_5701566"
        }
      ]
    },
    "#W5964460": {
      order_id: "#W5964460",
      user_id: "harper_moore_7767",
      address: {
        address1: "299 Oak Street",
        address2: "Suite 248",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32263"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8098621301",
          price: 192.15,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "rechargeable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["202178391333"],
          item_ids: ["8098621301"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 192.15,
          payment_method_id: "paypal_6546615"
        }
      ]
    },
    "#W7634667": {
      order_id: "#W7634667",
      user_id: "amelia_kim_4338",
      address: {
        address1: "250 River Road",
        address2: "Suite 668",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28230"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "5320792178",
          price: 135.24,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "AC adapter"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "6454334990",
          price: 98.82,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1421289881",
          price: 268.77,
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3312883418",
          price: 104.82,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 607.65,
          payment_method_id: "paypal_1742092"
        }
      ]
    },
    "#W7623533": {
      order_id: "#W7623533",
      user_id: "olivia_davis_3316",
      address: {
        address1: "416 Broadway",
        address2: "Suite 222",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77244"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4772738468",
          price: 53.91,
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "beginner"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["852355025203"],
          item_ids: ["4772738468"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 53.91,
          payment_method_id: "paypal_8673863"
        }
      ]
    },
    "#W6257064": {
      order_id: "#W6257064",
      user_id: "ava_moore_4814",
      address: {
        address1: "603 Maple Drive",
        address2: "Suite 859",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85032"
      },
      items: [
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "4859937227",
          price: 503.58,
          options: {
            resolution: "5K",
            waterproof: "no",
            color: "silver"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4772738468",
          price: 53.91,
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "2872451762",
          price: 622.12,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "9112290483",
          price: 1925.16,
          options: {
            "strap material": "metal",
            "dial color": "blue"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "4953074738",
          price: 226.02,
          options: {
            compatibility: "Amazon Alexa",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["180694848020"],
          item_ids: [
            "4859937227",
            "4772738468",
            "2872451762",
            "9112290483",
            "4953074738"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3330.79,
          payment_method_id: "paypal_7478252"
        }
      ]
    },
    "#W7016806": {
      order_id: "#W7016806",
      user_id: "lucas_johnson_2067",
      address: {
        address1: "350 Park Avenue",
        address2: "Suite 946",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98147"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "5758737025",
          price: 45.09,
          options: {
            capacity: "500ml",
            material: "glass",
            color: "green"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "4894369688",
          price: 537.01,
          options: {
            material: "glass",
            color: "brown",
            height: "5 ft"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6200867091",
          price: 2955.17,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["217734600752"],
          item_ids: ["5758737025", "4894369688", "6200867091"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3537.27,
          payment_method_id: "gift_card_1870765"
        }
      ]
    },
    "#W9903153": {
      order_id: "#W9903153",
      user_id: "emma_santos_9753",
      address: {
        address1: "463 Pine Lane",
        address2: "Suite 570",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78228"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4168944673",
          price: 471.82,
          options: {
            material: "leather",
            color: "blue",
            armrest: "none",
            "backrest height": "standard"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6313971174",
          price: 193.97,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "custom"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6974536207",
          price: 49.3,
          options: {
            capacity: "750ml",
            material: "plastic",
            color: "blue"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6777246137",
          price: 47.76,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "red"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "8997785118",
          price: 2674.4,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3437.25,
          payment_method_id: "gift_card_6023546"
        }
      ]
    },
    "#W4686509": {
      order_id: "#W4686509",
      user_id: "emma_lopez_8196",
      address: {
        address1: "366 Elm Street",
        address2: "Suite 779",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20091"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6048672633",
          price: 208.05,
          options: {
            size: "L",
            color: "black",
            ventilation: "low"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1615379700",
          price: 253.89,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "5253880258",
          price: 49.52,
          options: {
            color: "black",
            size: "XXL",
            material: "polyester",
            style: "v-neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["385751165600"],
          item_ids: ["6048672633", "1615379700", "5253880258"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 511.46,
          payment_method_id: "gift_card_5439120"
        }
      ]
    },
    "#W7017301": {
      order_id: "#W7017301",
      user_id: "mei_martin_4260",
      address: {
        address1: "121 Cedar Avenue",
        address2: "Suite 971",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32124"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5105441284",
          price: 924.5,
          options: {
            type: "charcoal",
            size: "portable",
            features: "none"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "9851293632",
          price: 193.38,
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "camera"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "5606522780",
          price: 1902.67,
          options: {
            "frame size": "large",
            color: "red",
            type: "mountain"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "6574183535",
          price: 28.14,
          options: {
            size: "A6",
            "cover type": "hard cover"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3048.69,
          payment_method_id: "paypal_2299608"
        }
      ]
    },
    "#W3754544": {
      order_id: "#W3754544",
      user_id: "emma_nguyen_6662",
      address: {
        address1: "884 Main Street",
        address2: "Suite 443",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76147"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "2405281423",
          price: 204.09,
          options: {
            size: "medium",
            material: "polyester",
            color: "grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["103439696012"],
          item_ids: ["2405281423"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 204.09,
          payment_method_id: "paypal_2499655"
        }
      ]
    },
    "#W6484127": {
      order_id: "#W6484127",
      user_id: "juan_smith_9901",
      address: {
        address1: "127 Oak Street",
        address2: "Suite 727",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78770"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1304426904",
          price: 565.79,
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["427228851141"],
          item_ids: ["1304426904"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 565.79,
          payment_method_id: "gift_card_9106672"
        }
      ]
    },
    "#W1773724": {
      order_id: "#W1773724",
      user_id: "ava_nguyen_6971",
      address: {
        address1: "670 Maple Drive",
        address2: "Suite 412",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80286"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6227345631",
          price: 483.45,
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "fixed"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "2645006275",
          price: 183.11,
          options: {
            color: "white",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "7602931732",
          price: 153.25,
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "6805564527",
          price: 158.41,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1596993217",
          price: 180.02,
          options: {
            size: "S",
            color: "white",
            ventilation: "low"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["854767935605"],
          item_ids: [
            "6227345631",
            "2645006275",
            "7602931732",
            "6805564527",
            "1596993217"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1158.24,
          payment_method_id: "gift_card_8640626"
        },
        {
          transaction_type: "refund",
          amount: 1158.24,
          payment_method_id: "gift_card_8640626"
        }
      ]
    },
    "#W6390527": {
      order_id: "#W6390527",
      user_id: "mei_kovacs_8020",
      address: {
        address1: "317 Elm Street",
        address2: "Suite 461",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28236"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "8384507844",
          price: 137.94,
          options: {
            color: "white",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1615379700",
          price: 253.89,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "8538875209",
          price: 45.13,
          options: {
            capacity: "500ml",
            material: "glass",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["745984883162"],
          item_ids: ["8384507844", "1615379700", "8538875209"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 436.96,
          payment_method_id: "paypal_7644869"
        }
      ]
    },
    "#W7571356": {
      order_id: "#W7571356",
      user_id: "liam_moore_4057",
      address: {
        address1: "210 Willow Lane",
        address2: "Suite 621",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77144"
      },
      items: [
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "8170914468",
          price: 316.29,
          options: {
            size: "6 ft",
            color: "red",
            material: "olefin",
            "tilt mechanism": "manual tilt"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "9534205511",
          price: 473.43,
          options: {
            "room size": "large",
            "filter type": "ionic",
            features: "smart sensors"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7605253559",
          price: 97.88,
          options: {
            material: "stainless steel",
            capacity: "1 liter",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "2635605237",
          price: 271.89,
          options: {
            color: "blue",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "5418781403",
          price: 267.58,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "8GB"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["461059833783"],
          item_ids: [
            "8170914468",
            "9534205511",
            "7605253559",
            "2635605237",
            "5418781403"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1427.07,
          payment_method_id: "paypal_4518393"
        },
        {
          transaction_type: "refund",
          amount: 1427.07,
          payment_method_id: "paypal_4518393"
        }
      ]
    },
    "#W9672333": {
      order_id: "#W9672333",
      user_id: "aarav_santos_2259",
      address: {
        address1: "822 Elm Avenue",
        address2: "Suite 500",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76134"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3778566150",
          price: 2372.97,
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "32GB",
            storage: "256GB SSD",
            color: "silver"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3714494375",
          price: 2709.83,
          options: {
            pressure: "15 bar",
            capacity: "1L",
            type: "manual"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1345513440",
          price: 655.59,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "cordless"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "7747408585",
          price: 249.01,
          options: {
            compatibility: "Google Assistant",
            color: "black"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "1684786391",
          price: 2508.06,
          options: {
            "screen size": "17-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 8495.46,
          payment_method_id: "paypal_7664977"
        }
      ]
    },
    "#W5866402": {
      order_id: "#W5866402",
      user_id: "olivia_ito_3591",
      address: {
        address1: "570 Elm Avenue",
        address2: "Suite 175",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80218"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6242772310",
          price: 2996.03,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "automatic"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "9727387530",
          price: 207.75,
          options: {
            size: "11",
            color: "black",
            material: "synthetic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["203283266934"],
          item_ids: ["6242772310", "9727387530"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3203.78,
          payment_method_id: "paypal_8049766"
        }
      ]
    },
    "#W4862767": {
      order_id: "#W4862767",
      user_id: "sophia_thomas_5301",
      address: {
        address1: "963 Lakeview Drive",
        address2: "Suite 696",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75396"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8479046075",
          price: 451.01,
          options: {
            material: "wood",
            color: "white",
            height: "5 ft"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "2633090267",
          price: 1046.33,
          options: {
            "screen size": "7-inch",
            storage: "64GB",
            color: "silver"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8323284863",
          price: 511.24,
          options: {
            material: "fabric",
            color: "blue",
            armrest: "adjustable",
            "backrest height": "standard"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "1071497737",
          price: 483.95,
          options: {
            material: "leather",
            color: "gray",
            armrest: "fixed",
            "backrest height": "high-back"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2492.53,
          payment_method_id: "paypal_5297429"
        }
      ]
    },
    "#W9486384": {
      order_id: "#W9486384",
      user_id: "liam_muller_2178",
      address: {
        address1: "371 Elm Avenue",
        address2: "Suite 865",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32250"
      },
      items: [
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5339029584",
          price: 1128.99,
          options: {
            color: "black",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "6.5-inch"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "6195938807",
          price: 103.98,
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "green"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["646406234943"],
          item_ids: ["5339029584", "6195938807"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1232.97,
          payment_method_id: "credit_card_9615915"
        }
      ]
    },
    "#W7534214": {
      order_id: "#W7534214",
      user_id: "liam_ahmed_6523",
      address: {
        address1: "464 Oak Street",
        address2: "Suite 664",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92135"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "2820119811",
          price: 94.68,
          options: {
            material: "glass",
            capacity: "2 liters",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9635758562",
          price: 148.95,
          options: {
            size: "9",
            color: "white",
            material: "mesh",
            sole: "rubber"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6048672633",
          price: 208.05,
          options: {
            size: "L",
            color: "black",
            ventilation: "low"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "4422467033",
          price: 483.47,
          options: {
            "weight range": "30-50 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "1300392224",
          price: 480.74,
          options: {
            "weight range": "55-75 lbs",
            material: "rubber",
            "set type": "fixed"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1415.89,
          payment_method_id: "gift_card_5327033"
        }
      ]
    },
    "#W5270061": {
      order_id: "#W5270061",
      user_id: "ivan_khan_7475",
      address: {
        address1: "584 Sunset Drive",
        address2: "Suite 270",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20353"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "2492465580",
          price: 201.95,
          options: {
            color: "navy",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "5810561222",
          price: 274.98,
          options: {
            resolution: "4K",
            "field of view": "130 degrees",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "7453605304",
          price: 150.01,
          options: {
            color: "silver",
            brightness: "low",
            "power source": "battery"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 626.94,
          payment_method_id: "gift_card_1711656"
        }
      ]
    },
    "#W2922433": {
      order_id: "#W2922433",
      user_id: "anya_brown_2024",
      address: {
        address1: "391 Lakeview Drive",
        address2: "Suite 326",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10121"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "6857426243",
          price: 196.53,
          options: {
            size: "medium",
            material: "fleece",
            color: "grey"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1709726483",
          price: 230.26,
          options: {
            "skin tone": "medium",
            "kit size": "basic",
            brand: "Brand A"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4913411651",
          price: 941.03,
          options: {
            "screen size": "7-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5745575001",
          price: 986.65,
          options: {
            type: "electric",
            size: "portable",
            features: "rotisserie"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["196468795206"],
          item_ids: ["6857426243", "1709726483", "4913411651", "5745575001"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2354.47,
          payment_method_id: "credit_card_3414703"
        }
      ]
    },
    "#W8732376": {
      order_id: "#W8732376",
      user_id: "ava_nguyen_4072",
      address: {
        address1: "895 Pine Lane",
        address2: "Suite 907",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28251"
      },
      items: [
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "8316205423",
          price: 288.75,
          options: {
            "scent family": "woody",
            size: "30ml",
            gender: "women"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 288.75,
          payment_method_id: "paypal_3180577"
        }
      ]
    },
    "#W5671546": {
      order_id: "#W5671546",
      user_id: "olivia_hernandez_5066",
      address: {
        address1: "442 Lakeview Drive",
        address2: "Suite 116",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98188"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "4063058357",
          price: 243.34,
          options: {
            color: "black",
            "battery life": "4 hours",
            "water resistance": "not resistant"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "3230708338",
          price: 99.51,
          options: {
            length: "25ft",
            material: "latex",
            color: "green"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["281258265530"],
          item_ids: ["4063058357", "3230708338"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 342.85,
          payment_method_id: "credit_card_2583849"
        }
      ]
    },
    "#W2598834": {
      order_id: "#W2598834",
      user_id: "chen_silva_7485",
      address: {
        address1: "139 River Road",
        address2: "Suite 418",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46281"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "6245746168",
          price: 46,
          options: {
            pieces: "1500",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["636875713667"],
          item_ids: ["6245746168"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 46,
          payment_method_id: "gift_card_7250692"
        }
      ]
    },
    "#W9144718": {
      order_id: "#W9144718",
      user_id: "lucas_martin_4549",
      address: {
        address1: "403 Lakeview Drive",
        address2: "Suite 227",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75333"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1709726483",
          price: 230.26,
          options: {
            "skin tone": "medium",
            "kit size": "basic",
            brand: "Brand A"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "1775591963",
          price: 154.75,
          options: {
            size: "10",
            color: "white",
            material: "leather",
            sole: "EVA"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["947471514360"],
          item_ids: ["1709726483", "1775591963"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 385.01,
          payment_method_id: "gift_card_7728021"
        },
        {
          transaction_type: "refund",
          amount: 385.01,
          payment_method_id: "gift_card_7728021"
        }
      ]
    },
    "#W7425646": {
      order_id: "#W7425646",
      user_id: "harper_thomas_9402",
      address: {
        address1: "426 Park Avenue",
        address2: "Suite 918",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77105"
      },
      items: [
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "7510236436",
          price: 105.68,
          options: {
            thickness: "6mm",
            material: "PVC",
            color: "green"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "4983901480",
          price: 262.47,
          options: {
            compatibility: "Apple HomeKit",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 368.15,
          payment_method_id: "credit_card_1283450"
        }
      ]
    },
    "#W8991836": {
      order_id: "#W8991836",
      user_id: "mia_gonzalez_5269",
      address: {
        address1: "771 Broadway",
        address2: "Suite 214",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28216"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7274158061",
          price: 91.13,
          options: {
            material: "ceramic",
            capacity: "1 liter",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5855700373",
          price: 293.46,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "9929635042",
          price: 1261.14,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "5.8-inch"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "2820119811",
          price: 94.68,
          options: {
            material: "glass",
            capacity: "2 liters",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "6509212169",
          price: 256.14,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand A"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1996.55,
          payment_method_id: "gift_card_7000567"
        }
      ]
    },
    "#W6893533": {
      order_id: "#W6893533",
      user_id: "ivan_santos_6635",
      address: {
        address1: "207 Willow Lane",
        address2: "Suite 423",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78798"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5206946487",
          price: 95.08,
          options: {
            length: "50ft",
            material: "vinyl",
            color: "black"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "1646531091",
          price: 232.49,
          options: {
            color: "blue",
            "battery life": "6 hours",
            "water resistance": "IPX4"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["262530041486"],
          item_ids: ["5206946487", "1646531091"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 327.57,
          payment_method_id: "paypal_6151711"
        }
      ]
    },
    "#W2702727": {
      order_id: "#W2702727",
      user_id: "yusuf_taylor_7149",
      address: {
        address1: "163 Cedar Street",
        address2: "Suite 165",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95154"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7373893106",
          price: 531.22,
          options: {
            material: "glass",
            color: "white",
            height: "4 ft"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "2733768059",
          price: 94.38,
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "pink"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 625.6,
          payment_method_id: "credit_card_3599838"
        }
      ]
    },
    "#W3289292": {
      order_id: "#W3289292",
      user_id: "james_kim_7213",
      address: {
        address1: "579 Highland Drive",
        address2: "Suite 492",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92199"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4127323219",
          price: 251.82,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1355937109",
          price: 1985.3,
          options: {
            "strap material": "leather",
            "dial color": "white"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9025753381",
          price: 231.58,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "full size"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2468.7,
          payment_method_id: "paypal_8963303"
        }
      ]
    },
    "#W3826449": {
      order_id: "#W3826449",
      user_id: "lei_wilson_4541",
      address: {
        address1: "119 Elm Avenue",
        address2: "Suite 999",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32255"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "5565631513",
          price: 267.9,
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3951031513",
          price: 3289.46,
          options: {
            pressure: "19 bar",
            capacity: "1.5L",
            type: "automatic"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "2231112417",
          price: 364.22,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "red"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "9929635042",
          price: 1261.14,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "5.8-inch"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "3788616824",
          price: 951.21,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6133.93,
          payment_method_id: "credit_card_3677959"
        }
      ]
    },
    "#W6851636": {
      order_id: "#W6851636",
      user_id: "fatima_muller_6713",
      address: {
        address1: "377 River Road",
        address2: "Suite 307",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60644"
      },
      items: [
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "4153505238",
          price: 158.67,
          options: {
            size: "8",
            color: "red",
            material: "leather",
            sole: "EVA"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "4510078629",
          price: 2127.62,
          options: {
            "strap material": "metal",
            "dial color": "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2286.29,
          payment_method_id: "paypal_5541158"
        }
      ]
    },
    "#W2982823": {
      order_id: "#W2982823",
      user_id: "lei_hernandez_8500",
      address: {
        address1: "196 Main Street",
        address2: "Suite 800",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43222"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1719127154",
          price: 206.26,
          options: {
            size: "M",
            color: "red",
            ventilation: "medium"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["920545524634"],
          item_ids: ["1719127154"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 206.26,
          payment_method_id: "gift_card_5245016"
        }
      ]
    },
    "#W5673917": {
      order_id: "#W5673917",
      user_id: "harper_ito_4653",
      address: {
        address1: "220 Laurel Lane",
        address2: "Suite 687",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80256"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1676105083",
          price: 191.56,
          options: {
            size: "S",
            color: "blue",
            ventilation: "high"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "2106335193",
          price: 903.95,
          options: {
            "screen size": "10-inch",
            storage: "64GB",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["353736009605"],
          item_ids: ["1676105083", "2106335193"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1095.51,
          payment_method_id: "paypal_1053133"
        }
      ]
    },
    "#W5490111": {
      order_id: "#W5490111",
      user_id: "mia_garcia_4516",
      address: {
        address1: "537 Main Street",
        address2: "Suite 572",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46229"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "4579334072",
          price: 54.85,
          options: {
            capacity: "750ml",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1421289881",
          price: 268.77,
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "6117189161",
          price: 481.5,
          options: {
            resolution: "4K",
            waterproof: "yes",
            color: "silver"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "4947717507",
          price: 218.04,
          options: {
            color: "green",
            size: "medium",
            material: "leather",
            compartment: "camera"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["574297338433"],
          item_ids: ["4579334072", "1421289881", "6117189161", "4947717507"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1023.16,
          payment_method_id: "credit_card_3124723"
        }
      ]
    },
    "#W5332101": {
      order_id: "#W5332101",
      user_id: "chen_anderson_8078",
      address: {
        address1: "233 Lakeview Drive",
        address2: "Suite 676",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19158"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "1176194968",
          price: 52.88,
          options: {
            color: "black",
            size: "S",
            material: "polyester",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["821041635633"],
          item_ids: ["1176194968"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 52.88,
          payment_method_id: "gift_card_3434432"
        }
      ]
    },
    "#W7464385": {
      order_id: "#W7464385",
      user_id: "james_sanchez_3954",
      address: {
        address1: "219 Park Avenue",
        address2: "Suite 437",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60623"
      },
      items: [
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "1810466394",
          price: 502.28,
          options: {
            resolution: "1080p",
            waterproof: "no",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 502.28,
          payment_method_id: "paypal_1261484"
        }
      ]
    },
    "#W1267569": {
      order_id: "#W1267569",
      user_id: "mei_davis_8935",
      address: {
        address1: "698 Maple Drive",
        address2: "Suite 465",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80217"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "7420906769",
          price: 138.47,
          options: {
            color: "white",
            "sensor type": "laser",
            connectivity: "wireless"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "7493556126",
          price: 346.97,
          options: {
            type: "over-ear",
            connectivity: "wireless",
            color: "black"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "1327854740",
          price: 492.65,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "6243148452",
          price: 247,
          options: {
            compatibility: "Amazon Alexa",
            color: "stainless steel"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "5565631513",
          price: 267.9,
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "IPX7"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1492.99,
          payment_method_id: "credit_card_1061405"
        }
      ]
    },
    "#W2033238": {
      order_id: "#W2033238",
      user_id: "yusuf_hernandez_6467",
      address: {
        address1: "943 Maple Drive",
        address2: "Suite 837",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43175"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "9045948550",
          price: 279.78,
          options: {
            "frame color": "black",
            "lens color": "blue",
            "lens type": "polarized",
            "frame material": "metal"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 279.78,
          payment_method_id: "paypal_9426036"
        }
      ]
    },
    "#W7309535": {
      order_id: "#W7309535",
      user_id: "ethan_li_6208",
      address: {
        address1: "408 Sunset Drive",
        address2: "Suite 522",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43135"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "6243148452",
          price: 247,
          options: {
            compatibility: "Amazon Alexa",
            color: "stainless steel"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["381690936972"],
          item_ids: ["6243148452"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 247,
          payment_method_id: "credit_card_1397305"
        }
      ]
    },
    "#W4096800": {
      order_id: "#W4096800",
      user_id: "mia_sanchez_3401",
      address: {
        address1: "615 Cedar Avenue",
        address2: "Suite 968",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98179"
      },
      items: [
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "1178356107",
          price: 98.25,
          options: {
            capacity: "20000mAh",
            output: "USB-C",
            color: "white"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7902309762",
          price: 243.62,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand B"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "6439196450",
          price: 254.56,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "60%"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 596.43,
          payment_method_id: "paypal_9064553"
        }
      ]
    },
    "#W2787996": {
      order_id: "#W2787996",
      user_id: "lei_khan_6353",
      address: {
        address1: "263 Laurel Lane",
        address2: "Suite 458",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92182"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9354168549",
          price: 46.85,
          options: {
            color: "red",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["383272314404"],
          item_ids: ["9354168549"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 46.85,
          payment_method_id: "gift_card_6786837"
        }
      ]
    },
    "#W8367380": {
      order_id: "#W8367380",
      user_id: "ava_nguyen_6646",
      address: {
        address1: "144 Elm Street",
        address2: "Suite 947",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90450"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "2444431651",
          price: 534.84,
          options: {
            "weight range": "55-75 lbs",
            material: "iron",
            "set type": "fixed"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "1689914594",
          price: 315.2,
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8733974883",
          price: 153.18,
          options: {
            size: "L",
            color: "red",
            zipper: "half"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1003.22,
          payment_method_id: "credit_card_5683823"
        }
      ]
    },
    "#W2896492": {
      order_id: "#W2896492",
      user_id: "ava_nguyen_6971",
      address: {
        address1: "670 Maple Drive",
        address2: "Suite 412",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80286"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1345513440",
          price: 655.59,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "cordless"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "5606522780",
          price: 1902.67,
          options: {
            "frame size": "large",
            color: "red",
            type: "mountain"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4582956489",
          price: 241.96,
          options: {
            size: "12",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "4238115171",
          price: 91.78,
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "gas"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["328355697320"],
          item_ids: ["1345513440", "5606522780", "4582956489", "4238115171"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2892,
          payment_method_id: "gift_card_8640626"
        },
        {
          transaction_type: "refund",
          amount: 2892,
          payment_method_id: "gift_card_8640626"
        }
      ]
    },
    "#W6239298": {
      order_id: "#W6239298",
      user_id: "lucas_brown_6720",
      address: {
        address1: "921 Park Avenue",
        address2: "Suite 892",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60612"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "4900661478",
          price: 463.04,
          options: {
            material: "glass",
            color: "black",
            height: "5 ft"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "9494281769",
          price: 252.06,
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "3614853563",
          price: 46.99,
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "2366567022",
          price: 54.04,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "blue"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["682308736931"],
          item_ids: ["4900661478", "9494281769", "3614853563", "2366567022"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 816.13,
          payment_method_id: "credit_card_2112420"
        }
      ]
    },
    "#W9319364": {
      order_id: "#W9319364",
      user_id: "olivia_lopez_3865",
      address: {
        address1: "310 Laurel Lane",
        address2: "Suite 480",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76171"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3704016729",
          price: 487.67,
          options: {
            material: "mesh",
            color: "blue",
            armrest: "fixed",
            "backrest height": "standard"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["468830347216"],
          item_ids: ["3704016729"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 487.67,
          payment_method_id: "gift_card_7711863"
        }
      ]
    },
    "#W4802126": {
      order_id: "#W4802126",
      user_id: "noah_hernandez_4232",
      address: {
        address1: "377 Broadway",
        address2: "Suite 636",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75317"
      },
      items: [
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8733974883",
          price: 153.18,
          options: {
            size: "L",
            color: "red",
            zipper: "half"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "4983901480",
          price: 262.47,
          options: {
            compatibility: "Apple HomeKit",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 415.65,
          payment_method_id: "gift_card_3410768"
        }
      ]
    },
    "#W8958831": {
      order_id: "#W8958831",
      user_id: "omar_taylor_1594",
      address: {
        address1: "639 Cedar Avenue",
        address2: "Suite 969",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95112"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5537798301",
          price: 204.47,
          options: {
            size: "S",
            color: "black",
            ventilation: "medium"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "4624254797",
          price: 272.99,
          options: {
            "skin tone": "light",
            "kit size": "basic",
            brand: "Brand C"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "8941974610",
          price: 200.66,
          options: {
            size: "large",
            material: "fleece",
            color: "beige"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "2635605237",
          price: 271.89,
          options: {
            color: "blue",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["708355248024"],
          item_ids: ["5537798301", "4624254797", "8941974610", "2635605237"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 950.01,
          payment_method_id: "credit_card_7256085"
        },
        {
          transaction_type: "refund",
          amount: 950.01,
          payment_method_id: "credit_card_7256085"
        }
      ]
    },
    "#W3561391": {
      order_id: "#W3561391",
      user_id: "sofia_hernandez_5364",
      address: {
        address1: "652 Laurel Lane",
        address2: "Suite 398",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98193"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5946177616",
          price: 1057.24,
          options: {
            type: "gas",
            size: "portable",
            features: "none"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1057.24,
          payment_method_id: "credit_card_7901829"
        }
      ]
    },
    "#W8584917": {
      order_id: "#W8584917",
      user_id: "harper_lee_2110",
      address: {
        address1: "788 Park Avenue",
        address2: "Suite 618",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76157"
      },
      items: [
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6922203216",
          price: 199.12,
          options: {
            diameter: "14 inches",
            color: "black",
            type: "digital"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "4821837102",
          price: 243.59,
          options: {
            color: "white",
            capacity: "4 cups",
            type: "french press",
            features: "built-in grinder"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 442.71,
          payment_method_id: "gift_card_8417258"
        }
      ]
    },
    "#W7073860": {
      order_id: "#W7073860",
      user_id: "omar_lopez_3107",
      address: {
        address1: "959 Broadway",
        address2: "Suite 363",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90339"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9665000388",
          price: 269.46,
          options: {
            "switch type": "clicky",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "3624655057",
          price: 2195.04,
          options: {
            "frame size": "medium",
            color: "blue",
            type: "road"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3609437808",
          price: 466.44,
          options: {
            material: "leather",
            color: "red",
            armrest: "none",
            "backrest height": "high-back"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["580381106916"],
          item_ids: ["9665000388", "3624655057", "3609437808"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2930.94,
          payment_method_id: "paypal_1530316"
        },
        {
          transaction_type: "refund",
          amount: 2930.94,
          payment_method_id: "paypal_1530316"
        }
      ]
    },
    "#W8580621": {
      order_id: "#W8580621",
      user_id: "mia_davis_8827",
      address: {
        address1: "123 Elm Street",
        address2: "Suite 325",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28229"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2993891288",
          price: 383.08,
          options: {
            color: "silver",
            "band material": "leather",
            display: "AMOLED"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "5606522780",
          price: 1902.67,
          options: {
            "frame size": "large",
            color: "red",
            type: "mountain"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["116808022016"],
          item_ids: ["2993891288", "5606522780"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2285.75,
          payment_method_id: "gift_card_5897764"
        }
      ]
    },
    "#W1348609": {
      order_id: "#W1348609",
      user_id: "olivia_smith_8953",
      address: {
        address1: "915 Elm Street",
        address2: "Suite 995",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32177"
      },
      items: [
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "5606522780",
          price: 1902.67,
          options: {
            "frame size": "large",
            color: "red",
            type: "mountain"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "9007697085",
          price: 318.96,
          options: {
            "scent family": "fresh",
            size: "50ml",
            gender: "men"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6313971174",
          price: 193.97,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "custom"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7195021808",
          price: 2909.87,
          options: {
            resolution: "30MP",
            zoom: "5x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5325.47,
          payment_method_id: "paypal_2076152"
        }
      ]
    },
    "#W8061371": {
      order_id: "#W8061371",
      user_id: "noah_taylor_8533",
      address: {
        address1: "134 Cedar Avenue",
        address2: "Suite 989",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85010"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "4947717507",
          price: 218.04,
          options: {
            color: "green",
            size: "medium",
            material: "leather",
            compartment: "camera"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "4624254797",
          price: 272.99,
          options: {
            "skin tone": "light",
            "kit size": "basic",
            brand: "Brand C"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "8214883393",
          price: 150.58,
          options: {
            color: "black",
            "sensor type": "laser",
            connectivity: "wireless"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["677925545757"],
          item_ids: ["4947717507", "4624254797", "8214883393"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 641.61,
          payment_method_id: "gift_card_5354170"
        },
        {
          transaction_type: "refund",
          amount: 641.61,
          payment_method_id: "gift_card_5354170"
        }
      ]
    },
    "#W9527030": {
      order_id: "#W9527030",
      user_id: "isabella_santos_1643",
      address: {
        address1: "474 Chestnut Street",
        address2: "Suite 601",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10020"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9408160950",
          price: 381.26,
          options: {
            color: "gold",
            "band material": "leather",
            display: "LCD"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1262139877",
          price: 239.99,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 621.25,
          payment_method_id: "credit_card_4056740"
        }
      ]
    },
    "#W3135192": {
      order_id: "#W3135192",
      user_id: "daiki_patel_5953",
      address: {
        address1: "670 Chestnut Street",
        address2: "Suite 982",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94111"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2989722512",
          price: 455.34,
          options: {
            material: "glass",
            color: "white",
            height: "3 ft"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "4458619711",
          price: 153.81,
          options: {
            capacity: "2L",
            material: "stainless steel",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["834893370557"],
          item_ids: ["2989722512", "4458619711"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 609.15,
          payment_method_id: "paypal_1009053"
        }
      ]
    },
    "#W5500815": {
      order_id: "#W5500815",
      user_id: "sofia_rossi_8776",
      address: {
        address1: "291 River Road",
        address2: "Suite 271",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78784"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7902309762",
          price: 243.62,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand B"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "7211586944",
          price: 272.71,
          options: {
            color: "black",
            capacity: "8 cups",
            type: "espresso",
            features: "built-in grinder"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4913411651",
          price: 941.03,
          options: {
            "screen size": "7-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3609437808",
          price: 466.44,
          options: {
            material: "leather",
            color: "red",
            armrest: "none",
            "backrest height": "high-back"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1923.8,
          payment_method_id: "credit_card_5051208"
        }
      ]
    },
    "#W7752859": {
      order_id: "#W7752859",
      user_id: "mason_lopez_8519",
      address: {
        address1: "330 Maple Drive",
        address2: "Suite 316",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28221"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "3015420423",
          price: 141.76,
          options: {
            capacity: "2L",
            material: "glass",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 141.76,
          payment_method_id: "credit_card_2327218"
        }
      ]
    },
    "#W2000719": {
      order_id: "#W2000719",
      user_id: "liam_lopez_7019",
      address: {
        address1: "380 Laurel Lane",
        address2: "Suite 960",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75388"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "4537595158",
          price: 193.79,
          options: {
            size: "small",
            material: "fleece",
            color: "brown"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 193.79,
          payment_method_id: "gift_card_8483518"
        }
      ]
    },
    "#W9233394": {
      order_id: "#W9233394",
      user_id: "mason_johansson_8128",
      address: {
        address1: "745 Chestnut Street",
        address2: "Suite 617",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98103"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "4447749792",
          price: 139.8,
          options: {
            color: "white",
            brightness: "medium",
            "power source": "AC adapter"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["555057865598"],
          item_ids: ["4447749792"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 139.8,
          payment_method_id: "gift_card_1401311"
        },
        {
          transaction_type: "refund",
          amount: 139.8,
          payment_method_id: "gift_card_1401311"
        }
      ]
    },
    "#W4689314": {
      order_id: "#W4689314",
      user_id: "sofia_li_9219",
      address: {
        address1: "786 Elm Street",
        address2: "Suite 546",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78260"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "5996159312",
          price: 2895.55,
          options: {
            resolution: "24MP",
            zoom: "3x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["689944590938"],
          item_ids: ["5996159312"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2895.55,
          payment_method_id: "credit_card_8105988"
        }
      ]
    },
    "#W9663142": {
      order_id: "#W9663142",
      user_id: "emma_lopez_8196",
      address: {
        address1: "790 Park Avenue",
        address2: "Suite 621",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94119"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "8384507844",
          price: 137.94,
          options: {
            color: "white",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8590708195",
          price: 157.61,
          options: {
            size: "XL",
            color: "navy",
            zipper: "half"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "6454334990",
          price: 98.82,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "4764314102",
          price: 96.51,
          options: {
            length: "50ft",
            material: "rubber",
            color: "green"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["833704308190"],
          item_ids: ["8384507844", "8590708195", "6454334990", "4764314102"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 490.88,
          payment_method_id: "credit_card_9469680"
        },
        {
          transaction_type: "refund",
          amount: 490.88,
          payment_method_id: "credit_card_9469680"
        }
      ]
    },
    "#W8645374": {
      order_id: "#W8645374",
      user_id: "noah_sanchez_2690",
      address: {
        address1: "572 Willow Lane",
        address2: "Suite 753",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19135"
      },
      items: [
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9635758562",
          price: 148.95,
          options: {
            size: "9",
            color: "white",
            material: "mesh",
            sole: "rubber"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2913673670",
          price: 2701.89,
          options: {
            "screen size": "15-inch",
            processor: "i9",
            ram: "32GB",
            storage: "512GB SSD",
            color: "black"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9408160950",
          price: 381.26,
          options: {
            color: "gold",
            "band material": "leather",
            display: "LCD"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "5676696062",
          price: 245.99,
          options: {
            size: "11",
            material: "leather",
            waterproof: "no"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9644439410",
          price: 3280.31,
          options: {
            resolution: "20MP",
            zoom: "5x",
            storage: "CF card"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6758.4,
          payment_method_id: "gift_card_9909795"
        }
      ]
    },
    "#W9311069": {
      order_id: "#W9311069",
      user_id: "aarav_anderson_8794",
      address: {
        address1: "931 Maple Drive",
        address2: "Suite 985",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19031"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7154215719",
          price: 505.62,
          options: {
            material: "wood",
            color: "brown",
            height: "6 ft"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7407838442",
          price: 3081.91,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "manual"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "9829827210",
          price: 90.43,
          options: {
            length: "25ft",
            material: "vinyl",
            color: "blue"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1304426904",
          price: 565.79,
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "4238115171",
          price: 91.78,
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "gas"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["739892591834"],
          item_ids: [
            "7154215719",
            "7407838442",
            "9829827210",
            "1304426904",
            "4238115171"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4335.53,
          payment_method_id: "gift_card_7245904"
        }
      ]
    },
    "#W1620235": {
      order_id: "#W1620235",
      user_id: "emma_santos_9753",
      address: {
        address1: "463 Pine Lane",
        address2: "Suite 570",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78228"
      },
      items: [
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6690069155",
          price: 466.47,
          options: {
            "piece count": "3-piece",
            color: "silver",
            material: "softshell"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9132333852",
          price: 139.47,
          options: {
            capacity: "1L",
            material: "plastic",
            color: "silver"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "6735339143",
          price: 471.77,
          options: {
            material: "metal",
            color: "brown",
            height: "6 ft"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1077.71,
          payment_method_id: "credit_card_5869505"
        }
      ]
    },
    "#W2793378": {
      order_id: "#W2793378",
      user_id: "sofia_muller_1555",
      address: {
        address1: "445 Elm Street",
        address2: "Suite 315",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78286"
      },
      items: [
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "5111440845",
          price: 48.55,
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "Bluetooth"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "3111466194",
          price: 285.66,
          options: {
            size: "7 ft",
            color: "red",
            material: "polyester",
            "tilt mechanism": "manual tilt"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5645314103",
          price: 46.19,
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "6164262152",
          price: 211.11,
          options: {
            color: "white",
            "speed settings": "low",
            "battery type": "rechargeable"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "7824298782",
          price: 200.38,
          options: {
            color: "black",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["238636823985"],
          item_ids: [
            "5111440845",
            "3111466194",
            "5645314103",
            "6164262152",
            "7824298782"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 791.89,
          payment_method_id: "paypal_6980481"
        },
        {
          transaction_type: "refund",
          amount: 791.89,
          payment_method_id: "paypal_6980481"
        }
      ]
    },
    "#W4432568": {
      order_id: "#W4432568",
      user_id: "lei_ahmed_1705",
      address: {
        address1: "125 Cedar Street",
        address2: "Suite 574",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19128"
      },
      items: [
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "1725100896",
          price: 289.66,
          options: {
            "scent family": "oriental",
            size: "30ml",
            gender: "unisex"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3761330360",
          price: 101.12,
          options: {
            material: "ceramic",
            capacity: "2 liters",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "6574183535",
          price: 28.14,
          options: {
            size: "A6",
            "cover type": "hard cover"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["286565681676"],
          item_ids: ["1725100896", "3761330360", "6574183535"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 418.92,
          payment_method_id: "credit_card_3593714"
        }
      ]
    },
    "#W3618959": {
      order_id: "#W3618959",
      user_id: "emma_kovacs_5477",
      address: {
        address1: "111 Sunset Drive",
        address2: "Suite 183",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92179"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7539442683",
          price: 461.49,
          options: {
            material: "metal",
            color: "black",
            height: "4 ft"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "9879255677",
          price: 288.82,
          options: {
            size: "6 ft",
            color: "green",
            material: "olefin",
            "tilt mechanism": "auto tilt"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "6195938807",
          price: 103.98,
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "green"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 854.29,
          payment_method_id: "gift_card_9246707"
        }
      ]
    },
    "#W3631991": {
      order_id: "#W3631991",
      user_id: "yusuf_lee_5921",
      address: {
        address1: "579 Broadway",
        address2: "Suite 827",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76175"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7843064651",
          price: 50.14,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "blue"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "1859994221",
          price: 182.85,
          options: {
            diameter: "10 inches",
            color: "black",
            type: "analog"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["447585751742"],
          item_ids: ["7843064651", "1859994221"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 232.99,
          payment_method_id: "paypal_2785678"
        }
      ]
    },
    "#W8967935": {
      order_id: "#W8967935",
      user_id: "raj_li_9474",
      address: {
        address1: "187 Broadway",
        address2: "Suite 268",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76184"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8649999816",
          price: 540.49,
          options: {
            material: "glass",
            color: "brown",
            height: "4 ft"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "4947921075",
          price: 49.57,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "green"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "6589665742",
          price: 933.17,
          options: {
            type: "gas",
            size: "large",
            features: "rotisserie"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "4900661478",
          price: 463.04,
          options: {
            material: "glass",
            color: "black",
            height: "5 ft"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1986.27,
          payment_method_id: "credit_card_9582448"
        }
      ]
    },
    "#W7736708": {
      order_id: "#W7736708",
      user_id: "raj_sanchez_2970",
      address: {
        address1: "557 Sunset Drive",
        address2: "Suite 454",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92147"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "3104857380",
          price: 377.97,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "red"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "9692325258",
          price: 528.63,
          options: {
            "piece count": "3-piece",
            color: "black",
            material: "softshell"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "6574183535",
          price: 28.14,
          options: {
            size: "A6",
            "cover type": "hard cover"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "1096508426",
          price: 46.13,
          options: {
            pieces: "500",
            theme: "art",
            "difficulty level": "beginner"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["291373316506"],
          item_ids: ["3104857380", "9692325258", "6574183535", "1096508426"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 980.87,
          payment_method_id: "credit_card_3362387"
        }
      ]
    },
    "#W9102482": {
      order_id: "#W9102482",
      user_id: "yara_sanchez_9145",
      address: {
        address1: "883 Pine Lane",
        address2: "Suite 823",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43097"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "4716977452",
          price: 289.69,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "4510078629",
          price: 2127.62,
          options: {
            "strap material": "metal",
            "dial color": "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["538293928885"],
          item_ids: ["4716977452", "4510078629"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2417.31,
          payment_method_id: "credit_card_5353742"
        }
      ]
    },
    "#W7639559": {
      order_id: "#W7639559",
      user_id: "yusuf_garcia_1670",
      address: {
        address1: "691 Park Avenue",
        address2: "Suite 274",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46202"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9647292434",
          price: 53.48,
          options: {
            color: "purple",
            size: "S",
            material: "polyester",
            style: "v-neck"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "8090061879",
          price: 261.4,
          options: {
            "skin tone": "light",
            "kit size": "basic",
            brand: "Brand B"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5967152432",
          price: 292.71,
          options: {
            color: "green",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 607.59,
          payment_method_id: "gift_card_4303603"
        }
      ]
    },
    "#W3279695": {
      order_id: "#W3279695",
      user_id: "olivia_garcia_4691",
      address: {
        address1: "308 Spruce Street",
        address2: "Suite 978",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32237"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5206946487",
          price: 95.08,
          options: {
            length: "50ft",
            material: "vinyl",
            color: "black"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "6341716129",
          price: 523.31,
          options: {
            "room size": "large",
            "filter type": "HEPA",
            features: "smart sensors"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "8470360507",
          price: 291.31,
          options: {
            resolution: "2K",
            "field of view": "130 degrees",
            connectivity: "Ethernet"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 909.7,
          payment_method_id: "gift_card_4584785"
        }
      ]
    },
    "#W1558044": {
      order_id: "#W1558044",
      user_id: "liam_ahmed_6523",
      address: {
        address1: "502 Elm Street",
        address2: "Suite 109",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32134"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "3320557165",
          price: 188.67,
          options: {
            color: "blue",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5268233322",
          price: 155.99,
          options: {
            capacity: "1L",
            material: "glass",
            color: "white"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4245201809",
          price: 281.48,
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "non-polarized",
            "frame material": "metal"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 626.14,
          payment_method_id: "gift_card_5327033"
        }
      ]
    },
    "#W1302858": {
      order_id: "#W1302858",
      user_id: "yusuf_ahmed_6232",
      address: {
        address1: "281 Pine Lane",
        address2: "Suite 115",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60623"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "5796612084",
          price: 158.89,
          options: {
            color: "RGB",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9192177173",
          price: 335.99,
          options: {
            color: "gold",
            "band material": "metal",
            display: "LCD"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "7160999700",
          price: 499.29,
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "softshell"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "1673859111",
          price: 484.96,
          options: {
            material: "wood",
            color: "black",
            height: "4 ft"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4806644905",
          price: 658.89,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "cordless"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2138.02,
          payment_method_id: "credit_card_2167533"
        }
      ]
    },
    "#W7381650": {
      order_id: "#W7381650",
      user_id: "evelyn_wilson_8460",
      address: {
        address1: "664 Oak Street",
        address2: "Suite 956",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98148"
      },
      items: [
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "8917609800",
          price: 195.59,
          options: {
            diameter: "10 inches",
            color: "white",
            type: "digital"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6948061616",
          price: 950.96,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "gold"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "8302289002",
          price: 547.55,
          options: {
            "room size": "large",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "6259501109",
          price: 652.61,
          options: {
            type: "robotic",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2346.71,
          payment_method_id: "gift_card_8931217"
        }
      ]
    },
    "#W5881725": {
      order_id: "#W5881725",
      user_id: "mei_jackson_1214",
      address: {
        address1: "798 Maple Drive",
        address2: "Suite 884",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78729"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "4063058357",
          price: 243.34,
          options: {
            color: "black",
            "battery life": "4 hours",
            "water resistance": "not resistant"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "6159919747",
          price: 259.75,
          options: {
            size: "11",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "4982943126",
          price: 214.33,
          options: {
            size: "small",
            material: "fleece",
            color: "beige"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["703753709896"],
          item_ids: ["4063058357", "6159919747", "4982943126"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 717.42,
          payment_method_id: "paypal_8305620"
        }
      ]
    },
    "#W8660475": {
      order_id: "#W8660475",
      user_id: "lucas_brown_6720",
      address: {
        address1: "921 Park Avenue",
        address2: "Suite 892",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60612"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8323284863",
          price: 511.24,
          options: {
            material: "fabric",
            color: "blue",
            armrest: "adjustable",
            "backrest height": "standard"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8479046075",
          price: 451.01,
          options: {
            material: "wood",
            color: "white",
            height: "5 ft"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "2733768059",
          price: 94.38,
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "pink"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6227345631",
          price: 483.45,
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "fixed"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3714494375",
          price: 2709.83,
          options: {
            pressure: "15 bar",
            capacity: "1L",
            type: "manual"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["866377615705"],
          item_ids: [
            "8323284863",
            "8479046075",
            "2733768059",
            "6227345631",
            "3714494375"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4249.91,
          payment_method_id: "credit_card_2112420"
        }
      ]
    },
    "#W3386832": {
      order_id: "#W3386832",
      user_id: "juan_lopez_5820",
      address: {
        address1: "102 Main Street",
        address2: "Suite 311",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85002"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3339188619",
          price: 200.24,
          options: {
            size: "M",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "8249784860",
          price: 96.42,
          options: {
            length: "50ft",
            material: "vinyl",
            color: "green"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3709608322",
          price: 2744.7,
          options: {
            pressure: "9 bar",
            capacity: "2L",
            type: "automatic"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3041.36,
          payment_method_id: "paypal_6729210"
        }
      ]
    },
    "#W4108782": {
      order_id: "#W4108782",
      user_id: "ethan_li_6208",
      address: {
        address1: "408 Sunset Drive",
        address2: "Suite 522",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43135"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8323284863",
          price: 511.24,
          options: {
            material: "fabric",
            color: "blue",
            armrest: "adjustable",
            "backrest height": "standard"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "8941974610",
          price: 200.66,
          options: {
            size: "large",
            material: "fleece",
            color: "beige"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8118291112",
          price: 260.56,
          options: {
            size: "12",
            material: "leather",
            waterproof: "no"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "1906487464",
          price: 102.02,
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "induction"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["378405043997"],
          item_ids: ["8323284863", "8941974610", "8118291112", "1906487464"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1074.48,
          payment_method_id: "credit_card_1397305"
        },
        {
          transaction_type: "refund",
          amount: 1074.48,
          payment_method_id: "credit_card_1397305"
        }
      ]
    },
    "#W9879411": {
      order_id: "#W9879411",
      user_id: "raj_martin_9275",
      address: {
        address1: "471 Main Street",
        address2: "Suite 309",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20319"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "2820119811",
          price: 94.68,
          options: {
            material: "glass",
            capacity: "2 liters",
            "stovetop compatibility": "electric"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["460381366973"],
          item_ids: ["2820119811"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 94.68,
          payment_method_id: "credit_card_4834117"
        }
      ]
    },
    "#W9093821": {
      order_id: "#W9093821",
      user_id: "harper_kovacs_8617",
      address: {
        address1: "696 Hillcrest Drive",
        address2: "Suite 872",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95154"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "3557711149",
          price: 205.35,
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "laptop"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "8917609800",
          price: 195.59,
          options: {
            diameter: "10 inches",
            color: "white",
            type: "digital"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "3557711149",
          price: 205.35,
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "laptop"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "4035304400",
          price: 504.19,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "smart sensors"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9747045638",
          price: 94.01,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "electric"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1204.49,
          payment_method_id: "credit_card_7422485"
        }
      ]
    },
    "#W2430890": {
      order_id: "#W2430890",
      user_id: "juan_nguyen_7430",
      address: {
        address1: "810 Highland Drive",
        address2: "Suite 282",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85099"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1437889264",
          price: 258.09,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2540052208",
          price: 346.42,
          options: {
            color: "gold",
            "band material": "silicone",
            display: "LCD"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["188979825117"],
          item_ids: ["1437889264", "2540052208"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 604.51,
          payment_method_id: "credit_card_3522913"
        }
      ]
    },
    "#W4512389": {
      order_id: "#W4512389",
      user_id: "raj_smith_7423",
      address: {
        address1: "603 Sunset Drive",
        address2: "Suite 202",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20174"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "7166996157",
          price: 518.31,
          options: {
            "room size": "small",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9635758562",
          price: 148.95,
          options: {
            size: "9",
            color: "white",
            material: "mesh",
            sole: "rubber"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "1586641416",
          price: 497.39,
          options: {
            resolution: "5K",
            waterproof: "yes",
            color: "silver"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "9884666842",
          price: 2794.7,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "manual"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "3542102174",
          price: 47.25,
          options: {
            color: "red",
            size: "S",
            material: "cotton",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["103996164258"],
          item_ids: [
            "7166996157",
            "9635758562",
            "1586641416",
            "9884666842",
            "3542102174"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4006.6,
          payment_method_id: "credit_card_5903671"
        },
        {
          transaction_type: "refund",
          amount: 4006.6,
          payment_method_id: "credit_card_5903671"
        }
      ]
    },
    "#W2936099": {
      order_id: "#W2936099",
      user_id: "mei_li_2872",
      address: {
        address1: "121 Main Street",
        address2: "Suite 575",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92149"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2768401027",
          price: 2346.49,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "silver"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "1768466237",
          price: 549.84,
          options: {
            material: "glass",
            color: "black",
            height: "3 ft"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2757705742",
          price: 258.97,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9335834276",
          price: 137.92,
          options: {
            capacity: "2L",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3714494375",
          price: 2709.83,
          options: {
            pressure: "15 bar",
            capacity: "1L",
            type: "manual"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["650285524050"],
          item_ids: [
            "2768401027",
            "1768466237",
            "2757705742",
            "9335834276",
            "3714494375"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6003.05,
          payment_method_id: "paypal_4060450"
        }
      ]
    },
    "#W2307204": {
      order_id: "#W2307204",
      user_id: "emma_kovacs_7176",
      address: {
        address1: "463 Main Street",
        address2: "Suite 430",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32254"
      },
      items: [
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "9421195098",
          price: 32.37,
          options: {
            size: "A6",
            "cover type": "soft cover"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "9829827210",
          price: 90.43,
          options: {
            length: "25ft",
            material: "vinyl",
            color: "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 122.8,
          payment_method_id: "paypal_1038468"
        }
      ]
    },
    "#W1166549": {
      order_id: "#W1166549",
      user_id: "daiki_hernandez_1356",
      address: {
        address1: "243 Sunset Drive",
        address2: "Suite 890",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91203"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "5510402676",
          price: 267.07,
          options: {
            "screen size": "6-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5268233322",
          price: 155.99,
          options: {
            capacity: "1L",
            material: "glass",
            color: "white"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "1569765161",
          price: 143.02,
          options: {
            color: "silver",
            brightness: "low",
            "power source": "AC adapter"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["125889200563"],
          item_ids: ["5510402676", "5268233322", "1569765161"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 566.08,
          payment_method_id: "credit_card_1289579"
        }
      ]
    },
    "#W3525030": {
      order_id: "#W3525030",
      user_id: "harper_johansson_2663",
      address: {
        address1: "490 River Road",
        address2: "Suite 486",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80281"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8124970213",
          price: 49.67,
          options: {
            color: "purple",
            size: "XL",
            material: "cotton",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 49.67,
          payment_method_id: "paypal_4820484"
        }
      ]
    },
    "#W1855881": {
      order_id: "#W1855881",
      user_id: "mason_kovacs_3062",
      address: {
        address1: "885 Park Avenue",
        address2: "Suite 952",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60625"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "4982943126",
          price: 214.33,
          options: {
            size: "small",
            material: "fleece",
            color: "beige"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "1569829406",
          price: 320.55,
          options: {
            resolution: "1080p",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3877338112",
          price: 545.68,
          options: {
            "weight range": "5-25 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1080.56,
          payment_method_id: "gift_card_3734426"
        }
      ]
    },
    "#W8336711": {
      order_id: "#W8336711",
      user_id: "yara_moore_6466",
      address: {
        address1: "485 Lakeview Drive",
        address2: "Suite 839",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92162"
      },
      items: [
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "1507389580",
          price: 1157.86,
          options: {
            color: "black",
            storage: "128GB",
            RAM: "8GB",
            "screen size": "5.8-inch"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9644439410",
          price: 3280.31,
          options: {
            resolution: "20MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "6704763132",
          price: 305.45,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "7747408585",
          price: 249.01,
          options: {
            compatibility: "Google Assistant",
            color: "black"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "3399869890",
          price: 312.04,
          options: {
            "scent family": "woody",
            size: "100ml",
            gender: "men"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["240551005547"],
          item_ids: [
            "1507389580",
            "9644439410",
            "6704763132",
            "7747408585",
            "3399869890"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5304.67,
          payment_method_id: "paypal_3473552"
        }
      ]
    },
    "#W4864669": {
      order_id: "#W4864669",
      user_id: "noah_sanchez_2690",
      address: {
        address1: "297 Highland Drive",
        address2: "Suite 550",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20056"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "9580569596",
          price: 257.38,
          options: {
            color: "black",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9228757377",
          price: 3066.23,
          options: {
            resolution: "30MP",
            zoom: "10x",
            storage: "SD card"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6324294385",
          price: 2719.01,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "automatic"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "5565631513",
          price: 267.9,
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "IPX7"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["510801271182"],
          item_ids: ["9580569596", "9228757377", "6324294385", "5565631513"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6310.52,
          payment_method_id: "gift_card_9909795"
        }
      ]
    },
    "#W5911003": {
      order_id: "#W5911003",
      user_id: "ava_lopez_2676",
      address: {
        address1: "836 Hickory Lane",
        address2: "Suite 848",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92168"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4274709903",
          price: 544.29,
          options: {
            material: "mesh",
            color: "red",
            armrest: "none",
            "backrest height": "standard"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2185126308",
          price: 241.9,
          options: {
            size: "10",
            material: "leather",
            waterproof: "no"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "1518544029",
          price: 95.39,
          options: {
            length: "100ft",
            material: "rubber",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 881.58,
          payment_method_id: "credit_card_7772870"
        }
      ]
    },
    "#W8452063": {
      order_id: "#W8452063",
      user_id: "ethan_nguyen_7565",
      address: {
        address1: "498 Elm Avenue",
        address2: "Suite 953",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95155"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "6509212169",
          price: 256.14,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand A"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9354168549",
          price: 46.85,
          options: {
            color: "red",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "3062461148",
          price: 247.88,
          options: {
            color: "stainless steel",
            capacity: "2 cups",
            type: "french press",
            features: "auto shutoff"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "9851293632",
          price: 193.38,
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "camera"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "3892645120",
          price: 3070.64,
          options: {
            resolution: "30MP",
            zoom: "10x",
            storage: "CF card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["308411122792"],
          item_ids: [
            "6509212169",
            "9354168549",
            "3062461148",
            "9851293632",
            "3892645120"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3814.89,
          payment_method_id: "gift_card_2834741"
        },
        {
          transaction_type: "refund",
          amount: 3814.89,
          payment_method_id: "gift_card_2834741"
        }
      ]
    },
    "#W8863729": {
      order_id: "#W8863729",
      user_id: "noah_wilson_5178",
      address: {
        address1: "103 Pine Lane",
        address2: "Suite 730",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78703"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5105441284",
          price: 924.5,
          options: {
            type: "charcoal",
            size: "portable",
            features: "none"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "5586947715",
          price: 92.53,
          options: {
            thickness: "4mm",
            material: "PVC",
            color: "blue"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3334537816",
          price: 2749.56,
          options: {
            "screen size": "17-inch",
            processor: "i5",
            ram: "8GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["604805146457"],
          item_ids: ["5105441284", "5586947715", "3334537816"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3766.59,
          payment_method_id: "paypal_1521508"
        }
      ]
    },
    "#W2119065": {
      order_id: "#W2119065",
      user_id: "liam_anderson_5973",
      address: {
        address1: "730 Highland Drive",
        address2: "Suite 148",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43107"
      },
      items: [
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "8170914468",
          price: 316.29,
          options: {
            size: "6 ft",
            color: "red",
            material: "olefin",
            "tilt mechanism": "manual tilt"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4274709903",
          price: 544.29,
          options: {
            material: "mesh",
            color: "red",
            armrest: "none",
            "backrest height": "standard"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["710096789180"],
          item_ids: ["8170914468", "4274709903"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 860.58,
          payment_method_id: "credit_card_9185943"
        }
      ]
    },
    "#W2325029": {
      order_id: "#W2325029",
      user_id: "ethan_nguyen_7565",
      address: {
        address1: "498 Elm Avenue",
        address2: "Suite 953",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95155"
      },
      items: [
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "9862136885",
          price: 258.32,
          options: {
            color: "black",
            capacity: "2 cups",
            type: "espresso",
            features: "timer"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "5606522780",
          price: 1902.67,
          options: {
            "frame size": "large",
            color: "red",
            type: "mountain"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "9045948550",
          price: 279.78,
          options: {
            "frame color": "black",
            "lens color": "blue",
            "lens type": "polarized",
            "frame material": "metal"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2440.77,
          payment_method_id: "paypal_2764872"
        }
      ]
    },
    "#W4420044": {
      order_id: "#W4420044",
      user_id: "amelia_wilson_4614",
      address: {
        address1: "388 Elm Avenue",
        address2: "Suite 384",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75215"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "2177260429",
          price: 296.47,
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "polarized",
            "frame material": "metal"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["575013609825"],
          item_ids: ["2177260429"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 296.47,
          payment_method_id: "gift_card_7108145"
        },
        {
          transaction_type: "refund",
          amount: 296.47,
          payment_method_id: "gift_card_7108145"
        }
      ]
    },
    "#W5166363": {
      order_id: "#W5166363",
      user_id: "lei_li_6575",
      address: {
        address1: "905 Highland Drive",
        address2: "Suite 807",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94132"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3334537816",
          price: 2749.56,
          options: {
            "screen size": "17-inch",
            processor: "i5",
            ram: "8GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2749.56,
          payment_method_id: "paypal_5914760"
        }
      ]
    },
    "#W1483350": {
      order_id: "#W1483350",
      user_id: "noah_khan_5763",
      address: {
        address1: "143 Highland Drive",
        address2: "Suite 928",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94140"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9570044148",
          price: 231.37,
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "full size"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "4983901480",
          price: 262.47,
          options: {
            compatibility: "Apple HomeKit",
            color: "black"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "4326528037",
          price: 2714.51,
          options: {
            resolution: "24MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6697922351",
          price: 194.47,
          options: {
            size: "L",
            color: "white",
            ventilation: "medium"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9320099340",
          price: 375.03,
          options: {
            color: "black",
            "band material": "leather",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["151624030573"],
          item_ids: [
            "9570044148",
            "4983901480",
            "4326528037",
            "6697922351",
            "9320099340"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3777.85,
          payment_method_id: "paypal_2319812"
        }
      ]
    },
    "#W6385395": {
      order_id: "#W6385395",
      user_id: "evelyn_patel_8882",
      address: {
        address1: "829 Chestnut Street",
        address2: "Suite 252",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28262"
      },
      items: [
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "5992316252",
          price: 141.29,
          options: {
            size: "S",
            color: "red",
            zipper: "half"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8124970213",
          price: 49.67,
          options: {
            color: "purple",
            size: "XL",
            material: "cotton",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 190.96,
          payment_method_id: "paypal_3704667"
        }
      ]
    },
    "#W7857572": {
      order_id: "#W7857572",
      user_id: "harper_ahmed_4844",
      address: {
        address1: "744 Maple Drive",
        address2: "Suite 403",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19147"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "4404981319",
          price: 1031,
          options: {
            type: "electric",
            size: "large",
            features: "rotisserie"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3264130640",
          price: 211.41,
          options: {
            size: "M",
            color: "black",
            ventilation: "medium"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "7658724607",
          price: 256.73,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "1689914594",
          price: 315.2,
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6056040996",
          price: 2609.37,
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "16GB",
            storage: "512GB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4423.71,
          payment_method_id: "gift_card_4529075"
        }
      ]
    },
    "#W9373487": {
      order_id: "#W9373487",
      user_id: "olivia_lopez_3865",
      address: {
        address1: "310 Laurel Lane",
        address2: "Suite 480",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76171"
      },
      items: [
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "4063401924",
          price: 109.27,
          options: {
            capacity: "20000mAh",
            output: "Wireless",
            color: "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 109.27,
          payment_method_id: "gift_card_7711863"
        }
      ]
    },
    "#W1603792": {
      order_id: "#W1603792",
      user_id: "sophia_martin_8570",
      address: {
        address1: "760 Elm Avenue",
        address2: "Suite 564",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77034"
      },
      items: [
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "5606522780",
          price: 1902.67,
          options: {
            "frame size": "large",
            color: "red",
            type: "mountain"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "1120917161",
          price: 953.39,
          options: {
            type: "electric",
            size: "portable",
            features: "none"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "5635439102",
          price: 353.76,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "blue"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "4537595158",
          price: 193.79,
          options: {
            size: "small",
            material: "fleece",
            color: "brown"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6501071631",
          price: 1018.68,
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "gold"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4422.29,
          payment_method_id: "credit_card_5694100"
        }
      ]
    },
    "#W5400801": {
      order_id: "#W5400801",
      user_id: "amelia_silva_7726",
      address: {
        address1: "182 Elm Avenue",
        address2: "Suite 875",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19117"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7401244629",
          price: 188.92,
          options: {
            size: "L",
            color: "red",
            ventilation: "high"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8920458606",
          price: 510.02,
          options: {
            material: "wood",
            color: "white",
            height: "4 ft"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3265035808",
          price: 2530.72,
          options: {
            "screen size": "17-inch",
            processor: "i9",
            ram: "8GB",
            storage: "256GB SSD",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["561919034220"],
          item_ids: ["7401244629", "8920458606", "3265035808"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3229.66,
          payment_method_id: "gift_card_3491931"
        },
        {
          transaction_type: "refund",
          amount: 3229.66,
          payment_method_id: "gift_card_3491931"
        }
      ]
    },
    "#W6030855": {
      order_id: "#W6030855",
      user_id: "mason_kovacs_7590",
      address: {
        address1: "202 Willow Lane",
        address2: "Suite 183",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98137"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "2177260429",
          price: 296.47,
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "polarized",
            "frame material": "metal"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5650803029",
          price: 324.63,
          options: {
            color: "black",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 621.1,
          payment_method_id: "credit_card_4314033"
        }
      ]
    },
    "#W4958652": {
      order_id: "#W4958652",
      user_id: "sophia_garcia_5795",
      address: {
        address1: "950 Chestnut Street",
        address2: "Suite 448",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77129"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7274158061",
          price: 91.13,
          options: {
            material: "ceramic",
            capacity: "1 liter",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8323284863",
          price: 511.24,
          options: {
            material: "fabric",
            color: "blue",
            armrest: "adjustable",
            "backrest height": "standard"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1665571435",
          price: 196.89,
          options: {
            size: "L",
            color: "black",
            ventilation: "high"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "2791467853",
          price: 242.53,
          options: {
            compatibility: "Google Assistant",
            color: "stainless steel"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "1906487464",
          price: 102.02,
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "induction"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1143.81,
          payment_method_id: "credit_card_9467292"
        }
      ]
    },
    "#W1654931": {
      order_id: "#W1654931",
      user_id: "liam_thomas_7882",
      address: {
        address1: "629 Pine Lane",
        address2: "Suite 380",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85049"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "6268080249",
          price: 244.02,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "5669664287",
          price: 543.68,
          options: {
            "room size": "small",
            "filter type": "ionic",
            features: "quiet operation"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 787.7,
          payment_method_id: "credit_card_3261838"
        }
      ]
    },
    "#W4160705": {
      order_id: "#W4160705",
      user_id: "fatima_muller_6713",
      address: {
        address1: "480 Cedar Street",
        address2: "Suite 747",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19155"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "3019027053",
          price: 553.03,
          options: {
            type: "upright",
            "bagged/bagless": "bagless",
            features: "cordless"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3379843752",
          price: 3203.76,
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "manual"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "5019835484",
          price: 138.73,
          options: {
            color: "RGB",
            "sensor type": "laser",
            connectivity: "wired"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3895.52,
          payment_method_id: "paypal_5541158"
        }
      ]
    },
    "#W8668939": {
      order_id: "#W8668939",
      user_id: "ava_nguyen_6646",
      address: {
        address1: "238 Oak Street",
        address2: "Suite 636",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94128"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "7717598293",
          price: 985.66,
          options: {
            type: "electric",
            size: "medium",
            features: "rotisserie"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7199146548",
          price: 48.02,
          options: {
            capacity: "750ml",
            material: "plastic",
            color: "black"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "5996159312",
          price: 2895.55,
          options: {
            resolution: "24MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "1120917161",
          price: 953.39,
          options: {
            type: "electric",
            size: "portable",
            features: "none"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["755094398519"],
          item_ids: ["7717598293", "7199146548", "5996159312", "1120917161"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4882.62,
          payment_method_id: "credit_card_5683823"
        }
      ]
    },
    "#W6904184": {
      order_id: "#W6904184",
      user_id: "yara_johansson_9032",
      address: {
        address1: "816 Oak Street",
        address2: "Suite 528",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94128"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "8142779083",
          price: 157.53,
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "silver"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "6077640618",
          price: 242.92,
          options: {
            color: "blue",
            "battery life": "8 hours",
            "water resistance": "not resistant"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["724492219985"],
          item_ids: ["8142779083", "6077640618"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 400.45,
          payment_method_id: "credit_card_6699629"
        }
      ]
    },
    "#W9894882": {
      order_id: "#W9894882",
      user_id: "raj_davis_2615",
      address: {
        address1: "185 River Road",
        address2: "Suite 809",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85050"
      },
      items: [
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "3624655057",
          price: 2195.04,
          options: {
            "frame size": "medium",
            color: "blue",
            type: "road"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "3778705663",
          price: 473.48,
          options: {
            material: "metal",
            color: "black",
            height: "6 ft"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "3614853563",
          price: 46.99,
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "intermediate"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["882604120484"],
          item_ids: ["3624655057", "3778705663", "3614853563"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2715.51,
          payment_method_id: "gift_card_8006222"
        }
      ]
    },
    "#W9427138": {
      order_id: "#W9427138",
      user_id: "mia_moore_7778",
      address: {
        address1: "261 Broadway",
        address2: "Suite 264",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43092"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "7535423717",
          price: 904.46,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["387722712713"],
          item_ids: ["7535423717"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 904.46,
          payment_method_id: "paypal_2720658"
        },
        {
          transaction_type: "refund",
          amount: 904.46,
          payment_method_id: "paypal_2720658"
        }
      ]
    },
    "#W2002395": {
      order_id: "#W2002395",
      user_id: "sofia_ahmed_9514",
      address: {
        address1: "904 Hillcrest Drive",
        address2: "Suite 499",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90819"
      },
      items: [
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "9929635042",
          price: 1261.14,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "5.8-inch"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "3377900078",
          price: 260.68,
          options: {
            compatibility: "Apple HomeKit",
            color: "white"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "3369928769",
          price: 97.35,
          options: {
            length: "25ft",
            material: "vinyl",
            color: "green"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["192346469144"],
          item_ids: ["9929635042", "3377900078", "3369928769"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1619.17,
          payment_method_id: "gift_card_6117300"
        }
      ]
    },
    "#W4296426": {
      order_id: "#W4296426",
      user_id: "chen_brown_8075",
      address: {
        address1: "945 Hickory Lane",
        address2: "Suite 262",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95190"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6777246137",
          price: 47.76,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "red"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 47.76,
          payment_method_id: "gift_card_7497429"
        }
      ]
    },
    "#W9588597": {
      order_id: "#W9588597",
      user_id: "isabella_anderson_7248",
      address: {
        address1: "243 Pine Lane",
        address2: "Suite 317",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95125"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3951031513",
          price: 3289.46,
          options: {
            pressure: "19 bar",
            capacity: "1.5L",
            type: "automatic"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "6268080249",
          price: 244.02,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["911727987034"],
          item_ids: ["3951031513", "6268080249"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3533.48,
          payment_method_id: "paypal_7004489"
        }
      ]
    },
    "#W5457973": {
      order_id: "#W5457973",
      user_id: "daiki_davis_5031",
      address: {
        address1: "702 Elm Avenue",
        address2: "Suite 373",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94102"
      },
      items: [
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "1569829406",
          price: 320.55,
          options: {
            resolution: "1080p",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8277474082",
          price: 236.57,
          options: {
            size: "12",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7441167885",
          price: 2866.37,
          options: {
            pressure: "15 bar",
            capacity: "1.5L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["730248779795"],
          item_ids: ["1569829406", "8277474082", "7441167885"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3423.49,
          payment_method_id: "gift_card_1679693"
        }
      ]
    },
    "#W1633718": {
      order_id: "#W1633718",
      user_id: "yusuf_hernandez_6467",
      address: {
        address1: "943 Maple Drive",
        address2: "Suite 837",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43175"
      },
      items: [
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "5952720925",
          price: 260.19,
          options: {
            color: "black",
            capacity: "4 cups",
            type: "espresso",
            features: "timer"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4965355367",
          price: 620.07,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["793866160444"],
          item_ids: ["5952720925", "4965355367"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 880.26,
          payment_method_id: "paypal_9426036"
        }
      ]
    },
    "#W5402785": {
      order_id: "#W5402785",
      user_id: "anya_sanchez_9707",
      address: {
        address1: "457 Spruce Street",
        address2: "Suite 667",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76146"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2698416822",
          price: 149.45,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 149.45,
          payment_method_id: "paypal_1191071"
        }
      ]
    },
    "#W5285031": {
      order_id: "#W5285031",
      user_id: "fatima_taylor_3452",
      address: {
        address1: "157 Oak Street",
        address2: "Suite 258",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85033"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "4063058357",
          price: 243.34,
          options: {
            color: "black",
            "battery life": "4 hours",
            "water resistance": "not resistant"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "2235648106",
          price: 1054.43,
          options: {
            "screen size": "10-inch",
            storage: "32GB",
            color: "black"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "8214883393",
          price: 150.58,
          options: {
            color: "black",
            "sensor type": "laser",
            connectivity: "wireless"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["517174610452"],
          item_ids: ["4063058357", "2235648106", "8214883393"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1448.35,
          payment_method_id: "credit_card_7952624"
        }
      ]
    },
    "#W7756209": {
      order_id: "#W7756209",
      user_id: "yusuf_ahmed_6232",
      address: {
        address1: "409 Elm Street",
        address2: "Suite 697",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91075"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "8054888773",
          price: 206.03,
          options: {
            color: "grey",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "4404981319",
          price: 1031,
          options: {
            type: "electric",
            size: "large",
            features: "rotisserie"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1237.03,
          payment_method_id: "credit_card_2167533"
        }
      ]
    },
    "#W3323013": {
      order_id: "#W3323013",
      user_id: "harper_silva_8534",
      address: {
        address1: "293 Main Street",
        address2: "Suite 497",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92188"
      },
      items: [
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "9879255677",
          price: 288.82,
          options: {
            size: "6 ft",
            color: "green",
            material: "olefin",
            "tilt mechanism": "auto tilt"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "9829827210",
          price: 90.43,
          options: {
            length: "25ft",
            material: "vinyl",
            color: "blue"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "1631373418",
          price: 1291.21,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "6GB",
            "screen size": "6.1-inch"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "7579176349",
          price: 29.28,
          options: {
            size: "A4",
            "cover type": "soft cover"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "9013366374",
          price: 219.88,
          options: {
            size: "M",
            color: "blue",
            ventilation: "high"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["360095850863"],
          item_ids: [
            "9879255677",
            "9829827210",
            "1631373418",
            "7579176349",
            "9013366374"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1919.62,
          payment_method_id: "credit_card_7453883"
        }
      ]
    },
    "#W5185761": {
      order_id: "#W5185761",
      user_id: "fatima_jackson_2346",
      address: {
        address1: "192 Elm Avenue",
        address2: "Suite 360",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94182"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5666020311",
          price: 1058.86,
          options: {
            type: "electric",
            size: "medium",
            features: "side burner"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "8054888773",
          price: 206.03,
          options: {
            color: "grey",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1264.89,
          payment_method_id: "gift_card_5990250"
        }
      ]
    },
    "#W8528674": {
      order_id: "#W8528674",
      user_id: "aarav_santos_2259",
      address: {
        address1: "822 Elm Avenue",
        address2: "Suite 500",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76134"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "4716977452",
          price: 289.69,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "6704763132",
          price: 305.45,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "5111440845",
          price: 48.55,
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "Bluetooth"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "4024196380",
          price: 102.9,
          options: {
            length: "50ft",
            material: "latex",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["977070317987"],
          item_ids: ["4716977452", "6704763132", "5111440845", "4024196380"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 746.59,
          payment_method_id: "paypal_7664977"
        }
      ]
    },
    "#W9728773": {
      order_id: "#W9728773",
      user_id: "omar_silva_7446",
      address: {
        address1: "510 Hickory Lane",
        address2: "Suite 712",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92107"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "7127170374",
          price: 52.03,
          options: {
            pieces: "2000",
            theme: "fantasy",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7154215719",
          price: 505.62,
          options: {
            material: "wood",
            color: "brown",
            height: "6 ft"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "9391733462",
          price: 521.07,
          options: {
            resolution: "4K",
            waterproof: "no",
            color: "silver"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4548300368",
          price: 287.79,
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5645314103",
          price: 46.19,
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1412.7,
          payment_method_id: "gift_card_5540683"
        }
      ]
    },
    "#W3700848": {
      order_id: "#W3700848",
      user_id: "juan_lopez_5820",
      address: {
        address1: "411 Park Avenue",
        address2: "Suite 987",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85060"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7195021808",
          price: 2909.87,
          options: {
            resolution: "30MP",
            zoom: "5x",
            storage: "SD card"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "9179378709",
          price: 326.59,
          options: {
            color: "green",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["832913217501"],
          item_ids: ["7195021808", "9179378709"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3236.46,
          payment_method_id: "paypal_6729210"
        },
        {
          transaction_type: "refund",
          amount: 3236.46,
          payment_method_id: "paypal_6729210"
        }
      ]
    },
    "#W7584328": {
      order_id: "#W7584328",
      user_id: "ethan_moore_3587",
      address: {
        address1: "102 Elm Street",
        address2: "Suite 496",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90651"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "2492465580",
          price: 201.95,
          options: {
            color: "navy",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 201.95,
          payment_method_id: "credit_card_6173085"
        }
      ]
    },
    "#W3952055": {
      order_id: "#W3952055",
      user_id: "yara_davis_8348",
      address: {
        address1: "772 Hickory Lane",
        address2: "Suite 724",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92122"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "9970989750",
          price: 569.43,
          options: {
            type: "upright",
            "bagged/bagless": "bagged",
            features: "cordless"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3333391894",
          price: 534.14,
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "fixed"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1007724142",
          price: 382.41,
          options: {
            color: "black",
            "band material": "leather",
            display: "LCD"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7902309762",
          price: 243.62,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand B"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["355764441938"],
          item_ids: ["9970989750", "3333391894", "1007724142", "7902309762"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1729.6,
          payment_method_id: "credit_card_1248375"
        }
      ]
    },
    "#W2624389": {
      order_id: "#W2624389",
      user_id: "liam_lee_5696",
      address: {
        address1: "668 Highland Drive",
        address2: "Suite 584",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76176"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5930656038",
          price: 142.3,
          options: {
            capacity: "1.5L",
            material: "glass",
            color: "silver"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "6195938807",
          price: 103.98,
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "green"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "9314474252",
          price: 330.08,
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 576.36,
          payment_method_id: "credit_card_5809636"
        }
      ]
    },
    "#W8488728": {
      order_id: "#W8488728",
      user_id: "liam_thomas_7882",
      address: {
        address1: "629 Pine Lane",
        address2: "Suite 380",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85049"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "5676696062",
          price: 245.99,
          options: {
            size: "11",
            material: "leather",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["353040585167"],
          item_ids: ["5676696062"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 245.99,
          payment_method_id: "paypal_3650980"
        }
      ]
    },
    "#W4017490": {
      order_id: "#W4017490",
      user_id: "evelyn_patel_7348",
      address: {
        address1: "952 Cedar Street",
        address2: "Suite 697",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94142"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "6555827912",
          price: 199.42,
          options: {
            color: "black",
            "speed settings": "low",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "7160999700",
          price: 499.29,
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "softshell"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "4326528037",
          price: 2714.51,
          options: {
            resolution: "24MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5339029584",
          price: 1128.99,
          options: {
            color: "black",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "6.5-inch"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["790512429386"],
          item_ids: ["6555827912", "7160999700", "4326528037", "5339029584"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4542.21,
          payment_method_id: "gift_card_4710495"
        }
      ]
    },
    "#W1138897": {
      order_id: "#W1138897",
      user_id: "ethan_smith_7905",
      address: {
        address1: "218 Main Street",
        address2: "Suite 792",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85001"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "2820119811",
          price: 94.68,
          options: {
            material: "glass",
            capacity: "2 liters",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "3557711149",
          price: 205.35,
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 300.03,
          payment_method_id: "credit_card_3185406"
        }
      ]
    },
    "#W5232476": {
      order_id: "#W5232476",
      user_id: "fatima_lee_3440",
      address: {
        address1: "339 Lakeview Drive",
        address2: "Suite 683",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95109"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "8363011723",
          price: 2823.96,
          options: {
            resolution: "20MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "2733768059",
          price: 94.38,
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "pink"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "6499892866",
          price: 191.21,
          options: {
            size: "medium",
            material: "polyester",
            color: "beige"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "4764314102",
          price: 96.51,
          options: {
            length: "50ft",
            material: "rubber",
            color: "green"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["997060506890"],
          item_ids: ["8363011723", "2733768059", "6499892866", "4764314102"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3206.06,
          payment_method_id: "credit_card_3395407"
        }
      ]
    },
    "#W7142527": {
      order_id: "#W7142527",
      user_id: "daiki_silva_5033",
      address: {
        address1: "866 Hillcrest Drive",
        address2: "Suite 737",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28268"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "3320557165",
          price: 188.67,
          options: {
            color: "blue",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9370300555",
          price: 45.9,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["393423121213"],
          item_ids: ["3320557165", "9370300555"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 234.57,
          payment_method_id: "paypal_2233507"
        },
        {
          transaction_type: "refund",
          amount: 234.57,
          payment_method_id: "paypal_2233507"
        }
      ]
    },
    "#W5353646": {
      order_id: "#W5353646",
      user_id: "olivia_ito_3591",
      address: {
        address1: "570 Elm Avenue",
        address2: "Suite 175",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80218"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5489028872",
          price: 187.71,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "graphic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["632534065413"],
          item_ids: ["5489028872"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 187.71,
          payment_method_id: "paypal_8049766"
        }
      ]
    },
    "#W8808605": {
      order_id: "#W8808605",
      user_id: "liam_thomas_1090",
      address: {
        address1: "977 Willow Lane",
        address2: "Suite 445",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43088"
      },
      items: [
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "3909704820",
          price: 308.38,
          options: {
            resolution: "4K",
            "field of view": "110 degrees",
            connectivity: "Ethernet"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["363313521349"],
          item_ids: ["3909704820"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 308.38,
          payment_method_id: "credit_card_8989144"
        }
      ]
    },
    "#W1416704": {
      order_id: "#W1416704",
      user_id: "evelyn_ahmed_3960",
      address: {
        address1: "137 Willow Lane",
        address2: "Suite 127",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28249"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "7228247242",
          price: 251.38,
          options: {
            size: "10",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "7624783998",
          price: 154.17,
          options: {
            color: "black",
            brightness: "high",
            "power source": "AC adapter"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "3229676465",
          price: 51.94,
          options: {
            capacity: "500ml",
            material: "plastic",
            color: "black"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2960542086",
          price: 512.77,
          options: {
            material: "wood",
            color: "black",
            height: "5 ft"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "1008948180",
          price: 54.34,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "beginner"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1024.6,
          payment_method_id: "gift_card_5683713"
        }
      ]
    },
    "#W8783295": {
      order_id: "#W8783295",
      user_id: "ethan_li_6208",
      address: {
        address1: "408 Sunset Drive",
        address2: "Suite 522",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43135"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "2190871011",
          price: 3105.6,
          options: {
            pressure: "9 bar",
            capacity: "1.5L",
            type: "manual"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5428723833",
          price: 145.48,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["362794354582"],
          item_ids: ["2190871011", "5428723833"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3251.08,
          payment_method_id: "credit_card_1397305"
        },
        {
          transaction_type: "refund",
          amount: 3251.08,
          payment_method_id: "credit_card_1397305"
        }
      ]
    },
    "#W1075114": {
      order_id: "#W1075114",
      user_id: "olivia_garcia_1208",
      address: {
        address1: "358 Laurel Lane",
        address2: "Suite 658",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20570"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4582956489",
          price: 241.96,
          options: {
            size: "12",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "5565631513",
          price: 267.9,
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2757705742",
          price: 258.97,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "3187628796",
          price: 1205.66,
          options: {
            color: "rose gold",
            storage: "128GB",
            RAM: "8GB",
            "screen size": "6.1-inch"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["823383319422"],
          item_ids: ["4582956489", "5565631513", "2757705742", "3187628796"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1974.49,
          payment_method_id: "gift_card_5115976"
        }
      ]
    },
    "#W9205196": {
      order_id: "#W9205196",
      user_id: "chen_moore_6080",
      address: {
        address1: "275 Cedar Avenue",
        address2: "Suite 148",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91087"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3334537816",
          price: 2749.56,
          options: {
            "screen size": "17-inch",
            processor: "i5",
            ram: "8GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2749.56,
          payment_method_id: "credit_card_4041739"
        }
      ]
    },
    "#W3761872": {
      order_id: "#W3761872",
      user_id: "liam_thomas_8833",
      address: {
        address1: "994 Highland Drive",
        address2: "Suite 717",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20119"
      },
      items: [
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "9727387530",
          price: 207.75,
          options: {
            size: "11",
            color: "black",
            material: "synthetic"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "6384525445",
          price: 2929.62,
          options: {
            resolution: "30MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "3019027053",
          price: 553.03,
          options: {
            type: "upright",
            "bagged/bagless": "bagless",
            features: "cordless"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9644439410",
          price: 3280.31,
          options: {
            resolution: "20MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3709608322",
          price: 2744.7,
          options: {
            pressure: "9 bar",
            capacity: "2L",
            type: "automatic"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 9715.41,
          payment_method_id: "paypal_8229936"
        }
      ]
    },
    "#W9250394": {
      order_id: "#W9250394",
      user_id: "ethan_sanchez_2952",
      address: {
        address1: "799 Lakeview Drive",
        address2: "Suite 510",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78782"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "7159180318",
          price: 512.88,
          options: {
            "weight range": "30-50 lbs",
            material: "urethane",
            "set type": "fixed"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2681513500",
          price: 356.23,
          options: {
            color: "gold",
            "band material": "silicone",
            display: "AMOLED"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "2407258246",
          price: 1822.82,
          options: {
            "strap material": "metal",
            "dial color": "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["596167411233"],
          item_ids: ["7159180318", "2681513500", "2407258246"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2691.93,
          payment_method_id: "paypal_3574041"
        }
      ]
    },
    "#W8855135": {
      order_id: "#W8855135",
      user_id: "sofia_li_9219",
      address: {
        address1: "786 Elm Street",
        address2: "Suite 546",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78260"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "4035304400",
          price: 504.19,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "smart sensors"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1437889264",
          price: 258.09,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3098764622",
          price: 202.13,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "plain"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "2733768059",
          price: 94.38,
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "pink"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1058.79,
          payment_method_id: "credit_card_3951670"
        }
      ]
    },
    "#W3134391": {
      order_id: "#W3134391",
      user_id: "harper_khan_9597",
      address: {
        address1: "371 River Road",
        address2: "Suite 726",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19029"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7806008610",
          price: 2742.67,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["965832139275"],
          item_ids: ["7806008610"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2742.67,
          payment_method_id: "credit_card_1719121"
        }
      ]
    },
    "#W7109609": {
      order_id: "#W7109609",
      user_id: "emma_kovacs_5477",
      address: {
        address1: "809 Main Street",
        address2: "Suite 716",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95111"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "9805150490",
          price: 368.87,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "white"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4806644905",
          price: 658.89,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "cordless"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1027.76,
          payment_method_id: "gift_card_9246707"
        }
      ]
    },
    "#W6519831": {
      order_id: "#W6519831",
      user_id: "yara_sanchez_9145",
      address: {
        address1: "644 Chestnut Street",
        address2: "Suite 166",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95112"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "9480266227",
          price: 255.98,
          options: {
            compatibility: "Apple HomeKit",
            color: "stainless steel"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "3624655057",
          price: 2195.04,
          options: {
            "frame size": "medium",
            color: "blue",
            type: "road"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6245231688",
          price: 522.03,
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["962614476690"],
          item_ids: ["9480266227", "3624655057", "6245231688"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2973.05,
          payment_method_id: "credit_card_5353742"
        }
      ]
    },
    "#W3388163": {
      order_id: "#W3388163",
      user_id: "sofia_thomas_1518",
      address: {
        address1: "529 Cedar Avenue",
        address2: "Suite 371",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75307"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "5565631513",
          price: 267.9,
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "9391733462",
          price: 521.07,
          options: {
            resolution: "4K",
            waterproof: "no",
            color: "silver"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9354168549",
          price: 46.85,
          options: {
            color: "red",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "7445824652",
          price: 49.8,
          options: {
            brightness: "75W equivalent",
            "color temperature": "daylight",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9025753381",
          price: 231.58,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "full size"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["104573115005"],
          item_ids: [
            "5565631513",
            "9391733462",
            "9354168549",
            "7445824652",
            "9025753381"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1117.2,
          payment_method_id: "paypal_5334408"
        }
      ]
    },
    "#W3414433": {
      order_id: "#W3414433",
      user_id: "lei_li_6575",
      address: {
        address1: "604 Pine Lane",
        address2: "Suite 907",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85033"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "1804581713",
          price: 2875.61,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "7602931732",
          price: 153.25,
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6922203216",
          price: 199.12,
          options: {
            diameter: "14 inches",
            color: "black",
            type: "digital"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3227.98,
          payment_method_id: "gift_card_8049813"
        }
      ]
    },
    "#W7999678": {
      order_id: "#W7999678",
      user_id: "daiki_silva_2903",
      address: {
        address1: "713 Park Avenue",
        address2: "Suite 800",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94102"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7751905257",
          price: 321.18,
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 321.18,
          payment_method_id: "gift_card_2652153"
        }
      ]
    },
    "#W2941275": {
      order_id: "#W2941275",
      user_id: "ava_lopez_2676",
      address: {
        address1: "836 Hickory Lane",
        address2: "Suite 848",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92168"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "1804581713",
          price: 2875.61,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7843064651",
          price: 50.14,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "blue"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["812944125475"],
          item_ids: ["1804581713", "7843064651"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2925.75,
          payment_method_id: "credit_card_7772870"
        }
      ]
    },
    "#W9183908": {
      order_id: "#W9183908",
      user_id: "fatima_anderson_7445",
      address: {
        address1: "211 Cedar Avenue",
        address2: "Suite 570",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95156"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7407838442",
          price: 3081.91,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "manual"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["823260964824"],
          item_ids: ["7407838442"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3081.91,
          payment_method_id: "gift_card_8070316"
        }
      ]
    },
    "#W3176007": {
      order_id: "#W3176007",
      user_id: "anya_lee_8315",
      address: {
        address1: "912 Elm Avenue",
        address2: "Suite 936",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78227"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "1133777903",
          price: 359.66,
          options: {
            type: "in-ear",
            connectivity: "wired",
            color: "red"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4694984344",
          price: 239.78,
          options: {
            size: "12",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7843064651",
          price: 50.14,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "blue"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "3039787582",
          price: 256.94,
          options: {
            color: "stainless steel",
            capacity: "4 cups",
            type: "drip",
            features: "auto shutoff"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4920090458",
          price: 381.87,
          options: {
            color: "black",
            "band material": "silicone",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1288.39,
          payment_method_id: "paypal_3728317"
        }
      ]
    },
    "#W5012090": {
      order_id: "#W5012090",
      user_id: "daiki_davis_5031",
      address: {
        address1: "702 Elm Avenue",
        address2: "Suite 373",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94102"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "1157853815",
          price: 3096.7,
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "capsule"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "5067898160",
          price: 209.95,
          options: {
            size: "medium",
            material: "memory foam",
            color: "brown"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5745575001",
          price: 986.65,
          options: {
            type: "electric",
            size: "portable",
            features: "rotisserie"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["330876599503"],
          item_ids: ["1157853815", "5067898160", "5745575001"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4293.3,
          payment_method_id: "gift_card_1679693"
        },
        {
          transaction_type: "refund",
          amount: 4293.3,
          payment_method_id: "gift_card_1679693"
        }
      ]
    },
    "#W1046662": {
      order_id: "#W1046662",
      user_id: "aarav_wilson_9535",
      address: {
        address1: "924 Cedar Avenue",
        address2: "Suite 190",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28214"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "4982943126",
          price: 214.33,
          options: {
            size: "small",
            material: "fleece",
            color: "beige"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "7958300294",
          price: 642.72,
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "3112842858",
          price: 49.1,
          options: {
            pieces: "1000",
            theme: "fantasy",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "8538875209",
          price: 45.13,
          options: {
            capacity: "500ml",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "8941974610",
          price: 200.66,
          options: {
            size: "large",
            material: "fleece",
            color: "beige"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1151.94,
          payment_method_id: "gift_card_9138722"
        }
      ]
    },
    "#W8455874": {
      order_id: "#W8455874",
      user_id: "raj_kovacs_9155",
      address: {
        address1: "118 Elm Street",
        address2: "Suite 558",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19104"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "4273929280",
          price: 244.95,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "32GB"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6313971174",
          price: 193.97,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "custom"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4803681337",
          price: 962.34,
          options: {
            "screen size": "8-inch",
            storage: "64GB",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["709827235801"],
          item_ids: ["4273929280", "6313971174", "4803681337"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1401.26,
          payment_method_id: "gift_card_7032928"
        }
      ]
    },
    "#W9628587": {
      order_id: "#W9628587",
      user_id: "evelyn_hernandez_1701",
      address: {
        address1: "736 Hillcrest Drive",
        address2: "Suite 196",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92139"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "9045948550",
          price: 279.78,
          options: {
            "frame color": "black",
            "lens color": "blue",
            "lens type": "polarized",
            "frame material": "metal"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "8140269513",
          price: 528.12,
          options: {
            "weight range": "55-75 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "4900661478",
          price: 463.04,
          options: {
            material: "glass",
            color: "black",
            height: "5 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["896299957476"],
          item_ids: ["9045948550", "8140269513", "4900661478"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1270.94,
          payment_method_id: "credit_card_3631888"
        }
      ]
    },
    "#W7807323": {
      order_id: "#W7807323",
      user_id: "mia_jackson_2250",
      address: {
        address1: "816 Spruce Street",
        address2: "Suite 114",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46227"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "5320792178",
          price: 135.24,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "AC adapter"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "4875647558",
          price: 2805.77,
          options: {
            pressure: "15 bar",
            capacity: "1L",
            type: "capsule"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9335834276",
          price: 137.92,
          options: {
            capacity: "2L",
            material: "glass",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3078.93,
          payment_method_id: "gift_card_5715854"
        }
      ]
    },
    "#W9924173": {
      order_id: "#W9924173",
      user_id: "yusuf_patel_7767",
      address: {
        address1: "646 Highland Drive",
        address2: "Suite 881",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94117"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "9838673490",
          price: 344.55,
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "red"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3609437808",
          price: 466.44,
          options: {
            material: "leather",
            color: "red",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6017636844",
          price: 2292.37,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "9385662952",
          price: 159.92,
          options: {
            size: "L",
            color: "black",
            zipper: "full"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["377543817444"],
          item_ids: ["9838673490", "3609437808", "6017636844", "9385662952"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3263.28,
          payment_method_id: "gift_card_3372949"
        }
      ]
    },
    "#W9929926": {
      order_id: "#W9929926",
      user_id: "raj_moore_7909",
      address: {
        address1: "869 Cedar Street",
        address2: "Suite 921",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20566"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "8056198669",
          price: 208.32,
          options: {
            size: "small",
            material: "polyester",
            color: "brown"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "2439754078",
          price: 49.51,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "red"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "4716977452",
          price: 289.69,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "7510236436",
          price: 105.68,
          options: {
            thickness: "6mm",
            material: "PVC",
            color: "green"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "8153356023",
          price: 212.47,
          options: {
            size: "L",
            color: "blue",
            ventilation: "medium"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 865.67,
          payment_method_id: "gift_card_6009199"
        }
      ]
    },
    "#W4503264": {
      order_id: "#W4503264",
      user_id: "liam_li_6251",
      address: {
        address1: "674 Willow Lane",
        address2: "Suite 375",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75285"
      },
      items: [
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9635758562",
          price: 148.95,
          options: {
            size: "9",
            color: "white",
            material: "mesh",
            sole: "rubber"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 148.95,
          payment_method_id: "gift_card_5800903"
        }
      ]
    },
    "#W7273405": {
      order_id: "#W7273405",
      user_id: "sophia_davis_9653",
      address: {
        address1: "335 Chestnut Street",
        address2: "Suite 396",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28240"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "2299424241",
          price: 237.48,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "80%"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 237.48,
          payment_method_id: "paypal_2723782"
        }
      ]
    },
    "#W7043598": {
      order_id: "#W7043598",
      user_id: "noah_patel_6952",
      address: {
        address1: "224 Elm Street",
        address2: "Suite 491",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10108"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "9494281769",
          price: 252.06,
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "6477915553",
          price: 186.45,
          options: {
            size: "6",
            color: "black",
            material: "synthetic"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "5839483328",
          price: 2929.06,
          options: {
            pressure: "15 bar",
            capacity: "2L",
            type: "automatic"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "1176194968",
          price: 52.88,
          options: {
            color: "black",
            size: "S",
            material: "polyester",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["235464230524"],
          item_ids: ["9494281769", "6477915553", "5839483328", "1176194968"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3420.45,
          payment_method_id: "paypal_3169710"
        },
        {
          transaction_type: "refund",
          amount: 3420.45,
          payment_method_id: "paypal_3169710"
        }
      ]
    },
    "#W2842410": {
      order_id: "#W2842410",
      user_id: "aarav_moore_6923",
      address: {
        address1: "330 Cedar Avenue",
        address2: "Suite 311",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85041"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7729002517",
          price: 193,
          options: {
            size: "large",
            material: "polyester",
            color: "brown"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "9799386954",
          price: 28.59,
          options: {
            size: "A5",
            "cover type": "soft cover"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5311660992",
          price: 1161.04,
          options: {
            color: "rose gold",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "5.8-inch"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "9799386954",
          price: 28.59,
          options: {
            size: "A5",
            "cover type": "soft cover"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "9179378709",
          price: 326.59,
          options: {
            color: "green",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["608860161039"],
          item_ids: [
            "7729002517",
            "9799386954",
            "5311660992",
            "9799386954",
            "9179378709"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1737.81,
          payment_method_id: "paypal_4751854"
        }
      ]
    },
    "#W3155037": {
      order_id: "#W3155037",
      user_id: "ethan_muller_6097",
      address: {
        address1: "668 Spruce Street",
        address2: "Suite 237",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98128"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "4241599783",
          price: 2324.61,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "16GB",
            storage: "1TB SSD",
            color: "black"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "3952176596",
          price: 1199.77,
          options: {
            color: "rose gold",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "6.1-inch"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["105590043140"],
          item_ids: ["4241599783", "3952176596"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3524.38,
          payment_method_id: "credit_card_5721095"
        }
      ]
    },
    "#W6797115": {
      order_id: "#W6797115",
      user_id: "aarav_gonzalez_5113",
      address: {
        address1: "270 River Road",
        address2: "Suite 611",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92194"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "8302289002",
          price: 547.55,
          options: {
            "room size": "large",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "7658724607",
          price: 256.73,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "80%"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["903322238282"],
          item_ids: ["8302289002", "7658724607"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 804.28,
          payment_method_id: "gift_card_5979071"
        }
      ]
    },
    "#W1866533": {
      order_id: "#W1866533",
      user_id: "lei_anderson_8271",
      address: {
        address1: "544 Sunset Drive",
        address2: "Suite 337",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32205"
      },
      items: [
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "3034017579",
          price: 49.72,
          options: {
            brightness: "75W equivalent",
            "color temperature": "warm white",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9635758562",
          price: 148.95,
          options: {
            size: "9",
            color: "white",
            material: "mesh",
            sole: "rubber"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["901789185978"],
          item_ids: ["3034017579", "9635758562"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 198.67,
          payment_method_id: "paypal_1808675"
        },
        {
          transaction_type: "refund",
          amount: 198.67,
          payment_method_id: "paypal_1808675"
        }
      ]
    },
    "#W2092674": {
      order_id: "#W2092674",
      user_id: "emma_nguyen_6662",
      address: {
        address1: "131 Cedar Street",
        address2: "Suite 325",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80221"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3264130640",
          price: 211.41,
          options: {
            size: "M",
            color: "black",
            ventilation: "medium"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "3614853563",
          price: 46.99,
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "4510078629",
          price: 2127.62,
          options: {
            "strap material": "metal",
            "dial color": "black"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5105441284",
          price: 924.5,
          options: {
            type: "charcoal",
            size: "portable",
            features: "none"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "3876764226",
          price: 981.47,
          options: {
            type: "electric",
            size: "portable",
            features: "side burner"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["215403323457"],
          item_ids: [
            "3264130640",
            "3614853563",
            "4510078629",
            "5105441284",
            "3876764226"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4291.99,
          payment_method_id: "paypal_2499655"
        }
      ]
    },
    "#W9956813": {
      order_id: "#W9956813",
      user_id: "daiki_moore_2077",
      address: {
        address1: "682 Highland Drive",
        address2: "Suite 383",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28226"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "2439754078",
          price: 49.51,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "red"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "5635439102",
          price: 353.76,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "blue"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7729002517",
          price: 193,
          options: {
            size: "large",
            material: "polyester",
            color: "brown"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3098764622",
          price: 202.13,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "plain"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3877188862",
          price: 182.03,
          options: {
            "deck material": "plastic",
            length: "31 inch",
            design: "plain"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["298414888189"],
          item_ids: [
            "2439754078",
            "5635439102",
            "7729002517",
            "3098764622",
            "3877188862"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 980.43,
          payment_method_id: "credit_card_9952746"
        }
      ]
    },
    "#W8413040": {
      order_id: "#W8413040",
      user_id: "harper_lee_2110",
      address: {
        address1: "788 Park Avenue",
        address2: "Suite 618",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76157"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5946177616",
          price: 1057.24,
          options: {
            type: "gas",
            size: "portable",
            features: "none"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "1804581713",
          price: 2875.61,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "3399869890",
          price: 312.04,
          options: {
            "scent family": "woody",
            size: "100ml",
            gender: "men"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "2819462352",
          price: 180.66,
          options: {
            "deck material": "maple",
            length: "28 inch",
            design: "graphic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["265338067274"],
          item_ids: ["5946177616", "1804581713", "3399869890", "2819462352"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4425.55,
          payment_method_id: "gift_card_8417258"
        }
      ]
    },
    "#W9045919": {
      order_id: "#W9045919",
      user_id: "fatima_brown_5229",
      address: {
        address1: "800 Park Avenue",
        address2: "Suite 843",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95187"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1719127154",
          price: 206.26,
          options: {
            size: "M",
            color: "red",
            ventilation: "medium"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "4953074738",
          price: 226.02,
          options: {
            compatibility: "Amazon Alexa",
            color: "black"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6130713659",
          price: 483.66,
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "1804581713",
          price: 2875.61,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["472664409516"],
          item_ids: ["1719127154", "4953074738", "6130713659", "1804581713"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3791.55,
          payment_method_id: "credit_card_1982124"
        }
      ]
    },
    "#W2286993": {
      order_id: "#W2286993",
      user_id: "noah_taylor_8533",
      address: {
        address1: "134 Cedar Avenue",
        address2: "Suite 989",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85010"
      },
      items: [
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "7866854614",
          price: 105.49,
          options: {
            capacity: "5000mAh",
            output: "USB-C",
            color: "white"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "3876764226",
          price: 981.47,
          options: {
            type: "electric",
            size: "portable",
            features: "side burner"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "4293355847",
          price: 200.8,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "plain"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1287.76,
          payment_method_id: "gift_card_5354170"
        }
      ]
    },
    "#W8353027": {
      order_id: "#W8353027",
      user_id: "yara_ito_8499",
      address: {
        address1: "179 Broadway",
        address2: "Suite 256",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75284"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9335834276",
          price: 137.92,
          options: {
            capacity: "2L",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "7717598293",
          price: 985.66,
          options: {
            type: "electric",
            size: "medium",
            features: "rotisserie"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "6245746168",
          price: 46,
          options: {
            pieces: "1500",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6130713659",
          price: 483.66,
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "8176740019",
          price: 208.6,
          options: {
            "deck material": "bamboo",
            length: "28 inch",
            design: "plain"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["778196182846"],
          item_ids: [
            "9335834276",
            "7717598293",
            "6245746168",
            "6130713659",
            "8176740019"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1861.84,
          payment_method_id: "paypal_1679017"
        }
      ]
    },
    "#W1814268": {
      order_id: "#W1814268",
      user_id: "lucas_silva_7435",
      address: {
        address1: "990 Pine Lane",
        address2: "Suite 426",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78777"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3761330360",
          price: 101.12,
          options: {
            material: "ceramic",
            capacity: "2 liters",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6056040996",
          price: 2609.37,
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "16GB",
            storage: "512GB SSD",
            color: "space grey"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "8827799340",
          price: 106.44,
          options: {
            capacity: "5000mAh",
            output: "Wireless",
            color: "black"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8479046075",
          price: 451.01,
          options: {
            material: "wood",
            color: "white",
            height: "5 ft"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3267.94,
          payment_method_id: "credit_card_8865901"
        }
      ]
    },
    "#W5101035": {
      order_id: "#W5101035",
      user_id: "olivia_sanchez_2914",
      address: {
        address1: "468 Oak Street",
        address2: "Suite 909",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20244"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8798690242",
          price: 208.07,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 208.07,
          payment_method_id: "paypal_3388537"
        }
      ]
    },
    "#W8770097": {
      order_id: "#W8770097",
      user_id: "ivan_santos_6635",
      address: {
        address1: "477 Park Avenue",
        address2: "Suite 558",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75277"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4274709903",
          price: 544.29,
          options: {
            material: "mesh",
            color: "red",
            armrest: "none",
            "backrest height": "standard"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 544.29,
          payment_method_id: "paypal_6151711"
        }
      ]
    },
    "#W5797164": {
      order_id: "#W5797164",
      user_id: "chen_johnson_4204",
      address: {
        address1: "398 Sunset Drive",
        address2: "Suite 510",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77273"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9237024510",
          price: 53.53,
          options: {
            pieces: "500",
            theme: "animals",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["125736406312"],
          item_ids: ["9237024510"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 53.53,
          payment_method_id: "gift_card_3406421"
        }
      ]
    },
    "#W8008214": {
      order_id: "#W8008214",
      user_id: "fatima_brown_2588",
      address: {
        address1: "699 Hillcrest Drive",
        address2: "Suite 939",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94132"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7806008610",
          price: 2742.67,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2742.67,
          payment_method_id: "paypal_8445813"
        }
      ]
    },
    "#W2002172": {
      order_id: "#W2002172",
      user_id: "juan_kim_6026",
      address: {
        address1: "538 Spruce Street",
        address2: "Suite 567",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95120"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "7228247242",
          price: 251.38,
          options: {
            size: "10",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "5109407456",
          price: 182.48,
          options: {
            size: "small",
            material: "fleece",
            color: "grey"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "5510402676",
          price: 267.07,
          options: {
            "screen size": "6-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "9829827210",
          price: 90.43,
          options: {
            length: "25ft",
            material: "vinyl",
            color: "blue"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "9013366374",
          price: 219.88,
          options: {
            size: "M",
            color: "blue",
            ventilation: "high"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["812726210199"],
          item_ids: [
            "7228247242",
            "5109407456",
            "5510402676",
            "9829827210",
            "9013366374"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1011.24,
          payment_method_id: "paypal_5061070"
        }
      ]
    },
    "#W9827806": {
      order_id: "#W9827806",
      user_id: "liam_muller_2178",
      address: {
        address1: "371 Elm Avenue",
        address2: "Suite 865",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32250"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7806008610",
          price: 2742.67,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "capsule"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2757705742",
          price: 258.97,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["330645905586"],
          item_ids: ["7806008610", "2757705742"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3001.64,
          payment_method_id: "credit_card_9615915"
        }
      ]
    },
    "#W8309293": {
      order_id: "#W8309293",
      user_id: "aarav_santos_4279",
      address: {
        address1: "307 Laurel Lane",
        address2: "Suite 982",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85070"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "8484921793",
          price: 230.15,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "80%"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "3399869890",
          price: 312.04,
          options: {
            "scent family": "woody",
            size: "100ml",
            gender: "men"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3735133539",
          price: 508.37,
          options: {
            "weight range": "30-50 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "1507389580",
          price: 1157.86,
          options: {
            color: "black",
            storage: "128GB",
            RAM: "8GB",
            "screen size": "5.8-inch"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "5810561222",
          price: 274.98,
          options: {
            resolution: "4K",
            "field of view": "130 degrees",
            connectivity: "Wi-Fi"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["293491163015"],
          item_ids: [
            "8484921793",
            "3399869890",
            "3735133539",
            "1507389580",
            "5810561222"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2483.4,
          payment_method_id: "credit_card_3816099"
        }
      ]
    },
    "#W3372648": {
      order_id: "#W3372648",
      user_id: "yara_johansson_1629",
      address: {
        address1: "748 Hillcrest Drive",
        address2: "Suite 504",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76114"
      },
      items: [
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1994478369",
          price: 2025.51,
          options: {
            "strap material": "silicone",
            "dial color": "black"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8069050545",
          price: 499.28,
          options: {
            material: "leather",
            color: "blue",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "3112842858",
          price: 49.1,
          options: {
            pieces: "1000",
            theme: "fantasy",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9030221155",
          price: 51.98,
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "5565631513",
          price: 267.9,
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "IPX7"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2893.77,
          payment_method_id: "credit_card_4582364"
        }
      ]
    },
    "#W3792453": {
      order_id: "#W3792453",
      user_id: "isabella_johansson_2152",
      address: {
        address1: "313 Chestnut Street",
        address2: "Suite 537",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32286"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "4293355847",
          price: 200.8,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "plain"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["908856694334"],
          item_ids: ["4293355847"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 200.8,
          payment_method_id: "paypal_3024827"
        }
      ]
    },
    "#W8553554": {
      order_id: "#W8553554",
      user_id: "noah_li_2316",
      address: {
        address1: "332 Hillcrest Drive",
        address2: "Suite 437",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19019"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "4537595158",
          price: 193.79,
          options: {
            size: "small",
            material: "fleece",
            color: "brown"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["386626766358"],
          item_ids: ["4537595158"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 193.79,
          payment_method_id: "credit_card_4467209"
        }
      ]
    },
    "#W4111999": {
      order_id: "#W4111999",
      user_id: "chen_taylor_6919",
      address: {
        address1: "123 River Road",
        address2: "Suite 841",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78272"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "8176740019",
          price: 208.6,
          options: {
            "deck material": "bamboo",
            length: "28 inch",
            design: "plain"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3735133539",
          price: 508.37,
          options: {
            "weight range": "30-50 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9570044148",
          price: 231.37,
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "full size"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "2633090267",
          price: 1046.33,
          options: {
            "screen size": "7-inch",
            storage: "64GB",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1994.67,
          payment_method_id: "gift_card_9563562"
        }
      ]
    },
    "#W2582045": {
      order_id: "#W2582045",
      user_id: "juan_santos_1448",
      address: {
        address1: "741 Oak Street",
        address2: "Suite 192",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85092"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "5669664287",
          price: 543.68,
          options: {
            "room size": "small",
            "filter type": "ionic",
            features: "quiet operation"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["489429757482"],
          item_ids: ["5669664287"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 543.68,
          payment_method_id: "gift_card_3767667"
        }
      ]
    },
    "#W2912646": {
      order_id: "#W2912646",
      user_id: "harper_johansson_2663",
      address: {
        address1: "490 River Road",
        address2: "Suite 486",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80281"
      },
      items: [
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6301799585",
          price: 495.87,
          options: {
            "piece count": "3-piece",
            color: "blue",
            material: "softshell"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "9672174103",
          price: 281.98,
          options: {
            "frame color": "brown",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "1096508426",
          price: 46.13,
          options: {
            pieces: "500",
            theme: "art",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "5606522780",
          price: 1902.67,
          options: {
            "frame size": "large",
            color: "red",
            type: "mountain"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2726.65,
          payment_method_id: "paypal_4820484"
        }
      ]
    },
    "#W5320242": {
      order_id: "#W5320242",
      user_id: "ethan_santos_6104",
      address: {
        address1: "315 Hillcrest Drive",
        address2: "Suite 409",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95129"
      },
      items: [
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "7160999700",
          price: 499.29,
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "softshell"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2860956907",
          price: 315.61,
          options: {
            color: "black",
            "band material": "silicone",
            display: "LCD"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "2206116040",
          price: 209.91,
          options: {
            size: "L",
            color: "blue",
            ventilation: "high"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "5966895767",
          price: 329.58,
          options: {
            resolution: "2K",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4913411651",
          price: 941.03,
          options: {
            "screen size": "7-inch",
            storage: "128GB",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2295.42,
          payment_method_id: "paypal_3549141"
        }
      ]
    },
    "#W2052757": {
      order_id: "#W2052757",
      user_id: "mei_gonzalez_4785",
      address: {
        address1: "858 Elm Street",
        address2: "Suite 912",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95170"
      },
      items: [
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "9799386954",
          price: 28.59,
          options: {
            size: "A5",
            "cover type": "soft cover"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "9724317332",
          price: 1042.19,
          options: {
            type: "gas",
            size: "portable",
            features: "side burner"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "7420906769",
          price: 138.47,
          options: {
            color: "white",
            "sensor type": "laser",
            connectivity: "wireless"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "9385662952",
          price: 159.92,
          options: {
            size: "L",
            color: "black",
            zipper: "full"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4274709903",
          price: 544.29,
          options: {
            material: "mesh",
            color: "red",
            armrest: "none",
            "backrest height": "standard"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1913.46,
          payment_method_id: "paypal_2568958"
        }
      ]
    },
    "#W9694847": {
      order_id: "#W9694847",
      user_id: "mei_moore_8248",
      address: {
        address1: "928 Cedar Street",
        address2: "Suite 316",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90980"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6921939887",
          price: 451.62,
          options: {
            "weight range": "55-75 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "5669664287",
          price: 543.68,
          options: {
            "room size": "small",
            "filter type": "ionic",
            features: "quiet operation"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9370300555",
          price: 45.9,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["601970005809"],
          item_ids: ["6921939887", "5669664287", "9370300555"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1041.2,
          payment_method_id: "credit_card_2902980"
        }
      ]
    },
    "#W6075915": {
      order_id: "#W6075915",
      user_id: "sofia_ito_7804",
      address: {
        address1: "264 River Road",
        address2: "Suite 392",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94125"
      },
      items: [
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "4728397765",
          price: 149.48,
          options: {
            size: "M",
            color: "black",
            zipper: "full"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "7510236436",
          price: 105.68,
          options: {
            thickness: "6mm",
            material: "PVC",
            color: "green"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3232433601",
          price: 204.14,
          options: {
            "deck material": "maple",
            length: "28 inch",
            design: "plain"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["820827731882"],
          item_ids: ["4728397765", "7510236436", "3232433601"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 459.3,
          payment_method_id: "credit_card_7183597"
        }
      ]
    },
    "#W2570197": {
      order_id: "#W2570197",
      user_id: "anya_silva_8688",
      address: {
        address1: "261 Spruce Street",
        address2: "Suite 470",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32221"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9779102705",
          price: 54.11,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3333391894",
          price: 534.14,
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "fixed"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8161321868",
          price: 152.45,
          options: {
            size: "XS",
            color: "navy",
            zipper: "full"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["549403309826"],
          item_ids: ["9779102705", "3333391894", "8161321868"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 740.7,
          payment_method_id: "credit_card_8341551"
        }
      ]
    },
    "#W3508684": {
      order_id: "#W3508684",
      user_id: "fatima_smith_4908",
      address: {
        address1: "980 Hillcrest Drive",
        address2: "Suite 745",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19132"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "3694871183",
          price: 256.67,
          options: {
            color: "white",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "7824298782",
          price: 200.38,
          options: {
            color: "black",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "6259501109",
          price: 652.61,
          options: {
            type: "robotic",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "1725100896",
          price: 289.66,
          options: {
            "scent family": "oriental",
            size: "30ml",
            gender: "unisex"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["432247667906"],
          item_ids: ["3694871183", "7824298782", "6259501109", "1725100896"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1399.32,
          payment_method_id: "paypal_1575973"
        }
      ]
    },
    "#W6977171": {
      order_id: "#W6977171",
      user_id: "sophia_jackson_6355",
      address: {
        address1: "474 Spruce Street",
        address2: "Suite 678",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60651"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1151293680",
          price: 272.33,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "full size"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9635758562",
          price: 148.95,
          options: {
            size: "9",
            color: "white",
            material: "mesh",
            sole: "rubber"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9370300555",
          price: 45.9,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "expert"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4131464125",
          price: 960.67,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["829204311852"],
          item_ids: ["1151293680", "9635758562", "9370300555", "4131464125"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1427.85,
          payment_method_id: "gift_card_6052478"
        }
      ]
    },
    "#W7368828": {
      order_id: "#W7368828",
      user_id: "mei_santos_5526",
      address: {
        address1: "776 Park Avenue",
        address2: "Suite 522",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19189"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "4624254797",
          price: 272.99,
          options: {
            "skin tone": "light",
            "kit size": "basic",
            brand: "Brand C"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "3616838507",
          price: 226.11,
          options: {
            "switch type": "tactile",
            backlight: "white",
            size: "full size"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9973034634",
          price: 2850.32,
          options: {
            resolution: "20MP",
            zoom: "3x",
            storage: "CF card"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "6117189161",
          price: 481.5,
          options: {
            resolution: "4K",
            waterproof: "yes",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["631594706732"],
          item_ids: ["4624254797", "3616838507", "9973034634", "6117189161"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3830.92,
          payment_method_id: "paypal_5784379"
        }
      ]
    },
    "#W8727985": {
      order_id: "#W8727985",
      user_id: "sophia_garcia_1101",
      address: {
        address1: "197 Elm Street",
        address2: "Suite 737",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78263"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "3788616824",
          price: 951.21,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9030221155",
          price: 51.98,
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "beginner"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["341329734176"],
          item_ids: ["3788616824", "9030221155"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1003.19,
          payment_method_id: "gift_card_9450778"
        }
      ]
    },
    "#W8005719": {
      order_id: "#W8005719",
      user_id: "fatima_li_5040",
      address: {
        address1: "177 Spruce Street",
        address2: "Suite 327",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20287"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5120532699",
          price: 187.23,
          options: {
            "deck material": "maple",
            length: "31 inch",
            design: "graphic"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7441167885",
          price: 2866.37,
          options: {
            pressure: "15 bar",
            capacity: "1.5L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3053.6,
          payment_method_id: "paypal_6366157"
        }
      ]
    },
    "#W5183325": {
      order_id: "#W5183325",
      user_id: "ivan_santos_6635",
      address: {
        address1: "477 Park Avenue",
        address2: "Suite 558",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75277"
      },
      items: [
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "6206533187",
          price: 47.83,
          options: {
            brightness: "75W equivalent",
            "color temperature": "warm white",
            connectivity: "none"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1421289881",
          price: 268.77,
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "80%"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 316.6,
          payment_method_id: "paypal_6151711"
        }
      ]
    },
    "#W8255453": {
      order_id: "#W8255453",
      user_id: "amelia_rossi_5121",
      address: {
        address1: "602 Willow Lane",
        address2: "Suite 258",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28264"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3334537816",
          price: 2749.56,
          options: {
            "screen size": "17-inch",
            processor: "i5",
            ram: "8GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9612497925",
          price: 50.88,
          options: {
            color: "blue",
            size: "M",
            material: "cotton",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2800.44,
          payment_method_id: "gift_card_5591026"
        }
      ]
    },
    "#W7846319": {
      order_id: "#W7846319",
      user_id: "james_lee_9638",
      address: {
        address1: "935 Cedar Street",
        address2: "Suite 338",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43138"
      },
      items: [
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "3624655057",
          price: 2195.04,
          options: {
            "frame size": "medium",
            color: "blue",
            type: "road"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["310290173718"],
          item_ids: ["3624655057"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2195.04,
          payment_method_id: "gift_card_8731546"
        }
      ]
    },
    "#W6392164": {
      order_id: "#W6392164",
      user_id: "evelyn_wilson_8460",
      address: {
        address1: "664 Oak Street",
        address2: "Suite 956",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98148"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "8573379326",
          price: 196.73,
          options: {
            size: "M",
            color: "red",
            ventilation: "high"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["912666944066"],
          item_ids: ["8573379326"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 196.73,
          payment_method_id: "gift_card_8931217"
        }
      ]
    },
    "#W3117322": {
      order_id: "#W3117322",
      user_id: "emma_santos_8025",
      address: {
        address1: "641 Elm Avenue",
        address2: "Suite 778",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85079"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "1300392224",
          price: 480.74,
          options: {
            "weight range": "55-75 lbs",
            material: "rubber",
            "set type": "fixed"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["366909522011"],
          item_ids: ["1300392224"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 480.74,
          payment_method_id: "gift_card_3824537"
        }
      ]
    },
    "#W5762451": {
      order_id: "#W5762451",
      user_id: "liam_kovacs_4286",
      address: {
        address1: "260 Sunset Drive",
        address2: "Suite 279",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20065"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "9838673490",
          price: 344.55,
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "red"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2244749153",
          price: 473.82,
          options: {
            material: "wood",
            color: "brown",
            height: "5 ft"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "9534205511",
          price: 473.43,
          options: {
            "room size": "large",
            "filter type": "ionic",
            features: "smart sensors"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7381052709",
          price: 193.22,
          options: {
            size: "large",
            material: "memory foam",
            color: "brown"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1485.02,
          payment_method_id: "gift_card_4544711"
        }
      ]
    },
    "#W8367567": {
      order_id: "#W8367567",
      user_id: "liam_silva_3628",
      address: {
        address1: "904 Highland Drive",
        address2: "Suite 585",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95110"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "1804581713",
          price: 2875.61,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "7867398203",
          price: 232.7,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "60%"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "1133777903",
          price: 359.66,
          options: {
            type: "in-ear",
            connectivity: "wired",
            color: "red"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8649999816",
          price: 540.49,
          options: {
            material: "glass",
            color: "brown",
            height: "4 ft"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8895454203",
          price: 504.65,
          options: {
            material: "glass",
            color: "white",
            height: "5 ft"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4513.11,
          payment_method_id: "paypal_6137664"
        }
      ]
    },
    "#W2609687": {
      order_id: "#W2609687",
      user_id: "olivia_ahmed_6778",
      address: {
        address1: "147 Park Avenue",
        address2: "Suite 517",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32120"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5428723833",
          price: 145.48,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "black"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "8056198669",
          price: 208.32,
          options: {
            size: "small",
            material: "polyester",
            color: "brown"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "3909704820",
          price: 308.38,
          options: {
            resolution: "4K",
            "field of view": "110 degrees",
            connectivity: "Ethernet"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 662.18,
          payment_method_id: "gift_card_1044904"
        }
      ]
    },
    "#W8465042": {
      order_id: "#W8465042",
      user_id: "ethan_thomas_1791",
      address: {
        address1: "973 Laurel Lane",
        address2: "Suite 993",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43188"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4920090458",
          price: 381.87,
          options: {
            color: "black",
            "band material": "silicone",
            display: "AMOLED"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "9929635042",
          price: 1261.14,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "5.8-inch"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1643.01,
          payment_method_id: "gift_card_2519457"
        }
      ]
    },
    "#W8346517": {
      order_id: "#W8346517",
      user_id: "mia_johansson_7000",
      address: {
        address1: "734 Oak Street",
        address2: "Suite 397",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78280"
      },
      items: [
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "7510236436",
          price: 105.68,
          options: {
            thickness: "6mm",
            material: "PVC",
            color: "green"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4168944673",
          price: 471.82,
          options: {
            material: "leather",
            color: "blue",
            armrest: "none",
            "backrest height": "standard"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["197830542755"],
          item_ids: ["7510236436", "4168944673"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 577.5,
          payment_method_id: "credit_card_6706014"
        }
      ]
    },
    "#W9608525": {
      order_id: "#W9608525",
      user_id: "mason_kovacs_3062",
      address: {
        address1: "885 Park Avenue",
        address2: "Suite 952",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60625"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "2198125883",
          price: 296.16,
          options: {
            "frame color": "silver",
            "lens color": "black",
            "lens type": "polarized",
            "frame material": "metal"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "9083642334",
          price: 164.28,
          options: {
            color: "white",
            brightness: "high",
            "power source": "USB"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["254796145302"],
          item_ids: ["2198125883", "9083642334"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 460.44,
          payment_method_id: "gift_card_3734426"
        }
      ]
    },
    "#W8393353": {
      order_id: "#W8393353",
      user_id: "daiki_silva_1055",
      address: {
        address1: "576 Main Street",
        address2: "Suite 985",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94106"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "2444431651",
          price: 534.84,
          options: {
            "weight range": "55-75 lbs",
            material: "iron",
            "set type": "fixed"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["272997540672"],
          item_ids: ["2444431651"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 534.84,
          payment_method_id: "gift_card_1812639"
        },
        {
          transaction_type: "refund",
          amount: 534.84,
          payment_method_id: "gift_card_1812639"
        }
      ]
    },
    "#W2922379": {
      order_id: "#W2922379",
      user_id: "mia_smith_1623",
      address: {
        address1: "275 Oak Street",
        address2: "Suite 332",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80246"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7661609223",
          price: 46.51,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "9844888101",
          price: 2459.74,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "8GB",
            storage: "1TB SSD",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["870846917039"],
          item_ids: ["7661609223", "9844888101"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2506.25,
          payment_method_id: "paypal_3839332"
        }
      ]
    },
    "#W6426438": {
      order_id: "#W6426438",
      user_id: "ethan_lopez_6291",
      address: {
        address1: "103 Hillcrest Drive",
        address2: "Suite 162",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43275"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "2177997696",
          price: 206.6,
          options: {
            "deck material": "plastic",
            length: "28 inch",
            design: "custom"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "8886009523",
          price: 1944.02,
          options: {
            "strap material": "silicone",
            "dial color": "blue"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7373893106",
          price: 531.22,
          options: {
            material: "glass",
            color: "white",
            height: "4 ft"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "1507389580",
          price: 1157.86,
          options: {
            color: "black",
            storage: "128GB",
            RAM: "8GB",
            "screen size": "5.8-inch"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3839.7,
          payment_method_id: "credit_card_9789590"
        }
      ]
    },
    "#W4352605": {
      order_id: "#W4352605",
      user_id: "mason_johansson_8128",
      address: {
        address1: "745 Chestnut Street",
        address2: "Suite 617",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98103"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "8214883393",
          price: 150.58,
          options: {
            color: "black",
            "sensor type": "laser",
            connectivity: "wireless"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2216662955",
          price: 2520.52,
          options: {
            "screen size": "15-inch",
            processor: "i5",
            ram: "32GB",
            storage: "256GB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["236514082559"],
          item_ids: ["8214883393", "2216662955"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2671.1,
          payment_method_id: "gift_card_1401311"
        }
      ]
    },
    "#W7810809": {
      order_id: "#W7810809",
      user_id: "isabella_brown_4999",
      address: {
        address1: "956 Chestnut Street",
        address2: "Suite 302",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46288"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "8555936349",
          price: 226.49,
          options: {
            color: "blue",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "5966895767",
          price: 329.58,
          options: {
            resolution: "2K",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "7445824652",
          price: 49.8,
          options: {
            brightness: "75W equivalent",
            "color temperature": "daylight",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "6704763132",
          price: 305.45,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 911.32,
          payment_method_id: "gift_card_5681264"
        }
      ]
    },
    "#W2112666": {
      order_id: "#W2112666",
      user_id: "sofia_davis_2103",
      address: {
        address1: "729 Highland Drive",
        address2: "Suite 883",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98151"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1709726483",
          price: 230.26,
          options: {
            "skin tone": "medium",
            "kit size": "basic",
            brand: "Brand A"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7918497119",
          price: 54.51,
          options: {
            capacity: "500ml",
            material: "glass",
            color: "blue"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["582038767138"],
          item_ids: ["1709726483", "7918497119"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 284.77,
          payment_method_id: "gift_card_3377580"
        }
      ]
    },
    "#W8448267": {
      order_id: "#W8448267",
      user_id: "raj_ito_1740",
      address: {
        address1: "667 Elm Street",
        address2: "Suite 624",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60641"
      },
      items: [
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "1725100896",
          price: 289.66,
          options: {
            "scent family": "oriental",
            size: "30ml",
            gender: "unisex"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["881974856199"],
          item_ids: ["1725100896"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 289.66,
          payment_method_id: "credit_card_6480285"
        }
      ]
    },
    "#W6872071": {
      order_id: "#W6872071",
      user_id: "mia_thomas_4629",
      address: {
        address1: "616 Hillcrest Drive",
        address2: "Suite 320",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60654"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "5109407456",
          price: 182.48,
          options: {
            size: "small",
            material: "fleece",
            color: "grey"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "7445824652",
          price: 49.8,
          options: {
            brightness: "75W equivalent",
            "color temperature": "daylight",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "9724317332",
          price: 1042.19,
          options: {
            type: "gas",
            size: "portable",
            features: "side burner"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "4716977452",
          price: 289.69,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "1157853815",
          price: 3096.7,
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["824208266723"],
          item_ids: [
            "5109407456",
            "7445824652",
            "9724317332",
            "4716977452",
            "1157853815"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4660.86,
          payment_method_id: "paypal_2977884"
        }
      ]
    },
    "#W4506173": {
      order_id: "#W4506173",
      user_id: "ava_hernandez_9365",
      address: {
        address1: "661 Highland Drive",
        address2: "Suite 881",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46205"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3339188619",
          price: 200.24,
          options: {
            size: "M",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4329558751",
          price: 297.33,
          options: {
            "frame color": "silver",
            "lens color": "blue",
            "lens type": "non-polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "8917609800",
          price: 195.59,
          options: {
            diameter: "10 inches",
            color: "white",
            type: "digital"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7373893106",
          price: 531.22,
          options: {
            material: "glass",
            color: "white",
            height: "4 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["689998654470"],
          item_ids: ["3339188619", "4329558751", "8917609800", "7373893106"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1224.38,
          payment_method_id: "paypal_7565289"
        }
      ]
    },
    "#W7242815": {
      order_id: "#W7242815",
      user_id: "lei_anderson_8271",
      address: {
        address1: "461 Willow Lane",
        address2: "Suite 823",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76192"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6948061616",
          price: 950.96,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "gold"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["339014561958"],
          item_ids: ["6948061616"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 950.96,
          payment_method_id: "paypal_1808675"
        }
      ]
    },
    "#W9222585": {
      order_id: "#W9222585",
      user_id: "mason_lopez_5208",
      address: {
        address1: "760 Maple Drive",
        address2: "Suite 631",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10257"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4920090458",
          price: 381.87,
          options: {
            color: "black",
            "band material": "silicone",
            display: "AMOLED"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8098621301",
          price: 192.15,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "rechargeable"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7736359414",
          price: 253.08,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand C"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "2001307871",
          price: 302.63,
          options: {
            size: "6 ft",
            color: "blue",
            material: "sunbrella",
            "tilt mechanism": "auto tilt"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4358482460",
          price: 290.94,
          options: {
            "frame color": "black",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1420.67,
          payment_method_id: "paypal_9591556"
        }
      ]
    },
    "#W9651773": {
      order_id: "#W9651773",
      user_id: "evelyn_kovacs_6742",
      address: {
        address1: "505 Cedar Avenue",
        address2: "Suite 539",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32117"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9644439410",
          price: 3280.31,
          options: {
            resolution: "20MP",
            zoom: "5x",
            storage: "CF card"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3280.31,
          payment_method_id: "paypal_7732922"
        }
      ]
    },
    "#W2693718": {
      order_id: "#W2693718",
      user_id: "harper_brown_7363",
      address: {
        address1: "723 Park Avenue",
        address2: "Suite 802",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76112"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "4241599783",
          price: 2324.61,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "16GB",
            storage: "1TB SSD",
            color: "black"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "3952176596",
          price: 1199.77,
          options: {
            color: "rose gold",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "6.1-inch"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "7869640094",
          price: 47.59,
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "expert"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7255224608",
          price: 2922.97,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "CF card"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4358482460",
          price: 290.94,
          options: {
            "frame color": "black",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["446311818175"],
          item_ids: [
            "4241599783",
            "3952176596",
            "7869640094",
            "7255224608",
            "4358482460"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6785.88,
          payment_method_id: "paypal_2306935"
        }
      ]
    },
    "#W2047423": {
      order_id: "#W2047423",
      user_id: "harper_li_7655",
      address: {
        address1: "506 Oak Street",
        address2: "Suite 321",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32253"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "3017803871",
          price: 237.37,
          options: {
            "skin tone": "medium",
            "kit size": "basic",
            brand: "Brand C"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 237.37,
          payment_method_id: "gift_card_8862145"
        }
      ]
    },
    "#W1579621": {
      order_id: "#W1579621",
      user_id: "olivia_ahmed_6778",
      address: {
        address1: "553 Main Street",
        address2: "Suite 389",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94152"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "7184044281",
          price: 344.55,
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "black"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "4982943126",
          price: 214.33,
          options: {
            size: "small",
            material: "fleece",
            color: "beige"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "7866854614",
          price: 105.49,
          options: {
            capacity: "5000mAh",
            output: "USB-C",
            color: "white"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "6439196450",
          price: 254.56,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "60%"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "4579334072",
          price: 54.85,
          options: {
            capacity: "750ml",
            material: "glass",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["781544828247"],
          item_ids: [
            "7184044281",
            "4982943126",
            "7866854614",
            "6439196450",
            "4579334072"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 973.78,
          payment_method_id: "credit_card_9698900"
        }
      ]
    },
    "#W3417600": {
      order_id: "#W3417600",
      user_id: "liam_kovacs_4286",
      address: {
        address1: "260 Sunset Drive",
        address2: "Suite 279",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20065"
      },
      items: [
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "1569829406",
          price: 320.55,
          options: {
            resolution: "1080p",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5855700373",
          price: 293.46,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3909406921",
          price: 98.25,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "8555936349",
          price: 226.49,
          options: {
            color: "blue",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 938.75,
          payment_method_id: "gift_card_4544711"
        }
      ]
    },
    "#W7208030": {
      order_id: "#W7208030",
      user_id: "liam_lee_5696",
      address: {
        address1: "668 Highland Drive",
        address2: "Suite 584",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76176"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5753502325",
          price: 96.35,
          options: {
            length: "25ft",
            material: "rubber",
            color: "green"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5753502325",
          price: 96.35,
          options: {
            length: "25ft",
            material: "rubber",
            color: "green"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 192.7,
          payment_method_id: "credit_card_5809636"
        }
      ]
    },
    "#W9537686": {
      order_id: "#W9537686",
      user_id: "mia_sanchez_3401",
      address: {
        address1: "944 Laurel Lane",
        address2: "Suite 778",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60627"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "6164262152",
          price: 211.11,
          options: {
            color: "white",
            "speed settings": "low",
            "battery type": "rechargeable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["771466032428"],
          item_ids: ["6164262152"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 211.11,
          payment_method_id: "paypal_9064553"
        },
        {
          transaction_type: "refund",
          amount: 211.11,
          payment_method_id: "paypal_9064553"
        }
      ]
    },
    "#W6876713": {
      order_id: "#W6876713",
      user_id: "sofia_hernandez_5364",
      address: {
        address1: "652 Laurel Lane",
        address2: "Suite 398",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98193"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6200867091",
          price: 2955.17,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "capsule"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "3234800602",
          price: 46.66,
          options: {
            color: "red",
            size: "L",
            material: "cotton",
            style: "v-neck"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1345513440",
          price: 655.59,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "cordless"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6301799585",
          price: 495.87,
          options: {
            "piece count": "3-piece",
            color: "blue",
            material: "softshell"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "7082455361",
          price: 962.69,
          options: {
            type: "charcoal",
            size: "medium",
            features: "rotisserie"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["970329203674"],
          item_ids: [
            "6200867091",
            "3234800602",
            "1345513440",
            "6301799585",
            "7082455361"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5115.98,
          payment_method_id: "credit_card_7901829"
        }
      ]
    },
    "#W1023987": {
      order_id: "#W1023987",
      user_id: "sophia_garcia_1101",
      address: {
        address1: "197 Elm Street",
        address2: "Suite 737",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78263"
      },
      items: [
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "8926329222",
          price: 452.28,
          options: {
            "piece count": "2-piece",
            color: "black",
            material: "softshell"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "5067898160",
          price: 209.95,
          options: {
            size: "medium",
            material: "memory foam",
            color: "brown"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["974703204371"],
          item_ids: ["8926329222", "5067898160"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 662.23,
          payment_method_id: "gift_card_9450778"
        }
      ]
    },
    "#W8073958": {
      order_id: "#W8073958",
      user_id: "harper_khan_9597",
      address: {
        address1: "431 Oak Street",
        address2: "Suite 419",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92192"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "6077640618",
          price: 242.92,
          options: {
            color: "blue",
            "battery life": "8 hours",
            "water resistance": "not resistant"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9644439410",
          price: 3280.31,
          options: {
            resolution: "20MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "6341716129",
          price: 523.31,
          options: {
            "room size": "large",
            "filter type": "HEPA",
            features: "smart sensors"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "8725040869",
          price: 522.86,
          options: {
            resolution: "4K",
            waterproof: "no",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4569.4,
          payment_method_id: "gift_card_6445682"
        }
      ]
    },
    "#W1106948": {
      order_id: "#W1106948",
      user_id: "omar_lopez_7451",
      address: {
        address1: "462 Maple Drive",
        address2: "Suite 273",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92185"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "5052031638",
          price: 2621.77,
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "16GB",
            storage: "1TB SSD",
            color: "silver"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9991484137",
          price: 240.97,
          options: {
            "switch type": "tactile",
            backlight: "white",
            size: "80%"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "1434748144",
          price: 49.72,
          options: {
            capacity: "1000ml",
            material: "glass",
            color: "red"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8106223139",
          price: 249.12,
          options: {
            size: "9",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8479046075",
          price: 451.01,
          options: {
            material: "wood",
            color: "white",
            height: "5 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["460974141272"],
          item_ids: [
            "5052031638",
            "9991484137",
            "1434748144",
            "8106223139",
            "8479046075"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3612.59,
          payment_method_id: "paypal_2167589"
        },
        {
          transaction_type: "refund",
          amount: 3612.59,
          payment_method_id: "paypal_2167589"
        }
      ]
    },
    "#W6310710": {
      order_id: "#W6310710",
      user_id: "anya_garcia_3271",
      address: {
        address1: "615 Laurel Lane",
        address2: "Suite 552",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19036"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "2820119811",
          price: 94.68,
          options: {
            material: "glass",
            capacity: "2 liters",
            "stovetop compatibility": "electric"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["951786982868"],
          item_ids: ["2820119811"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 94.68,
          payment_method_id: "gift_card_4374071"
        }
      ]
    },
    "#W1588712": {
      order_id: "#W1588712",
      user_id: "lucas_santos_6600",
      address: {
        address1: "986 Lakeview Drive",
        address2: "Suite 237",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80239"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7811981098",
          price: 213.86,
          options: {
            size: "S",
            color: "white",
            ventilation: "medium"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "4947921075",
          price: 49.57,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "green"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "3254583681",
          price: 302.67,
          options: {
            color: "blue",
            "battery life": "20 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8098621301",
          price: 192.15,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "rechargeable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["277771795667"],
          item_ids: ["7811981098", "4947921075", "3254583681", "8098621301"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 758.25,
          payment_method_id: "paypal_3820631"
        },
        {
          transaction_type: "refund",
          amount: 758.25,
          payment_method_id: "paypal_3820631"
        }
      ]
    },
    "#W4514908": {
      order_id: "#W4514908",
      user_id: "fatima_anderson_2157",
      address: {
        address1: "334 Broadway",
        address2: "Suite 326",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32100"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2757705742",
          price: 258.97,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "9314474252",
          price: 330.08,
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "blue"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9973034634",
          price: 2850.32,
          options: {
            resolution: "20MP",
            zoom: "3x",
            storage: "CF card"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3439.37,
          payment_method_id: "paypal_7916550"
        }
      ]
    },
    "#W4744949": {
      order_id: "#W4744949",
      user_id: "mia_smith_1623",
      address: {
        address1: "817 Spruce Street",
        address2: "Suite 961",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60628"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1573035764",
          price: 253.98,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand A"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5428723833",
          price: 145.48,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "black"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "8896479688",
          price: 143.15,
          options: {
            color: "white",
            "sensor type": "optical",
            connectivity: "wireless"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["326515289837"],
          item_ids: ["1573035764", "5428723833", "8896479688"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 542.61,
          payment_method_id: "paypal_3839332"
        }
      ]
    },
    "#W8074062": {
      order_id: "#W8074062",
      user_id: "ava_silva_2543",
      address: {
        address1: "290 Cedar Avenue",
        address2: "Suite 120",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78706"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1262139877",
          price: 239.99,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5666020311",
          price: 1058.86,
          options: {
            type: "electric",
            size: "medium",
            features: "side burner"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "3799046073",
          price: 53.27,
          options: {
            color: "black",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["353987682455"],
          item_ids: ["1262139877", "5666020311", "3799046073"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1352.12,
          payment_method_id: "credit_card_3451690"
        },
        {
          transaction_type: "refund",
          amount: 1352.12,
          payment_method_id: "credit_card_3451690"
        }
      ]
    },
    "#W3942868": {
      order_id: "#W3942868",
      user_id: "harper_moore_3210",
      address: {
        address1: "123 Spruce Street",
        address2: "Suite 146",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85025"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "6454334990",
          price: 98.82,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 98.82,
          payment_method_id: "credit_card_7665260"
        }
      ]
    },
    "#W2640384": {
      order_id: "#W2640384",
      user_id: "mei_silva_6882",
      address: {
        address1: "980 Laurel Lane",
        address2: "Suite 654",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91147"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "3330317167",
          price: 137.32,
          options: {
            color: "black",
            "sensor type": "optical",
            connectivity: "wired"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["920693254985"],
          item_ids: ["3330317167"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 137.32,
          payment_method_id: "paypal_6619428"
        }
      ]
    },
    "#W8969494": {
      order_id: "#W8969494",
      user_id: "daiki_patel_5953",
      address: {
        address1: "670 Chestnut Street",
        address2: "Suite 982",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94111"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "4843487907",
          price: 254.84,
          options: {
            "switch type": "clicky",
            backlight: "white",
            size: "80%"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9624127908",
          price: 158.9,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "silver"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "1906487464",
          price: 102.02,
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9690244451",
          price: 236.51,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "60%"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["391328626773"],
          item_ids: ["4843487907", "9624127908", "1906487464", "9690244451"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 752.27,
          payment_method_id: "paypal_1009053"
        }
      ]
    },
    "#W3955289": {
      order_id: "#W3955289",
      user_id: "harper_johansson_2663",
      address: {
        address1: "490 River Road",
        address2: "Suite 486",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80281"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2860956907",
          price: 315.61,
          options: {
            color: "black",
            "band material": "silicone",
            display: "LCD"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4648362606",
          price: 503.76,
          options: {
            material: "leather",
            color: "black",
            armrest: "adjustable",
            "backrest height": "high-back"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7917269097",
          price: 184.25,
          options: {
            size: "large",
            material: "polyester",
            color: "grey"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "7523669277",
          price: 523.66,
          options: {
            resolution: "5K",
            waterproof: "no",
            color: "black"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8106223139",
          price: 249.12,
          options: {
            size: "9",
            material: "leather",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1776.4,
          payment_method_id: "paypal_4820484"
        }
      ]
    },
    "#W6436609": {
      order_id: "#W6436609",
      user_id: "anya_garcia_3271",
      address: {
        address1: "615 Laurel Lane",
        address2: "Suite 552",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19036"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7497340597",
          price: 100.83,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4920090458",
          price: 381.87,
          options: {
            color: "black",
            "band material": "silicone",
            display: "AMOLED"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1709726483",
          price: 230.26,
          options: {
            "skin tone": "medium",
            "kit size": "basic",
            brand: "Brand A"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6017636844",
          price: 2292.37,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3005.33,
          payment_method_id: "gift_card_4374071"
        }
      ]
    },
    "#W4363379": {
      order_id: "#W4363379",
      user_id: "harper_lee_2110",
      address: {
        address1: "788 Park Avenue",
        address2: "Suite 618",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76157"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "5370728469",
          price: 164.97,
          options: {
            color: "silver",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "4035304400",
          price: 504.19,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "smart sensors"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "2791467853",
          price: 242.53,
          options: {
            compatibility: "Google Assistant",
            color: "stainless steel"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "7445824652",
          price: 49.8,
          options: {
            brightness: "75W equivalent",
            "color temperature": "daylight",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "7144237253",
          price: 210.53,
          options: {
            color: "blue",
            "speed settings": "low",
            "battery type": "rechargeable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["393872730382"],
          item_ids: [
            "5370728469",
            "4035304400",
            "2791467853",
            "7445824652",
            "7144237253"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1172.02,
          payment_method_id: "gift_card_8417258"
        }
      ]
    },
    "#W8736148": {
      order_id: "#W8736148",
      user_id: "omar_muller_7891",
      address: {
        address1: "292 Chestnut Street",
        address2: "Suite 262",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60628"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "7184044281",
          price: 344.55,
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "black"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "3909704820",
          price: 308.38,
          options: {
            resolution: "4K",
            "field of view": "110 degrees",
            connectivity: "Ethernet"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["181838496337"],
          item_ids: ["7184044281", "3909704820"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 652.93,
          payment_method_id: "gift_card_3689412"
        },
        {
          transaction_type: "refund",
          amount: 652.93,
          payment_method_id: "gift_card_3689412"
        }
      ]
    },
    "#W1842597": {
      order_id: "#W1842597",
      user_id: "fatima_anderson_7445",
      address: {
        address1: "928 Elm Avenue",
        address2: "Suite 398",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78786"
      },
      items: [
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9791469541",
          price: 147.05,
          options: {
            size: "9",
            color: "yellow",
            material: "synthetic",
            sole: "rubber"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["258607891607"],
          item_ids: ["9791469541"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 147.05,
          payment_method_id: "gift_card_8070316"
        }
      ]
    },
    "#W8171054": {
      order_id: "#W8171054",
      user_id: "chen_silva_7485",
      address: {
        address1: "220 Laurel Lane",
        address2: "Suite 842",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90714"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9747045638",
          price: 94.01,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9791469541",
          price: 147.05,
          options: {
            size: "9",
            color: "yellow",
            material: "synthetic",
            sole: "rubber"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["727324521932"],
          item_ids: ["9747045638", "9791469541"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 241.06,
          payment_method_id: "credit_card_1565124"
        }
      ]
    },
    "#W1129578": {
      order_id: "#W1129578",
      user_id: "liam_thomas_8833",
      address: {
        address1: "744 Maple Drive",
        address2: "Suite 916",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98153"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7583936705",
          price: 3101.43,
          options: {
            resolution: "20MP",
            zoom: "10x",
            storage: "CF card"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "8573379326",
          price: 196.73,
          options: {
            size: "M",
            color: "red",
            ventilation: "high"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3298.16,
          payment_method_id: "paypal_8229936"
        }
      ]
    },
    "#W4657527": {
      order_id: "#W4657527",
      user_id: "mia_nguyen_6399",
      address: {
        address1: "412 Lakeview Drive",
        address2: "Suite 698",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78229"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4572024853",
          price: 53.72,
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "expert"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "5966895767",
          price: 329.58,
          options: {
            resolution: "2K",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "5565631513",
          price: 267.9,
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "IPX7"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 651.2,
          payment_method_id: "paypal_3722088"
        }
      ]
    },
    "#W3818056": {
      order_id: "#W3818056",
      user_id: "noah_khan_5763",
      address: {
        address1: "143 Highland Drive",
        address2: "Suite 928",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94140"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1007724142",
          price: 382.41,
          options: {
            color: "black",
            "band material": "leather",
            display: "LCD"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5311660992",
          price: 1161.04,
          options: {
            color: "rose gold",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "5.8-inch"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "5253880258",
          price: 49.52,
          options: {
            color: "black",
            size: "XXL",
            material: "polyester",
            style: "v-neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["950423356222"],
          item_ids: ["1007724142", "5311660992", "5253880258"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1592.97,
          payment_method_id: "paypal_2319812"
        }
      ]
    },
    "#W2692684": {
      order_id: "#W2692684",
      user_id: "olivia_lopez_3865",
      address: {
        address1: "310 Laurel Lane",
        address2: "Suite 480",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76171"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "3788616824",
          price: 951.21,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["746342064230"],
          item_ids: ["3788616824"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 951.21,
          payment_method_id: "gift_card_7711863"
        }
      ]
    },
    "#W3288665": {
      order_id: "#W3288665",
      user_id: "mei_martin_4260",
      address: {
        address1: "121 Cedar Avenue",
        address2: "Suite 971",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32124"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4572024853",
          price: 53.72,
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["101031430076"],
          item_ids: ["4572024853"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 53.72,
          payment_method_id: "paypal_2299608"
        }
      ]
    },
    "#W8494984": {
      order_id: "#W8494984",
      user_id: "sofia_davis_2103",
      address: {
        address1: "729 Highland Drive",
        address2: "Suite 883",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98151"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6956751343",
          price: 217.06,
          options: {
            "deck material": "bamboo",
            length: "34 inch",
            design: "custom"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "6901578702",
          price: 307.42,
          options: {
            resolution: "4K",
            "field of view": "130 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "8384507844",
          price: 137.94,
          options: {
            color: "white",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "3624655057",
          price: 2195.04,
          options: {
            "frame size": "medium",
            color: "blue",
            type: "road"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["272031425887"],
          item_ids: ["6956751343", "6901578702", "8384507844", "3624655057"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2857.46,
          payment_method_id: "gift_card_3377580"
        },
        {
          transaction_type: "refund",
          amount: 2857.46,
          payment_method_id: "gift_card_3377580"
        }
      ]
    },
    "#W1557241": {
      order_id: "#W1557241",
      user_id: "sofia_li_3261",
      address: {
        address1: "869 Elm Avenue",
        address2: "Suite 251",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19129"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "6452271382",
          price: 258.84,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5930656038",
          price: 142.3,
          options: {
            capacity: "1.5L",
            material: "glass",
            color: "silver"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "9421195098",
          price: 32.37,
          options: {
            size: "A6",
            "cover type": "soft cover"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2323972008",
          price: 146.98,
          options: {
            capacity: "1L",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "2733768059",
          price: 94.38,
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "pink"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 674.87,
          payment_method_id: "credit_card_4046723"
        }
      ]
    },
    "#W4250821": {
      order_id: "#W4250821",
      user_id: "sophia_jackson_6355",
      address: {
        address1: "474 Spruce Street",
        address2: "Suite 678",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60651"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "5222576926",
          price: 249.95,
          options: {
            "switch type": "linear",
            backlight: "white",
            size: "full size"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "9970989750",
          price: 569.43,
          options: {
            type: "upright",
            "bagged/bagless": "bagged",
            features: "cordless"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "5996159312",
          price: 2895.55,
          options: {
            resolution: "24MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "6857426243",
          price: 196.53,
          options: {
            size: "medium",
            material: "fleece",
            color: "grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["755949908518"],
          item_ids: ["5222576926", "9970989750", "5996159312", "6857426243"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3911.46,
          payment_method_id: "credit_card_8041020"
        }
      ]
    },
    "#W9300146": {
      order_id: "#W9300146",
      user_id: "aarav_anderson_8794",
      address: {
        address1: "931 Maple Drive",
        address2: "Suite 985",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19031"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "9190635437",
          price: 153.23,
          options: {
            color: "black",
            brightness: "low",
            "power source": "USB"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 153.23,
          payment_method_id: "gift_card_7245904"
        }
      ]
    },
    "#W4347784": {
      order_id: "#W4347784",
      user_id: "ethan_khan_3904",
      address: {
        address1: "264 Elm Street",
        address2: "Suite 579",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92117"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4694984344",
          price: 239.78,
          options: {
            size: "12",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8479046075",
          price: 451.01,
          options: {
            material: "wood",
            color: "white",
            height: "5 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["331003792887"],
          item_ids: ["4694984344", "8479046075"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 690.79,
          payment_method_id: "credit_card_5608852"
        }
      ]
    },
    "#W1654332": {
      order_id: "#W1654332",
      user_id: "isabella_santos_1643",
      address: {
        address1: "967 Sunset Drive",
        address2: "Suite 613",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76176"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9665000388",
          price: 269.46,
          options: {
            "switch type": "clicky",
            backlight: "none",
            size: "80%"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["362102470345"],
          item_ids: ["9665000388"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 269.46,
          payment_method_id: "credit_card_4056740"
        }
      ]
    },
    "#W1787190": {
      order_id: "#W1787190",
      user_id: "yusuf_khan_7091",
      address: {
        address1: "621 Highland Drive",
        address2: "Suite 629",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75313"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7533802601",
          price: 48.59,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "green"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "1002370030",
          price: 290.25,
          options: {
            "scent family": "woody",
            size: "50ml",
            gender: "women"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2216662955",
          price: 2520.52,
          options: {
            "screen size": "15-inch",
            processor: "i5",
            ram: "32GB",
            storage: "256GB SSD",
            color: "space grey"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "9314474252",
          price: 330.08,
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3189.44,
          payment_method_id: "paypal_5796936"
        }
      ]
    },
    "#W2079779": {
      order_id: "#W2079779",
      user_id: "amelia_patel_7834",
      address: {
        address1: "985 Pine Lane",
        address2: "Suite 927",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85047"
      },
      items: [
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "9168994198",
          price: 466.76,
          options: {
            resolution: "1080p",
            waterproof: "no",
            color: "black"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4358482460",
          price: 290.94,
          options: {
            "frame color": "black",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 757.7,
          payment_method_id: "gift_card_3751659"
        }
      ]
    },
    "#W8595443": {
      order_id: "#W8595443",
      user_id: "raj_kovacs_9155",
      address: {
        address1: "118 Elm Street",
        address2: "Suite 558",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19104"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "4624254797",
          price: 272.99,
          options: {
            "skin tone": "light",
            "kit size": "basic",
            brand: "Brand C"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9025753381",
          price: 231.58,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "full size"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "2190871011",
          price: 3105.6,
          options: {
            pressure: "9 bar",
            capacity: "1.5L",
            type: "manual"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["968057071030"],
          item_ids: ["4624254797", "9025753381", "2190871011"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3610.17,
          payment_method_id: "gift_card_7032928"
        }
      ]
    },
    "#W1632213": {
      order_id: "#W1632213",
      user_id: "lei_gonzalez_5407",
      address: {
        address1: "767 Park Avenue",
        address2: "Suite 594",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92105"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2244749153",
          price: 473.82,
          options: {
            material: "wood",
            color: "brown",
            height: "5 ft"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9025753381",
          price: 231.58,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "full size"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["750208663016"],
          item_ids: ["2244749153", "9025753381"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 705.4,
          payment_method_id: "paypal_4563893"
        },
        {
          transaction_type: "refund",
          amount: 705.4,
          payment_method_id: "paypal_4563893"
        }
      ]
    },
    "#W1006327": {
      order_id: "#W1006327",
      user_id: "james_johnson_9321",
      address: {
        address1: "593 Cedar Avenue",
        address2: "Suite 826",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60625"
      },
      items: [
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "5925362855",
          price: 503.51,
          options: {
            resolution: "1080p",
            waterproof: "yes",
            color: "black"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1994478369",
          price: 2025.51,
          options: {
            "strap material": "silicone",
            "dial color": "black"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5172162216",
          price: 48.51,
          options: {
            pieces: "2000",
            theme: "landscape",
            "difficulty level": "intermediate"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2577.53,
          payment_method_id: "credit_card_4998749"
        }
      ]
    },
    "#W1971958": {
      order_id: "#W1971958",
      user_id: "noah_martin_5764",
      address: {
        address1: "660 Maple Drive",
        address2: "Suite 853",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43090"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "6342039236",
          price: 244.91,
          options: {
            "switch type": "clicky",
            backlight: "white",
            size: "full size"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3877188862",
          price: 182.03,
          options: {
            "deck material": "plastic",
            length: "31 inch",
            design: "plain"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9624127908",
          price: 158.9,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "silver"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6534134392",
          price: 196.15,
          options: {
            diameter: "10 inches",
            color: "wood",
            type: "analog"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["474979712479"],
          item_ids: ["6342039236", "3877188862", "9624127908", "6534134392"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 781.99,
          payment_method_id: "paypal_7383471"
        }
      ]
    },
    "#W5208989": {
      order_id: "#W5208989",
      user_id: "mia_thomas_4629",
      address: {
        address1: "616 Hillcrest Drive",
        address2: "Suite 320",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60654"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4694984344",
          price: 239.78,
          options: {
            size: "12",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "8054888773",
          price: 206.03,
          options: {
            color: "grey",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5546244844",
          price: 51.59,
          options: {
            pieces: "1500",
            theme: "art",
            "difficulty level": "intermediate"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 497.4,
          payment_method_id: "paypal_2977884"
        }
      ]
    },
    "#W2329074": {
      order_id: "#W2329074",
      user_id: "daiki_khan_6856",
      address: {
        address1: "456 Laurel Lane",
        address2: "Suite 904",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28279"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "6704763132",
          price: 305.45,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3915604618",
          price: 487.6,
          options: {
            material: "leather",
            color: "blue",
            armrest: "fixed",
            "backrest height": "standard"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "6164262152",
          price: 211.11,
          options: {
            color: "white",
            "speed settings": "low",
            "battery type": "rechargeable"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "4859937227",
          price: 503.58,
          options: {
            resolution: "5K",
            waterproof: "no",
            color: "silver"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7441167885",
          price: 2866.37,
          options: {
            pressure: "15 bar",
            capacity: "1.5L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["772579138252"],
          item_ids: [
            "6704763132",
            "3915604618",
            "6164262152",
            "4859937227",
            "7441167885"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4374.11,
          payment_method_id: "gift_card_2491643"
        }
      ]
    },
    "#W3504981": {
      order_id: "#W3504981",
      user_id: "mohamed_jackson_1549",
      address: {
        address1: "998 Lakeview Drive",
        address2: "Suite 605",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75374"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4615543240",
          price: 1042.93,
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "silver"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "7747408585",
          price: 249.01,
          options: {
            compatibility: "Google Assistant",
            color: "black"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2243454707",
          price: 164.46,
          options: {
            capacity: "1L",
            material: "plastic",
            color: "white"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "3112842858",
          price: 49.1,
          options: {
            pieces: "1000",
            theme: "fantasy",
            "difficulty level": "intermediate"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["964771454373"],
          item_ids: ["4615543240", "7747408585", "2243454707", "3112842858"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1505.5,
          payment_method_id: "credit_card_3313158"
        }
      ]
    },
    "#W1154986": {
      order_id: "#W1154986",
      user_id: "lucas_brown_6720",
      address: {
        address1: "921 Park Avenue",
        address2: "Suite 892",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60612"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "4238115171",
          price: 91.78,
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "2652637226",
          price: 295.94,
          options: {
            color: "green",
            "battery life": "20 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "1133777903",
          price: 359.66,
          options: {
            type: "in-ear",
            connectivity: "wired",
            color: "red"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "1631373418",
          price: 1291.21,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "6GB",
            "screen size": "6.1-inch"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5645314103",
          price: 46.19,
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["286422338955"],
          item_ids: [
            "4238115171",
            "2652637226",
            "1133777903",
            "1631373418",
            "5645314103"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2084.78,
          payment_method_id: "credit_card_2112420"
        },
        {
          transaction_type: "refund",
          amount: 2084.78,
          payment_method_id: "credit_card_2112420"
        }
      ]
    },
    "#W9609649": {
      order_id: "#W9609649",
      user_id: "sofia_hernandez_5364",
      address: {
        address1: "652 Laurel Lane",
        address2: "Suite 398",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98193"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "5510402676",
          price: 267.07,
          options: {
            "screen size": "6-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9612497925",
          price: 50.88,
          options: {
            color: "blue",
            size: "M",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "1176194968",
          price: 52.88,
          options: {
            color: "black",
            size: "S",
            material: "polyester",
            style: "crew neck"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "9862136885",
          price: 258.32,
          options: {
            color: "black",
            capacity: "2 cups",
            type: "espresso",
            features: "timer"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "8170914468",
          price: 316.29,
          options: {
            size: "6 ft",
            color: "red",
            material: "olefin",
            "tilt mechanism": "manual tilt"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["395020036732"],
          item_ids: [
            "5510402676",
            "9612497925",
            "1176194968",
            "9862136885",
            "8170914468"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 945.44,
          payment_method_id: "credit_card_7901829"
        }
      ]
    },
    "#W2782461": {
      order_id: "#W2782461",
      user_id: "sofia_moore_9773",
      address: {
        address1: "181 Elm Street",
        address2: "Suite 178",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20030"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9991484137",
          price: 240.97,
          options: {
            "switch type": "tactile",
            backlight: "white",
            size: "80%"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["130091920237"],
          item_ids: ["9991484137"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 240.97,
          payment_method_id: "credit_card_1893409"
        },
        {
          transaction_type: "refund",
          amount: 240.97,
          payment_method_id: "credit_card_1893409"
        }
      ]
    },
    "#W9538251": {
      order_id: "#W9538251",
      user_id: "yara_johansson_9032",
      address: {
        address1: "816 Oak Street",
        address2: "Suite 528",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94128"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6324294385",
          price: 2719.01,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "automatic"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "1804581713",
          price: 2875.61,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5594.62,
          payment_method_id: "credit_card_6699629"
        }
      ]
    },
    "#W4183735": {
      order_id: "#W4183735",
      user_id: "sophia_nguyen_7885",
      address: {
        address1: "181 Elm Street",
        address2: "Suite 870",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60647"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7533802601",
          price: 48.59,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "green"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5311660992",
          price: 1161.04,
          options: {
            color: "rose gold",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "5.8-inch"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2243454707",
          price: 164.46,
          options: {
            capacity: "1L",
            material: "plastic",
            color: "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1374.09,
          payment_method_id: "gift_card_2415038"
        }
      ]
    },
    "#W7826235": {
      order_id: "#W7826235",
      user_id: "james_wilson_1842",
      address: {
        address1: "480 Cedar Street",
        address2: "Suite 740",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80224"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8895454203",
          price: 504.65,
          options: {
            material: "glass",
            color: "white",
            height: "5 ft"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2989722512",
          price: 455.34,
          options: {
            material: "glass",
            color: "white",
            height: "3 ft"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8349118980",
          price: 53.43,
          options: {
            color: "blue",
            size: "S",
            material: "cotton",
            style: "v-neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["229328733068"],
          item_ids: ["8895454203", "2989722512", "8349118980"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1013.42,
          payment_method_id: "credit_card_7871433"
        }
      ]
    },
    "#W3611574": {
      order_id: "#W3611574",
      user_id: "juan_brown_8562",
      address: {
        address1: "314 Highland Drive",
        address2: "Suite 426",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75347"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "1157853815",
          price: 3096.7,
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "capsule"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "7187199153",
          price: 983.62,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7441167885",
          price: 2866.37,
          options: {
            pressure: "15 bar",
            capacity: "1.5L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["827118012433"],
          item_ids: ["1157853815", "7187199153", "7441167885"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6946.69,
          payment_method_id: "credit_card_2288437"
        }
      ]
    },
    "#W7147989": {
      order_id: "#W7147989",
      user_id: "ethan_sanchez_7289",
      address: {
        address1: "132 Hillcrest Drive",
        address2: "Suite 744",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85093"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "1120917161",
          price: 953.39,
          options: {
            type: "electric",
            size: "portable",
            features: "none"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "3015420423",
          price: 141.76,
          options: {
            capacity: "2L",
            material: "glass",
            color: "silver"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "4821837102",
          price: 243.59,
          options: {
            color: "white",
            capacity: "4 cups",
            type: "french press",
            features: "built-in grinder"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3609437808",
          price: 466.44,
          options: {
            material: "leather",
            color: "red",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6200867091",
          price: 2955.17,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4760.35,
          payment_method_id: "gift_card_5917510"
        }
      ]
    },
    "#W8883368": {
      order_id: "#W8883368",
      user_id: "anya_brown_2024",
      address: {
        address1: "419 Main Street",
        address2: "Suite 730",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75380"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "5510402676",
          price: 267.07,
          options: {
            "screen size": "6-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9320099340",
          price: 375.03,
          options: {
            color: "black",
            "band material": "leather",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 642.1,
          payment_method_id: "credit_card_3414703"
        }
      ]
    },
    "#W2768683": {
      order_id: "#W2768683",
      user_id: "evelyn_kovacs_6742",
      address: {
        address1: "295 Elm Avenue",
        address2: "Suite 793",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90320"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8649999816",
          price: 540.49,
          options: {
            material: "glass",
            color: "brown",
            height: "4 ft"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6242772310",
          price: 2996.03,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "automatic"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "3694871183",
          price: 256.67,
          options: {
            color: "white",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7583936705",
          price: 3101.43,
          options: {
            resolution: "20MP",
            zoom: "10x",
            storage: "CF card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["696131665638"],
          item_ids: ["8649999816", "6242772310", "3694871183", "7583936705"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6894.62,
          payment_method_id: "paypal_7732922"
        }
      ]
    },
    "#W2694395": {
      order_id: "#W2694395",
      user_id: "mei_moore_8248",
      address: {
        address1: "928 Cedar Street",
        address2: "Suite 316",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90980"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "2198125883",
          price: 296.16,
          options: {
            "frame color": "silver",
            "lens color": "black",
            "lens type": "polarized",
            "frame material": "metal"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "9949163720",
          price: 1908.15,
          options: {
            "strap material": "leather",
            "dial color": "black"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8895454203",
          price: 504.65,
          options: {
            material: "glass",
            color: "white",
            height: "5 ft"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6508153405",
          price: 191.55,
          options: {
            diameter: "12 inches",
            color: "white",
            type: "analog"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2900.51,
          payment_method_id: "credit_card_2902980"
        }
      ]
    },
    "#W1436802": {
      order_id: "#W1436802",
      user_id: "daiki_johnson_9523",
      address: {
        address1: "939 Elm Street",
        address2: "Suite 261",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32273"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3909406921",
          price: 98.25,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "gas"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 98.25,
          payment_method_id: "paypal_2433177"
        }
      ]
    },
    "#W8664580": {
      order_id: "#W8664580",
      user_id: "emma_ito_4529",
      address: {
        address1: "965 Broadway",
        address2: "Suite 140",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19022"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "2366567022",
          price: 54.04,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 54.04,
          payment_method_id: "paypal_9995021"
        }
      ]
    },
    "#W2166301": {
      order_id: "#W2166301",
      user_id: "yusuf_hernandez_6785",
      address: {
        address1: "580 Broadway",
        address2: "Suite 162",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80265"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "3330317167",
          price: 137.32,
          options: {
            color: "black",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "1775591963",
          price: 154.75,
          options: {
            size: "10",
            color: "white",
            material: "leather",
            sole: "EVA"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "3624655057",
          price: 2195.04,
          options: {
            "frame size": "medium",
            color: "blue",
            type: "road"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2487.11,
          payment_method_id: "paypal_7529813"
        }
      ]
    },
    "#W6619432": {
      order_id: "#W6619432",
      user_id: "sophia_nguyen_2370",
      address: {
        address1: "464 Main Street",
        address2: "Suite 450",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20171"
      },
      items: [
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "6195938807",
          price: 103.98,
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "green"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3735133539",
          price: 508.37,
          options: {
            "weight range": "30-50 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["443180443110"],
          item_ids: ["6195938807", "3735133539"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 612.35,
          payment_method_id: "paypal_3738584"
        }
      ]
    },
    "#W5386730": {
      order_id: "#W5386730",
      user_id: "harper_kim_9968",
      address: {
        address1: "886 Main Street",
        address2: "Suite 578",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95119"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "8054888773",
          price: 206.03,
          options: {
            color: "grey",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 206.03,
          payment_method_id: "gift_card_5814983"
        }
      ]
    },
    "#W3433080": {
      order_id: "#W3433080",
      user_id: "harper_kim_2998",
      address: {
        address1: "853 Broadway",
        address2: "Suite 947",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78222"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5268233322",
          price: 155.99,
          options: {
            capacity: "1L",
            material: "glass",
            color: "white"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8118291112",
          price: 260.56,
          options: {
            size: "12",
            material: "leather",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["863902974729"],
          item_ids: ["5268233322", "8118291112"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 416.55,
          payment_method_id: "gift_card_5328393"
        }
      ]
    },
    "#W5445067": {
      order_id: "#W5445067",
      user_id: "emma_nguyen_5878",
      address: {
        address1: "232 Willow Lane",
        address2: "Suite 382",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95113"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3778566150",
          price: 2372.97,
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "32GB",
            storage: "256GB SSD",
            color: "silver"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "1052700637",
          price: 285.81,
          options: {
            color: "red",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "9190635437",
          price: 153.23,
          options: {
            color: "black",
            brightness: "low",
            "power source": "USB"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4168944673",
          price: 471.82,
          options: {
            material: "leather",
            color: "blue",
            armrest: "none",
            "backrest height": "standard"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "4728397765",
          price: 149.48,
          options: {
            size: "M",
            color: "black",
            zipper: "full"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["907843297193"],
          item_ids: [
            "3778566150",
            "1052700637",
            "9190635437",
            "4168944673",
            "4728397765"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3433.31,
          payment_method_id: "credit_card_1392586"
        },
        {
          transaction_type: "refund",
          amount: 3433.31,
          payment_method_id: "credit_card_1392586"
        }
      ]
    },
    "#W4250290": {
      order_id: "#W4250290",
      user_id: "ethan_johnson_5450",
      address: {
        address1: "299 Broadway",
        address2: "Suite 770",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20257"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4725166838",
          price: 602.11,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2768401027",
          price: 2346.49,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "silver"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "6735339143",
          price: 471.77,
          options: {
            material: "metal",
            color: "brown",
            height: "6 ft"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5967152432",
          price: 292.71,
          options: {
            color: "green",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3713.08,
          payment_method_id: "gift_card_8545954"
        }
      ]
    },
    "#W2274128": {
      order_id: "#W2274128",
      user_id: "yusuf_patel_7767",
      address: {
        address1: "646 Highland Drive",
        address2: "Suite 881",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94117"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2185126308",
          price: 241.9,
          options: {
            size: "10",
            material: "leather",
            waterproof: "no"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "5510402676",
          price: 267.07,
          options: {
            "screen size": "6-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7255224608",
          price: 2922.97,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "CF card"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5268233322",
          price: 155.99,
          options: {
            capacity: "1L",
            material: "glass",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["946696044479"],
          item_ids: ["2185126308", "5510402676", "7255224608", "5268233322"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3587.93,
          payment_method_id: "gift_card_3372949"
        }
      ]
    },
    "#W2564042": {
      order_id: "#W2564042",
      user_id: "yusuf_garcia_3055",
      address: {
        address1: "690 Broadway",
        address2: "Suite 737",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46226"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "6159919747",
          price: 259.75,
          options: {
            size: "11",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "1657832319",
          price: 2729.32,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "512GB SSD",
            color: "black"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "5669664287",
          price: 543.68,
          options: {
            "room size": "small",
            "filter type": "ionic",
            features: "quiet operation"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3532.75,
          payment_method_id: "gift_card_7588375"
        }
      ]
    },
    "#W4184032": {
      order_id: "#W4184032",
      user_id: "ava_kovacs_3448",
      address: {
        address1: "993 Laurel Lane",
        address2: "Suite 185",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85052"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3877188862",
          price: 182.03,
          options: {
            "deck material": "plastic",
            length: "31 inch",
            design: "plain"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "7493556126",
          price: 346.97,
          options: {
            type: "over-ear",
            connectivity: "wireless",
            color: "black"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "4764314102",
          price: 96.51,
          options: {
            length: "50ft",
            material: "rubber",
            color: "green"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "8293778132",
          price: 100.62,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 726.13,
          payment_method_id: "credit_card_9699699"
        }
      ]
    },
    "#W7259850": {
      order_id: "#W7259850",
      user_id: "lucas_muller_4380",
      address: {
        address1: "125 River Road",
        address2: "Suite 131",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78763"
      },
      items: [
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "3111466194",
          price: 285.66,
          options: {
            size: "7 ft",
            color: "red",
            material: "polyester",
            "tilt mechanism": "manual tilt"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5206946487",
          price: 95.08,
          options: {
            length: "50ft",
            material: "vinyl",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["924275457125"],
          item_ids: ["3111466194", "5206946487"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 380.74,
          payment_method_id: "gift_card_2748512"
        }
      ]
    },
    "#W1841226": {
      order_id: "#W1841226",
      user_id: "chen_ahmed_3232",
      address: {
        address1: "571 Broadway",
        address2: "Suite 486",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46210"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9647374798",
          price: 109.58,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "4458619711",
          price: 153.81,
          options: {
            capacity: "2L",
            material: "stainless steel",
            color: "white"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9747045638",
          price: 94.01,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7539442683",
          price: 461.49,
          options: {
            material: "metal",
            color: "black",
            height: "4 ft"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "7579176349",
          price: 29.28,
          options: {
            size: "A4",
            "cover type": "soft cover"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["130726882167"],
          item_ids: [
            "9647374798",
            "4458619711",
            "9747045638",
            "7539442683",
            "7579176349"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 848.17,
          payment_method_id: "gift_card_1402922"
        }
      ]
    },
    "#W1080318": {
      order_id: "#W1080318",
      user_id: "omar_kim_3528",
      address: {
        address1: "542 Lakeview Drive",
        address2: "Suite 811",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32214"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8349118980",
          price: 53.43,
          options: {
            color: "blue",
            size: "S",
            material: "cotton",
            style: "v-neck"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 53.43,
          payment_method_id: "credit_card_3577130"
        }
      ]
    },
    "#W7430166": {
      order_id: "#W7430166",
      user_id: "aarav_davis_4756",
      address: {
        address1: "178 Lakeview Drive",
        address2: "Suite 576",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76150"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "2880340443",
          price: 137.22,
          options: {
            color: "white",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "1270145486",
          price: 144.07,
          options: {
            color: "white",
            brightness: "high",
            "power source": "battery"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "1133777903",
          price: 359.66,
          options: {
            type: "in-ear",
            connectivity: "wired",
            color: "red"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "9692325258",
          price: 528.63,
          options: {
            "piece count": "3-piece",
            color: "black",
            material: "softshell"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "1240311797",
          price: 137.17,
          options: {
            capacity: "1L",
            material: "glass",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1306.75,
          payment_method_id: "gift_card_9708163"
        }
      ]
    },
    "#W2087737": {
      order_id: "#W2087737",
      user_id: "yusuf_jackson_7865",
      address: {
        address1: "391 Broadway",
        address2: "Suite 435",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98127"
      },
      items: [
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "9929635042",
          price: 1261.14,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "5.8-inch"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2681513500",
          price: 356.23,
          options: {
            color: "gold",
            "band material": "silicone",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1617.37,
          payment_method_id: "paypal_3392566"
        }
      ]
    },
    "#W7553978": {
      order_id: "#W7553978",
      user_id: "mei_ahmed_4909",
      address: {
        address1: "572 Cedar Street",
        address2: "Suite 469",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78705"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "4545791457",
          price: 186.06,
          options: {
            "deck material": "plastic",
            length: "28 inch",
            design: "plain"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1345513440",
          price: 655.59,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "cordless"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3098764622",
          price: 202.13,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "plain"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1631806422",
          price: 339.85,
          options: {
            color: "black",
            "band material": "metal",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["873459681869"],
          item_ids: ["4545791457", "1345513440", "3098764622", "1631806422"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1383.63,
          payment_method_id: "credit_card_5902940"
        }
      ]
    },
    "#W7808613": {
      order_id: "#W7808613",
      user_id: "mohamed_smith_9224",
      address: {
        address1: "372 Main Street",
        address2: "Suite 578",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77252"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9811090008",
          price: 370.38,
          options: {
            color: "silver",
            "band material": "leather",
            display: "LCD"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["484782663812"],
          item_ids: ["9811090008"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 370.38,
          payment_method_id: "paypal_3684705"
        }
      ]
    },
    "#W5009508": {
      order_id: "#W5009508",
      user_id: "mei_johansson_1199",
      address: {
        address1: "410 Maple Drive",
        address2: "Suite 913",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10187"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "5253880258",
          price: 49.52,
          options: {
            color: "black",
            size: "XXL",
            material: "polyester",
            style: "v-neck"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "7866854614",
          price: 105.49,
          options: {
            capacity: "5000mAh",
            output: "USB-C",
            color: "white"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3909406921",
          price: 98.25,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "gas"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["153892990369"],
          item_ids: ["5253880258", "7866854614", "3909406921"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 253.26,
          payment_method_id: "credit_card_7574044"
        },
        {
          transaction_type: "refund",
          amount: 253.26,
          payment_method_id: "credit_card_7574044"
        }
      ]
    },
    "#W4887592": {
      order_id: "#W4887592",
      user_id: "mohamed_khan_3010",
      address: {
        address1: "320 Cedar Avenue",
        address2: "Suite 201",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60651"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "2343503231",
          price: 196.86,
          options: {
            "deck material": "maple",
            length: "34 inch",
            design: "graphic"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "4447749792",
          price: 139.8,
          options: {
            color: "white",
            brightness: "medium",
            "power source": "AC adapter"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "9385662952",
          price: 159.92,
          options: {
            size: "L",
            color: "black",
            zipper: "full"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["882950623180"],
          item_ids: ["2343503231", "4447749792", "9385662952"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 496.58,
          payment_method_id: "paypal_1249653"
        }
      ]
    },
    "#W2466703": {
      order_id: "#W2466703",
      user_id: "yusuf_hernandez_6785",
      address: {
        address1: "271 Sunset Drive",
        address2: "Suite 421",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75243"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "7848293342",
          price: 942.71,
          options: {
            type: "charcoal",
            size: "medium",
            features: "side burner"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "4894369688",
          price: 537.01,
          options: {
            material: "glass",
            color: "brown",
            height: "5 ft"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "9385662952",
          price: 159.92,
          options: {
            size: "L",
            color: "black",
            zipper: "full"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1639.64,
          payment_method_id: "paypal_7529813"
        }
      ]
    },
    "#W8058304": {
      order_id: "#W8058304",
      user_id: "omar_moore_9540",
      address: {
        address1: "548 Broadway",
        address2: "Suite 950",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10096"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "7602931732",
          price: 153.25,
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7533802601",
          price: 48.59,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "green"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "9929635042",
          price: 1261.14,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "5.8-inch"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1462.98,
          payment_method_id: "credit_card_8008637"
        }
      ]
    },
    "#W6497157": {
      order_id: "#W6497157",
      user_id: "amelia_patel_7834",
      address: {
        address1: "923 Elm Street",
        address2: "Suite 362",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85051"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "9672174103",
          price: 281.98,
          options: {
            "frame color": "brown",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2993891288",
          price: 383.08,
          options: {
            color: "silver",
            "band material": "leather",
            display: "AMOLED"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9320099340",
          price: 375.03,
          options: {
            color: "black",
            "band material": "leather",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["157705128923"],
          item_ids: ["9672174103", "2993891288", "9320099340"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1040.09,
          payment_method_id: "gift_card_3751659"
        }
      ]
    },
    "#W6724985": {
      order_id: "#W6724985",
      user_id: "lei_ahmed_1705",
      address: {
        address1: "125 Cedar Street",
        address2: "Suite 574",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19128"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8895454203",
          price: 504.65,
          options: {
            material: "glass",
            color: "white",
            height: "5 ft"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7533802601",
          price: 48.59,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "green"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 553.24,
          payment_method_id: "credit_card_3593714"
        }
      ]
    },
    "#W2286012": {
      order_id: "#W2286012",
      user_id: "yusuf_garcia_3055",
      address: {
        address1: "794 Park Avenue",
        address2: "Suite 828",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20080"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8098621301",
          price: 192.15,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "rechargeable"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "6455132774",
          price: 273.38,
          options: {
            color: "black",
            "battery life": "20 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "5421902839",
          price: 328.25,
          options: {
            "scent family": "oriental",
            size: "100ml",
            gender: "men"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "7523669277",
          price: 523.66,
          options: {
            resolution: "5K",
            waterproof: "no",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["549986582287"],
          item_ids: ["8098621301", "6455132774", "5421902839", "7523669277"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1317.44,
          payment_method_id: "paypal_7503218"
        }
      ]
    },
    "#W3206099": {
      order_id: "#W3206099",
      user_id: "lucas_muller_4380",
      address: {
        address1: "125 River Road",
        address2: "Suite 131",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78763"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3333391894",
          price: 534.14,
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "fixed"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "3330317167",
          price: 137.32,
          options: {
            color: "black",
            "sensor type": "optical",
            connectivity: "wired"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 671.46,
          payment_method_id: "gift_card_2748512"
        }
      ]
    },
    "#W5061109": {
      order_id: "#W5061109",
      user_id: "chen_johnson_4204",
      address: {
        address1: "503 Elm Avenue",
        address2: "Suite 641",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77004"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "6254646215",
          price: 248.85,
          options: {
            "skin tone": "dark",
            "kit size": "basic",
            brand: "Brand B"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "3694871183",
          price: 256.67,
          options: {
            color: "white",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8323284863",
          price: 511.24,
          options: {
            material: "fabric",
            color: "blue",
            armrest: "adjustable",
            "backrest height": "standard"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "3254583681",
          price: 302.67,
          options: {
            color: "blue",
            "battery life": "20 hours",
            "water resistance": "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1319.43,
          payment_method_id: "paypal_3742148"
        }
      ]
    },
    "#W7752779": {
      order_id: "#W7752779",
      user_id: "isabella_brown_3584",
      address: {
        address1: "881 Elm Avenue",
        address2: "Suite 140",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80257"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4068787148",
          price: 52.01,
          options: {
            pieces: "500",
            theme: "art",
            "difficulty level": "intermediate"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["168643142864"],
          item_ids: ["4068787148"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 52.01,
          payment_method_id: "paypal_2143483"
        }
      ]
    },
    "#W9469249": {
      order_id: "#W9469249",
      user_id: "mason_sanchez_7536",
      address: {
        address1: "737 Elm Avenue",
        address2: "Suite 780",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78213"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "8363011723",
          price: 2823.96,
          options: {
            resolution: "20MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3541421151",
          price: 193.79,
          options: {
            "deck material": "bamboo",
            length: "34 inch",
            design: "graphic"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "4063058357",
          price: 243.34,
          options: {
            color: "black",
            "battery life": "4 hours",
            "water resistance": "not resistant"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "2115393569",
          price: 270.91,
          options: {
            color: "black",
            capacity: "1 cup",
            type: "drip",
            features: "timer"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5930656038",
          price: 142.3,
          options: {
            capacity: "1.5L",
            material: "glass",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["713743776331"],
          item_ids: [
            "8363011723",
            "3541421151",
            "4063058357",
            "2115393569",
            "5930656038"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3674.3,
          payment_method_id: "gift_card_2647591"
        },
        {
          transaction_type: "refund",
          amount: 3674.3,
          payment_method_id: "gift_card_2647591"
        }
      ]
    },
    "#W3282177": {
      order_id: "#W3282177",
      user_id: "harper_johansson_2663",
      address: {
        address1: "490 River Road",
        address2: "Suite 486",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80281"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "9190635437",
          price: 153.23,
          options: {
            color: "black",
            brightness: "low",
            "power source": "USB"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "7791931443",
          price: 195.63,
          options: {
            diameter: "14 inches",
            color: "black",
            type: "analog"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "4764314102",
          price: 96.51,
          options: {
            length: "50ft",
            material: "rubber",
            color: "green"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 445.37,
          payment_method_id: "paypal_4820484"
        }
      ]
    },
    "#W6348442": {
      order_id: "#W6348442",
      user_id: "aarav_sanchez_9729",
      address: {
        address1: "800 Cedar Avenue",
        address2: "Suite 828",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77015"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "2177997696",
          price: 206.6,
          options: {
            "deck material": "plastic",
            length: "28 inch",
            design: "custom"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5645314103",
          price: 46.19,
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "9724317332",
          price: 1042.19,
          options: {
            type: "gas",
            size: "portable",
            features: "side burner"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "7184044281",
          price: 344.55,
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "black"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "7706410293",
          price: 269.16,
          options: {
            "switch type": "clicky",
            backlight: "none",
            size: "full size"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1908.69,
          payment_method_id: "credit_card_2690859"
        }
      ]
    },
    "#W2918688": {
      order_id: "#W2918688",
      user_id: "emma_santos_9753",
      address: {
        address1: "399 Maple Drive",
        address2: "Suite 470",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85039"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "2106335193",
          price: 903.95,
          options: {
            "screen size": "10-inch",
            storage: "64GB",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 903.95,
          payment_method_id: "credit_card_5869505"
        }
      ]
    },
    "#W7170967": {
      order_id: "#W7170967",
      user_id: "mia_sanchez_3401",
      address: {
        address1: "615 Cedar Avenue",
        address2: "Suite 968",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98179"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "5052031638",
          price: 2621.77,
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "16GB",
            storage: "1TB SSD",
            color: "silver"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3778566150",
          price: 2372.97,
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "32GB",
            storage: "256GB SSD",
            color: "silver"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "5635439102",
          price: 353.76,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "blue"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8426249116",
          price: 488.81,
          options: {
            material: "fabric",
            color: "black",
            armrest: "fixed",
            "backrest height": "standard"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "8170914468",
          price: 316.29,
          options: {
            size: "6 ft",
            color: "red",
            material: "olefin",
            "tilt mechanism": "manual tilt"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6153.6,
          payment_method_id: "gift_card_3488934"
        }
      ]
    },
    "#W9288362": {
      order_id: "#W9288362",
      user_id: "noah_wilson_6623",
      address: {
        address1: "163 Elm Street",
        address2: "Suite 714",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43134"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6921939887",
          price: 451.62,
          options: {
            "weight range": "55-75 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "5635439102",
          price: 353.76,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "blue"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["982913391407"],
          item_ids: ["6921939887", "5635439102"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 805.38,
          payment_method_id: "credit_card_3163940"
        }
      ]
    },
    "#W5267498": {
      order_id: "#W5267498",
      user_id: "fatima_li_8519",
      address: {
        address1: "359 Willow Lane",
        address2: "Suite 871",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78282"
      },
      items: [
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "6700049080",
          price: 466.75,
          options: {
            resolution: "4K",
            waterproof: "yes",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 466.75,
          payment_method_id: "gift_card_4220746"
        }
      ]
    },
    "#W1693830": {
      order_id: "#W1693830",
      user_id: "ava_kovacs_8312",
      address: {
        address1: "254 Laurel Lane",
        address2: "Suite 157",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75346"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "7706410293",
          price: 269.16,
          options: {
            "switch type": "clicky",
            backlight: "none",
            size: "full size"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "3614853563",
          price: 46.99,
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "intermediate"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["706798683639"],
          item_ids: ["7706410293", "3614853563"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 316.15,
          payment_method_id: "paypal_3610783"
        },
        {
          transaction_type: "refund",
          amount: 316.15,
          payment_method_id: "paypal_3610783"
        }
      ]
    },
    "#W8516166": {
      order_id: "#W8516166",
      user_id: "omar_johnson_2562",
      address: {
        address1: "912 Elm Street",
        address2: "Suite 173",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32228"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "3360679910",
          price: 195.26,
          options: {
            size: "medium",
            material: "memory foam",
            color: "beige"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5645314103",
          price: 46.19,
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6200867091",
          price: 2955.17,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "capsule"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "8068777068",
          price: 507.13,
          options: {
            "weight range": "5-25 lbs",
            material: "rubber",
            "set type": "fixed"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "9879255677",
          price: 288.82,
          options: {
            size: "6 ft",
            color: "green",
            material: "olefin",
            "tilt mechanism": "auto tilt"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["155383719407"],
          item_ids: [
            "3360679910",
            "5645314103",
            "6200867091",
            "8068777068",
            "9879255677"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3992.57,
          payment_method_id: "paypal_6053880"
        },
        {
          transaction_type: "refund",
          amount: 3992.57,
          payment_method_id: "paypal_6053880"
        }
      ]
    },
    "#W1123136": {
      order_id: "#W1123136",
      user_id: "ava_khan_1840",
      address: {
        address1: "137 Laurel Lane",
        address2: "Suite 525",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94171"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "7535423717",
          price: 904.46,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "silver"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3877188862",
          price: 182.03,
          options: {
            "deck material": "plastic",
            length: "31 inch",
            design: "plain"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "2146648441",
          price: 105.85,
          options: {
            capacity: "10000mAh",
            output: "Wireless",
            color: "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1192.34,
          payment_method_id: "gift_card_7557546"
        }
      ]
    },
    "#W5257743": {
      order_id: "#W5257743",
      user_id: "sofia_ito_5484",
      address: {
        address1: "118 Cedar Street",
        address2: "Suite 461",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19169"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "1657832319",
          price: 2729.32,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "512GB SSD",
            color: "black"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9647292434",
          price: 53.48,
          options: {
            color: "purple",
            size: "S",
            material: "polyester",
            style: "v-neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["298714222776"],
          item_ids: ["1657832319", "9647292434"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2782.8,
          payment_method_id: "paypal_6882355"
        }
      ]
    },
    "#W4306096": {
      order_id: "#W4306096",
      user_id: "daiki_johansson_4856",
      address: {
        address1: "339 Hickory Lane",
        address2: "Suite 945",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46248"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4068787148",
          price: 52.01,
          options: {
            pieces: "500",
            theme: "art",
            "difficulty level": "intermediate"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["137645548995"],
          item_ids: ["4068787148"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 52.01,
          payment_method_id: "paypal_5830506"
        },
        {
          transaction_type: "refund",
          amount: 52.01,
          payment_method_id: "paypal_5830506"
        }
      ]
    },
    "#W5791782": {
      order_id: "#W5791782",
      user_id: "yara_moore_6466",
      address: {
        address1: "485 Lakeview Drive",
        address2: "Suite 839",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92162"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9811090008",
          price: 370.38,
          options: {
            color: "silver",
            "band material": "leather",
            display: "LCD"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6501071631",
          price: 1018.68,
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "gold"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["416000344846"],
          item_ids: ["9811090008", "6501071631"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1389.06,
          payment_method_id: "paypal_3473552"
        }
      ]
    },
    "#W6686344": {
      order_id: "#W6686344",
      user_id: "isabella_smith_8805",
      address: {
        address1: "405 Highland Drive",
        address2: "Suite 395",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19152"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4358482460",
          price: 290.94,
          options: {
            "frame color": "black",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9791469541",
          price: 147.05,
          options: {
            size: "9",
            color: "yellow",
            material: "synthetic",
            sole: "rubber"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["264762225741"],
          item_ids: ["4358482460", "9791469541"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 437.99,
          payment_method_id: "gift_card_5476126"
        }
      ]
    },
    "#W5544629": {
      order_id: "#W5544629",
      user_id: "mia_moore_8366",
      address: {
        address1: "710 Sunset Drive",
        address2: "Suite 303",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19186"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "6735339143",
          price: 471.77,
          options: {
            material: "metal",
            color: "brown",
            height: "6 ft"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "1583904702",
          price: 195.84,
          options: {
            color: "blue",
            "speed settings": "low",
            "battery type": "AA batteries"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["786499816457"],
          item_ids: ["6735339143", "1583904702"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 667.61,
          payment_method_id: "paypal_5181300"
        }
      ]
    },
    "#W5861600": {
      order_id: "#W5861600",
      user_id: "daiki_khan_6856",
      address: {
        address1: "456 Laurel Lane",
        address2: "Suite 904",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28279"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7811981098",
          price: 213.86,
          options: {
            size: "S",
            color: "white",
            ventilation: "medium"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "6805564527",
          price: 158.41,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3232433601",
          price: 204.14,
          options: {
            "deck material": "maple",
            length: "28 inch",
            design: "plain"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "1325156478",
          price: 298.52,
          options: {
            "scent family": "oriental",
            size: "30ml",
            gender: "men"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 874.93,
          payment_method_id: "paypal_8879986"
        }
      ]
    },
    "#W4135875": {
      order_id: "#W4135875",
      user_id: "ava_moore_2033",
      address: {
        address1: "996 Cedar Street",
        address2: "Suite 656",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78234"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "7535423717",
          price: 904.46,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 904.46,
          payment_method_id: "gift_card_8168843"
        }
      ]
    },
    "#W1335809": {
      order_id: "#W1335809",
      user_id: "anya_lee_8315",
      address: {
        address1: "912 Elm Avenue",
        address2: "Suite 936",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78227"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "4875647558",
          price: 2805.77,
          options: {
            pressure: "15 bar",
            capacity: "1L",
            type: "capsule"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2185126308",
          price: 241.9,
          options: {
            size: "10",
            material: "leather",
            waterproof: "no"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "7602931732",
          price: 153.25,
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["465535118094"],
          item_ids: ["4875647558", "2185126308", "7602931732"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3200.92,
          payment_method_id: "paypal_3728317"
        }
      ]
    },
    "#W9958106": {
      order_id: "#W9958106",
      user_id: "evelyn_moore_6558",
      address: {
        address1: "467 Willow Lane",
        address2: "Suite 184",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19019"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "5320792178",
          price: 135.24,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "AC adapter"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["955802738128"],
          item_ids: ["5320792178"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 135.24,
          payment_method_id: "gift_card_6321992"
        }
      ]
    },
    "#W5100317": {
      order_id: "#W5100317",
      user_id: "amelia_rossi_5121",
      address: {
        address1: "602 Willow Lane",
        address2: "Suite 258",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28264"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4803681337",
          price: 962.34,
          options: {
            "screen size": "8-inch",
            storage: "64GB",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["132637124790"],
          item_ids: ["4803681337"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 962.34,
          payment_method_id: "paypal_6844511"
        }
      ]
    },
    "#W1671835": {
      order_id: "#W1671835",
      user_id: "ivan_johnson_6036",
      address: {
        address1: "851 Pine Lane",
        address2: "Suite 428",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76115"
      },
      items: [
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "5081446110",
          price: 322.52,
          options: {
            "scent family": "woody",
            size: "30ml",
            gender: "men"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["820626058356"],
          item_ids: ["5081446110"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 322.52,
          payment_method_id: "paypal_6918118"
        }
      ]
    },
    "#W8661412": {
      order_id: "#W8661412",
      user_id: "emma_kovacs_9839",
      address: {
        address1: "637 Pine Lane",
        address2: "Suite 443",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32190"
      },
      items: [
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "2226219750",
          price: 2009.03,
          options: {
            "strap material": "silicone",
            "dial color": "white"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "3453331371",
          price: 52.79,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8426249116",
          price: 488.81,
          options: {
            material: "fabric",
            color: "black",
            armrest: "fixed",
            "backrest height": "standard"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2550.63,
          payment_method_id: "credit_card_7239357"
        }
      ]
    },
    "#W3197825": {
      order_id: "#W3197825",
      user_id: "ava_smith_1453",
      address: {
        address1: "121 River Road",
        address2: "Suite 510",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80227"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "7867398203",
          price: 232.7,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "60%"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["649807814716"],
          item_ids: ["7867398203"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 232.7,
          payment_method_id: "credit_card_6291943"
        }
      ]
    },
    "#W6599568": {
      order_id: "#W6599568",
      user_id: "sofia_li_8235",
      address: {
        address1: "430 Cedar Street",
        address2: "Suite 288",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75390"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2499294441",
          price: 258.36,
          options: {
            color: "black",
            "battery life": "8 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6401214406",
          price: 187.02,
          options: {
            size: "M",
            color: "red",
            ventilation: "low"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "1052700637",
          price: 285.81,
          options: {
            color: "red",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 731.19,
          payment_method_id: "gift_card_3242199"
        }
      ]
    },
    "#W7992925": {
      order_id: "#W7992925",
      user_id: "sofia_ito_5484",
      address: {
        address1: "589 Hickory Lane",
        address2: "Suite 955",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92150"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4358482460",
          price: 290.94,
          options: {
            "frame color": "black",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["715911584249"],
          item_ids: ["4358482460"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 290.94,
          payment_method_id: "paypal_6882355"
        }
      ]
    },
    "#W8587412": {
      order_id: "#W8587412",
      user_id: "ava_sanchez_8588",
      address: {
        address1: "774 Chestnut Street",
        address2: "Suite 597",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32223"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9747045638",
          price: 94.01,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "electric"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["647300846669"],
          item_ids: ["9747045638"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 94.01,
          payment_method_id: "credit_card_6044650"
        }
      ]
    },
    "#W2417020": {
      order_id: "#W2417020",
      user_id: "emma_smith_8564",
      address: {
        address1: "243 Hillcrest Drive",
        address2: "Suite 113",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10192"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "8997785118",
          price: 2674.4,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2674.4,
          payment_method_id: "gift_card_8541487"
        }
      ]
    },
    "#W8160318": {
      order_id: "#W8160318",
      user_id: "emma_santos_9753",
      address: {
        address1: "463 Pine Lane",
        address2: "Suite 570",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78228"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7381052709",
          price: 193.22,
          options: {
            size: "large",
            material: "memory foam",
            color: "brown"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9025753381",
          price: 231.58,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "full size"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["825383262208"],
          item_ids: ["7381052709", "9025753381"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 424.8,
          payment_method_id: "gift_card_6023546"
        }
      ]
    },
    "#W5801125": {
      order_id: "#W5801125",
      user_id: "ivan_santos_7021",
      address: {
        address1: "847 River Road",
        address2: "Suite 431",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10264"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9647374798",
          price: 109.58,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "gas"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 109.58,
          payment_method_id: "paypal_5543657"
        }
      ]
    },
    "#W2297866": {
      order_id: "#W2297866",
      user_id: "sofia_thomas_1518",
      address: {
        address1: "529 Cedar Avenue",
        address2: "Suite 371",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75307"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "7407609582",
          price: 602.48,
          options: {
            type: "upright",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "8140269513",
          price: 528.12,
          options: {
            "weight range": "55-75 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1130.6,
          payment_method_id: "paypal_5334408"
        }
      ]
    },
    "#W4072946": {
      order_id: "#W4072946",
      user_id: "lei_anderson_8271",
      address: {
        address1: "420 Elm Street",
        address2: "Suite 609",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91395"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8106223139",
          price: 249.12,
          options: {
            size: "9",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "5436236388",
          price: 538.6,
          options: {
            resolution: "1080p",
            waterproof: "yes",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["761805490977"],
          item_ids: ["8106223139", "5436236388"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 787.72,
          payment_method_id: "paypal_1808675"
        }
      ]
    },
    "#W3381155": {
      order_id: "#W3381155",
      user_id: "chen_brown_8075",
      address: {
        address1: "945 Hickory Lane",
        address2: "Suite 262",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95190"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "9270970345",
          price: 259.03,
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "not resistant"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 259.03,
          payment_method_id: "gift_card_7497429"
        }
      ]
    },
    "#W4219264": {
      order_id: "#W4219264",
      user_id: "noah_ito_3850",
      address: {
        address1: "619 Broadway",
        address2: "Suite 484",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98187"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "7869640094",
          price: 47.59,
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "expert"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "8886009523",
          price: 1944.02,
          options: {
            "strap material": "silicone",
            "dial color": "blue"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "9112290483",
          price: 1925.16,
          options: {
            "strap material": "metal",
            "dial color": "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3916.77,
          payment_method_id: "credit_card_1620755"
        }
      ]
    },
    "#W5763385": {
      order_id: "#W5763385",
      user_id: "yusuf_garcia_5427",
      address: {
        address1: "370 Maple Drive",
        address2: "Suite 371",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10155"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5537798301",
          price: 204.47,
          options: {
            size: "S",
            color: "black",
            ventilation: "medium"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6242772310",
          price: 2996.03,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "automatic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["195335220751"],
          item_ids: ["5537798301", "6242772310"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3200.5,
          payment_method_id: "gift_card_6337815"
        }
      ]
    },
    "#W8360923": {
      order_id: "#W8360923",
      user_id: "harper_garcia_5438",
      address: {
        address1: "596 Cedar Avenue",
        address2: "Suite 778",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75226"
      },
      items: [
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "9956648681",
          price: 452.62,
          options: {
            "piece count": "4-piece",
            color: "red",
            material: "hardshell"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "1133777903",
          price: 359.66,
          options: {
            type: "in-ear",
            connectivity: "wired",
            color: "red"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "2872451762",
          price: 622.12,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1434.4,
          payment_method_id: "credit_card_2369458"
        }
      ]
    },
    "#W9994227": {
      order_id: "#W9994227",
      user_id: "yara_johansson_1629",
      address: {
        address1: "748 Hillcrest Drive",
        address2: "Suite 504",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76114"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5886093635",
          price: 208.04,
          options: {
            size: "S",
            color: "blue",
            ventilation: "low"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["901483187157"],
          item_ids: ["5886093635"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 208.04,
          payment_method_id: "credit_card_4582364"
        }
      ]
    },
    "#W4680317": {
      order_id: "#W4680317",
      user_id: "daiki_johansson_4856",
      address: {
        address1: "339 Hickory Lane",
        address2: "Suite 945",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46248"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "6942241102",
          price: 180.93,
          options: {
            size: "large",
            material: "memory foam",
            color: "beige"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7917269097",
          price: 184.25,
          options: {
            size: "large",
            material: "polyester",
            color: "grey"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "5635439102",
          price: 353.76,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "blue"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["336816019299"],
          item_ids: ["6942241102", "7917269097", "5635439102"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 718.94,
          payment_method_id: "paypal_5830506"
        }
      ]
    },
    "#W2259015": {
      order_id: "#W2259015",
      user_id: "daiki_kovacs_2546",
      address: {
        address1: "191 Pine Lane",
        address2: "Suite 243",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43196"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "3876764226",
          price: 981.47,
          options: {
            type: "electric",
            size: "portable",
            features: "side burner"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2244749153",
          price: 473.82,
          options: {
            material: "wood",
            color: "brown",
            height: "5 ft"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "9850781806",
          price: 184.48,
          options: {
            diameter: "14 inches",
            color: "white",
            type: "digital"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3761330360",
          price: 101.12,
          options: {
            material: "ceramic",
            capacity: "2 liters",
            "stovetop compatibility": "gas"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["328985105001"],
          item_ids: ["3876764226", "2244749153", "9850781806", "3761330360"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1740.89,
          payment_method_id: "paypal_9103096"
        }
      ]
    },
    "#W7594624": {
      order_id: "#W7594624",
      user_id: "noah_martin_5764",
      address: {
        address1: "660 Maple Drive",
        address2: "Suite 853",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43090"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "7407609582",
          price: 602.48,
          options: {
            type: "upright",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8349118980",
          price: 53.43,
          options: {
            color: "blue",
            size: "S",
            material: "cotton",
            style: "v-neck"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2216662955",
          price: 2520.52,
          options: {
            "screen size": "15-inch",
            processor: "i5",
            ram: "32GB",
            storage: "256GB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3176.43,
          payment_method_id: "paypal_7383471"
        }
      ]
    },
    "#W5697187": {
      order_id: "#W5697187",
      user_id: "raj_kim_8554",
      address: {
        address1: "312 Chestnut Street",
        address2: "Suite 305",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32145"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "5676696062",
          price: 245.99,
          options: {
            size: "11",
            material: "leather",
            waterproof: "no"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "6164262152",
          price: 211.11,
          options: {
            color: "white",
            "speed settings": "low",
            "battery type": "rechargeable"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8479046075",
          price: 451.01,
          options: {
            material: "wood",
            color: "white",
            height: "5 ft"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7401244629",
          price: 188.92,
          options: {
            size: "L",
            color: "red",
            ventilation: "high"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "9805150490",
          price: 368.87,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["391016046298"],
          item_ids: [
            "5676696062",
            "6164262152",
            "8479046075",
            "7401244629",
            "9805150490"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1465.9,
          payment_method_id: "credit_card_4591662"
        }
      ]
    },
    "#W7387996": {
      order_id: "#W7387996",
      user_id: "mia_garcia_4516",
      address: {
        address1: "537 Main Street",
        address2: "Suite 572",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46229"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "5796612084",
          price: 158.89,
          options: {
            color: "RGB",
            "sensor type": "optical",
            connectivity: "wired"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["200246490130"],
          item_ids: ["5796612084"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 158.89,
          payment_method_id: "paypal_9497703"
        }
      ]
    },
    "#W2273457": {
      order_id: "#W2273457",
      user_id: "emma_kovacs_9839",
      address: {
        address1: "637 Pine Lane",
        address2: "Suite 443",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32190"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "7602931732",
          price: 153.25,
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "1859994221",
          price: 182.85,
          options: {
            diameter: "10 inches",
            color: "black",
            type: "analog"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8106223139",
          price: 249.12,
          options: {
            size: "9",
            material: "leather",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["764172870638"],
          item_ids: ["7602931732", "1859994221", "8106223139"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 585.22,
          payment_method_id: "credit_card_7239357"
        },
        {
          transaction_type: "refund",
          amount: 585.22,
          payment_method_id: "credit_card_7239357"
        }
      ]
    },
    "#W5432440": {
      order_id: "#W5432440",
      user_id: "emma_martin_6993",
      address: {
        address1: "727 Sunset Drive",
        address2: "Suite 930",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78750"
      },
      items: [
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8590708195",
          price: 157.61,
          options: {
            size: "XL",
            color: "navy",
            zipper: "half"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9354168549",
          price: 46.85,
          options: {
            color: "red",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "1631373418",
          price: 1291.21,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "6GB",
            "screen size": "6.1-inch"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "5012998807",
          price: 258.71,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand B"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "8349903180",
          price: 102.07,
          options: {
            capacity: "20000mAh",
            output: "Wireless",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1856.45,
          payment_method_id: "gift_card_4129829"
        }
      ]
    },
    "#W9324386": {
      order_id: "#W9324386",
      user_id: "amelia_nguyen_5209",
      address: {
        address1: "265 Highland Drive",
        address2: "Suite 897",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78716"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6501071631",
          price: 1018.68,
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "gold"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "7160999700",
          price: 499.29,
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "softshell"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "4202497723",
          price: 342.81,
          options: {
            type: "over-ear",
            connectivity: "wireless",
            color: "blue"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["975373154811"],
          item_ids: ["6501071631", "7160999700", "4202497723"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1860.78,
          payment_method_id: "credit_card_1413281"
        }
      ]
    },
    "#W7775097": {
      order_id: "#W7775097",
      user_id: "harper_kovacs_7861",
      address: {
        address1: "362 Broadway",
        address2: "Suite 219",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94145"
      },
      items: [
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "2407258246",
          price: 1822.82,
          options: {
            "strap material": "metal",
            "dial color": "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1822.82,
          payment_method_id: "paypal_3246095"
        }
      ]
    },
    "#W1205816": {
      order_id: "#W1205816",
      user_id: "mia_jackson_2250",
      address: {
        address1: "816 Spruce Street",
        address2: "Suite 114",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46227"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "4947717507",
          price: 218.04,
          options: {
            color: "green",
            size: "medium",
            material: "leather",
            compartment: "camera"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3312883418",
          price: 104.82,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5537798301",
          price: 204.47,
          options: {
            size: "S",
            color: "black",
            ventilation: "medium"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "1646531091",
          price: 232.49,
          options: {
            color: "blue",
            "battery life": "6 hours",
            "water resistance": "IPX4"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 759.82,
          payment_method_id: "paypal_2031016"
        }
      ]
    },
    "#W6447372": {
      order_id: "#W6447372",
      user_id: "sophia_garcia_5795",
      address: {
        address1: "536 Cedar Street",
        address2: "Suite 916",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28212"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "6439196450",
          price: 254.56,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "60%"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "2509076505",
          price: 189.5,
          options: {
            size: "10",
            color: "gray",
            material: "leather"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2768401027",
          price: 2346.49,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "silver"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "5484530610",
          price: 3109.83,
          options: {
            resolution: "24MP",
            zoom: "10x",
            storage: "CF card"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "8470360507",
          price: 291.31,
          options: {
            resolution: "2K",
            "field of view": "130 degrees",
            connectivity: "Ethernet"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6191.69,
          payment_method_id: "credit_card_9467292"
        }
      ]
    },
    "#W7990410": {
      order_id: "#W7990410",
      user_id: "fatima_wilson_6873",
      address: {
        address1: "724 Maple Drive",
        address2: "Suite 271",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90280"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "1240311797",
          price: 137.17,
          options: {
            capacity: "1L",
            material: "glass",
            color: "silver"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "5635439102",
          price: 353.76,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "blue"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2989722512",
          price: 455.34,
          options: {
            material: "glass",
            color: "white",
            height: "3 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["144258488237"],
          item_ids: ["1240311797", "5635439102", "2989722512"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 946.27,
          payment_method_id: "paypal_7685859"
        }
      ]
    },
    "#W8578646": {
      order_id: "#W8578646",
      user_id: "amelia_silva_5103",
      address: {
        address1: "984 Broadway",
        address2: "Suite 638",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95109"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2913673670",
          price: 2701.89,
          options: {
            "screen size": "15-inch",
            processor: "i9",
            ram: "32GB",
            storage: "512GB SSD",
            color: "black"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6956751343",
          price: 217.06,
          options: {
            "deck material": "bamboo",
            length: "34 inch",
            design: "custom"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "2751999929",
          price: 195.11,
          options: {
            size: "large",
            material: "memory foam",
            color: "grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["278449100063"],
          item_ids: ["2913673670", "6956751343", "2751999929"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3114.06,
          payment_method_id: "paypal_5716091"
        },
        {
          transaction_type: "refund",
          amount: 3114.06,
          payment_method_id: "paypal_5716091"
        }
      ]
    },
    "#W9810810": {
      order_id: "#W9810810",
      user_id: "yara_silva_7567",
      address: {
        address1: "116 Laurel Lane",
        address2: "Suite 319",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77159"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2698416822",
          price: 149.45,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "white"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1355937109",
          price: 1985.3,
          options: {
            "strap material": "leather",
            "dial color": "white"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "3778705663",
          price: 473.48,
          options: {
            material: "metal",
            color: "black",
            height: "6 ft"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2608.23,
          payment_method_id: "gift_card_7252880"
        }
      ]
    },
    "#W1508165": {
      order_id: "#W1508165",
      user_id: "evelyn_gonzalez_8876",
      address: {
        address1: "350 River Road",
        address2: "Suite 544",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19186"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "4537595158",
          price: 193.79,
          options: {
            size: "small",
            material: "fleece",
            color: "brown"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2554056026",
          price: 367.38,
          options: {
            color: "gold",
            "band material": "metal",
            display: "AMOLED"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "3399869890",
          price: 312.04,
          options: {
            "scent family": "woody",
            size: "100ml",
            gender: "men"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["295796917630"],
          item_ids: ["4537595158", "2554056026", "3399869890"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 873.21,
          payment_method_id: "paypal_4191414"
        },
        {
          transaction_type: "refund",
          amount: 873.21,
          payment_method_id: "paypal_4191414"
        }
      ]
    },
    "#W2806889": {
      order_id: "#W2806889",
      user_id: "yusuf_gonzalez_8900",
      address: {
        address1: "285 Lakeview Drive",
        address2: "Suite 657",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91455"
      },
      items: [
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5339029584",
          price: 1128.99,
          options: {
            color: "black",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "6.5-inch"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7497340597",
          price: 100.83,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "gas"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1229.82,
          payment_method_id: "credit_card_7918119"
        }
      ]
    },
    "#W1298962": {
      order_id: "#W1298962",
      user_id: "mia_jackson_5377",
      address: {
        address1: "489 Cedar Avenue",
        address2: "Suite 877",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19044"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "5796612084",
          price: 158.89,
          options: {
            color: "RGB",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1437889264",
          price: 258.09,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 416.98,
          payment_method_id: "paypal_1231496"
        }
      ]
    },
    "#W9673784": {
      order_id: "#W9673784",
      user_id: "omar_silva_7446",
      address: {
        address1: "510 Hickory Lane",
        address2: "Suite 712",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92107"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8124970213",
          price: 49.67,
          options: {
            color: "purple",
            size: "XL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9811090008",
          price: 370.38,
          options: {
            color: "silver",
            "band material": "leather",
            display: "LCD"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "9884666842",
          price: 2794.7,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "manual"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3214.75,
          payment_method_id: "gift_card_5540683"
        }
      ]
    },
    "#W5703958": {
      order_id: "#W5703958",
      user_id: "harper_moore_6183",
      address: {
        address1: "419 Maple Drive",
        address2: "Suite 178",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75212"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "7127170374",
          price: 52.03,
          options: {
            pieces: "2000",
            theme: "fantasy",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "7187199153",
          price: 983.62,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "8142779083",
          price: 157.53,
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "silver"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "4821837102",
          price: 243.59,
          options: {
            color: "white",
            capacity: "4 cups",
            type: "french press",
            features: "built-in grinder"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "2439754078",
          price: 49.51,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "red"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["787311035718"],
          item_ids: [
            "7127170374",
            "7187199153",
            "8142779083",
            "4821837102",
            "2439754078"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1486.28,
          payment_method_id: "gift_card_5757768"
        }
      ]
    },
    "#W3947049": {
      order_id: "#W3947049",
      user_id: "sofia_hernandez_5364",
      address: {
        address1: "652 Laurel Lane",
        address2: "Suite 398",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98193"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3358616356",
          price: 197.33,
          options: {
            size: "S",
            color: "red",
            ventilation: "low"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["758823963547"],
          item_ids: ["3358616356"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 197.33,
          payment_method_id: "credit_card_7901829"
        }
      ]
    },
    "#W4680753": {
      order_id: "#W4680753",
      user_id: "raj_santos_9079",
      address: {
        address1: "863 Lakeview Drive",
        address2: "Suite 424",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98157"
      },
      items: [
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8590708195",
          price: 157.61,
          options: {
            size: "XL",
            color: "navy",
            zipper: "half"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9690244451",
          price: 236.51,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "60%"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "4859937227",
          price: 503.58,
          options: {
            resolution: "5K",
            waterproof: "no",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["958035507715"],
          item_ids: ["8590708195", "9690244451", "4859937227"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 897.7,
          payment_method_id: "paypal_2417743"
        }
      ]
    },
    "#W6811468": {
      order_id: "#W6811468",
      user_id: "olivia_hernandez_5066",
      address: {
        address1: "537 Cedar Avenue",
        address2: "Suite 212",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20395"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "9045948550",
          price: 279.78,
          options: {
            "frame color": "black",
            "lens color": "blue",
            "lens type": "polarized",
            "frame material": "metal"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "6509212169",
          price: 256.14,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand A"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 535.92,
          payment_method_id: "credit_card_2583849"
        }
      ]
    },
    "#W4923227": {
      order_id: "#W4923227",
      user_id: "isabella_lopez_6490",
      address: {
        address1: "710 Sunset Drive",
        address2: "Suite 176",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85034"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7751905257",
          price: 321.18,
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 321.18,
          payment_method_id: "credit_card_8554680"
        }
      ]
    },
    "#W5481803": {
      order_id: "#W5481803",
      user_id: "olivia_lopez_3865",
      address: {
        address1: "310 Laurel Lane",
        address2: "Suite 480",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76171"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9472539378",
          price: 143.72,
          options: {
            capacity: "1.5L",
            material: "glass",
            color: "white"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "3613716226",
          price: 253.54,
          options: {
            size: "8",
            material: "synthetic",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 397.26,
          payment_method_id: "gift_card_7711863"
        }
      ]
    },
    "#W9291999": {
      order_id: "#W9291999",
      user_id: "isabella_lopez_5733",
      address: {
        address1: "500 River Road",
        address2: "Suite 209",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98127"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6017636844",
          price: 2292.37,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["561519562350"],
          item_ids: ["6017636844"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2292.37,
          payment_method_id: "paypal_5789912"
        }
      ]
    },
    "#W5777276": {
      order_id: "#W5777276",
      user_id: "sophia_garcia_5025",
      address: {
        address1: "340 Hickory Lane",
        address2: "Suite 209",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77173"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "2106335193",
          price: 903.95,
          options: {
            "screen size": "10-inch",
            storage: "64GB",
            color: "silver"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7154215719",
          price: 505.62,
          options: {
            material: "wood",
            color: "brown",
            height: "6 ft"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "7579176349",
          price: 29.28,
          options: {
            size: "A4",
            "cover type": "soft cover"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["729280083340"],
          item_ids: ["2106335193", "7154215719", "7579176349"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1438.85,
          payment_method_id: "credit_card_4147840"
        }
      ]
    },
    "#W6783532": {
      order_id: "#W6783532",
      user_id: "isabella_johansson_7408",
      address: {
        address1: "289 Willow Lane",
        address2: "Suite 172",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60625"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "9884666842",
          price: 2794.7,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "manual"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7736359414",
          price: 253.08,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand C"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7729002517",
          price: 193,
          options: {
            size: "large",
            material: "polyester",
            color: "brown"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2757705742",
          price: 258.97,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3499.75,
          payment_method_id: "paypal_8540436"
        }
      ]
    },
    "#W7398274": {
      order_id: "#W7398274",
      user_id: "evelyn_kovacs_6742",
      address: {
        address1: "505 Cedar Avenue",
        address2: "Suite 539",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32117"
      },
      items: [
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1355937109",
          price: 1985.3,
          options: {
            "strap material": "leather",
            "dial color": "white"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "5694328282",
          price: 323.19,
          options: {
            color: "gold",
            "band material": "leather",
            display: "AMOLED"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "1199058591",
          price: 32.29,
          options: {
            size: "A4",
            "cover type": "hard cover"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "1631373418",
          price: 1291.21,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "6GB",
            "screen size": "6.1-inch"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "1646531091",
          price: 232.49,
          options: {
            color: "blue",
            "battery life": "6 hours",
            "water resistance": "IPX4"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3864.48,
          payment_method_id: "paypal_7732922"
        }
      ]
    },
    "#W7860975": {
      order_id: "#W7860975",
      user_id: "yara_hernandez_3670",
      address: {
        address1: "804 Willow Lane",
        address2: "Suite 167",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32121"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "1673859111",
          price: 484.96,
          options: {
            material: "wood",
            color: "black",
            height: "4 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["471257177438"],
          item_ids: ["1673859111"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 484.96,
          payment_method_id: "credit_card_5528301"
        }
      ]
    },
    "#W5809689": {
      order_id: "#W5809689",
      user_id: "emma_nguyen_5878",
      address: {
        address1: "263 Laurel Lane",
        address2: "Suite 144",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94128"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3312883418",
          price: 104.82,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 104.82,
          payment_method_id: "credit_card_1392586"
        }
      ]
    },
    "#W6629830": {
      order_id: "#W6629830",
      user_id: "harper_santos_8115",
      address: {
        address1: "916 Maple Drive",
        address2: "Suite 264",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28257"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "2645006275",
          price: 183.11,
          options: {
            color: "white",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "6826843914",
          price: 326.74,
          options: {
            "scent family": "fresh",
            size: "100ml",
            gender: "men"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "2751999929",
          price: 195.11,
          options: {
            size: "large",
            material: "memory foam",
            color: "grey"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7583936705",
          price: 3101.43,
          options: {
            resolution: "20MP",
            zoom: "10x",
            storage: "CF card"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6508153405",
          price: 191.55,
          options: {
            diameter: "12 inches",
            color: "white",
            type: "analog"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3997.94,
          payment_method_id: "paypal_2870241"
        }
      ]
    },
    "#W6344370": {
      order_id: "#W6344370",
      user_id: "ava_kovacs_3448",
      address: {
        address1: "993 Laurel Lane",
        address2: "Suite 185",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85052"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "4545791457",
          price: 186.06,
          options: {
            "deck material": "plastic",
            length: "28 inch",
            design: "plain"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["937419321160"],
          item_ids: ["4545791457"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 186.06,
          payment_method_id: "credit_card_9699699"
        }
      ]
    },
    "#W5199551": {
      order_id: "#W5199551",
      user_id: "fatima_johnson_7581",
      address: {
        address1: "123 Elm Street",
        address2: "Suite 640",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78712"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1615379700",
          price: 253.89,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "5925362855",
          price: 503.51,
          options: {
            resolution: "1080p",
            waterproof: "yes",
            color: "black"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9472539378",
          price: 143.72,
          options: {
            capacity: "1.5L",
            material: "glass",
            color: "white"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5537798301",
          price: 204.47,
          options: {
            size: "S",
            color: "black",
            ventilation: "medium"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1994478369",
          price: 2025.51,
          options: {
            "strap material": "silicone",
            "dial color": "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3131.1,
          payment_method_id: "paypal_5364164"
        }
      ]
    },
    "#W3431083": {
      order_id: "#W3431083",
      user_id: "isabella_johnson_6293",
      address: {
        address1: "860 Pine Lane",
        address2: "Suite 276",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80236"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "6309044598",
          price: 218.59,
          options: {
            color: "grey",
            size: "large",
            material: "polyester",
            compartment: "hydration"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "3694871183",
          price: 256.67,
          options: {
            color: "white",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["316292294598"],
          item_ids: ["6309044598", "3694871183"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 475.26,
          payment_method_id: "paypal_5071744"
        }
      ]
    },
    "#W2491829": {
      order_id: "#W2491829",
      user_id: "mei_li_2872",
      address: {
        address1: "121 Main Street",
        address2: "Suite 575",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92149"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2052249669",
          price: 237.14,
          options: {
            color: "white",
            "battery life": "4 hours",
            "water resistance": "not resistant"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "3187628796",
          price: 1205.66,
          options: {
            color: "rose gold",
            storage: "128GB",
            RAM: "8GB",
            "screen size": "6.1-inch"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "3909704820",
          price: 308.38,
          options: {
            resolution: "4K",
            "field of view": "110 degrees",
            connectivity: "Ethernet"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["548387619586"],
          item_ids: ["2052249669", "3187628796", "3909704820"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1751.18,
          payment_method_id: "paypal_4060450"
        }
      ]
    },
    "#W5791505": {
      order_id: "#W5791505",
      user_id: "noah_wilson_6623",
      address: {
        address1: "163 Elm Street",
        address2: "Suite 714",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43134"
      },
      items: [
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "6574183535",
          price: 28.14,
          options: {
            size: "A6",
            "cover type": "hard cover"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "3019027053",
          price: 553.03,
          options: {
            type: "upright",
            "bagged/bagless": "bagless",
            features: "cordless"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "6454334990",
          price: 98.82,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "4716977452",
          price: 289.69,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "3320557165",
          price: 188.67,
          options: {
            color: "blue",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["869715994667"],
          item_ids: [
            "6574183535",
            "3019027053",
            "6454334990",
            "4716977452",
            "3320557165"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1158.35,
          payment_method_id: "credit_card_3163940"
        }
      ]
    },
    "#W6794581": {
      order_id: "#W6794581",
      user_id: "liam_santos_5468",
      address: {
        address1: "410 Maple Drive",
        address2: "Suite 720",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60601"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1719127154",
          price: 206.26,
          options: {
            size: "M",
            color: "red",
            ventilation: "medium"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "1906487464",
          price: 102.02,
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "induction"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 308.28,
          payment_method_id: "credit_card_1055108"
        }
      ]
    },
    "#W4082615": {
      order_id: "#W4082615",
      user_id: "mei_patel_7272",
      address: {
        address1: "443 Maple Drive",
        address2: "Suite 394",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76165"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9779102705",
          price: 54.11,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "5917587651",
          price: 212.79,
          options: {
            color: "grey",
            size: "medium",
            material: "polyester",
            compartment: "laptop"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "3876764226",
          price: 981.47,
          options: {
            type: "electric",
            size: "portable",
            features: "side burner"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "8316205423",
          price: 288.75,
          options: {
            "scent family": "woody",
            size: "30ml",
            gender: "women"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2540052208",
          price: 346.42,
          options: {
            color: "gold",
            "band material": "silicone",
            display: "LCD"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1883.54,
          payment_method_id: "paypal_4768213"
        }
      ]
    },
    "#W9152938": {
      order_id: "#W9152938",
      user_id: "emma_rossi_2839",
      address: {
        address1: "662 Laurel Lane",
        address2: "Suite 917",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43289"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "8551474201",
          price: 938.92,
          options: {
            "screen size": "8-inch",
            storage: "64GB",
            color: "silver"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5312063289",
          price: 195.15,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "graphic"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4572024853",
          price: 53.72,
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1187.79,
          payment_method_id: "paypal_3824028"
        }
      ]
    },
    "#W4683557": {
      order_id: "#W4683557",
      user_id: "ethan_muller_6097",
      address: {
        address1: "897 Cedar Avenue",
        address2: "Suite 320",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80206"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7533802601",
          price: 48.59,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "green"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "3526747930",
          price: 540.12,
          options: {
            type: "upright",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9747045638",
          price: 94.01,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3951031513",
          price: 3289.46,
          options: {
            pressure: "19 bar",
            capacity: "1.5L",
            type: "automatic"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6508153405",
          price: 191.55,
          options: {
            diameter: "12 inches",
            color: "white",
            type: "analog"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4163.73,
          payment_method_id: "credit_card_5721095"
        }
      ]
    },
    "#W8271804": {
      order_id: "#W8271804",
      user_id: "juan_smith_9901",
      address: {
        address1: "127 Oak Street",
        address2: "Suite 727",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78770"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "1071497737",
          price: 483.95,
          options: {
            material: "leather",
            color: "gray",
            armrest: "fixed",
            "backrest height": "high-back"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6690069155",
          price: 466.47,
          options: {
            "piece count": "3-piece",
            color: "silver",
            material: "softshell"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7843064651",
          price: 50.14,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "blue"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["314012657547"],
          item_ids: ["1071497737", "6690069155", "7843064651"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1000.56,
          payment_method_id: "gift_card_9106672"
        },
        {
          transaction_type: "refund",
          amount: 1000.56,
          payment_method_id: "gift_card_9106672"
        }
      ]
    },
    "#W6729841": {
      order_id: "#W6729841",
      user_id: "noah_ito_3850",
      address: {
        address1: "619 Broadway",
        address2: "Suite 484",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98187"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5855700373",
          price: 293.46,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "3076708684",
          price: 535.97,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "quiet operation"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 829.43,
          payment_method_id: "credit_card_1620755"
        }
      ]
    },
    "#W7181492": {
      order_id: "#W7181492",
      user_id: "isabella_johansson_2152",
      address: {
        address1: "313 Chestnut Street",
        address2: "Suite 537",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32286"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5753502325",
          price: 96.35,
          options: {
            length: "25ft",
            material: "rubber",
            color: "green"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "9851293632",
          price: 193.38,
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "camera"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "3778705663",
          price: 473.48,
          options: {
            material: "metal",
            color: "black",
            height: "6 ft"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8118291112",
          price: 260.56,
          options: {
            size: "12",
            material: "leather",
            waterproof: "no"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "3020722515",
          price: 238.64,
          options: {
            color: "black",
            capacity: "1 cup",
            type: "french press",
            features: "auto shutoff"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["418708581751"],
          item_ids: [
            "5753502325",
            "9851293632",
            "3778705663",
            "8118291112",
            "3020722515"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1262.41,
          payment_method_id: "paypal_3024827"
        }
      ]
    },
    "#W5073920": {
      order_id: "#W5073920",
      user_id: "lucas_johansson_1090",
      address: {
        address1: "813 Oak Street",
        address2: "Suite 412",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94147"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2648909398",
          price: 240.87,
          options: {
            size: "8",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "7824298782",
          price: 200.38,
          options: {
            color: "black",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9237024510",
          price: 53.53,
          options: {
            pieces: "500",
            theme: "animals",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 494.78,
          payment_method_id: "credit_card_1814983"
        }
      ]
    },
    "#W8535951": {
      order_id: "#W8535951",
      user_id: "sofia_rossi_8776",
      address: {
        address1: "291 River Road",
        address2: "Suite 271",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78784"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1304426904",
          price: 565.79,
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["303465075312"],
          item_ids: ["1304426904"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 565.79,
          payment_method_id: "credit_card_5051208"
        }
      ]
    },
    "#W7764382": {
      order_id: "#W7764382",
      user_id: "ethan_thomas_1791",
      address: {
        address1: "233 Lakeview Drive",
        address2: "Suite 282",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60610"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "5067898160",
          price: 209.95,
          options: {
            size: "medium",
            material: "memory foam",
            color: "brown"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9665000388",
          price: 269.46,
          options: {
            "switch type": "clicky",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "3909704820",
          price: 308.38,
          options: {
            resolution: "4K",
            "field of view": "110 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3334537816",
          price: 2749.56,
          options: {
            "screen size": "17-inch",
            processor: "i5",
            ram: "8GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["850311041220"],
          item_ids: ["5067898160", "9665000388", "3909704820", "3334537816"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3537.35,
          payment_method_id: "paypal_6982172"
        }
      ]
    },
    "#W4614740": {
      order_id: "#W4614740",
      user_id: "sophia_hernandez_2054",
      address: {
        address1: "121 Broadway",
        address2: "Suite 615",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76105"
      },
      items: [
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "9112290483",
          price: 1925.16,
          options: {
            "strap material": "metal",
            "dial color": "blue"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "7160999700",
          price: 499.29,
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "softshell"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "8551474201",
          price: 938.92,
          options: {
            "screen size": "8-inch",
            storage: "64GB",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3363.37,
          payment_method_id: "gift_card_1139567"
        }
      ]
    },
    "#W4642822": {
      order_id: "#W4642822",
      user_id: "ethan_santos_6104",
      address: {
        address1: "654 Spruce Street",
        address2: "Suite 503",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80278"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "2405281423",
          price: 204.09,
          options: {
            size: "medium",
            material: "polyester",
            color: "grey"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "8896479688",
          price: 143.15,
          options: {
            color: "white",
            "sensor type": "optical",
            connectivity: "wireless"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3609437808",
          price: 466.44,
          options: {
            material: "leather",
            color: "red",
            armrest: "none",
            "backrest height": "high-back"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 813.68,
          payment_method_id: "credit_card_9784468"
        }
      ]
    },
    "#W7390432": {
      order_id: "#W7390432",
      user_id: "mohamed_khan_3010",
      address: {
        address1: "633 Hillcrest Drive",
        address2: "Suite 728",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94132"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2499294441",
          price: 258.36,
          options: {
            color: "black",
            "battery life": "8 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "2645006275",
          price: 183.11,
          options: {
            color: "white",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 441.47,
          payment_method_id: "paypal_1249653"
        }
      ]
    },
    "#W8665881": {
      order_id: "#W8665881",
      user_id: "fatima_johnson_7581",
      address: {
        address1: "123 Elm Street",
        address2: "Suite 640",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78712"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5855700373",
          price: 293.46,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9408160950",
          price: 381.26,
          options: {
            color: "gold",
            "band material": "leather",
            display: "LCD"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "4422467033",
          price: 483.47,
          options: {
            "weight range": "30-50 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "1157853815",
          price: 3096.7,
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "capsule"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "8725040869",
          price: 522.86,
          options: {
            resolution: "4K",
            waterproof: "no",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4777.75,
          payment_method_id: "paypal_5364164"
        }
      ]
    },
    "#W4941028": {
      order_id: "#W4941028",
      user_id: "harper_santos_8115",
      address: {
        address1: "195 Oak Street",
        address2: "Suite 791",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46237"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4548300368",
          price: 287.79,
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3265035808",
          price: 2530.72,
          options: {
            "screen size": "17-inch",
            processor: "i9",
            ram: "8GB",
            storage: "256GB SSD",
            color: "silver"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "9480266227",
          price: 255.98,
          options: {
            compatibility: "Apple HomeKit",
            color: "stainless steel"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9228757377",
          price: 3066.23,
          options: {
            resolution: "30MP",
            zoom: "10x",
            storage: "SD card"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "5726859009",
          price: 200.48,
          options: {
            color: "grey",
            size: "large",
            material: "nylon",
            compartment: "hydration"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6341.2,
          payment_method_id: "paypal_2870241"
        }
      ]
    },
    "#W1429524": {
      order_id: "#W1429524",
      user_id: "juan_smith_5229",
      address: {
        address1: "444 Highland Drive",
        address2: "Suite 419",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75218"
      },
      items: [
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "1349017811",
          price: 226.05,
          options: {
            color: "white",
            capacity: "4 cups",
            type: "drip",
            features: "auto shutoff"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "3526747930",
          price: 540.12,
          options: {
            type: "upright",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 766.17,
          payment_method_id: "gift_card_8506348"
        }
      ]
    },
    "#W7040556": {
      order_id: "#W7040556",
      user_id: "raj_martin_9275",
      address: {
        address1: "355 Chestnut Street",
        address2: "Suite 271",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85092"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "5796612084",
          price: 158.89,
          options: {
            color: "RGB",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9973034634",
          price: 2850.32,
          options: {
            resolution: "20MP",
            zoom: "3x",
            storage: "CF card"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "4938013542",
          price: 47.2,
          options: {
            brightness: "100W equivalent",
            "color temperature": "warm white",
            connectivity: "none"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3056.41,
          payment_method_id: "credit_card_4834117"
        }
      ]
    },
    "#W4318885": {
      order_id: "#W4318885",
      user_id: "mason_wilson_4597",
      address: {
        address1: "142 Oak Street",
        address2: "Suite 780",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85028"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "8293778132",
          price: 100.62,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "4716977452",
          price: 289.69,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "3613716226",
          price: 253.54,
          options: {
            size: "8",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "4859937227",
          price: 503.58,
          options: {
            resolution: "5K",
            waterproof: "no",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1147.43,
          payment_method_id: "gift_card_6767859"
        }
      ]
    },
    "#W8213163": {
      order_id: "#W8213163",
      user_id: "liam_thomas_8833",
      address: {
        address1: "994 Highland Drive",
        address2: "Suite 717",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20119"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9335834276",
          price: 137.92,
          options: {
            capacity: "2L",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2989722512",
          price: 455.34,
          options: {
            material: "glass",
            color: "white",
            height: "3 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["906629996864"],
          item_ids: ["9335834276", "2989722512"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 593.26,
          payment_method_id: "credit_card_7287775"
        }
      ]
    },
    "#W1578930": {
      order_id: "#W1578930",
      user_id: "harper_silva_8534",
      address: {
        address1: "293 Main Street",
        address2: "Suite 497",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92188"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7902309762",
          price: 243.62,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand B"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "3034017579",
          price: 49.72,
          options: {
            brightness: "75W equivalent",
            "color temperature": "warm white",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4920090458",
          price: 381.87,
          options: {
            color: "black",
            "band material": "silicone",
            display: "AMOLED"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "2177997696",
          price: 206.6,
          options: {
            "deck material": "plastic",
            length: "28 inch",
            design: "custom"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1763705424",
          price: 235.44,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand C"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["114714999243"],
          item_ids: [
            "7902309762",
            "3034017579",
            "4920090458",
            "2177997696",
            "1763705424"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1117.25,
          payment_method_id: "credit_card_7453883"
        }
      ]
    },
    "#W1649831": {
      order_id: "#W1649831",
      user_id: "fatima_brown_5229",
      address: {
        address1: "800 Park Avenue",
        address2: "Suite 843",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95187"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "4422467033",
          price: 483.47,
          options: {
            "weight range": "30-50 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 483.47,
          payment_method_id: "gift_card_8633125"
        }
      ]
    },
    "#W7926964": {
      order_id: "#W7926964",
      user_id: "anya_thomas_1213",
      address: {
        address1: "431 Highland Drive",
        address2: "Suite 272",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80298"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "9190635437",
          price: 153.23,
          options: {
            color: "black",
            brightness: "low",
            "power source": "USB"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "1673859111",
          price: 484.96,
          options: {
            material: "wood",
            color: "black",
            height: "4 ft"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1763705424",
          price: 235.44,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand C"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "5635439102",
          price: 353.76,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "blue"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "3788616824",
          price: 951.21,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["672167766161"],
          item_ids: [
            "9190635437",
            "1673859111",
            "1763705424",
            "5635439102",
            "3788616824"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2178.6,
          payment_method_id: "paypal_2557789"
        }
      ]
    },
    "#W4806309": {
      order_id: "#W4806309",
      user_id: "sofia_ahmed_9514",
      address: {
        address1: "904 Hillcrest Drive",
        address2: "Suite 499",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90819"
      },
      items: [
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1355937109",
          price: 1985.3,
          options: {
            "strap material": "leather",
            "dial color": "white"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8018699955",
          price: 467.86,
          options: {
            material: "metal",
            color: "brown",
            height: "4 ft"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6922203216",
          price: 199.12,
          options: {
            diameter: "14 inches",
            color: "black",
            type: "digital"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "4385534692",
          price: 138.07,
          options: {
            color: "white",
            brightness: "high",
            "power source": "AC adapter"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "8249784860",
          price: 96.42,
          options: {
            length: "50ft",
            material: "vinyl",
            color: "green"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2886.77,
          payment_method_id: "gift_card_6117300"
        }
      ]
    },
    "#W6611080": {
      order_id: "#W6611080",
      user_id: "liam_li_6251",
      address: {
        address1: "674 Willow Lane",
        address2: "Suite 375",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75285"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "7624783998",
          price: 154.17,
          options: {
            color: "black",
            brightness: "high",
            "power source": "AC adapter"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2648909398",
          price: 240.87,
          options: {
            size: "8",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "1434748144",
          price: 49.72,
          options: {
            capacity: "1000ml",
            material: "glass",
            color: "red"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6956751343",
          price: 217.06,
          options: {
            "deck material": "bamboo",
            length: "34 inch",
            design: "custom"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["655671002563"],
          item_ids: ["7624783998", "2648909398", "1434748144", "6956751343"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 661.82,
          payment_method_id: "gift_card_5800903"
        },
        {
          transaction_type: "refund",
          amount: 661.82,
          payment_method_id: "gift_card_5800903"
        }
      ]
    },
    "#W7028924": {
      order_id: "#W7028924",
      user_id: "omar_martin_3329",
      address: {
        address1: "156 Lakeview Drive",
        address2: "Suite 923",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80244"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "7609274509",
          price: 243.4,
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "32GB"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6017636844",
          price: 2292.37,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5946177616",
          price: 1057.24,
          options: {
            type: "gas",
            size: "portable",
            features: "none"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["781682283531"],
          item_ids: ["7609274509", "6017636844", "5946177616"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3593.01,
          payment_method_id: "gift_card_6784145"
        }
      ]
    },
    "#W5493256": {
      order_id: "#W5493256",
      user_id: "aarav_nguyen_5688",
      address: {
        address1: "676 Sunset Drive",
        address2: "Suite 918",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43132"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5120532699",
          price: 187.23,
          options: {
            "deck material": "maple",
            length: "31 inch",
            design: "graphic"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "9179378709",
          price: 326.59,
          options: {
            color: "green",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4329558751",
          price: 297.33,
          options: {
            "frame color": "silver",
            "lens color": "blue",
            "lens type": "non-polarized",
            "frame material": "plastic"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 811.15,
          payment_method_id: "gift_card_8584555"
        }
      ]
    },
    "#W9336725": {
      order_id: "#W9336725",
      user_id: "sophia_garcia_5025",
      address: {
        address1: "418 Park Avenue",
        address2: "Suite 351",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20156"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7154215719",
          price: 505.62,
          options: {
            material: "wood",
            color: "brown",
            height: "6 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["836251433228"],
          item_ids: ["7154215719"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 505.62,
          payment_method_id: "credit_card_4147840"
        }
      ]
    },
    "#W2541482": {
      order_id: "#W2541482",
      user_id: "sofia_davis_2103",
      address: {
        address1: "729 Highland Drive",
        address2: "Suite 883",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98151"
      },
      items: [
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "9956648681",
          price: 452.62,
          options: {
            "piece count": "4-piece",
            color: "red",
            material: "hardshell"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3778566150",
          price: 2372.97,
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "32GB",
            storage: "256GB SSD",
            color: "silver"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7497340597",
          price: 100.83,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3714494375",
          price: 2709.83,
          options: {
            pressure: "15 bar",
            capacity: "1L",
            type: "manual"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5636.25,
          payment_method_id: "gift_card_3377580"
        }
      ]
    },
    "#W3168895": {
      order_id: "#W3168895",
      user_id: "olivia_jackson_1219",
      address: {
        address1: "208 Cedar Street",
        address2: "Suite 993",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95119"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2648909398",
          price: 240.87,
          options: {
            size: "8",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "5796612084",
          price: 158.89,
          options: {
            color: "RGB",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "2509076505",
          price: 189.5,
          options: {
            size: "10",
            color: "gray",
            material: "leather"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 589.26,
          payment_method_id: "paypal_3999493"
        }
      ]
    },
    "#W9537685": {
      order_id: "#W9537685",
      user_id: "juan_nguyen_7430",
      address: {
        address1: "810 Highland Drive",
        address2: "Suite 282",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85099"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "7658724607",
          price: 256.73,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "80%"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 256.73,
          payment_method_id: "credit_card_3522913"
        }
      ]
    },
    "#W6397299": {
      order_id: "#W6397299",
      user_id: "liam_thomas_7882",
      address: {
        address1: "629 Pine Lane",
        address2: "Suite 380",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85049"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "1111254697",
          price: 531.57,
          options: {
            material: "glass",
            color: "white",
            height: "6 ft"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "2733768059",
          price: 94.38,
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "pink"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "2872451762",
          price: 622.12,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "7896397433",
          price: 457.81,
          options: {
            "weight range": "5-25 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5206946487",
          price: 95.08,
          options: {
            length: "50ft",
            material: "vinyl",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["883490634651"],
          item_ids: [
            "1111254697",
            "2733768059",
            "2872451762",
            "7896397433",
            "5206946487"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1800.96,
          payment_method_id: "credit_card_3261838"
        }
      ]
    },
    "#W5254379": {
      order_id: "#W5254379",
      user_id: "mia_smith_1623",
      address: {
        address1: "275 Oak Street",
        address2: "Suite 332",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80246"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "4035304400",
          price: 504.19,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "smart sensors"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "8293778132",
          price: 100.62,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "7624783998",
          price: 154.17,
          options: {
            color: "black",
            brightness: "high",
            "power source": "AC adapter"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "1052700637",
          price: 285.81,
          options: {
            color: "red",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "2146648441",
          price: 105.85,
          options: {
            capacity: "10000mAh",
            output: "Wireless",
            color: "blue"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["657754250431"],
          item_ids: [
            "4035304400",
            "8293778132",
            "7624783998",
            "1052700637",
            "2146648441"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1150.64,
          payment_method_id: "paypal_3839332"
        }
      ]
    },
    "#W6217120": {
      order_id: "#W6217120",
      user_id: "anya_ahmed_2271",
      address: {
        address1: "892 Lakeview Drive",
        address2: "Suite 301",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10133"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7806008610",
          price: 2742.67,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "capsule"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "4063401924",
          price: 109.27,
          options: {
            capacity: "20000mAh",
            output: "Wireless",
            color: "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2851.94,
          payment_method_id: "paypal_7881036"
        }
      ]
    },
    "#W2870123": {
      order_id: "#W2870123",
      user_id: "liam_anderson_5973",
      address: {
        address1: "730 Highland Drive",
        address2: "Suite 148",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43107"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "2190871011",
          price: 3105.6,
          options: {
            pressure: "9 bar",
            capacity: "1.5L",
            type: "manual"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "6704763132",
          price: 305.45,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["730833686043"],
          item_ids: ["2190871011", "6704763132"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3411.05,
          payment_method_id: "credit_card_9185943"
        }
      ]
    },
    "#W3906608": {
      order_id: "#W3906608",
      user_id: "emma_nguyen_6662",
      address: {
        address1: "131 Cedar Street",
        address2: "Suite 325",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80221"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3909406921",
          price: 98.25,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "3952176596",
          price: 1199.77,
          options: {
            color: "rose gold",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "6.1-inch"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["712963205575"],
          item_ids: ["3909406921", "3952176596"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1298.02,
          payment_method_id: "paypal_2499655"
        },
        {
          transaction_type: "refund",
          amount: 1298.02,
          payment_method_id: "paypal_2499655"
        }
      ]
    },
    "#W6985008": {
      order_id: "#W6985008",
      user_id: "yara_davis_8348",
      address: {
        address1: "772 Hickory Lane",
        address2: "Suite 724",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92122"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6697922351",
          price: 194.47,
          options: {
            size: "L",
            color: "white",
            ventilation: "medium"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5886093635",
          price: 208.04,
          options: {
            size: "S",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "3076708684",
          price: 535.97,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "quiet operation"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["687060832415"],
          item_ids: ["6697922351", "5886093635", "3076708684"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 938.48,
          payment_method_id: "credit_card_1248375"
        }
      ]
    },
    "#W8296441": {
      order_id: "#W8296441",
      user_id: "ethan_kim_8860",
      address: {
        address1: "848 Willow Lane",
        address2: "Suite 453",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78286"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "2880340443",
          price: 137.22,
          options: {
            color: "white",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "6245746168",
          price: 46,
          options: {
            pieces: "1500",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "5796612084",
          price: 158.89,
          options: {
            color: "RGB",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "6117189161",
          price: 481.5,
          options: {
            resolution: "4K",
            waterproof: "yes",
            color: "silver"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "6259501109",
          price: 652.61,
          options: {
            type: "robotic",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1476.22,
          payment_method_id: "gift_card_5701566"
        }
      ]
    },
    "#W5202795": {
      order_id: "#W5202795",
      user_id: "olivia_smith_5265",
      address: {
        address1: "273 Highland Drive",
        address2: "Suite 953",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80216"
      },
      items: [
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "4859937227",
          price: 503.58,
          options: {
            resolution: "5K",
            waterproof: "no",
            color: "silver"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8426249116",
          price: 488.81,
          options: {
            material: "fabric",
            color: "black",
            armrest: "fixed",
            "backrest height": "standard"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "1518544029",
          price: 95.39,
          options: {
            length: "100ft",
            material: "rubber",
            color: "black"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "2880340443",
          price: 137.22,
          options: {
            color: "white",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "7251508981",
          price: 212.04,
          options: {
            color: "green",
            size: "small",
            material: "leather",
            compartment: "camera"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["861116234650"],
          item_ids: [
            "4859937227",
            "8426249116",
            "1518544029",
            "2880340443",
            "7251508981"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1437.04,
          payment_method_id: "credit_card_7971769"
        }
      ]
    },
    "#W2173715": {
      order_id: "#W2173715",
      user_id: "ava_moore_2033",
      address: {
        address1: "463 Park Avenue",
        address2: "Suite 550",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85002"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "1120917161",
          price: 953.39,
          options: {
            type: "electric",
            size: "portable",
            features: "none"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "1270145486",
          price: 144.07,
          options: {
            color: "white",
            brightness: "high",
            "power source": "battery"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "3015420423",
          price: 141.76,
          options: {
            capacity: "2L",
            material: "glass",
            color: "silver"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "9799386954",
          price: 28.59,
          options: {
            size: "A5",
            "cover type": "soft cover"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["187702030350"],
          item_ids: ["1120917161", "1270145486", "3015420423", "9799386954"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1267.81,
          payment_method_id: "gift_card_8168843"
        }
      ]
    },
    "#W7800651": {
      order_id: "#W7800651",
      user_id: "mei_kovacs_8020",
      address: {
        address1: "576 Oak Street",
        address2: "Suite 970",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94137"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "5796612084",
          price: 158.89,
          options: {
            color: "RGB",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "3778705663",
          price: 473.48,
          options: {
            material: "metal",
            color: "black",
            height: "6 ft"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4648362606",
          price: 503.76,
          options: {
            material: "leather",
            color: "black",
            armrest: "adjustable",
            "backrest height": "high-back"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1136.13,
          payment_method_id: "paypal_7644869"
        }
      ]
    },
    "#W4597054": {
      order_id: "#W4597054",
      user_id: "amelia_silva_7726",
      address: {
        address1: "182 Elm Avenue",
        address2: "Suite 875",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19117"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "5669664287",
          price: 543.68,
          options: {
            "room size": "small",
            "filter type": "ionic",
            features: "quiet operation"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4900990404",
          price: 336.71,
          options: {
            color: "silver",
            "band material": "metal",
            display: "AMOLED"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "9862136885",
          price: 258.32,
          options: {
            color: "black",
            capacity: "2 cups",
            type: "espresso",
            features: "timer"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6777246137",
          price: 47.76,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "red"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["561724567137"],
          item_ids: ["5669664287", "4900990404", "9862136885", "6777246137"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1186.47,
          payment_method_id: "gift_card_3491931"
        }
      ]
    },
    "#W7766102": {
      order_id: "#W7766102",
      user_id: "daiki_moore_8567",
      address: {
        address1: "303 River Road",
        address2: "Suite 719",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28255"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1665571435",
          price: 196.89,
          options: {
            size: "L",
            color: "black",
            ventilation: "high"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5855700373",
          price: 293.46,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "9844888101",
          price: 2459.74,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "8GB",
            storage: "1TB SSD",
            color: "black"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3265035808",
          price: 2530.72,
          options: {
            "screen size": "17-inch",
            processor: "i9",
            ram: "8GB",
            storage: "256GB SSD",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["379199953141"],
          item_ids: ["1665571435", "5855700373", "9844888101", "3265035808"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5480.81,
          payment_method_id: "gift_card_2977513"
        }
      ]
    },
    "#W9218746": {
      order_id: "#W9218746",
      user_id: "lucas_brown_6720",
      address: {
        address1: "921 Park Avenue",
        address2: "Suite 892",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60612"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "7824298782",
          price: 200.38,
          options: {
            color: "black",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "2872451762",
          price: 622.12,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["792130007535"],
          item_ids: ["7824298782", "2872451762"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 822.5,
          payment_method_id: "credit_card_2112420"
        }
      ]
    },
    "#W3062096": {
      order_id: "#W3062096",
      user_id: "amelia_wilson_4614",
      address: {
        address1: "388 Elm Avenue",
        address2: "Suite 384",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75215"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "3234800602",
          price: 46.66,
          options: {
            color: "red",
            size: "L",
            material: "cotton",
            style: "v-neck"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "8739626972",
          price: 370.87,
          options: {
            color: "silver",
            "band material": "silicone",
            display: "AMOLED"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9370300555",
          price: 45.9,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 463.43,
          payment_method_id: "paypal_4101143"
        }
      ]
    },
    "#W9163472": {
      order_id: "#W9163472",
      user_id: "harper_johansson_2663",
      address: {
        address1: "490 River Road",
        address2: "Suite 486",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80281"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5645314103",
          price: 46.19,
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3609437808",
          price: 466.44,
          options: {
            material: "leather",
            color: "red",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4900990404",
          price: 336.71,
          options: {
            color: "silver",
            "band material": "metal",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["303153978999"],
          item_ids: ["5645314103", "3609437808", "4900990404"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 849.34,
          payment_method_id: "paypal_4820484"
        }
      ]
    },
    "#W3510092": {
      order_id: "#W3510092",
      user_id: "fatima_li_5040",
      address: {
        address1: "177 Spruce Street",
        address2: "Suite 327",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20287"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "5796612084",
          price: 158.89,
          options: {
            color: "RGB",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6056040996",
          price: 2609.37,
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "16GB",
            storage: "512GB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2768.26,
          payment_method_id: "credit_card_2713802"
        }
      ]
    },
    "#W2954950": {
      order_id: "#W2954950",
      user_id: "harper_smith_4233",
      address: {
        address1: "803 Lakeview Drive",
        address2: "Suite 264",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78728"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "4648814700",
          price: 228.84,
          options: {
            "switch type": "linear",
            backlight: "white",
            size: "60%"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6227345631",
          price: 483.45,
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "fixed"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["835119668724"],
          item_ids: ["4648814700", "6227345631"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 712.29,
          payment_method_id: "paypal_5681464"
        }
      ]
    },
    "#W6577842": {
      order_id: "#W6577842",
      user_id: "mia_davis_8827",
      address: {
        address1: "123 Elm Street",
        address2: "Suite 325",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28229"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "2882812427",
          price: 261.11,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand A"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8098621301",
          price: 192.15,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "rechargeable"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 453.26,
          payment_method_id: "gift_card_5897764"
        }
      ]
    },
    "#W4143549": {
      order_id: "#W4143549",
      user_id: "sofia_lee_8857",
      address: {
        address1: "714 Pine Lane",
        address2: "Suite 934",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90695"
      },
      items: [
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "6867855179",
          price: 319.53,
          options: {
            resolution: "1080p",
            "field of view": "130 degrees",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "8170914468",
          price: 316.29,
          options: {
            size: "6 ft",
            color: "red",
            material: "olefin",
            "tilt mechanism": "manual tilt"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "8827799340",
          price: 106.44,
          options: {
            capacity: "5000mAh",
            output: "Wireless",
            color: "black"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7811981098",
          price: 213.86,
          options: {
            size: "S",
            color: "white",
            ventilation: "medium"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "7609274509",
          price: 243.4,
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "32GB"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["230864195587"],
          item_ids: [
            "6867855179",
            "8170914468",
            "8827799340",
            "7811981098",
            "7609274509"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1199.52,
          payment_method_id: "paypal_3572679"
        }
      ]
    },
    "#W8750911": {
      order_id: "#W8750911",
      user_id: "harper_ahmed_4844",
      address: {
        address1: "744 Maple Drive",
        address2: "Suite 403",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19147"
      },
      items: [
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "9850781806",
          price: 184.48,
          options: {
            diameter: "14 inches",
            color: "white",
            type: "digital"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "3229676465",
          price: 51.94,
          options: {
            capacity: "500ml",
            material: "plastic",
            color: "black"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "8484921793",
          price: 230.15,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "80%"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["800251928900"],
          item_ids: ["9850781806", "3229676465", "8484921793"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 466.57,
          payment_method_id: "gift_card_4529075"
        }
      ]
    },
    "#W9018868": {
      order_id: "#W9018868",
      user_id: "emma_nguyen_6662",
      address: {
        address1: "131 Cedar Street",
        address2: "Suite 325",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80221"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "8153356023",
          price: 212.47,
          options: {
            size: "L",
            color: "blue",
            ventilation: "medium"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9647374798",
          price: 109.58,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "4648814700",
          price: 228.84,
          options: {
            "switch type": "linear",
            backlight: "white",
            size: "60%"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "5996159312",
          price: 2895.55,
          options: {
            resolution: "24MP",
            zoom: "3x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["470858758961"],
          item_ids: ["8153356023", "9647374798", "4648814700", "5996159312"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3446.44,
          payment_method_id: "paypal_2499655"
        },
        {
          transaction_type: "refund",
          amount: 3446.44,
          payment_method_id: "paypal_2499655"
        }
      ]
    },
    "#W6885344": {
      order_id: "#W6885344",
      user_id: "yusuf_garcia_3055",
      address: {
        address1: "794 Park Avenue",
        address2: "Suite 828",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20080"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "5917587651",
          price: 212.79,
          options: {
            color: "grey",
            size: "medium",
            material: "polyester",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 212.79,
          payment_method_id: "paypal_7503218"
        }
      ]
    },
    "#W5158064": {
      order_id: "#W5158064",
      user_id: "aarav_thomas_2711",
      address: {
        address1: "422 Oak Street",
        address2: "Suite 149",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32175"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7907773809",
          price: 209.69,
          options: {
            size: "L",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1355937109",
          price: 1985.3,
          options: {
            "strap material": "leather",
            "dial color": "white"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7774234341",
          price: 2719.16,
          options: {
            pressure: "9 bar",
            capacity: "2L",
            type: "manual"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4914.15,
          payment_method_id: "gift_card_6253568"
        }
      ]
    },
    "#W8411016": {
      order_id: "#W8411016",
      user_id: "mia_jackson_5377",
      address: {
        address1: "489 Cedar Avenue",
        address2: "Suite 877",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19044"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "4035304400",
          price: 504.19,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "smart sensors"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "4947717507",
          price: 218.04,
          options: {
            color: "green",
            size: "medium",
            material: "leather",
            compartment: "camera"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1345513440",
          price: 655.59,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "cordless"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1377.82,
          payment_method_id: "paypal_1231496"
        }
      ]
    },
    "#W7841787": {
      order_id: "#W7841787",
      user_id: "emma_kovacs_7176",
      address: {
        address1: "463 Main Street",
        address2: "Suite 430",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32254"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "1906487464",
          price: 102.02,
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "3399869890",
          price: 312.04,
          options: {
            "scent family": "woody",
            size: "100ml",
            gender: "men"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["354254671527"],
          item_ids: ["1906487464", "3399869890"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 414.06,
          payment_method_id: "gift_card_7777844"
        }
      ]
    },
    "#W6272294": {
      order_id: "#W6272294",
      user_id: "ava_nguyen_6646",
      address: {
        address1: "621 Cedar Street",
        address2: "Suite 273",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60628"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4572024853",
          price: 53.72,
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "expert"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "5484530610",
          price: 3109.83,
          options: {
            resolution: "24MP",
            zoom: "10x",
            storage: "CF card"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5650803029",
          price: 324.63,
          options: {
            color: "black",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "1176194968",
          price: 52.88,
          options: {
            color: "black",
            size: "S",
            material: "polyester",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3541.06,
          payment_method_id: "gift_card_1994993"
        }
      ]
    },
    "#W7678072": {
      order_id: "#W7678072",
      user_id: "noah_brown_6181",
      address: {
        address1: "986 Sunset Drive",
        address2: "Suite 259",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80279"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2323972008",
          price: 146.98,
          options: {
            capacity: "1L",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "2193628750",
          price: 162.15,
          options: {
            color: "black",
            "sensor type": "laser",
            connectivity: "wired"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "3557711149",
          price: 205.35,
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["517177699738"],
          item_ids: ["2323972008", "2193628750", "3557711149"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 514.48,
          payment_method_id: "paypal_5727330"
        }
      ]
    },
    "#W6750959": {
      order_id: "#W6750959",
      user_id: "yusuf_li_7255",
      address: {
        address1: "909 Spruce Street",
        address2: "Suite 599",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91148"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "3254583681",
          price: 302.67,
          options: {
            color: "blue",
            "battery life": "20 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "4273929280",
          price: 244.95,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "32GB"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 547.62,
          payment_method_id: "paypal_8080730"
        }
      ]
    },
    "#W5502903": {
      order_id: "#W5502903",
      user_id: "lucas_martin_7509",
      address: {
        address1: "966 Willow Lane",
        address2: "Suite 647",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78753"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2860956907",
          price: 315.61,
          options: {
            color: "black",
            "band material": "silicone",
            display: "LCD"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8895454203",
          price: 504.65,
          options: {
            material: "glass",
            color: "white",
            height: "5 ft"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9030221155",
          price: 51.98,
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "beginner"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "3542102174",
          price: 47.25,
          options: {
            color: "red",
            size: "S",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9228757377",
          price: 3066.23,
          options: {
            resolution: "30MP",
            zoom: "10x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3985.72,
          payment_method_id: "credit_card_2325059"
        }
      ]
    },
    "#W6832752": {
      order_id: "#W6832752",
      user_id: "yusuf_hernandez_6785",
      address: {
        address1: "366 Maple Drive",
        address2: "Suite 260",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46246"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "3812493782",
          price: 244.34,
          options: {
            size: "7",
            material: "leather",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 244.34,
          payment_method_id: "paypal_7529813"
        }
      ]
    },
    "#W8295890": {
      order_id: "#W8295890",
      user_id: "yusuf_moore_6437",
      address: {
        address1: "815 Sunset Drive",
        address2: "Suite 651",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10144"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "4273929280",
          price: 244.95,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "32GB"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["121804332643"],
          item_ids: ["4273929280"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 244.95,
          payment_method_id: "paypal_4755504"
        }
      ]
    },
    "#W6689278": {
      order_id: "#W6689278",
      user_id: "evelyn_kovacs_6742",
      address: {
        address1: "614 Lakeview Drive",
        address2: "Suite 193",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78282"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2243454707",
          price: 164.46,
          options: {
            capacity: "1L",
            material: "plastic",
            color: "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 164.46,
          payment_method_id: "paypal_7732922"
        }
      ]
    },
    "#W8835847": {
      order_id: "#W8835847",
      user_id: "daiki_silva_2903",
      address: {
        address1: "713 Park Avenue",
        address2: "Suite 800",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94102"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9354168549",
          price: 46.85,
          options: {
            color: "red",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "7420906769",
          price: 138.47,
          options: {
            color: "white",
            "sensor type": "laser",
            connectivity: "wireless"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8895454203",
          price: 504.65,
          options: {
            material: "glass",
            color: "white",
            height: "5 ft"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 689.97,
          payment_method_id: "gift_card_2652153"
        }
      ]
    },
    "#W9447995": {
      order_id: "#W9447995",
      user_id: "yusuf_garcia_1670",
      address: {
        address1: "691 Park Avenue",
        address2: "Suite 274",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46202"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7751905257",
          price: 321.18,
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5930656038",
          price: 142.3,
          options: {
            capacity: "1.5L",
            material: "glass",
            color: "silver"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2540052208",
          price: 346.42,
          options: {
            color: "gold",
            "band material": "silicone",
            display: "LCD"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4245201809",
          price: 281.48,
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "non-polarized",
            "frame material": "metal"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1091.38,
          payment_method_id: "gift_card_4303603"
        }
      ]
    },
    "#W1713682": {
      order_id: "#W1713682",
      user_id: "isabella_sanchez_2068",
      address: {
        address1: "964 Sunset Drive",
        address2: "Suite 782",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10199"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1007724142",
          price: 382.41,
          options: {
            color: "black",
            "band material": "leather",
            display: "LCD"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "3812493782",
          price: 244.34,
          options: {
            size: "7",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5967152432",
          price: 292.71,
          options: {
            color: "green",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "4648814700",
          price: 228.84,
          options: {
            "switch type": "linear",
            backlight: "white",
            size: "60%"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7902309762",
          price: 243.62,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand B"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["970894337971"],
          item_ids: [
            "1007724142",
            "3812493782",
            "5967152432",
            "4648814700",
            "7902309762"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1391.92,
          payment_method_id: "paypal_8516781"
        }
      ]
    },
    "#W4125188": {
      order_id: "#W4125188",
      user_id: "mohamed_smith_9224",
      address: {
        address1: "372 Main Street",
        address2: "Suite 578",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77252"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "3928046918",
          price: 198,
          options: {
            color: "black",
            size: "large",
            material: "nylon",
            compartment: "camera"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "6454334990",
          price: 98.82,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["329969109195"],
          item_ids: ["3928046918", "6454334990"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 296.82,
          payment_method_id: "paypal_3684705"
        }
      ]
    },
    "#W3858003": {
      order_id: "#W3858003",
      user_id: "juan_garcia_9528",
      address: {
        address1: "963 Elm Avenue",
        address2: "Suite 469",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75253"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "9190635437",
          price: 153.23,
          options: {
            color: "black",
            brightness: "low",
            "power source": "USB"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4582956489",
          price: 241.96,
          options: {
            size: "12",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8920458606",
          price: 510.02,
          options: {
            material: "wood",
            color: "white",
            height: "4 ft"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "2284404181",
          price: 3204.43,
          options: {
            resolution: "20MP",
            zoom: "5x",
            storage: "SD card"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7407838442",
          price: 3081.91,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "manual"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["382496000543"],
          item_ids: [
            "9190635437",
            "4582956489",
            "8920458606",
            "2284404181",
            "7407838442"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 7191.55,
          payment_method_id: "gift_card_6369065"
        },
        {
          transaction_type: "refund",
          amount: 7191.55,
          payment_method_id: "gift_card_6369065"
        }
      ]
    },
    "#W8951014": {
      order_id: "#W8951014",
      user_id: "ava_moore_2033",
      address: {
        address1: "996 Cedar Street",
        address2: "Suite 656",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78234"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "7824298782",
          price: 200.38,
          options: {
            color: "black",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "9127591879",
          price: 48.47,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9644439410",
          price: 3280.31,
          options: {
            resolution: "20MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2244749153",
          price: 473.82,
          options: {
            material: "wood",
            color: "brown",
            height: "5 ft"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "2492465580",
          price: 201.95,
          options: {
            color: "navy",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["916412857116"],
          item_ids: [
            "7824298782",
            "9127591879",
            "9644439410",
            "2244749153",
            "2492465580"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4204.93,
          payment_method_id: "gift_card_8168843"
        }
      ]
    },
    "#W2768383": {
      order_id: "#W2768383",
      user_id: "emma_kim_1076",
      address: {
        address1: "297 Elm Street",
        address2: "Suite 904",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10146"
      },
      items: [
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "7445824652",
          price: 49.8,
          options: {
            brightness: "75W equivalent",
            "color temperature": "daylight",
            connectivity: "Wi-Fi"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["498978631037"],
          item_ids: ["7445824652"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 49.8,
          payment_method_id: "gift_card_5402003"
        }
      ]
    },
    "#W8704143": {
      order_id: "#W8704143",
      user_id: "raj_smith_7423",
      address: {
        address1: "603 Sunset Drive",
        address2: "Suite 202",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20174"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "4458619711",
          price: 153.81,
          options: {
            capacity: "2L",
            material: "stainless steel",
            color: "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 153.81,
          payment_method_id: "credit_card_5903671"
        }
      ]
    },
    "#W1630030": {
      order_id: "#W1630030",
      user_id: "raj_santos_9079",
      address: {
        address1: "863 Lakeview Drive",
        address2: "Suite 424",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98157"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "4458619711",
          price: 153.81,
          options: {
            capacity: "2L",
            material: "stainless steel",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["133362356112"],
          item_ids: ["4458619711"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 153.81,
          payment_method_id: "paypal_2417743"
        }
      ]
    },
    "#W1930780": {
      order_id: "#W1930780",
      user_id: "ethan_santos_6104",
      address: {
        address1: "654 Spruce Street",
        address2: "Suite 503",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80278"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "7535423717",
          price: 904.46,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "silver"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7736359414",
          price: 253.08,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand C"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "3624655057",
          price: 2195.04,
          options: {
            "frame size": "medium",
            color: "blue",
            type: "road"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3815173328",
          price: 2908.42,
          options: {
            pressure: "9 bar",
            capacity: "1.5L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["742809798314"],
          item_ids: ["7535423717", "7736359414", "3624655057", "3815173328"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6261,
          payment_method_id: "paypal_3549141"
        }
      ]
    },
    "#W7111824": {
      order_id: "#W7111824",
      user_id: "omar_kim_3528",
      address: {
        address1: "542 Lakeview Drive",
        address2: "Suite 811",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32214"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "9884666842",
          price: 2794.7,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "manual"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "2633090267",
          price: 1046.33,
          options: {
            "screen size": "7-inch",
            storage: "64GB",
            color: "silver"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4803681337",
          price: 962.34,
          options: {
            "screen size": "8-inch",
            storage: "64GB",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4803.37,
          payment_method_id: "gift_card_3749819"
        }
      ]
    },
    "#W5565470": {
      order_id: "#W5565470",
      user_id: "isabella_johansson_2152",
      address: {
        address1: "812 Cedar Avenue",
        address2: "Suite 500",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77129"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "7602931732",
          price: 153.25,
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9570044148",
          price: 231.37,
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "full size"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "6857426243",
          price: 196.53,
          options: {
            size: "medium",
            material: "fleece",
            color: "grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["907614527588"],
          item_ids: ["7602931732", "9570044148", "6857426243"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 581.15,
          payment_method_id: "paypal_3024827"
        }
      ]
    },
    "#W4566809": {
      order_id: "#W4566809",
      user_id: "raj_sanchez_2970",
      address: {
        address1: "557 Sunset Drive",
        address2: "Suite 454",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92147"
      },
      items: [
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "1569829406",
          price: 320.55,
          options: {
            resolution: "1080p",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "5826601160",
          price: 506.15,
          options: {
            "room size": "medium",
            "filter type": "carbon",
            features: "night mode"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 826.7,
          payment_method_id: "credit_card_3362387"
        }
      ]
    },
    "#W2435638": {
      order_id: "#W2435638",
      user_id: "fatima_muller_6713",
      address: {
        address1: "686 Laurel Lane",
        address2: "Suite 491",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20374"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7441167885",
          price: 2866.37,
          options: {
            pressure: "15 bar",
            capacity: "1.5L",
            type: "capsule"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8895454203",
          price: 504.65,
          options: {
            material: "glass",
            color: "white",
            height: "5 ft"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7583936705",
          price: 3101.43,
          options: {
            resolution: "20MP",
            zoom: "10x",
            storage: "CF card"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "1518544029",
          price: 95.39,
          options: {
            length: "100ft",
            material: "rubber",
            color: "black"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "8896479688",
          price: 143.15,
          options: {
            color: "white",
            "sensor type": "optical",
            connectivity: "wireless"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["598923306122"],
          item_ids: [
            "7441167885",
            "8895454203",
            "7583936705",
            "1518544029",
            "8896479688"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6710.99,
          payment_method_id: "paypal_5541158"
        }
      ]
    },
    "#W9440076": {
      order_id: "#W9440076",
      user_id: "noah_kovacs_1216",
      address: {
        address1: "191 Lakeview Drive",
        address2: "Suite 781",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20566"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "4947921075",
          price: 49.57,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "green"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "2025713343",
          price: 336.15,
          options: {
            type: "on-ear",
            connectivity: "wired",
            color: "white"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2993891288",
          price: 383.08,
          options: {
            color: "silver",
            "band material": "leather",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 768.8,
          payment_method_id: "gift_card_2486551"
        }
      ]
    },
    "#W3723163": {
      order_id: "#W3723163",
      user_id: "james_johnson_9321",
      address: {
        address1: "457 Park Avenue",
        address2: "Suite 613",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19028"
      },
      items: [
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "7791931443",
          price: 195.63,
          options: {
            diameter: "14 inches",
            color: "black",
            type: "analog"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["137170093356"],
          item_ids: ["7791931443"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 195.63,
          payment_method_id: "credit_card_4998749"
        }
      ]
    },
    "#W4967593": {
      order_id: "#W4967593",
      user_id: "ethan_garcia_1261",
      address: {
        address1: "667 Highland Drive",
        address2: "Suite 865",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80280"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4168944673",
          price: 471.82,
          options: {
            material: "leather",
            color: "blue",
            armrest: "none",
            "backrest height": "standard"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "3320557165",
          price: 188.67,
          options: {
            color: "blue",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "8054888773",
          price: 206.03,
          options: {
            color: "grey",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1355937109",
          price: 1985.3,
          options: {
            "strap material": "leather",
            "dial color": "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["663395959263"],
          item_ids: ["4168944673", "3320557165", "8054888773", "1355937109"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2851.82,
          payment_method_id: "gift_card_4332117"
        }
      ]
    },
    "#W6114312": {
      order_id: "#W6114312",
      user_id: "mohamed_lee_5442",
      address: {
        address1: "961 Pine Lane",
        address2: "Suite 277",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75372"
      },
      items: [
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "3111466194",
          price: 285.66,
          options: {
            size: "7 ft",
            color: "red",
            material: "polyester",
            "tilt mechanism": "manual tilt"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5753502325",
          price: 96.35,
          options: {
            length: "25ft",
            material: "rubber",
            color: "green"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3735133539",
          price: 508.37,
          options: {
            "weight range": "30-50 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "7211586944",
          price: 272.71,
          options: {
            color: "black",
            capacity: "8 cups",
            type: "espresso",
            features: "built-in grinder"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["673941764576"],
          item_ids: ["3111466194", "5753502325", "3735133539", "7211586944"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1163.09,
          payment_method_id: "credit_card_8169552"
        }
      ]
    },
    "#W6231698": {
      order_id: "#W6231698",
      user_id: "liam_thomas_7882",
      address: {
        address1: "629 Pine Lane",
        address2: "Suite 380",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85049"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9570044148",
          price: 231.37,
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "full size"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3333391894",
          price: 534.14,
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "fixed"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "1775591963",
          price: 154.75,
          options: {
            size: "10",
            color: "white",
            material: "leather",
            sole: "EVA"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["946003206427"],
          item_ids: ["9570044148", "3333391894", "1775591963"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 920.26,
          payment_method_id: "paypal_3650980"
        }
      ]
    },
    "#W2601346": {
      order_id: "#W2601346",
      user_id: "ava_nguyen_4072",
      address: {
        address1: "895 Pine Lane",
        address2: "Suite 907",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28251"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5206946487",
          price: 95.08,
          options: {
            length: "50ft",
            material: "vinyl",
            color: "black"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7736359414",
          price: 253.08,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand C"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 348.16,
          payment_method_id: "paypal_3180577"
        }
      ]
    },
    "#W3065353": {
      order_id: "#W3065353",
      user_id: "harper_kovacs_8617",
      address: {
        address1: "696 Hillcrest Drive",
        address2: "Suite 872",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95154"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9228757377",
          price: 3066.23,
          options: {
            resolution: "30MP",
            zoom: "10x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["251152533935"],
          item_ids: ["9228757377"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3066.23,
          payment_method_id: "credit_card_7422485"
        }
      ]
    },
    "#W1013897": {
      order_id: "#W1013897",
      user_id: "juan_garcia_9528",
      address: {
        address1: "963 Elm Avenue",
        address2: "Suite 469",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75253"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "8293778132",
          price: 100.62,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "3229676465",
          price: 51.94,
          options: {
            capacity: "500ml",
            material: "plastic",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 152.56,
          payment_method_id: "gift_card_6369065"
        }
      ]
    },
    "#W3358610": {
      order_id: "#W3358610",
      user_id: "mason_johansson_2485",
      address: {
        address1: "381 Lakeview Drive",
        address2: "Suite 671",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28271"
      },
      items: [
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "6170152315",
          price: 1814.72,
          options: {
            "frame size": "small",
            color: "red",
            type: "mountain"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2757705742",
          price: 258.97,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2073.69,
          payment_method_id: "gift_card_6915794"
        }
      ]
    },
    "#W7854887": {
      order_id: "#W7854887",
      user_id: "emma_santos_8025",
      address: {
        address1: "641 Elm Avenue",
        address2: "Suite 778",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85079"
      },
      items: [
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "8610532516",
          price: 203.76,
          options: {
            diameter: "10 inches",
            color: "black",
            type: "digital"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "1810466394",
          price: 502.28,
          options: {
            resolution: "1080p",
            waterproof: "no",
            color: "silver"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6130713659",
          price: 483.66,
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1189.7,
          payment_method_id: "gift_card_3824537"
        }
      ]
    },
    "#W5560533": {
      order_id: "#W5560533",
      user_id: "ethan_sanchez_7289",
      address: {
        address1: "386 Cedar Avenue",
        address2: "Suite 683",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43119"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "8054888773",
          price: 206.03,
          options: {
            color: "grey",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2554056026",
          price: 367.38,
          options: {
            color: "gold",
            "band material": "metal",
            display: "AMOLED"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9335834276",
          price: 137.92,
          options: {
            capacity: "2L",
            material: "glass",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["379277736819"],
          item_ids: ["8054888773", "2554056026", "9335834276"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 711.33,
          payment_method_id: "gift_card_5917510"
        }
      ]
    },
    "#W1764038": {
      order_id: "#W1764038",
      user_id: "omar_lopez_3107",
      address: {
        address1: "959 Broadway",
        address2: "Suite 363",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90339"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "4326528037",
          price: 2714.51,
          options: {
            resolution: "24MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "2226219750",
          price: 2009.03,
          options: {
            "strap material": "silicone",
            "dial color": "white"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "4238115171",
          price: 91.78,
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "gas"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["162835301015"],
          item_ids: ["4326528037", "2226219750", "4238115171"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4815.32,
          payment_method_id: "paypal_1530316"
        }
      ]
    },
    "#W9279351": {
      order_id: "#W9279351",
      user_id: "mia_sanchez_3401",
      address: {
        address1: "615 Cedar Avenue",
        address2: "Suite 968",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98179"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5745575001",
          price: 986.65,
          options: {
            type: "electric",
            size: "portable",
            features: "rotisserie"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1437889264",
          price: 258.09,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["971382606319"],
          item_ids: ["5745575001", "1437889264"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1244.74,
          payment_method_id: "gift_card_3488934"
        },
        {
          transaction_type: "refund",
          amount: 1244.74,
          payment_method_id: "gift_card_3488934"
        }
      ]
    },
    "#W5497052": {
      order_id: "#W5497052",
      user_id: "aarav_khan_2797",
      address: {
        address1: "696 Hillcrest Drive",
        address2: "Suite 804",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19066"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "6245746168",
          price: 46,
          options: {
            pieces: "1500",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["780550924861"],
          item_ids: ["6245746168"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 46,
          payment_method_id: "paypal_6627442"
        }
      ]
    },
    "#W6443279": {
      order_id: "#W6443279",
      user_id: "ivan_kim_7727",
      address: {
        address1: "626 Spruce Street",
        address2: "Suite 933",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10093"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6673921677",
          price: 189.57,
          options: {
            "deck material": "bamboo",
            length: "28 inch",
            design: "custom"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "8293778132",
          price: 100.62,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 290.19,
          payment_method_id: "credit_card_1920989"
        }
      ]
    },
    "#W7807988": {
      order_id: "#W7807988",
      user_id: "harper_kim_2998",
      address: {
        address1: "853 Broadway",
        address2: "Suite 947",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78222"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2554056026",
          price: 367.38,
          options: {
            color: "gold",
            "band material": "metal",
            display: "AMOLED"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "5996159312",
          price: 2895.55,
          options: {
            resolution: "24MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8479046075",
          price: 451.01,
          options: {
            material: "wood",
            color: "white",
            height: "5 ft"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "9879255677",
          price: 288.82,
          options: {
            size: "6 ft",
            color: "green",
            material: "olefin",
            "tilt mechanism": "auto tilt"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "2880340443",
          price: 137.22,
          options: {
            color: "white",
            "sensor type": "optical",
            connectivity: "wired"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4139.98,
          payment_method_id: "gift_card_5328393"
        }
      ]
    },
    "#W6731310": {
      order_id: "#W6731310",
      user_id: "ethan_smith_9087",
      address: {
        address1: "544 Sunset Drive",
        address2: "Suite 663",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10280"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "4064702754",
          price: 159.78,
          options: {
            capacity: "2L",
            material: "glass",
            color: "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 159.78,
          payment_method_id: "paypal_3296755"
        }
      ]
    },
    "#W8882972": {
      order_id: "#W8882972",
      user_id: "isabella_johansson_7408",
      address: {
        address1: "289 Willow Lane",
        address2: "Suite 172",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60625"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6697922351",
          price: 194.47,
          options: {
            size: "L",
            color: "white",
            ventilation: "medium"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "8249784860",
          price: 96.42,
          options: {
            length: "50ft",
            material: "vinyl",
            color: "green"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "3799046073",
          price: 53.27,
          options: {
            color: "black",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4772738468",
          price: 53.91,
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "beginner"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 398.07,
          payment_method_id: "paypal_8540436"
        }
      ]
    },
    "#W7739115": {
      order_id: "#W7739115",
      user_id: "yusuf_hernandez_6785",
      address: {
        address1: "580 Broadway",
        address2: "Suite 162",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80265"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1573035764",
          price: 253.98,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand A"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["691517772161"],
          item_ids: ["1573035764"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 253.98,
          payment_method_id: "paypal_7529813"
        }
      ]
    },
    "#W1068289": {
      order_id: "#W1068289",
      user_id: "yara_patel_8545",
      address: {
        address1: "736 Willow Lane",
        address2: "Suite 550",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76130"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "3374679624",
          price: 370.53,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "black"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5946177616",
          price: 1057.24,
          options: {
            type: "gas",
            size: "portable",
            features: "none"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1994478369",
          price: 2025.51,
          options: {
            "strap material": "silicone",
            "dial color": "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3453.28,
          payment_method_id: "gift_card_9105630"
        }
      ]
    },
    "#W9051575": {
      order_id: "#W9051575",
      user_id: "harper_khan_8862",
      address: {
        address1: "363 Cedar Avenue",
        address2: "Suite 894",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85063"
      },
      items: [
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "1199058591",
          price: 32.29,
          options: {
            size: "A4",
            "cover type": "hard cover"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["231106427260"],
          item_ids: ["1199058591"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 32.29,
          payment_method_id: "credit_card_1586014"
        },
        {
          transaction_type: "refund",
          amount: 32.29,
          payment_method_id: "credit_card_1586014"
        }
      ]
    },
    "#W4892278": {
      order_id: "#W4892278",
      user_id: "isabella_taylor_7478",
      address: {
        address1: "723 Oak Street",
        address2: "Suite 245",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60646"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "8153356023",
          price: 212.47,
          options: {
            size: "L",
            color: "blue",
            ventilation: "medium"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7407838442",
          price: 3081.91,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "manual"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["398778371807"],
          item_ids: ["8153356023", "7407838442"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3294.38,
          payment_method_id: "gift_card_5501047"
        }
      ]
    },
    "#W2912153": {
      order_id: "#W2912153",
      user_id: "olivia_brown_4616",
      address: {
        address1: "287 Pine Lane",
        address2: "Suite 248",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43118"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "1270145486",
          price: 144.07,
          options: {
            color: "white",
            brightness: "high",
            "power source": "battery"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9472539378",
          price: 143.72,
          options: {
            capacity: "1.5L",
            material: "glass",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["792826881416"],
          item_ids: ["1270145486", "9472539378"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 287.79,
          payment_method_id: "credit_card_3081930"
        }
      ]
    },
    "#W1539823": {
      order_id: "#W1539823",
      user_id: "emma_santos_9753",
      address: {
        address1: "463 Pine Lane",
        address2: "Suite 570",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78228"
      },
      items: [
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "8470360507",
          price: 291.31,
          options: {
            resolution: "2K",
            "field of view": "130 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7597543861",
          price: 310.47,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6313971174",
          price: 193.97,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "custom"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2860956907",
          price: 315.61,
          options: {
            color: "black",
            "band material": "silicone",
            display: "LCD"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["749747277477"],
          item_ids: ["8470360507", "7597543861", "6313971174", "2860956907"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1111.36,
          payment_method_id: "credit_card_5869505"
        }
      ]
    },
    "#W9538924": {
      order_id: "#W9538924",
      user_id: "emma_kim_1076",
      address: {
        address1: "562 Elm Avenue",
        address2: "Suite 656",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46214"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6673921677",
          price: 189.57,
          options: {
            "deck material": "bamboo",
            length: "28 inch",
            design: "custom"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2658930189",
          price: 241.68,
          options: {
            size: "9",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5172162216",
          price: 48.51,
          options: {
            pieces: "2000",
            theme: "landscape",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "9440686670",
          price: 298.91,
          options: {
            color: "green",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "5570660360",
          price: 51.54,
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "none"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["546471111827"],
          item_ids: [
            "6673921677",
            "2658930189",
            "5172162216",
            "9440686670",
            "5570660360"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 830.21,
          payment_method_id: "gift_card_5402003"
        }
      ]
    },
    "#W9941744": {
      order_id: "#W9941744",
      user_id: "omar_muller_8833",
      address: {
        address1: "217 Hickory Lane",
        address2: "Suite 646",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78252"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5886093635",
          price: 208.04,
          options: {
            size: "S",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "1689914594",
          price: 315.2,
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6501071631",
          price: 1018.68,
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "gold"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "3187628796",
          price: 1205.66,
          options: {
            color: "rose gold",
            storage: "128GB",
            RAM: "8GB",
            "screen size": "6.1-inch"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["397551136394"],
          item_ids: ["5886093635", "1689914594", "6501071631", "3187628796"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2747.58,
          payment_method_id: "paypal_4439305"
        }
      ]
    },
    "#W4536116": {
      order_id: "#W4536116",
      user_id: "mason_johansson_8128",
      address: {
        address1: "745 Chestnut Street",
        address2: "Suite 617",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98103"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6469567736",
          price: 47.84,
          options: {
            capacity: "1000ml",
            material: "glass",
            color: "blue"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2993891288",
          price: 383.08,
          options: {
            color: "silver",
            "band material": "leather",
            display: "AMOLED"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "3928046918",
          price: 198,
          options: {
            color: "black",
            size: "large",
            material: "nylon",
            compartment: "camera"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "7867398203",
          price: 232.7,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "60%"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 861.62,
          payment_method_id: "gift_card_1401311"
        }
      ]
    },
    "#W7345822": {
      order_id: "#W7345822",
      user_id: "liam_lopez_7019",
      address: {
        address1: "380 Laurel Lane",
        address2: "Suite 960",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75388"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "2872451762",
          price: 622.12,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9354168549",
          price: 46.85,
          options: {
            color: "red",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "3557711149",
          price: 205.35,
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "laptop"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "6170152315",
          price: 1814.72,
          options: {
            "frame size": "small",
            color: "red",
            type: "mountain"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "5570660360",
          price: 51.54,
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "none"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["304378238569"],
          item_ids: [
            "2872451762",
            "9354168549",
            "3557711149",
            "6170152315",
            "5570660360"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2740.58,
          payment_method_id: "gift_card_8483518"
        },
        {
          transaction_type: "refund",
          amount: 2740.58,
          payment_method_id: "gift_card_8483518"
        }
      ]
    },
    "#W6386665": {
      order_id: "#W6386665",
      user_id: "sofia_moore_9773",
      address: {
        address1: "181 Elm Street",
        address2: "Suite 178",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20030"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3704016729",
          price: 487.67,
          options: {
            material: "mesh",
            color: "blue",
            armrest: "fixed",
            "backrest height": "standard"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "3526747930",
          price: 540.12,
          options: {
            type: "upright",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "2060066974",
          price: 51.05,
          options: {
            color: "black",
            size: "XL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "7166996157",
          price: 518.31,
          options: {
            "room size": "small",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "5992316252",
          price: 141.29,
          options: {
            size: "S",
            color: "red",
            zipper: "half"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["945169937699"],
          item_ids: [
            "3704016729",
            "3526747930",
            "2060066974",
            "7166996157",
            "5992316252"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1738.44,
          payment_method_id: "credit_card_1893409"
        },
        {
          transaction_type: "refund",
          amount: 1738.44,
          payment_method_id: "credit_card_1893409"
        }
      ]
    },
    "#W8339330": {
      order_id: "#W8339330",
      user_id: "anya_muller_4683",
      address: {
        address1: "149 Cedar Street",
        address2: "Suite 853",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46296"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9408160950",
          price: 381.26,
          options: {
            color: "gold",
            "band material": "leather",
            display: "LCD"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5120532699",
          price: 187.23,
          options: {
            "deck material": "maple",
            length: "31 inch",
            design: "graphic"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7255224608",
          price: 2922.97,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "CF card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["828595034567"],
          item_ids: ["9408160950", "5120532699", "7255224608"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3491.46,
          payment_method_id: "paypal_8465963"
        },
        {
          transaction_type: "refund",
          amount: 3491.46,
          payment_method_id: "paypal_8465963"
        }
      ]
    },
    "#W2651562": {
      order_id: "#W2651562",
      user_id: "yara_sanchez_9692",
      address: {
        address1: "627 Main Street",
        address2: "Suite 542",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94188"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "8573379326",
          price: 196.73,
          options: {
            size: "M",
            color: "red",
            ventilation: "high"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "7166996157",
          price: 518.31,
          options: {
            "room size": "small",
            "filter type": "HEPA",
            features: "night mode"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["619855905076"],
          item_ids: ["8573379326", "7166996157"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 715.04,
          payment_method_id: "credit_card_9277564"
        }
      ]
    },
    "#W4556683": {
      order_id: "#W4556683",
      user_id: "fatima_wilson_6873",
      address: {
        address1: "788 Park Avenue",
        address2: "Suite 932",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78746"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9132333852",
          price: 139.47,
          options: {
            capacity: "1L",
            material: "plastic",
            color: "silver"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7533802601",
          price: 48.59,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "green"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "8555936349",
          price: 226.49,
          options: {
            color: "blue",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3709608322",
          price: 2744.7,
          options: {
            pressure: "9 bar",
            capacity: "2L",
            type: "automatic"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "4716977452",
          price: 289.69,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["840382652216"],
          item_ids: [
            "9132333852",
            "7533802601",
            "8555936349",
            "3709608322",
            "4716977452"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3448.94,
          payment_method_id: "credit_card_9557278"
        }
      ]
    },
    "#W7966786": {
      order_id: "#W7966786",
      user_id: "ava_nguyen_6986",
      address: {
        address1: "585 Hillcrest Drive",
        address2: "Suite 808",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28225"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "8153356023",
          price: 212.47,
          options: {
            size: "L",
            color: "blue",
            ventilation: "medium"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9991484137",
          price: 240.97,
          options: {
            "switch type": "tactile",
            backlight: "white",
            size: "80%"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "6735339143",
          price: 471.77,
          options: {
            material: "metal",
            color: "brown",
            height: "6 ft"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 925.21,
          payment_method_id: "gift_card_3857768"
        }
      ]
    },
    "#W3746173": {
      order_id: "#W3746173",
      user_id: "evelyn_ahmed_3960",
      address: {
        address1: "479 Park Avenue",
        address2: "Suite 809",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20344"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "2882812427",
          price: 261.11,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand A"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 261.11,
          payment_method_id: "gift_card_5683713"
        }
      ]
    },
    "#W1605168": {
      order_id: "#W1605168",
      user_id: "yara_moore_6466",
      address: {
        address1: "485 Lakeview Drive",
        address2: "Suite 839",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92162"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "8214883393",
          price: 150.58,
          options: {
            color: "black",
            "sensor type": "laser",
            connectivity: "wireless"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4615543240",
          price: 1042.93,
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "silver"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2989722512",
          price: 455.34,
          options: {
            material: "glass",
            color: "white",
            height: "3 ft"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9644439410",
          price: 3280.31,
          options: {
            resolution: "20MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3333391894",
          price: 534.14,
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "fixed"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["186122091047"],
          item_ids: [
            "8214883393",
            "4615543240",
            "2989722512",
            "9644439410",
            "3333391894"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5463.3,
          payment_method_id: "paypal_3473552"
        }
      ]
    },
    "#W8046874": {
      order_id: "#W8046874",
      user_id: "juan_gonzalez_6489",
      address: {
        address1: "920 Laurel Lane",
        address2: "Suite 692",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32182"
      },
      items: [
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "2509076505",
          price: 189.5,
          options: {
            size: "10",
            color: "gray",
            material: "leather"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "8551474201",
          price: 938.92,
          options: {
            "screen size": "8-inch",
            storage: "64GB",
            color: "silver"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7373893106",
          price: 531.22,
          options: {
            material: "glass",
            color: "white",
            height: "4 ft"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "9013366374",
          price: 219.88,
          options: {
            size: "M",
            color: "blue",
            ventilation: "high"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "8349903180",
          price: 102.07,
          options: {
            capacity: "20000mAh",
            output: "Wireless",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["119767688123"],
          item_ids: [
            "2509076505",
            "8551474201",
            "7373893106",
            "9013366374",
            "8349903180"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1981.59,
          payment_method_id: "gift_card_2446065"
        }
      ]
    },
    "#W4998173": {
      order_id: "#W4998173",
      user_id: "lucas_martin_7509",
      address: {
        address1: "966 Willow Lane",
        address2: "Suite 647",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78753"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7199146548",
          price: 48.02,
          options: {
            capacity: "750ml",
            material: "plastic",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["483118273264"],
          item_ids: ["7199146548"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 48.02,
          payment_method_id: "credit_card_2325059"
        }
      ]
    },
    "#W9034102": {
      order_id: "#W9034102",
      user_id: "yara_silva_7567",
      address: {
        address1: "116 Laurel Lane",
        address2: "Suite 319",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77159"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "6341716129",
          price: 523.31,
          options: {
            "room size": "large",
            "filter type": "HEPA",
            features: "smart sensors"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "5726859009",
          price: 200.48,
          options: {
            color: "grey",
            size: "large",
            material: "nylon",
            compartment: "hydration"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "3453331371",
          price: 52.79,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6501071631",
          price: 1018.68,
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "gold"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1795.26,
          payment_method_id: "gift_card_7252880"
        }
      ]
    },
    "#W1170711": {
      order_id: "#W1170711",
      user_id: "anya_brown_2024",
      address: {
        address1: "391 Lakeview Drive",
        address2: "Suite 326",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10121"
      },
      items: [
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "9850781806",
          price: 184.48,
          options: {
            diameter: "14 inches",
            color: "white",
            type: "digital"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "6805564527",
          price: 158.41,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "8068777068",
          price: 507.13,
          options: {
            "weight range": "5-25 lbs",
            material: "rubber",
            "set type": "fixed"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "4716977452",
          price: 289.69,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1139.71,
          payment_method_id: "credit_card_3414703"
        }
      ]
    },
    "#W9384736": {
      order_id: "#W9384736",
      user_id: "yara_muller_8652",
      address: {
        address1: "575 Oak Street",
        address2: "Suite 866",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85041"
      },
      items: [
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "9385662952",
          price: 159.92,
          options: {
            size: "L",
            color: "black",
            zipper: "full"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "9459890810",
          price: 510.1,
          options: {
            material: "fabric",
            color: "gray",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "6571567889",
          price: 507.06,
          options: {
            resolution: "5K",
            waterproof: "yes",
            color: "black"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "2872451762",
          price: 622.12,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["782539643511"],
          item_ids: ["9385662952", "9459890810", "6571567889", "2872451762"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1799.2,
          payment_method_id: "credit_card_3095586"
        }
      ]
    },
    "#W6483628": {
      order_id: "#W6483628",
      user_id: "juan_sanchez_8249",
      address: {
        address1: "281 Main Street",
        address2: "Suite 979",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20156"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "2751999929",
          price: 195.11,
          options: {
            size: "large",
            material: "memory foam",
            color: "grey"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7255224608",
          price: 2922.97,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "CF card"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9747045638",
          price: 94.01,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2323972008",
          price: 146.98,
          options: {
            capacity: "1L",
            material: "glass",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["845194533053"],
          item_ids: ["2751999929", "7255224608", "9747045638", "2323972008"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3359.07,
          payment_method_id: "paypal_2849300"
        }
      ]
    },
    "#W8859225": {
      order_id: "#W8859225",
      user_id: "chen_smith_8425",
      address: {
        address1: "932 Hickory Lane",
        address2: "Suite 309",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32278"
      },
      items: [
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "1999523885",
          price: 294.47,
          options: {
            resolution: "4K",
            "field of view": "160 degrees",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9665000388",
          price: 269.46,
          options: {
            "switch type": "clicky",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "5966895767",
          price: 329.58,
          options: {
            resolution: "2K",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2052249669",
          price: 237.14,
          options: {
            color: "white",
            "battery life": "4 hours",
            "water resistance": "not resistant"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["208425478671"],
          item_ids: ["1999523885", "9665000388", "5966895767", "2052249669"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1130.65,
          payment_method_id: "paypal_9175769"
        },
        {
          transaction_type: "refund",
          amount: 1130.65,
          payment_method_id: "paypal_9175769"
        }
      ]
    },
    "#W9711842": {
      order_id: "#W9711842",
      user_id: "yusuf_rossi_9620",
      address: {
        address1: "763 Broadway",
        address2: "Suite 135",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19122"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4245201809",
          price: 281.48,
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "non-polarized",
            "frame material": "metal"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["540934230326"],
          item_ids: ["4245201809"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 281.48,
          payment_method_id: "credit_card_9513926"
        },
        {
          transaction_type: "refund",
          amount: 281.48,
          payment_method_id: "credit_card_9513926"
        }
      ]
    },
    "#W1544028": {
      order_id: "#W1544028",
      user_id: "liam_anderson_5973",
      address: {
        address1: "730 Highland Drive",
        address2: "Suite 148",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43107"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5645314103",
          price: 46.19,
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "8886009523",
          price: 1944.02,
          options: {
            "strap material": "silicone",
            "dial color": "blue"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["569072228476"],
          item_ids: ["5645314103", "8886009523"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1990.21,
          payment_method_id: "paypal_6282316"
        }
      ]
    },
    "#W8797321": {
      order_id: "#W8797321",
      user_id: "omar_johnson_2562",
      address: {
        address1: "349 Cedar Street",
        address2: "Suite 322",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80266"
      },
      items: [
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "8470360507",
          price: 291.31,
          options: {
            resolution: "2K",
            "field of view": "130 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3478699712",
          price: 2291.87,
          options: {
            "screen size": "15-inch",
            processor: "i5",
            ram: "16GB",
            storage: "512GB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2583.18,
          payment_method_id: "gift_card_9532915"
        }
      ]
    },
    "#W8976713": {
      order_id: "#W8976713",
      user_id: "mohamed_santos_2427",
      address: {
        address1: "842 River Road",
        address2: "Suite 576",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76188"
      },
      items: [
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "3039787582",
          price: 256.94,
          options: {
            color: "stainless steel",
            capacity: "4 cups",
            type: "drip",
            features: "auto shutoff"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2323972008",
          price: 146.98,
          options: {
            capacity: "1L",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "3892645120",
          price: 3070.64,
          options: {
            resolution: "30MP",
            zoom: "10x",
            storage: "CF card"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "4024196380",
          price: 102.9,
          options: {
            length: "50ft",
            material: "latex",
            color: "black"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6017636844",
          price: 2292.37,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["911496594178"],
          item_ids: [
            "3039787582",
            "2323972008",
            "3892645120",
            "4024196380",
            "6017636844"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5869.83,
          payment_method_id: "gift_card_4710915"
        }
      ]
    },
    "#W3220203": {
      order_id: "#W3220203",
      user_id: "aarav_anderson_8794",
      address: {
        address1: "931 Maple Drive",
        address2: "Suite 985",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19031"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5650803029",
          price: 324.63,
          options: {
            color: "black",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["235384470799"],
          item_ids: ["5650803029"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 324.63,
          payment_method_id: "gift_card_7245904"
        }
      ]
    },
    "#W9784474": {
      order_id: "#W9784474",
      user_id: "noah_patel_1311",
      address: {
        address1: "229 Maple Drive",
        address2: "Suite 494",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91103"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "7896397433",
          price: 457.81,
          options: {
            "weight range": "5-25 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1615379700",
          price: 253.89,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "8384507844",
          price: 137.94,
          options: {
            color: "white",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "3234800602",
          price: 46.66,
          options: {
            color: "red",
            size: "L",
            material: "cotton",
            style: "v-neck"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9811090008",
          price: 370.38,
          options: {
            color: "silver",
            "band material": "leather",
            display: "LCD"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["168370840530"],
          item_ids: [
            "7896397433",
            "1615379700",
            "8384507844",
            "3234800602",
            "9811090008"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1266.68,
          payment_method_id: "gift_card_7733255"
        }
      ]
    },
    "#W1860706": {
      order_id: "#W1860706",
      user_id: "fatima_lee_3440",
      address: {
        address1: "740 Hickory Lane",
        address2: "Suite 542",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20086"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "9375701158",
          price: 489.5,
          options: {
            "room size": "medium",
            "filter type": "carbon",
            features: "quiet operation"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "2872451762",
          price: 622.12,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["642415115301"],
          item_ids: ["9375701158", "2872451762"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1111.62,
          payment_method_id: "credit_card_3395407"
        },
        {
          transaction_type: "refund",
          amount: 1111.62,
          payment_method_id: "credit_card_3395407"
        }
      ]
    },
    "#W3973757": {
      order_id: "#W3973757",
      user_id: "chen_johnson_4204",
      address: {
        address1: "503 Elm Avenue",
        address2: "Suite 641",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77004"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4068787148",
          price: 52.01,
          options: {
            pieces: "500",
            theme: "art",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7407838442",
          price: 3081.91,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "manual"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "6254646215",
          price: 248.85,
          options: {
            "skin tone": "dark",
            "kit size": "basic",
            brand: "Brand B"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9192177173",
          price: 335.99,
          options: {
            color: "gold",
            "band material": "metal",
            display: "LCD"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1262139877",
          price: 239.99,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["865212722111"],
          item_ids: [
            "4068787148",
            "7407838442",
            "6254646215",
            "9192177173",
            "1262139877"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3958.75,
          payment_method_id: "paypal_3742148"
        }
      ]
    },
    "#W6207110": {
      order_id: "#W6207110",
      user_id: "evelyn_ito_7643",
      address: {
        address1: "890 Elm Street",
        address2: "Suite 306",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92127"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "7251508981",
          price: 212.04,
          options: {
            color: "green",
            size: "small",
            material: "leather",
            compartment: "camera"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5650803029",
          price: 324.63,
          options: {
            color: "black",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 536.67,
          payment_method_id: "credit_card_1461379"
        }
      ]
    },
    "#W2905754": {
      order_id: "#W2905754",
      user_id: "lei_wilson_4541",
      address: {
        address1: "119 Elm Avenue",
        address2: "Suite 999",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32255"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5206946487",
          price: 95.08,
          options: {
            length: "50ft",
            material: "vinyl",
            color: "black"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9973034634",
          price: 2850.32,
          options: {
            resolution: "20MP",
            zoom: "3x",
            storage: "CF card"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3478699712",
          price: 2291.87,
          options: {
            "screen size": "15-inch",
            processor: "i5",
            ram: "16GB",
            storage: "512GB SSD",
            color: "space grey"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4329558751",
          price: 297.33,
          options: {
            "frame color": "silver",
            "lens color": "blue",
            "lens type": "non-polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "7903094618",
          price: 90.32,
          options: {
            capacity: "5000mAh",
            output: "USB-A",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["232257628569"],
          item_ids: [
            "5206946487",
            "9973034634",
            "3478699712",
            "4329558751",
            "7903094618"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5624.92,
          payment_method_id: "credit_card_3677959"
        }
      ]
    },
    "#W5282037": {
      order_id: "#W5282037",
      user_id: "daiki_johnson_9523",
      address: {
        address1: "834 Park Avenue",
        address2: "Suite 947",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80273"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "3230708338",
          price: 99.51,
          options: {
            length: "25ft",
            material: "latex",
            color: "green"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "6254646215",
          price: 248.85,
          options: {
            "skin tone": "dark",
            "kit size": "basic",
            brand: "Brand B"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 348.36,
          payment_method_id: "paypal_2433177"
        }
      ]
    },
    "#W7032009": {
      order_id: "#W7032009",
      user_id: "ivan_khan_7475",
      address: {
        address1: "159 Hickory Lane",
        address2: "Suite 995",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28243"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "7166996157",
          price: 518.31,
          options: {
            "room size": "small",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "8054888773",
          price: 206.03,
          options: {
            color: "grey",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 724.34,
          payment_method_id: "paypal_7729105"
        }
      ]
    },
    "#W8068454": {
      order_id: "#W8068454",
      user_id: "daiki_patel_5953",
      address: {
        address1: "670 Chestnut Street",
        address2: "Suite 982",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94111"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5537798301",
          price: 204.47,
          options: {
            size: "S",
            color: "black",
            ventilation: "medium"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "9179378709",
          price: 326.59,
          options: {
            color: "green",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "1327854740",
          price: 492.65,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7154215719",
          price: 505.62,
          options: {
            material: "wood",
            color: "brown",
            height: "6 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["498620026853"],
          item_ids: ["5537798301", "9179378709", "1327854740", "7154215719"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1529.33,
          payment_method_id: "paypal_1009053"
        }
      ]
    },
    "#W3964602": {
      order_id: "#W3964602",
      user_id: "yara_silva_7567",
      address: {
        address1: "555 Highland Drive",
        address2: "Suite 872",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10116"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7907773809",
          price: 209.69,
          options: {
            size: "L",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "4422467033",
          price: 483.47,
          options: {
            "weight range": "30-50 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4965355367",
          price: 620.07,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5537798301",
          price: 204.47,
          options: {
            size: "S",
            color: "black",
            ventilation: "medium"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "9179378709",
          price: 326.59,
          options: {
            color: "green",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["632492212704"],
          item_ids: [
            "7907773809",
            "4422467033",
            "4965355367",
            "5537798301",
            "9179378709"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1844.29,
          payment_method_id: "gift_card_7252880"
        }
      ]
    },
    "#W8870011": {
      order_id: "#W8870011",
      user_id: "anya_thomas_1213",
      address: {
        address1: "270 Park Avenue",
        address2: "Suite 508",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98123"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1706622510",
          price: 328.67,
          options: {
            color: "black",
            "band material": "metal",
            display: "LCD"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9644439410",
          price: 3280.31,
          options: {
            resolution: "20MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8349118980",
          price: 53.43,
          options: {
            color: "blue",
            size: "S",
            material: "cotton",
            style: "v-neck"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "6574183535",
          price: 28.14,
          options: {
            size: "A6",
            "cover type": "hard cover"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "5067898160",
          price: 209.95,
          options: {
            size: "medium",
            material: "memory foam",
            color: "brown"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["872096774058"],
          item_ids: [
            "1706622510",
            "9644439410",
            "8349118980",
            "6574183535",
            "5067898160"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3900.5,
          payment_method_id: "paypal_2557789"
        },
        {
          transaction_type: "refund",
          amount: 3900.5,
          payment_method_id: "paypal_2557789"
        }
      ]
    },
    "#W5666460": {
      order_id: "#W5666460",
      user_id: "fatima_anderson_6252",
      address: {
        address1: "541 Cedar Avenue",
        address2: "Suite 589",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78773"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "2645006275",
          price: 183.11,
          options: {
            color: "white",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8649999816",
          price: 540.49,
          options: {
            material: "glass",
            color: "brown",
            height: "4 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["299488717032"],
          item_ids: ["2645006275", "8649999816"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 723.6,
          payment_method_id: "paypal_8202738"
        }
      ]
    },
    "#W4836353": {
      order_id: "#W4836353",
      user_id: "amelia_silva_7726",
      address: {
        address1: "182 Elm Avenue",
        address2: "Suite 875",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19117"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1421289881",
          price: 268.77,
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5311660992",
          price: 1161.04,
          options: {
            color: "rose gold",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "5.8-inch"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1429.81,
          payment_method_id: "gift_card_3491931"
        }
      ]
    },
    "#W1355800": {
      order_id: "#W1355800",
      user_id: "evelyn_lopez_5487",
      address: {
        address1: "142 Chestnut Street",
        address2: "Suite 757",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92195"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5537798301",
          price: 204.47,
          options: {
            size: "S",
            color: "black",
            ventilation: "medium"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["601934129412"],
          item_ids: ["5537798301"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 204.47,
          payment_method_id: "credit_card_3566337"
        }
      ]
    },
    "#W6584521": {
      order_id: "#W6584521",
      user_id: "aarav_brown_3744",
      address: {
        address1: "556 Spruce Street",
        address2: "Suite 899",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94132"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "9459890810",
          price: 510.1,
          options: {
            material: "fabric",
            color: "gray",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "7758198585",
          price: 1917.21,
          options: {
            "frame size": "medium",
            color: "green",
            type: "road"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5339029584",
          price: 1128.99,
          options: {
            color: "black",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "6.5-inch"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "9692325258",
          price: 528.63,
          options: {
            "piece count": "3-piece",
            color: "black",
            material: "softshell"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "8997785118",
          price: 2674.4,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6759.33,
          payment_method_id: "credit_card_3627996"
        }
      ]
    },
    "#W3137176": {
      order_id: "#W3137176",
      user_id: "harper_ito_5985",
      address: {
        address1: "473 Cedar Avenue",
        address2: "Suite 949",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90152"
      },
      items: [
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "5586947715",
          price: 92.53,
          options: {
            thickness: "4mm",
            material: "PVC",
            color: "blue"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5268233322",
          price: 155.99,
          options: {
            capacity: "1L",
            material: "glass",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["447687149450"],
          item_ids: ["5586947715", "5268233322"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 248.52,
          payment_method_id: "gift_card_4058084"
        }
      ]
    },
    "#W5730905": {
      order_id: "#W5730905",
      user_id: "juan_kim_6026",
      address: {
        address1: "691 Sunset Drive",
        address2: "Suite 756",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78247"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "4202497723",
          price: 342.81,
          options: {
            type: "over-ear",
            connectivity: "wireless",
            color: "blue"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4772738468",
          price: 53.91,
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7407838442",
          price: 3081.91,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "manual"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6956751343",
          price: 217.06,
          options: {
            "deck material": "bamboo",
            length: "34 inch",
            design: "custom"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["181936894138"],
          item_ids: ["4202497723", "4772738468", "7407838442", "6956751343"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3695.69,
          payment_method_id: "paypal_5061070"
        }
      ]
    },
    "#W1092119": {
      order_id: "#W1092119",
      user_id: "sophia_martin_8570",
      address: {
        address1: "592 Elm Avenue",
        address2: "Suite 978",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77242"
      },
      items: [
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6690069155",
          price: 466.47,
          options: {
            "piece count": "3-piece",
            color: "silver",
            material: "softshell"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 466.47,
          payment_method_id: "credit_card_5694100"
        }
      ]
    },
    "#W8632528": {
      order_id: "#W8632528",
      user_id: "ethan_lopez_6291",
      address: {
        address1: "467 Oak Street",
        address2: "Suite 710",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92156"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "5917587651",
          price: 212.79,
          options: {
            color: "grey",
            size: "medium",
            material: "polyester",
            compartment: "laptop"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2185126308",
          price: 241.9,
          options: {
            size: "10",
            material: "leather",
            waterproof: "no"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6245231688",
          price: 522.03,
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["860038427589"],
          item_ids: ["5917587651", "2185126308", "6245231688"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 976.72,
          payment_method_id: "gift_card_7219486"
        }
      ]
    },
    "#W2403263": {
      order_id: "#W2403263",
      user_id: "lei_patel_3139",
      address: {
        address1: "865 Park Avenue",
        address2: "Suite 944",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60604"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9644439410",
          price: 3280.31,
          options: {
            resolution: "20MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "5421902839",
          price: 328.25,
          options: {
            "scent family": "oriental",
            size: "100ml",
            gender: "men"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3608.56,
          payment_method_id: "credit_card_4589919"
        }
      ]
    },
    "#W6581939": {
      order_id: "#W6581939",
      user_id: "isabella_lopez_5733",
      address: {
        address1: "500 River Road",
        address2: "Suite 209",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98127"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "5726859009",
          price: 200.48,
          options: {
            color: "grey",
            size: "large",
            material: "nylon",
            compartment: "hydration"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8349118980",
          price: 53.43,
          options: {
            color: "blue",
            size: "S",
            material: "cotton",
            style: "v-neck"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "2226219750",
          price: 2009.03,
          options: {
            "strap material": "silicone",
            "dial color": "white"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6585768447",
          price: 467.69,
          options: {
            "weight range": "5-25 lbs",
            material: "urethane",
            "set type": "fixed"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["609861450567"],
          item_ids: ["5726859009", "8349118980", "2226219750", "6585768447"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2730.63,
          payment_method_id: "paypal_5789912"
        }
      ]
    },
    "#W2091016": {
      order_id: "#W2091016",
      user_id: "omar_anderson_5940",
      address: {
        address1: "157 Spruce Street",
        address2: "Suite 979",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85011"
      },
      items: [
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "5952720925",
          price: 260.19,
          options: {
            color: "black",
            capacity: "4 cups",
            type: "espresso",
            features: "timer"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "7211586944",
          price: 272.71,
          options: {
            color: "black",
            capacity: "8 cups",
            type: "espresso",
            features: "built-in grinder"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "1270145486",
          price: 144.07,
          options: {
            color: "white",
            brightness: "high",
            "power source": "battery"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "6546364613",
          price: 231.43,
          options: {
            size: "11",
            material: "synthetic",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 908.4,
          payment_method_id: "paypal_2055565"
        }
      ]
    },
    "#W3130816": {
      order_id: "#W3130816",
      user_id: "mason_lopez_5208",
      address: {
        address1: "760 Maple Drive",
        address2: "Suite 631",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10257"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8479046075",
          price: 451.01,
          options: {
            material: "wood",
            color: "white",
            height: "5 ft"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 451.01,
          payment_method_id: "paypal_9591556"
        }
      ]
    },
    "#W8541484": {
      order_id: "#W8541484",
      user_id: "yara_sanchez_9692",
      address: {
        address1: "704 Laurel Lane",
        address2: "Suite 604",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19093"
      },
      items: [
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5311660992",
          price: 1161.04,
          options: {
            color: "rose gold",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "5.8-inch"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1304426904",
          price: 565.79,
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7751905257",
          price: 321.18,
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "4410138384",
          price: 197.37,
          options: {
            size: "8",
            color: "gray",
            material: "canvas"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["141033377741"],
          item_ids: ["5311660992", "1304426904", "7751905257", "4410138384"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2245.38,
          payment_method_id: "credit_card_9277564"
        },
        {
          transaction_type: "refund",
          amount: 2245.38,
          payment_method_id: "credit_card_9277564"
        }
      ]
    },
    "#W9121070": {
      order_id: "#W9121070",
      user_id: "omar_santos_4830",
      address: {
        address1: "621 Spruce Street",
        address2: "Suite 698",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76180"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "6259501109",
          price: 652.61,
          options: {
            type: "robotic",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8590708195",
          price: 157.61,
          options: {
            size: "XL",
            color: "navy",
            zipper: "half"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "8030558068",
          price: 186.78,
          options: {
            color: "black",
            size: "medium",
            material: "nylon",
            compartment: "hydration"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "7528037711",
          price: 157.86,
          options: {
            size: "XL",
            color: "navy",
            zipper: "full"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1154.86,
          payment_method_id: "gift_card_3895897"
        }
      ]
    },
    "#W6399745": {
      order_id: "#W6399745",
      user_id: "ava_silva_4632",
      address: {
        address1: "450 Sunset Drive",
        address2: "Suite 845",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76109"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "8153356023",
          price: 212.47,
          options: {
            size: "L",
            color: "blue",
            ventilation: "medium"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "7747408585",
          price: 249.01,
          options: {
            compatibility: "Google Assistant",
            color: "black"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "3676786561",
          price: 502.7,
          options: {
            "room size": "small",
            "filter type": "HEPA",
            features: "quiet operation"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "2444431651",
          price: 534.84,
          options: {
            "weight range": "55-75 lbs",
            material: "iron",
            "set type": "fixed"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["573350633271"],
          item_ids: ["8153356023", "7747408585", "3676786561", "2444431651"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1499.02,
          payment_method_id: "gift_card_2721181"
        },
        {
          transaction_type: "refund",
          amount: 1499.02,
          payment_method_id: "gift_card_2721181"
        }
      ]
    },
    "#W7821216": {
      order_id: "#W7821216",
      user_id: "aarav_garcia_9402",
      address: {
        address1: "822 Chestnut Street",
        address2: "Suite 868",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10129"
      },
      items: [
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "1775591963",
          price: 154.75,
          options: {
            size: "10",
            color: "white",
            material: "leather",
            sole: "EVA"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3951031513",
          price: 3289.46,
          options: {
            pressure: "19 bar",
            capacity: "1.5L",
            type: "automatic"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "4821837102",
          price: 243.59,
          options: {
            color: "white",
            capacity: "4 cups",
            type: "french press",
            features: "built-in grinder"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9624127908",
          price: 158.9,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["374010279750"],
          item_ids: ["1775591963", "3951031513", "4821837102", "9624127908"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3846.7,
          payment_method_id: "credit_card_6821943"
        }
      ]
    },
    "#W7554786": {
      order_id: "#W7554786",
      user_id: "liam_li_6251",
      address: {
        address1: "674 Willow Lane",
        address2: "Suite 375",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75285"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "5047954489",
          price: 54.84,
          options: {
            color: "blue",
            size: "S",
            material: "polyester",
            style: "v-neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["199670411873"],
          item_ids: ["5047954489"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 54.84,
          payment_method_id: "gift_card_5800903"
        }
      ]
    },
    "#W8499625": {
      order_id: "#W8499625",
      user_id: "james_sanchez_3954",
      address: {
        address1: "933 Spruce Street",
        address2: "Suite 830",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43151"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "3369928769",
          price: 97.35,
          options: {
            length: "25ft",
            material: "vinyl",
            color: "green"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["426588568563"],
          item_ids: ["3369928769"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 97.35,
          payment_method_id: "paypal_1261484"
        }
      ]
    },
    "#W6087266": {
      order_id: "#W6087266",
      user_id: "emma_kim_5391",
      address: {
        address1: "852 Park Avenue",
        address2: "Suite 172",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94142"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2658930189",
          price: 241.68,
          options: {
            size: "9",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5339029584",
          price: 1128.99,
          options: {
            color: "black",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "6.5-inch"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5489028872",
          price: 187.71,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "graphic"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8649999816",
          price: 540.49,
          options: {
            material: "glass",
            color: "brown",
            height: "4 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["371354679679"],
          item_ids: ["2658930189", "5339029584", "5489028872", "8649999816"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2098.87,
          payment_method_id: "gift_card_8967157"
        }
      ]
    },
    "#W5306703": {
      order_id: "#W5306703",
      user_id: "sofia_muller_1555",
      address: {
        address1: "674 Willow Lane",
        address2: "Suite 397",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20590"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "2366567022",
          price: 54.04,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "blue"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "8926329222",
          price: 452.28,
          options: {
            "piece count": "2-piece",
            color: "black",
            material: "softshell"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "9375701158",
          price: 489.5,
          options: {
            "room size": "medium",
            "filter type": "carbon",
            features: "quiet operation"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7401244629",
          price: 188.92,
          options: {
            size: "L",
            color: "red",
            ventilation: "high"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "4241599783",
          price: 2324.61,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "16GB",
            storage: "1TB SSD",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3509.35,
          payment_method_id: "paypal_6980481"
        }
      ]
    },
    "#W8808917": {
      order_id: "#W8808917",
      user_id: "sofia_moore_9773",
      address: {
        address1: "181 Elm Street",
        address2: "Suite 178",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20030"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "8555936349",
          price: 226.49,
          options: {
            color: "blue",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["671822783165"],
          item_ids: ["8555936349"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 226.49,
          payment_method_id: "credit_card_1893409"
        }
      ]
    },
    "#W4901434": {
      order_id: "#W4901434",
      user_id: "ava_kovacs_8312",
      address: {
        address1: "254 Laurel Lane",
        address2: "Suite 157",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75346"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5172162216",
          price: 48.51,
          options: {
            pieces: "2000",
            theme: "landscape",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4329558751",
          price: 297.33,
          options: {
            "frame color": "silver",
            "lens color": "blue",
            "lens type": "non-polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6301799585",
          price: 495.87,
          options: {
            "piece count": "3-piece",
            color: "blue",
            material: "softshell"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["186428582380"],
          item_ids: ["5172162216", "4329558751", "6301799585"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 841.71,
          payment_method_id: "gift_card_8324796"
        }
      ]
    },
    "#W6221400": {
      order_id: "#W6221400",
      user_id: "harper_kovacs_9747",
      address: {
        address1: "859 Chestnut Street",
        address2: "Suite 840",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10206"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "4035304400",
          price: 504.19,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "smart sensors"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "1725100896",
          price: 289.66,
          options: {
            "scent family": "oriental",
            size: "30ml",
            gender: "unisex"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7843064651",
          price: 50.14,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "blue"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["852423866434"],
          item_ids: ["4035304400", "1725100896", "7843064651"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 843.99,
          payment_method_id: "gift_card_5087631"
        }
      ]
    },
    "#W5056519": {
      order_id: "#W5056519",
      user_id: "yara_muller_8652",
      address: {
        address1: "575 Oak Street",
        address2: "Suite 866",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85041"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7902309762",
          price: 243.62,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand B"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 243.62,
          payment_method_id: "credit_card_3095586"
        }
      ]
    },
    "#W3794101": {
      order_id: "#W3794101",
      user_id: "olivia_smith_8953",
      address: {
        address1: "915 Elm Street",
        address2: "Suite 995",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32177"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3339188619",
          price: 200.24,
          options: {
            size: "M",
            color: "blue",
            ventilation: "low"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["551754161831"],
          item_ids: ["3339188619"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 200.24,
          payment_method_id: "paypal_2076152"
        }
      ]
    },
    "#W9706917": {
      order_id: "#W9706917",
      user_id: "ava_kovacs_8312",
      address: {
        address1: "254 Laurel Lane",
        address2: "Suite 157",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75346"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6065192424",
          price: 989.7,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "gold"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "6309044598",
          price: 218.59,
          options: {
            color: "grey",
            size: "large",
            material: "polyester",
            compartment: "hydration"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["956444895772"],
          item_ids: ["6065192424", "6309044598"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1208.29,
          payment_method_id: "paypal_3610783"
        }
      ]
    },
    "#W1090976": {
      order_id: "#W1090976",
      user_id: "sofia_hernandez_8513",
      address: {
        address1: "971 Park Avenue",
        address2: "Suite 556",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78219"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9408160950",
          price: 381.26,
          options: {
            color: "gold",
            "band material": "leather",
            display: "LCD"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "9956648681",
          price: 452.62,
          options: {
            "piece count": "4-piece",
            color: "red",
            material: "hardshell"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3333391894",
          price: 534.14,
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "fixed"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "4716977452",
          price: 289.69,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "9083642334",
          price: 164.28,
          options: {
            color: "white",
            brightness: "high",
            "power source": "USB"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1821.99,
          payment_method_id: "credit_card_3753643"
        }
      ]
    },
    "#W1279004": {
      order_id: "#W1279004",
      user_id: "james_sanchez_3954",
      address: {
        address1: "219 Park Avenue",
        address2: "Suite 437",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60623"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "6439196450",
          price: 254.56,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "60%"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "5992316252",
          price: 141.29,
          options: {
            size: "S",
            color: "red",
            zipper: "half"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "6901578702",
          price: 307.42,
          options: {
            resolution: "4K",
            "field of view": "130 degrees",
            connectivity: "Ethernet"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["829520742983"],
          item_ids: ["6439196450", "5992316252", "6901578702"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 703.27,
          payment_method_id: "paypal_1261484"
        },
        {
          transaction_type: "refund",
          amount: 703.27,
          payment_method_id: "paypal_1261484"
        }
      ]
    },
    "#W3723334": {
      order_id: "#W3723334",
      user_id: "emma_kovacs_5477",
      address: {
        address1: "809 Main Street",
        address2: "Suite 716",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95111"
      },
      items: [
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "5606522780",
          price: 1902.67,
          options: {
            "frame size": "large",
            color: "red",
            type: "mountain"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4900990404",
          price: 336.71,
          options: {
            color: "silver",
            "band material": "metal",
            display: "AMOLED"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "3374679624",
          price: 370.53,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["792130045878"],
          item_ids: ["5606522780", "4900990404", "3374679624"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2609.91,
          payment_method_id: "gift_card_9246707"
        },
        {
          transaction_type: "refund",
          amount: 2609.91,
          payment_method_id: "gift_card_9246707"
        }
      ]
    },
    "#W6151519": {
      order_id: "#W6151519",
      user_id: "omar_silva_9907",
      address: {
        address1: "480 Cedar Street",
        address2: "Suite 404",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98141"
      },
      items: [
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "4107812777",
          price: 155.33,
          options: {
            size: "9",
            color: "black",
            material: "synthetic",
            sole: "rubber"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "7658724607",
          price: 256.73,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9132333852",
          price: 139.47,
          options: {
            capacity: "1L",
            material: "plastic",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 551.53,
          payment_method_id: "gift_card_5193172"
        }
      ]
    },
    "#W2818151": {
      order_id: "#W2818151",
      user_id: "sofia_rossi_8776",
      address: {
        address1: "322 Park Avenue",
        address2: "Suite 683",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32181"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "7747408585",
          price: 249.01,
          options: {
            compatibility: "Google Assistant",
            color: "black"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9747045638",
          price: 94.01,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "4624254797",
          price: 272.99,
          options: {
            "skin tone": "light",
            "kit size": "basic",
            brand: "Brand C"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "9956648681",
          price: 452.62,
          options: {
            "piece count": "4-piece",
            color: "red",
            material: "hardshell"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1068.63,
          payment_method_id: "credit_card_5051208"
        }
      ]
    },
    "#W4860251": {
      order_id: "#W4860251",
      user_id: "lucas_brown_6720",
      address: {
        address1: "221 Park Avenue",
        address2: "Suite 995",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10034"
      },
      items: [
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "5209958006",
          price: 514.72,
          options: {
            "piece count": "2-piece",
            color: "silver",
            material: "hardshell"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 514.72,
          payment_method_id: "credit_card_2112420"
        }
      ]
    },
    "#W9160732": {
      order_id: "#W9160732",
      user_id: "aarav_gonzalez_5113",
      address: {
        address1: "264 River Road",
        address2: "Suite 604",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78268"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "2366567022",
          price: 54.04,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "blue"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7597543861",
          price: 310.47,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "8610532516",
          price: 203.76,
          options: {
            diameter: "10 inches",
            color: "black",
            type: "digital"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "3111466194",
          price: 285.66,
          options: {
            size: "7 ft",
            color: "red",
            material: "polyester",
            "tilt mechanism": "manual tilt"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8590708195",
          price: 157.61,
          options: {
            size: "XL",
            color: "navy",
            zipper: "half"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1011.54,
          payment_method_id: "gift_card_5979071"
        }
      ]
    },
    "#W2530531": {
      order_id: "#W2530531",
      user_id: "aarav_martin_9556",
      address: {
        address1: "179 Spruce Street",
        address2: "Suite 788",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92143"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "6454334990",
          price: 98.82,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["687098298881"],
          item_ids: ["6454334990"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 98.82,
          payment_method_id: "gift_card_4232974"
        }
      ]
    },
    "#W5299644": {
      order_id: "#W5299644",
      user_id: "lucas_moore_6941",
      address: {
        address1: "926 Spruce Street",
        address2: "Suite 671",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90006"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "6268080249",
          price: 244.02,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "6195938807",
          price: 103.98,
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "green"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "7747408585",
          price: 249.01,
          options: {
            compatibility: "Google Assistant",
            color: "black"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4131464125",
          price: 960.67,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["974265238769"],
          item_ids: ["6268080249", "6195938807", "7747408585", "4131464125"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1557.68,
          payment_method_id: "paypal_3345717"
        },
        {
          transaction_type: "refund",
          amount: 1557.68,
          payment_method_id: "paypal_3345717"
        }
      ]
    },
    "#W6378322": {
      order_id: "#W6378322",
      user_id: "raj_anderson_3167",
      address: {
        address1: "386 Willow Lane",
        address2: "Suite 231",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90093"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "3377900078",
          price: 260.68,
          options: {
            compatibility: "Apple HomeKit",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["594255390976"],
          item_ids: ["3377900078"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 260.68,
          payment_method_id: "gift_card_6662365"
        }
      ]
    },
    "#W3263208": {
      order_id: "#W3263208",
      user_id: "mei_kim_3337",
      address: {
        address1: "878 Highland Drive",
        address2: "Suite 894",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77083"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6324294385",
          price: 2719.01,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "automatic"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "7867398203",
          price: 232.7,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "60%"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2951.71,
          payment_method_id: "gift_card_3505897"
        }
      ]
    },
    "#W5961635": {
      order_id: "#W5961635",
      user_id: "daiki_muller_8062",
      address: {
        address1: "538 Elm Avenue",
        address2: "Suite 294",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94157"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "6546364613",
          price: 231.43,
          options: {
            size: "11",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "4875647558",
          price: 2805.77,
          options: {
            pressure: "15 bar",
            capacity: "1L",
            type: "capsule"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3098764622",
          price: 202.13,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "plain"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["319127870588"],
          item_ids: ["6546364613", "4875647558", "3098764622"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3239.33,
          payment_method_id: "gift_card_8385925"
        }
      ]
    },
    "#W5737680": {
      order_id: "#W5737680",
      user_id: "harper_garcia_5438",
      address: {
        address1: "527 Spruce Street",
        address2: "Suite 767",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80242"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "6499892866",
          price: 191.21,
          options: {
            size: "medium",
            material: "polyester",
            color: "beige"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "3788616824",
          price: 951.21,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1142.42,
          payment_method_id: "credit_card_2369458"
        }
      ]
    },
    "#W3130288": {
      order_id: "#W3130288",
      user_id: "mia_moore_8366",
      address: {
        address1: "200 Oak Street",
        address2: "Suite 453",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94180"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2989722512",
          price: 455.34,
          options: {
            material: "glass",
            color: "white",
            height: "3 ft"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "9970989750",
          price: 569.43,
          options: {
            type: "upright",
            "bagged/bagless": "bagged",
            features: "cordless"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2540052208",
          price: 346.42,
          options: {
            color: "gold",
            "band material": "silicone",
            display: "LCD"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7373893106",
          price: 531.22,
          options: {
            material: "glass",
            color: "white",
            height: "4 ft"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "6555827912",
          price: 199.42,
          options: {
            color: "black",
            "speed settings": "low",
            "battery type": "AA batteries"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2101.83,
          payment_method_id: "gift_card_7471275"
        }
      ]
    },
    "#W5995614": {
      order_id: "#W5995614",
      user_id: "yara_muller_8652",
      address: {
        address1: "575 Oak Street",
        address2: "Suite 866",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85041"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3877338112",
          price: 545.68,
          options: {
            "weight range": "5-25 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "9692325258",
          price: 528.63,
          options: {
            "piece count": "3-piece",
            color: "black",
            material: "softshell"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1074.31,
          payment_method_id: "credit_card_3095586"
        }
      ]
    },
    "#W9284598": {
      order_id: "#W9284598",
      user_id: "emma_kovacs_9839",
      address: {
        address1: "637 Pine Lane",
        address2: "Suite 443",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32190"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3264130640",
          price: 211.41,
          options: {
            size: "M",
            color: "black",
            ventilation: "medium"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "1434748144",
          price: 49.72,
          options: {
            capacity: "1000ml",
            material: "glass",
            color: "red"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7195021808",
          price: 2909.87,
          options: {
            resolution: "30MP",
            zoom: "5x",
            storage: "SD card"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3877338112",
          price: 545.68,
          options: {
            "weight range": "5-25 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7811981098",
          price: 213.86,
          options: {
            size: "S",
            color: "white",
            ventilation: "medium"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3930.54,
          payment_method_id: "credit_card_7239357"
        }
      ]
    },
    "#W9653558": {
      order_id: "#W9653558",
      user_id: "liam_li_5260",
      address: {
        address1: "475 Oak Street",
        address2: "Suite 412",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75259"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "3694871183",
          price: 256.67,
          options: {
            color: "white",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "1323134954",
          price: 236.95,
          options: {
            color: "stainless steel",
            capacity: "4 cups",
            type: "drip",
            features: "built-in grinder"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "9480266227",
          price: 255.98,
          options: {
            compatibility: "Apple HomeKit",
            color: "stainless steel"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "3020722515",
          price: 238.64,
          options: {
            color: "black",
            capacity: "1 cup",
            type: "french press",
            features: "auto shutoff"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "6942241102",
          price: 180.93,
          options: {
            size: "large",
            material: "memory foam",
            color: "beige"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1169.17,
          payment_method_id: "credit_card_7933535"
        }
      ]
    },
    "#W4155745": {
      order_id: "#W4155745",
      user_id: "fatima_li_5040",
      address: {
        address1: "959 Laurel Lane",
        address2: "Suite 892",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98103"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "1133777903",
          price: 359.66,
          options: {
            type: "in-ear",
            connectivity: "wired",
            color: "red"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "8170914468",
          price: 316.29,
          options: {
            size: "6 ft",
            color: "red",
            material: "olefin",
            "tilt mechanism": "manual tilt"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "3928046918",
          price: 198,
          options: {
            color: "black",
            size: "large",
            material: "nylon",
            compartment: "camera"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 873.95,
          payment_method_id: "paypal_6366157"
        }
      ]
    },
    "#W6052577": {
      order_id: "#W6052577",
      user_id: "harper_li_7655",
      address: {
        address1: "506 Oak Street",
        address2: "Suite 321",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32253"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6017636844",
          price: 2292.37,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5206946487",
          price: 95.08,
          options: {
            length: "50ft",
            material: "vinyl",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["725186813272"],
          item_ids: ["6017636844", "5206946487"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2387.45,
          payment_method_id: "gift_card_8862145"
        }
      ]
    },
    "#W4866703": {
      order_id: "#W4866703",
      user_id: "harper_johansson_2663",
      address: {
        address1: "490 River Road",
        address2: "Suite 486",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80281"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8426249116",
          price: 488.81,
          options: {
            material: "fabric",
            color: "black",
            armrest: "fixed",
            "backrest height": "standard"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "1793929609",
          price: 514.34,
          options: {
            material: "fabric",
            color: "black",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "8030558068",
          price: 186.78,
          options: {
            color: "black",
            size: "medium",
            material: "nylon",
            compartment: "hydration"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "8142779083",
          price: 157.53,
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "silver"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "2226219750",
          price: 2009.03,
          options: {
            "strap material": "silicone",
            "dial color": "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3356.49,
          payment_method_id: "paypal_4820484"
        }
      ]
    },
    "#W4794911": {
      order_id: "#W4794911",
      user_id: "yusuf_garcia_3055",
      address: {
        address1: "794 Park Avenue",
        address2: "Suite 828",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20080"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "9190635437",
          price: 153.23,
          options: {
            color: "black",
            brightness: "low",
            "power source": "USB"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9647292434",
          price: 53.48,
          options: {
            color: "purple",
            size: "S",
            material: "polyester",
            style: "v-neck"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5268233322",
          price: 155.99,
          options: {
            capacity: "1L",
            material: "glass",
            color: "white"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "9534205511",
          price: 473.43,
          options: {
            "room size": "large",
            "filter type": "ionic",
            features: "smart sensors"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "7609274509",
          price: 243.4,
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "32GB"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["263958857111"],
          item_ids: [
            "9190635437",
            "9647292434",
            "5268233322",
            "9534205511",
            "7609274509"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1079.53,
          payment_method_id: "paypal_7503218"
        }
      ]
    },
    "#W4931754": {
      order_id: "#W4931754",
      user_id: "liam_li_8526",
      address: {
        address1: "638 Hickory Lane",
        address2: "Suite 502",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28226"
      },
      items: [
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "6243981804",
          price: 329.85,
          options: {
            size: "7 ft",
            color: "green",
            material: "sunbrella",
            "tilt mechanism": "auto tilt"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "4510078629",
          price: 2127.62,
          options: {
            "strap material": "metal",
            "dial color": "black"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2993891288",
          price: 383.08,
          options: {
            color: "silver",
            "band material": "leather",
            display: "AMOLED"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1151293680",
          price: 272.33,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "full size"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "7407609582",
          price: 602.48,
          options: {
            type: "upright",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["849689118826"],
          item_ids: [
            "6243981804",
            "4510078629",
            "2993891288",
            "1151293680",
            "7407609582"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3715.36,
          payment_method_id: "gift_card_5427896"
        }
      ]
    },
    "#W7044833": {
      order_id: "#W7044833",
      user_id: "omar_muller_7891",
      address: {
        address1: "292 Chestnut Street",
        address2: "Suite 262",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60628"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4068787148",
          price: 52.01,
          options: {
            pieces: "500",
            theme: "art",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "9421195098",
          price: 32.37,
          options: {
            size: "A6",
            "cover type": "soft cover"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 84.38,
          payment_method_id: "gift_card_3689412"
        }
      ]
    },
    "#W9502127": {
      order_id: "#W9502127",
      user_id: "daiki_johnson_9523",
      address: {
        address1: "834 Park Avenue",
        address2: "Suite 947",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80273"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "2872451762",
          price: 622.12,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "9534205511",
          price: 473.43,
          options: {
            "room size": "large",
            "filter type": "ionic",
            features: "smart sensors"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "6243981804",
          price: 329.85,
          options: {
            size: "7 ft",
            color: "green",
            material: "sunbrella",
            "tilt mechanism": "auto tilt"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3877338112",
          price: 545.68,
          options: {
            "weight range": "5-25 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "6259501109",
          price: 652.61,
          options: {
            type: "robotic",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["269178517234"],
          item_ids: [
            "2872451762",
            "9534205511",
            "6243981804",
            "3877338112",
            "6259501109"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2623.69,
          payment_method_id: "paypal_2433177"
        }
      ]
    },
    "#W8496475": {
      order_id: "#W8496475",
      user_id: "aarav_moore_6923",
      address: {
        address1: "330 Cedar Avenue",
        address2: "Suite 311",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85041"
      },
      items: [
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "6826843914",
          price: 326.74,
          options: {
            "scent family": "fresh",
            size: "100ml",
            gender: "men"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "3229676465",
          price: 51.94,
          options: {
            capacity: "500ml",
            material: "plastic",
            color: "black"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7274158061",
          price: 91.13,
          options: {
            material: "ceramic",
            capacity: "1 liter",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "9314474252",
          price: 330.08,
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "blue"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["519274965414"],
          item_ids: ["6826843914", "3229676465", "7274158061", "9314474252"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 799.89,
          payment_method_id: "paypal_4751854"
        }
      ]
    },
    "#W1305304": {
      order_id: "#W1305304",
      user_id: "raj_ito_1740",
      address: {
        address1: "667 Elm Street",
        address2: "Suite 624",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60641"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "5694328282",
          price: 323.19,
          options: {
            color: "gold",
            "band material": "leather",
            display: "AMOLED"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "4410138384",
          price: 197.37,
          options: {
            size: "8",
            color: "gray",
            material: "canvas"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8349118980",
          price: 53.43,
          options: {
            color: "blue",
            size: "S",
            material: "cotton",
            style: "v-neck"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "3952176596",
          price: 1199.77,
          options: {
            color: "rose gold",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "6.1-inch"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["515122929210"],
          item_ids: ["5694328282", "4410138384", "8349118980", "3952176596"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1773.76,
          payment_method_id: "credit_card_6480285"
        },
        {
          transaction_type: "refund",
          amount: 1773.76,
          payment_method_id: "credit_card_6480285"
        }
      ]
    },
    "#W4073673": {
      order_id: "#W4073673",
      user_id: "lei_wilson_4541",
      address: {
        address1: "119 Elm Avenue",
        address2: "Suite 999",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32255"
      },
      items: [
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "1775591963",
          price: 154.75,
          options: {
            size: "10",
            color: "white",
            material: "leather",
            sole: "EVA"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2216662955",
          price: 2520.52,
          options: {
            "screen size": "15-inch",
            processor: "i5",
            ram: "32GB",
            storage: "256GB SSD",
            color: "space grey"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "3112842858",
          price: 49.1,
          options: {
            pieces: "1000",
            theme: "fantasy",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "1793929609",
          price: 514.34,
          options: {
            material: "fabric",
            color: "black",
            armrest: "none",
            "backrest height": "high-back"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["926268675514"],
          item_ids: ["1775591963", "2216662955", "3112842858", "1793929609"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3238.71,
          payment_method_id: "credit_card_3677959"
        }
      ]
    },
    "#W2421430": {
      order_id: "#W2421430",
      user_id: "omar_khan_2363",
      address: {
        address1: "255 Chestnut Street",
        address2: "Suite 383",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75203"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "6384525445",
          price: 2929.62,
          options: {
            resolution: "30MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "5992316252",
          price: 141.29,
          options: {
            size: "S",
            color: "red",
            zipper: "half"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "6826843914",
          price: 326.74,
          options: {
            "scent family": "fresh",
            size: "100ml",
            gender: "men"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "1810466394",
          price: 502.28,
          options: {
            resolution: "1080p",
            waterproof: "no",
            color: "silver"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "2733768059",
          price: 94.38,
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "pink"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["625562608630"],
          item_ids: [
            "6384525445",
            "5992316252",
            "6826843914",
            "1810466394",
            "2733768059"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3994.31,
          payment_method_id: "credit_card_4420174"
        }
      ]
    },
    "#W3407479": {
      order_id: "#W3407479",
      user_id: "yusuf_li_7255",
      address: {
        address1: "476 Maple Drive",
        address2: "Suite 432",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10093"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "5510402676",
          price: 267.07,
          options: {
            "screen size": "6-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9370300555",
          price: 45.9,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "expert"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3232433601",
          price: 204.14,
          options: {
            "deck material": "maple",
            length: "28 inch",
            design: "plain"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9791469541",
          price: 147.05,
          options: {
            size: "9",
            color: "yellow",
            material: "synthetic",
            sole: "rubber"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["758121863229"],
          item_ids: ["5510402676", "9370300555", "3232433601", "9791469541"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 664.16,
          payment_method_id: "paypal_8080730"
        }
      ]
    },
    "#W2260828": {
      order_id: "#W2260828",
      user_id: "olivia_ahmed_6778",
      address: {
        address1: "553 Main Street",
        address2: "Suite 389",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94152"
      },
      items: [
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "5570660360",
          price: 51.54,
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "none"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "2444431651",
          price: 534.84,
          options: {
            "weight range": "55-75 lbs",
            material: "iron",
            "set type": "fixed"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2244749153",
          price: 473.82,
          options: {
            material: "wood",
            color: "brown",
            height: "5 ft"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1340995114",
          price: 235.13,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "full size"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "1583904702",
          price: 195.84,
          options: {
            color: "blue",
            "speed settings": "low",
            "battery type": "AA batteries"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["466507076432"],
          item_ids: [
            "5570660360",
            "2444431651",
            "2244749153",
            "1340995114",
            "1583904702"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1491.17,
          payment_method_id: "credit_card_9698900"
        }
      ]
    },
    "#W1524774": {
      order_id: "#W1524774",
      user_id: "olivia_silva_7273",
      address: {
        address1: "894 Cedar Street",
        address2: "Suite 938",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32240"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7736359414",
          price: 253.08,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand C"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 253.08,
          payment_method_id: "paypal_9379149"
        }
      ]
    },
    "#W9172475": {
      order_id: "#W9172475",
      user_id: "fatima_moore_8152",
      address: {
        address1: "465 Elm Street",
        address2: "Suite 185",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77122"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "7159180318",
          price: 512.88,
          options: {
            "weight range": "30-50 lbs",
            material: "urethane",
            "set type": "fixed"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6501071631",
          price: 1018.68,
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "gold"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9747045638",
          price: 94.01,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "electric"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["774635369500"],
          item_ids: ["7159180318", "6501071631", "9747045638"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1625.57,
          payment_method_id: "paypal_8105724"
        }
      ]
    },
    "#W6026015": {
      order_id: "#W6026015",
      user_id: "ethan_moore_9003",
      address: {
        address1: "873 Hillcrest Drive",
        address2: "Suite 471",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75339"
      },
      items: [
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "8964750292",
          price: 532.58,
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "hardshell"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6130713659",
          price: 483.66,
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["149689005259"],
          item_ids: ["8964750292", "6130713659"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1016.24,
          payment_method_id: "credit_card_6361025"
        }
      ]
    },
    "#W5838674": {
      order_id: "#W5838674",
      user_id: "ivan_hernandez_6923",
      address: {
        address1: "894 Hickory Lane",
        address2: "Suite 665",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92133"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7441167885",
          price: 2866.37,
          options: {
            pressure: "15 bar",
            capacity: "1.5L",
            type: "capsule"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1304426904",
          price: 565.79,
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6534134392",
          price: 196.15,
          options: {
            diameter: "10 inches",
            color: "wood",
            type: "analog"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "7453605304",
          price: 150.01,
          options: {
            color: "silver",
            brightness: "low",
            "power source": "battery"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3478699712",
          price: 2291.87,
          options: {
            "screen size": "15-inch",
            processor: "i5",
            ram: "16GB",
            storage: "512GB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["495912972743"],
          item_ids: [
            "7441167885",
            "1304426904",
            "6534134392",
            "7453605304",
            "3478699712"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6070.19,
          payment_method_id: "credit_card_7455506"
        }
      ]
    },
    "#W1701126": {
      order_id: "#W1701126",
      user_id: "chen_anderson_8078",
      address: {
        address1: "233 Lakeview Drive",
        address2: "Suite 676",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19158"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "2791467853",
          price: 242.53,
          options: {
            compatibility: "Google Assistant",
            color: "stainless steel"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7902309762",
          price: 243.62,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand B"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7918497119",
          price: 54.51,
          options: {
            capacity: "500ml",
            material: "glass",
            color: "blue"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["481857345466"],
          item_ids: ["2791467853", "7902309762", "7918497119"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 540.66,
          payment_method_id: "credit_card_9389219"
        }
      ]
    },
    "#W7602708": {
      order_id: "#W7602708",
      user_id: "juan_rossi_6696",
      address: {
        address1: "101 Broadway",
        address2: "Suite 408",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77209"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "3369928769",
          price: 97.35,
          options: {
            length: "25ft",
            material: "vinyl",
            color: "green"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 97.35,
          payment_method_id: "credit_card_9801224"
        }
      ]
    },
    "#W3251536": {
      order_id: "#W3251536",
      user_id: "ethan_sanchez_7289",
      address: {
        address1: "132 Hillcrest Drive",
        address2: "Suite 744",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85093"
      },
      items: [
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "3909704820",
          price: 308.38,
          options: {
            resolution: "4K",
            "field of view": "110 degrees",
            connectivity: "Ethernet"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["855282386050"],
          item_ids: ["3909704820"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 308.38,
          payment_method_id: "gift_card_5917510"
        },
        {
          transaction_type: "refund",
          amount: 308.38,
          payment_method_id: "gift_card_5917510"
        }
      ]
    },
    "#W6821773": {
      order_id: "#W6821773",
      user_id: "anya_kovacs_9542",
      address: {
        address1: "841 Hillcrest Drive",
        address2: "Suite 278",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95132"
      },
      items: [
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "3062461148",
          price: 247.88,
          options: {
            color: "stainless steel",
            capacity: "2 cups",
            type: "french press",
            features: "auto shutoff"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8590708195",
          price: 157.61,
          options: {
            size: "XL",
            color: "navy",
            zipper: "half"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6048672633",
          price: 208.05,
          options: {
            size: "L",
            color: "black",
            ventilation: "low"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "2386562819",
          price: 508.21,
          options: {
            material: "mesh",
            color: "gray",
            armrest: "fixed",
            "backrest height": "high-back"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["714824252951"],
          item_ids: ["3062461148", "8590708195", "6048672633", "2386562819"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1121.75,
          payment_method_id: "credit_card_4829249"
        }
      ]
    },
    "#W7209932": {
      order_id: "#W7209932",
      user_id: "amelia_gonzalez_4098",
      address: {
        address1: "722 Sunset Drive",
        address2: "Suite 670",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80245"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "5047954489",
          price: 54.84,
          options: {
            color: "blue",
            size: "S",
            material: "polyester",
            style: "v-neck"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "5917587651",
          price: 212.79,
          options: {
            color: "grey",
            size: "medium",
            material: "polyester",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["699530851768"],
          item_ids: ["5047954489", "5917587651"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 267.63,
          payment_method_id: "gift_card_2611937"
        }
      ]
    },
    "#W1759614": {
      order_id: "#W1759614",
      user_id: "mei_martin_6103",
      address: {
        address1: "120 Elm Street",
        address2: "Suite 759",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78270"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "1684786391",
          price: 2508.06,
          options: {
            "screen size": "17-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "black"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5312063289",
          price: 195.15,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "graphic"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "4404981319",
          price: 1031,
          options: {
            type: "electric",
            size: "large",
            features: "rotisserie"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["192306282559"],
          item_ids: ["1684786391", "5312063289", "4404981319"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3734.21,
          payment_method_id: "credit_card_8398849"
        }
      ]
    },
    "#W1926021": {
      order_id: "#W1926021",
      user_id: "harper_moore_7767",
      address: {
        address1: "299 Oak Street",
        address2: "Suite 248",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32263"
      },
      items: [
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "9385662952",
          price: 159.92,
          options: {
            size: "L",
            color: "black",
            zipper: "full"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6697922351",
          price: 194.47,
          options: {
            size: "L",
            color: "white",
            ventilation: "medium"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["199990541154"],
          item_ids: ["9385662952", "6697922351"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 354.39,
          payment_method_id: "paypal_6546615"
        }
      ]
    },
    "#W1258841": {
      order_id: "#W1258841",
      user_id: "isabella_gonzalez_4546",
      address: {
        address1: "472 Cedar Avenue",
        address2: "Suite 275",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76151"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3232433601",
          price: 204.14,
          options: {
            "deck material": "maple",
            length: "28 inch",
            design: "plain"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "7579176349",
          price: 29.28,
          options: {
            size: "A4",
            "cover type": "soft cover"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "5209958006",
          price: 514.72,
          options: {
            "piece count": "2-piece",
            color: "silver",
            material: "hardshell"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 748.14,
          payment_method_id: "credit_card_1619986"
        }
      ]
    },
    "#W8073920": {
      order_id: "#W8073920",
      user_id: "ethan_lopez_6291",
      address: {
        address1: "892 River Road",
        address2: "Suite 919",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10203"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5886093635",
          price: 208.04,
          options: {
            size: "S",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "3234800602",
          price: 46.66,
          options: {
            color: "red",
            size: "L",
            material: "cotton",
            style: "v-neck"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8277474082",
          price: 236.57,
          options: {
            size: "12",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "5484530610",
          price: 3109.83,
          options: {
            resolution: "24MP",
            zoom: "10x",
            storage: "CF card"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "9929635042",
          price: 1261.14,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "5.8-inch"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4862.24,
          payment_method_id: "gift_card_7219486"
        }
      ]
    },
    "#W6368178": {
      order_id: "#W6368178",
      user_id: "fatima_anderson_7445",
      address: {
        address1: "928 Elm Avenue",
        address2: "Suite 398",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78786"
      },
      items: [
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "4410138384",
          price: 197.37,
          options: {
            size: "8",
            color: "gray",
            material: "canvas"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2243454707",
          price: 164.46,
          options: {
            capacity: "1L",
            material: "plastic",
            color: "white"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "3112842858",
          price: 49.1,
          options: {
            pieces: "1000",
            theme: "fantasy",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3915604618",
          price: 487.6,
          options: {
            material: "leather",
            color: "blue",
            armrest: "fixed",
            "backrest height": "standard"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "5565631513",
          price: 267.9,
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "IPX7"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1166.43,
          payment_method_id: "paypal_7697967"
        }
      ]
    },
    "#W3632959": {
      order_id: "#W3632959",
      user_id: "james_li_5688",
      address: {
        address1: "215 River Road",
        address2: "Suite 991",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10083"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "6589665742",
          price: 933.17,
          options: {
            type: "gas",
            size: "large",
            features: "rotisserie"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["474654093386"],
          item_ids: ["6589665742"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 933.17,
          payment_method_id: "gift_card_1725971"
        }
      ]
    },
    "#W3191978": {
      order_id: "#W3191978",
      user_id: "yara_ito_8499",
      address: {
        address1: "179 Broadway",
        address2: "Suite 256",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75284"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "5222576926",
          price: 249.95,
          options: {
            "switch type": "linear",
            backlight: "white",
            size: "full size"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["549282369883"],
          item_ids: ["5222576926"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 249.95,
          payment_method_id: "paypal_1679017"
        }
      ]
    },
    "#W6120232": {
      order_id: "#W6120232",
      user_id: "raj_li_9474",
      address: {
        address1: "187 Broadway",
        address2: "Suite 268",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76184"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "9459890810",
          price: 510.1,
          options: {
            material: "fabric",
            color: "gray",
            armrest: "none",
            "backrest height": "high-back"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["148606558800"],
          item_ids: ["9459890810"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 510.1,
          payment_method_id: "credit_card_9582448"
        },
        {
          transaction_type: "refund",
          amount: 510.1,
          payment_method_id: "credit_card_9582448"
        }
      ]
    },
    "#W6289770": {
      order_id: "#W6289770",
      user_id: "lei_li_6575",
      address: {
        address1: "604 Pine Lane",
        address2: "Suite 907",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85033"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8098621301",
          price: 192.15,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "rechargeable"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "1120917161",
          price: 953.39,
          options: {
            type: "electric",
            size: "portable",
            features: "none"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6974536207",
          price: 49.3,
          options: {
            capacity: "750ml",
            material: "plastic",
            color: "blue"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "8964750292",
          price: 532.58,
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "hardshell"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4548300368",
          price: 287.79,
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["114641927258"],
          item_ids: [
            "8098621301",
            "1120917161",
            "6974536207",
            "8964750292",
            "4548300368"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2015.21,
          payment_method_id: "credit_card_4466831"
        }
      ]
    },
    "#W2136962": {
      order_id: "#W2136962",
      user_id: "anya_sanchez_9707",
      address: {
        address1: "308 Main Street",
        address2: "Suite 214",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43171"
      },
      items: [
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "3952176596",
          price: 1199.77,
          options: {
            color: "rose gold",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "6.1-inch"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "7903094618",
          price: 90.32,
          options: {
            capacity: "5000mAh",
            output: "USB-A",
            color: "white"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "4326528037",
          price: 2714.51,
          options: {
            resolution: "24MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "2645006275",
          price: 183.11,
          options: {
            color: "white",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9237024510",
          price: 53.53,
          options: {
            pieces: "500",
            theme: "animals",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["382003266120"],
          item_ids: [
            "3952176596",
            "7903094618",
            "4326528037",
            "2645006275",
            "9237024510"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4241.24,
          payment_method_id: "paypal_1191071"
        }
      ]
    },
    "#W3181060": {
      order_id: "#W3181060",
      user_id: "evelyn_lee_1924",
      address: {
        address1: "885 Laurel Lane",
        address2: "Suite 756",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20122"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9025753381",
          price: 231.58,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "full size"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["494012543242"],
          item_ids: ["9025753381"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 231.58,
          payment_method_id: "paypal_8719727"
        }
      ]
    },
    "#W1994898": {
      order_id: "#W1994898",
      user_id: "yusuf_hernandez_6785",
      address: {
        address1: "565 Maple Drive",
        address2: "Suite 501",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20307"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "3812493782",
          price: 244.34,
          options: {
            size: "7",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5758570643",
          price: 1233.68,
          options: {
            color: "rose gold",
            storage: "256GB",
            RAM: "4GB",
            "screen size": "6.5-inch"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["421166355775"],
          item_ids: ["3812493782", "5758570643"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1478.02,
          payment_method_id: "paypal_7529813"
        }
      ]
    },
    "#W7836908": {
      order_id: "#W7836908",
      user_id: "james_johnson_9321",
      address: {
        address1: "593 Cedar Avenue",
        address2: "Suite 826",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60625"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4358482460",
          price: 290.94,
          options: {
            "frame color": "black",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9791469541",
          price: 147.05,
          options: {
            size: "9",
            color: "yellow",
            material: "synthetic",
            sole: "rubber"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "4545791457",
          price: 186.06,
          options: {
            "deck material": "plastic",
            length: "28 inch",
            design: "plain"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 624.05,
          payment_method_id: "credit_card_4998749"
        }
      ]
    },
    "#W6908222": {
      order_id: "#W6908222",
      user_id: "liam_moore_4057",
      address: {
        address1: "244 Elm Street",
        address2: "Suite 422",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43209"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "1270145486",
          price: 144.07,
          options: {
            color: "white",
            brightness: "high",
            "power source": "battery"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "8555936349",
          price: 226.49,
          options: {
            color: "blue",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "6595128475",
          price: 237.65,
          options: {
            size: "9",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "4843487907",
          price: 254.84,
          options: {
            "switch type": "clicky",
            backlight: "white",
            size: "80%"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["659687665480"],
          item_ids: ["1270145486", "8555936349", "6595128475", "4843487907"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 863.05,
          payment_method_id: "paypal_4518393"
        }
      ]
    },
    "#W1504875": {
      order_id: "#W1504875",
      user_id: "ava_nguyen_2175",
      address: {
        address1: "346 Laurel Lane",
        address2: "Suite 175",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78786"
      },
      items: [
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "9421195098",
          price: 32.37,
          options: {
            size: "A6",
            "cover type": "soft cover"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4920090458",
          price: 381.87,
          options: {
            color: "black",
            "band material": "silicone",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["608198747686"],
          item_ids: ["9421195098", "4920090458"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 414.24,
          payment_method_id: "paypal_6262583"
        }
      ]
    },
    "#W9532616": {
      order_id: "#W9532616",
      user_id: "harper_ahmed_5055",
      address: {
        address1: "610 Elm Street",
        address2: "Suite 768",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85041"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9228757377",
          price: 3066.23,
          options: {
            resolution: "30MP",
            zoom: "10x",
            storage: "SD card"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "3399869890",
          price: 312.04,
          options: {
            "scent family": "woody",
            size: "100ml",
            gender: "men"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "8470360507",
          price: 291.31,
          options: {
            resolution: "2K",
            "field of view": "130 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7843064651",
          price: 50.14,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "blue"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "9672174103",
          price: 281.98,
          options: {
            "frame color": "brown",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["834638062558"],
          item_ids: [
            "9228757377",
            "3399869890",
            "8470360507",
            "7843064651",
            "9672174103"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4001.7,
          payment_method_id: "gift_card_9196678"
        }
      ]
    },
    "#W9801796": {
      order_id: "#W9801796",
      user_id: "anya_kim_6731",
      address: {
        address1: "584 Main Street",
        address2: "Suite 933",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80218"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7539442683",
          price: 461.49,
          options: {
            material: "metal",
            color: "black",
            height: "4 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["579209325673"],
          item_ids: ["7539442683"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 461.49,
          payment_method_id: "paypal_5023612"
        }
      ]
    },
    "#W8277957": {
      order_id: "#W8277957",
      user_id: "yara_muller_8652",
      address: {
        address1: "380 Maple Drive",
        address2: "Suite 960",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92101"
      },
      items: [
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "5586947715",
          price: 92.53,
          options: {
            thickness: "4mm",
            material: "PVC",
            color: "blue"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "1434748144",
          price: 49.72,
          options: {
            capacity: "1000ml",
            material: "glass",
            color: "red"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "8056198669",
          price: 208.32,
          options: {
            size: "small",
            material: "polyester",
            color: "brown"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "9127591879",
          price: 48.47,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["500530764322"],
          item_ids: ["5586947715", "1434748144", "8056198669", "9127591879"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 399.04,
          payment_method_id: "credit_card_3095586"
        },
        {
          transaction_type: "refund",
          amount: 399.04,
          payment_method_id: "credit_card_3095586"
        }
      ]
    },
    "#W3698202": {
      order_id: "#W3698202",
      user_id: "emma_kim_1076",
      address: {
        address1: "390 Broadway",
        address2: "Suite 782",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43253"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "7848293342",
          price: 942.71,
          options: {
            type: "charcoal",
            size: "medium",
            features: "side burner"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "4273929280",
          price: 244.95,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "32GB"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1187.66,
          payment_method_id: "gift_card_5402003"
        }
      ]
    },
    "#W4398027": {
      order_id: "#W4398027",
      user_id: "ethan_muller_6097",
      address: {
        address1: "480 Oak Street",
        address2: "Suite 368",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76139"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5546244844",
          price: 51.59,
          options: {
            pieces: "1500",
            theme: "art",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "1725100896",
          price: 289.66,
          options: {
            "scent family": "oriental",
            size: "30ml",
            gender: "unisex"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["160489974310"],
          item_ids: ["5546244844", "1725100896"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 341.25,
          payment_method_id: "credit_card_5721095"
        }
      ]
    },
    "#W7736983": {
      order_id: "#W7736983",
      user_id: "sofia_kovacs_7075",
      address: {
        address1: "546 Lakeview Drive",
        address2: "Suite 491",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19049"
      },
      items: [
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "5952720925",
          price: 260.19,
          options: {
            color: "black",
            capacity: "4 cups",
            type: "espresso",
            features: "timer"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["373896656494"],
          item_ids: ["5952720925"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 260.19,
          payment_method_id: "paypal_6840891"
        }
      ]
    },
    "#W7824724": {
      order_id: "#W7824724",
      user_id: "mohamed_li_1979",
      address: {
        address1: "615 Elm Avenue",
        address2: "Suite 790",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43209"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "5788631787",
          price: 375.55,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "black"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "2235648106",
          price: 1054.43,
          options: {
            "screen size": "10-inch",
            storage: "32GB",
            color: "black"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "4545791457",
          price: 186.06,
          options: {
            "deck material": "plastic",
            length: "28 inch",
            design: "plain"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "1518544029",
          price: 95.39,
          options: {
            length: "100ft",
            material: "rubber",
            color: "black"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "9480266227",
          price: 255.98,
          options: {
            compatibility: "Apple HomeKit",
            color: "stainless steel"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["727364627718"],
          item_ids: [
            "5788631787",
            "2235648106",
            "4545791457",
            "1518544029",
            "9480266227"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1967.41,
          payment_method_id: "paypal_6045911"
        }
      ]
    },
    "#W3586556": {
      order_id: "#W3586556",
      user_id: "aarav_lee_1982",
      address: {
        address1: "388 Spruce Street",
        address2: "Suite 275",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20528"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6065192424",
          price: 989.7,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "gold"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 989.7,
          payment_method_id: "credit_card_1640996"
        }
      ]
    },
    "#W3942875": {
      order_id: "#W3942875",
      user_id: "ethan_kim_8860",
      address: {
        address1: "848 Willow Lane",
        address2: "Suite 453",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78286"
      },
      items: [
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "1775591963",
          price: 154.75,
          options: {
            size: "10",
            color: "white",
            material: "leather",
            sole: "EVA"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9779102705",
          price: 54.11,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "2366567022",
          price: 54.04,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "blue"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["428940959601"],
          item_ids: ["1775591963", "9779102705", "2366567022"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 262.9,
          payment_method_id: "gift_card_5701566"
        }
      ]
    },
    "#W3248320": {
      order_id: "#W3248320",
      user_id: "anya_muller_4683",
      address: {
        address1: "552 Spruce Street",
        address2: "Suite 364",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80240"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4965355367",
          price: 620.07,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3339188619",
          price: 200.24,
          options: {
            size: "M",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "5012998807",
          price: 258.71,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand B"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "5081446110",
          price: 322.52,
          options: {
            "scent family": "woody",
            size: "30ml",
            gender: "men"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["834140233846"],
          item_ids: ["4965355367", "3339188619", "5012998807", "5081446110"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1401.54,
          payment_method_id: "gift_card_9684611"
        }
      ]
    },
    "#W6146740": {
      order_id: "#W6146740",
      user_id: "lei_hernandez_8500",
      address: {
        address1: "196 Main Street",
        address2: "Suite 800",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43222"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8118291112",
          price: 260.56,
          options: {
            size: "12",
            material: "leather",
            waterproof: "no"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "1859994221",
          price: 182.85,
          options: {
            diameter: "10 inches",
            color: "black",
            type: "analog"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6056040996",
          price: 2609.37,
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "16GB",
            storage: "512GB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["395712707145"],
          item_ids: ["8118291112", "1859994221", "6056040996"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3052.78,
          payment_method_id: "gift_card_5245016"
        }
      ]
    },
    "#W9978601": {
      order_id: "#W9978601",
      user_id: "yusuf_hernandez_5411",
      address: {
        address1: "474 Broadway",
        address2: "Suite 628",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43223"
      },
      items: [
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1994478369",
          price: 2025.51,
          options: {
            "strap material": "silicone",
            "dial color": "black"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "3062461148",
          price: 247.88,
          options: {
            color: "stainless steel",
            capacity: "2 cups",
            type: "french press",
            features: "auto shutoff"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "7187199153",
          price: 983.62,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "3624655057",
          price: 2195.04,
          options: {
            "frame size": "medium",
            color: "blue",
            type: "road"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "1583904702",
          price: 195.84,
          options: {
            color: "blue",
            "speed settings": "low",
            "battery type": "AA batteries"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["563195462528"],
          item_ids: [
            "1994478369",
            "3062461148",
            "7187199153",
            "3624655057",
            "1583904702"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5647.89,
          payment_method_id: "paypal_6753664"
        },
        {
          transaction_type: "refund",
          amount: 5647.89,
          payment_method_id: "paypal_6753664"
        }
      ]
    },
    "#W6460787": {
      order_id: "#W6460787",
      user_id: "emma_brown_8847",
      address: {
        address1: "984 Hickory Lane",
        address2: "Suite 834",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32165"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3098764622",
          price: 202.13,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "plain"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 202.13,
          payment_method_id: "paypal_9039769"
        }
      ]
    },
    "#W3260419": {
      order_id: "#W3260419",
      user_id: "yusuf_garcia_3055",
      address: {
        address1: "794 Park Avenue",
        address2: "Suite 828",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20080"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9335834276",
          price: 137.92,
          options: {
            capacity: "2L",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2860956907",
          price: 315.61,
          options: {
            color: "black",
            "band material": "silicone",
            display: "LCD"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6171242004",
          price: 462.84,
          options: {
            "weight range": "30-50 lbs",
            material: "rubber",
            "set type": "fixed"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "6546364613",
          price: 231.43,
          options: {
            size: "11",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4900990404",
          price: 336.71,
          options: {
            color: "silver",
            "band material": "metal",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1484.51,
          payment_method_id: "paypal_7503218"
        }
      ]
    },
    "#W7152670": {
      order_id: "#W7152670",
      user_id: "isabella_brown_4999",
      address: {
        address1: "956 Chestnut Street",
        address2: "Suite 302",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46288"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4582956489",
          price: 241.96,
          options: {
            size: "12",
            material: "synthetic",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["128309117248"],
          item_ids: ["4582956489"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 241.96,
          payment_method_id: "gift_card_5681264"
        },
        {
          transaction_type: "refund",
          amount: 241.96,
          payment_method_id: "gift_card_5681264"
        }
      ]
    },
    "#W6717215": {
      order_id: "#W6717215",
      user_id: "isabella_taylor_7478",
      address: {
        address1: "723 Oak Street",
        address2: "Suite 245",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60646"
      },
      items: [
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "7866854614",
          price: 105.49,
          options: {
            capacity: "5000mAh",
            output: "USB-C",
            color: "white"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1763705424",
          price: 235.44,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand C"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8124970213",
          price: 49.67,
          options: {
            color: "purple",
            size: "XL",
            material: "cotton",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["825710344541"],
          item_ids: ["7866854614", "1763705424", "8124970213"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 390.6,
          payment_method_id: "gift_card_5501047"
        }
      ]
    },
    "#W7868134": {
      order_id: "#W7868134",
      user_id: "isabella_brown_3584",
      address: {
        address1: "881 Elm Avenue",
        address2: "Suite 140",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80257"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "3788616824",
          price: 951.21,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "2645006275",
          price: 183.11,
          options: {
            color: "white",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "9007697085",
          price: 318.96,
          options: {
            "scent family": "fresh",
            size: "50ml",
            gender: "men"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9570044148",
          price: 231.37,
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "full size"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "2060066974",
          price: 51.05,
          options: {
            color: "black",
            size: "XL",
            material: "cotton",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["626512653371"],
          item_ids: [
            "3788616824",
            "2645006275",
            "9007697085",
            "9570044148",
            "2060066974"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1735.7,
          payment_method_id: "paypal_2143483"
        }
      ]
    },
    "#W1748126": {
      order_id: "#W1748126",
      user_id: "sophia_hernandez_2054",
      address: {
        address1: "722 Main Street",
        address2: "Suite 835",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78710"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "8293778132",
          price: 100.62,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "5966895767",
          price: 329.58,
          options: {
            resolution: "2K",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["693764250601"],
          item_ids: ["8293778132", "5966895767"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 430.2,
          payment_method_id: "gift_card_1139567"
        }
      ]
    },
    "#W7909132": {
      order_id: "#W7909132",
      user_id: "anya_thomas_1213",
      address: {
        address1: "431 Highland Drive",
        address2: "Suite 272",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80298"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2540052208",
          price: 346.42,
          options: {
            color: "gold",
            "band material": "silicone",
            display: "LCD"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "7758198585",
          price: 1917.21,
          options: {
            "frame size": "medium",
            color: "green",
            type: "road"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["366639463481"],
          item_ids: ["2540052208", "7758198585"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2263.63,
          payment_method_id: "paypal_2557789"
        }
      ]
    },
    "#W5663445": {
      order_id: "#W5663445",
      user_id: "olivia_jackson_1219",
      address: {
        address1: "208 Cedar Street",
        address2: "Suite 993",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95119"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "8302289002",
          price: 547.55,
          options: {
            "room size": "large",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "2025713343",
          price: 336.15,
          options: {
            type: "on-ear",
            connectivity: "wired",
            color: "white"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4913411651",
          price: 941.03,
          options: {
            "screen size": "7-inch",
            storage: "128GB",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1824.73,
          payment_method_id: "paypal_3999493"
        }
      ]
    },
    "#W4720269": {
      order_id: "#W4720269",
      user_id: "harper_johansson_2663",
      address: {
        address1: "490 River Road",
        address2: "Suite 486",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80281"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "7251508981",
          price: 212.04,
          options: {
            color: "green",
            size: "small",
            material: "leather",
            compartment: "camera"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6017636844",
          price: 2292.37,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6922203216",
          price: 199.12,
          options: {
            diameter: "14 inches",
            color: "black",
            type: "digital"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2703.53,
          payment_method_id: "paypal_4820484"
        }
      ]
    },
    "#W9178204": {
      order_id: "#W9178204",
      user_id: "ava_johnson_5052",
      address: {
        address1: "101 Hickory Lane",
        address2: "Suite 333",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98137"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "6805564527",
          price: 158.41,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "USB"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["438507518885"],
          item_ids: ["6805564527"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 158.41,
          payment_method_id: "paypal_3846161"
        }
      ]
    },
    "#W4418025": {
      order_id: "#W4418025",
      user_id: "noah_nguyen_3444",
      address: {
        address1: "668 Cedar Street",
        address2: "Suite 355",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76142"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "4238115171",
          price: 91.78,
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "2190871011",
          price: 3105.6,
          options: {
            pressure: "9 bar",
            capacity: "1.5L",
            type: "manual"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "1349017811",
          price: 226.05,
          options: {
            color: "white",
            capacity: "4 cups",
            type: "drip",
            features: "auto shutoff"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "4510078629",
          price: 2127.62,
          options: {
            "strap material": "metal",
            "dial color": "black"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5537798301",
          price: 204.47,
          options: {
            size: "S",
            color: "black",
            ventilation: "medium"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["431582540628"],
          item_ids: [
            "4238115171",
            "2190871011",
            "1349017811",
            "4510078629",
            "5537798301"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5755.52,
          payment_method_id: "gift_card_5544191"
        }
      ]
    },
    "#W5036595": {
      order_id: "#W5036595",
      user_id: "mei_li_2872",
      address: {
        address1: "463 Main Street",
        address2: "Suite 462",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76139"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "5320792178",
          price: 135.24,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "AC adapter"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "4859937227",
          price: 503.58,
          options: {
            resolution: "5K",
            waterproof: "no",
            color: "silver"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "5081446110",
          price: 322.52,
          options: {
            "scent family": "woody",
            size: "30ml",
            gender: "men"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "8610532516",
          price: 203.76,
          options: {
            diameter: "10 inches",
            color: "black",
            type: "digital"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "1199058591",
          price: 32.29,
          options: {
            size: "A4",
            "cover type": "hard cover"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["273539266351"],
          item_ids: [
            "5320792178",
            "4859937227",
            "5081446110",
            "8610532516",
            "1199058591"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1197.39,
          payment_method_id: "paypal_4060450"
        }
      ]
    },
    "#W9767156": {
      order_id: "#W9767156",
      user_id: "aarav_thomas_2711",
      address: {
        address1: "422 Oak Street",
        address2: "Suite 149",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32175"
      },
      items: [
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6922203216",
          price: 199.12,
          options: {
            diameter: "14 inches",
            color: "black",
            type: "digital"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "4579334072",
          price: 54.85,
          options: {
            capacity: "750ml",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6048672633",
          price: 208.05,
          options: {
            size: "L",
            color: "black",
            ventilation: "low"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "1689914594",
          price: 315.2,
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "8142779083",
          price: 157.53,
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 934.75,
          payment_method_id: "gift_card_6253568"
        }
      ]
    },
    "#W2403075": {
      order_id: "#W2403075",
      user_id: "aarav_davis_4756",
      address: {
        address1: "808 Chestnut Street",
        address2: "Suite 832",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85072"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "3320557165",
          price: 188.67,
          options: {
            color: "blue",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 188.67,
          payment_method_id: "gift_card_9708163"
        }
      ]
    },
    "#W7133840": {
      order_id: "#W7133840",
      user_id: "yusuf_hernandez_6467",
      address: {
        address1: "943 Maple Drive",
        address2: "Suite 837",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43175"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "6735339143",
          price: 471.77,
          options: {
            material: "metal",
            color: "brown",
            height: "6 ft"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "7127170374",
          price: 52.03,
          options: {
            pieces: "2000",
            theme: "fantasy",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "4947717507",
          price: 218.04,
          options: {
            color: "green",
            size: "medium",
            material: "leather",
            compartment: "camera"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["540659198081"],
          item_ids: ["6735339143", "7127170374", "4947717507"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 741.84,
          payment_method_id: "paypal_9426036"
        }
      ]
    },
    "#W6266831": {
      order_id: "#W6266831",
      user_id: "james_johnson_9321",
      address: {
        address1: "593 Cedar Avenue",
        address2: "Suite 826",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60625"
      },
      items: [
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "8917609800",
          price: 195.59,
          options: {
            diameter: "10 inches",
            color: "white",
            type: "digital"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "9045948550",
          price: 279.78,
          options: {
            "frame color": "black",
            "lens color": "blue",
            "lens type": "polarized",
            "frame material": "metal"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9779102705",
          price: 54.11,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "7658724607",
          price: 256.73,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "5052031638",
          price: 2621.77,
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "16GB",
            storage: "1TB SSD",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["709661888419"],
          item_ids: [
            "8917609800",
            "9045948550",
            "9779102705",
            "7658724607",
            "5052031638"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3407.98,
          payment_method_id: "credit_card_4998749"
        },
        {
          transaction_type: "refund",
          amount: 3407.98,
          payment_method_id: "credit_card_4998749"
        }
      ]
    },
    "#W9077472": {
      order_id: "#W9077472",
      user_id: "amelia_patel_7834",
      address: {
        address1: "923 Elm Street",
        address2: "Suite 362",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85051"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "3788616824",
          price: 951.21,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "5565631513",
          price: 267.9,
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7617930199",
          price: 285.94,
          options: {
            color: "red",
            "battery life": "20 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "9884666842",
          price: 2794.7,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "manual"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4299.75,
          payment_method_id: "gift_card_3751659"
        }
      ]
    },
    "#W1812830": {
      order_id: "#W1812830",
      user_id: "sofia_moore_9773",
      address: {
        address1: "181 Elm Street",
        address2: "Suite 178",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20030"
      },
      items: [
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "7791931443",
          price: 195.63,
          options: {
            diameter: "14 inches",
            color: "black",
            type: "analog"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 195.63,
          payment_method_id: "credit_card_1893409"
        }
      ]
    },
    "#W1473345": {
      order_id: "#W1473345",
      user_id: "raj_kovacs_9859",
      address: {
        address1: "644 Spruce Street",
        address2: "Suite 524",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10231"
      },
      items: [
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "3020722515",
          price: 238.64,
          options: {
            color: "black",
            capacity: "1 cup",
            type: "french press",
            features: "auto shutoff"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["834723947100"],
          item_ids: ["3020722515"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 238.64,
          payment_method_id: "paypal_7525649"
        }
      ]
    },
    "#W7162915": {
      order_id: "#W7162915",
      user_id: "raj_lopez_5873",
      address: {
        address1: "575 Chestnut Street",
        address2: "Suite 251",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76195"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "1176194968",
          price: 52.88,
          options: {
            color: "black",
            size: "S",
            material: "polyester",
            style: "crew neck"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "7958300294",
          price: 642.72,
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 695.6,
          payment_method_id: "credit_card_6731308"
        }
      ]
    },
    "#W4284542": {
      order_id: "#W4284542",
      user_id: "ivan_hernandez_6923",
      address: {
        address1: "659 Broadway",
        address2: "Suite 690",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75322"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "1689914594",
          price: 315.2,
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "1507389580",
          price: 1157.86,
          options: {
            color: "black",
            storage: "128GB",
            RAM: "8GB",
            "screen size": "5.8-inch"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "8302289002",
          price: 547.55,
          options: {
            "room size": "large",
            "filter type": "HEPA",
            features: "night mode"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2020.61,
          payment_method_id: "credit_card_7455506"
        }
      ]
    },
    "#W1242543": {
      order_id: "#W1242543",
      user_id: "ava_nguyen_6646",
      address: {
        address1: "874 Cedar Avenue",
        address2: "Suite 795",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98106"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "9594745976",
          price: 184.13,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "custom"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 184.13,
          payment_method_id: "credit_card_5683823"
        }
      ]
    },
    "#W2156941": {
      order_id: "#W2156941",
      user_id: "yara_hernandez_3670",
      address: {
        address1: "804 Willow Lane",
        address2: "Suite 167",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32121"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4920090458",
          price: 381.87,
          options: {
            color: "black",
            "band material": "silicone",
            display: "AMOLED"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "1586641416",
          price: 497.39,
          options: {
            resolution: "5K",
            waterproof: "yes",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["717305195298"],
          item_ids: ["4920090458", "1586641416"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 879.26,
          payment_method_id: "gift_card_3985012"
        }
      ]
    },
    "#W3972714": {
      order_id: "#W3972714",
      user_id: "olivia_ahmed_6778",
      address: {
        address1: "553 Main Street",
        address2: "Suite 389",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94152"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2658930189",
          price: 241.68,
          options: {
            size: "9",
            material: "synthetic",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["119858784661"],
          item_ids: ["2658930189"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 241.68,
          payment_method_id: "credit_card_9698900"
        }
      ]
    },
    "#W2236333": {
      order_id: "#W2236333",
      user_id: "yusuf_patel_7767",
      address: {
        address1: "646 Highland Drive",
        address2: "Suite 881",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94117"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "3788616824",
          price: 951.21,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 951.21,
          payment_method_id: "gift_card_3372949"
        }
      ]
    },
    "#W8413387": {
      order_id: "#W8413387",
      user_id: "harper_nguyen_9170",
      address: {
        address1: "386 Broadway",
        address2: "Suite 145",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78715"
      },
      items: [
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "5111440845",
          price: 48.55,
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "Bluetooth"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8349118980",
          price: 53.43,
          options: {
            color: "blue",
            size: "S",
            material: "cotton",
            style: "v-neck"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "5917587651",
          price: 212.79,
          options: {
            color: "grey",
            size: "medium",
            material: "polyester",
            compartment: "laptop"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "4947717507",
          price: 218.04,
          options: {
            color: "green",
            size: "medium",
            material: "leather",
            compartment: "camera"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["906549152953"],
          item_ids: ["5111440845", "8349118980", "5917587651", "4947717507"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 532.81,
          payment_method_id: "gift_card_8578732"
        }
      ]
    },
    "#W4308578": {
      order_id: "#W4308578",
      user_id: "evelyn_moore_6558",
      address: {
        address1: "467 Willow Lane",
        address2: "Suite 184",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19019"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "9480266227",
          price: 255.98,
          options: {
            compatibility: "Apple HomeKit",
            color: "stainless steel"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "9494281769",
          price: 252.06,
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 508.04,
          payment_method_id: "gift_card_6321992"
        }
      ]
    },
    "#W3504269": {
      order_id: "#W3504269",
      user_id: "sophia_nguyen_2370",
      address: {
        address1: "762 River Road",
        address2: "Suite 690",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43241"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "5694328282",
          price: 323.19,
          options: {
            color: "gold",
            "band material": "leather",
            display: "AMOLED"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3761330360",
          price: 101.12,
          options: {
            material: "ceramic",
            capacity: "2 liters",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4131464125",
          price: 960.67,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "silver"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7597543861",
          price: 310.47,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["255643600006"],
          item_ids: ["5694328282", "3761330360", "4131464125", "7597543861"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1695.45,
          payment_method_id: "paypal_3738584"
        },
        {
          transaction_type: "refund",
          amount: 1695.45,
          payment_method_id: "paypal_3738584"
        }
      ]
    },
    "#W6371438": {
      order_id: "#W6371438",
      user_id: "yara_santos_1202",
      address: {
        address1: "206 Cedar Avenue",
        address2: "Suite 376",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91163"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5172162216",
          price: 48.51,
          options: {
            pieces: "2000",
            theme: "landscape",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "3788616824",
          price: 951.21,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6585768447",
          price: 467.69,
          options: {
            "weight range": "5-25 lbs",
            material: "urethane",
            "set type": "fixed"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "6574183535",
          price: 28.14,
          options: {
            size: "A6",
            "cover type": "hard cover"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "6805564527",
          price: 158.41,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "USB"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1653.96,
          payment_method_id: "gift_card_4543462"
        }
      ]
    },
    "#W4928532": {
      order_id: "#W4928532",
      user_id: "omar_taylor_1594",
      address: {
        address1: "639 Cedar Avenue",
        address2: "Suite 969",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95112"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1596993217",
          price: 180.02,
          options: {
            size: "S",
            color: "white",
            ventilation: "low"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["520210399492"],
          item_ids: ["1596993217"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 180.02,
          payment_method_id: "credit_card_7256085"
        }
      ]
    },
    "#W9015076": {
      order_id: "#W9015076",
      user_id: "lei_ahmed_1705",
      address: {
        address1: "558 Cedar Street",
        address2: "Suite 298",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77158"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7255224608",
          price: 2922.97,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "CF card"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "9127591879",
          price: 48.47,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8479046075",
          price: 451.01,
          options: {
            material: "wood",
            color: "white",
            height: "5 ft"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3422.45,
          payment_method_id: "credit_card_3593714"
        }
      ]
    },
    "#W7190291": {
      order_id: "#W7190291",
      user_id: "liam_johnson_5676",
      address: {
        address1: "239 Cedar Street",
        address2: "Suite 337",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46244"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "7184044281",
          price: 344.55,
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "black"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4965355367",
          price: 620.07,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "1725100896",
          price: 289.66,
          options: {
            "scent family": "oriental",
            size: "30ml",
            gender: "unisex"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "5111440845",
          price: 48.55,
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "Bluetooth"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["460952497552"],
          item_ids: ["7184044281", "4965355367", "1725100896", "5111440845"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1302.83,
          payment_method_id: "credit_card_7120747"
        }
      ]
    },
    "#W1126085": {
      order_id: "#W1126085",
      user_id: "olivia_nguyen_6241",
      address: {
        address1: "100 Elm Street",
        address2: "Suite 120",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10171"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6843647669",
          price: 180.1,
          options: {
            "deck material": "bamboo",
            length: "28 inch",
            design: "graphic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["131174664179"],
          item_ids: ["6843647669"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 180.1,
          payment_method_id: "paypal_7706317"
        }
      ]
    },
    "#W8185761": {
      order_id: "#W8185761",
      user_id: "mason_lopez_5208",
      address: {
        address1: "316 Laurel Lane",
        address2: "Suite 849",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75355"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "8997785118",
          price: 2674.4,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "space grey"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7199146548",
          price: 48.02,
          options: {
            capacity: "750ml",
            material: "plastic",
            color: "black"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3265035808",
          price: 2530.72,
          options: {
            "screen size": "17-inch",
            processor: "i9",
            ram: "8GB",
            storage: "256GB SSD",
            color: "silver"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "4821837102",
          price: 243.59,
          options: {
            color: "white",
            capacity: "4 cups",
            type: "french press",
            features: "built-in grinder"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "8538875209",
          price: 45.13,
          options: {
            capacity: "500ml",
            material: "glass",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["552915436053"],
          item_ids: [
            "8997785118",
            "7199146548",
            "3265035808",
            "4821837102",
            "8538875209"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5541.86,
          payment_method_id: "paypal_9591556"
        }
      ]
    },
    "#W5605613": {
      order_id: "#W5605613",
      user_id: "emma_smith_8564",
      address: {
        address1: "243 Hillcrest Drive",
        address2: "Suite 113",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10192"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7195021808",
          price: 2909.87,
          options: {
            resolution: "30MP",
            zoom: "5x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["267160774045"],
          item_ids: ["7195021808"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2909.87,
          payment_method_id: "gift_card_8541487"
        }
      ]
    },
    "#W1780552": {
      order_id: "#W1780552",
      user_id: "harper_johansson_2663",
      address: {
        address1: "953 Park Avenue",
        address2: "Suite 613",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10064"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4168944673",
          price: 471.82,
          options: {
            material: "leather",
            color: "blue",
            armrest: "none",
            "backrest height": "standard"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "5111440845",
          price: 48.55,
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "Bluetooth"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "1199058591",
          price: 32.29,
          options: {
            size: "A4",
            "cover type": "hard cover"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "4402162122",
          price: 233.9,
          options: {
            "switch type": "tactile",
            backlight: "RGB",
            size: "60%"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3379843752",
          price: 3203.76,
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "manual"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["358223295599"],
          item_ids: [
            "4168944673",
            "5111440845",
            "1199058591",
            "4402162122",
            "3379843752"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3990.32,
          payment_method_id: "paypal_4820484"
        }
      ]
    },
    "#W5030602": {
      order_id: "#W5030602",
      user_id: "harper_kim_2998",
      address: {
        address1: "618 Cedar Street",
        address2: "Suite 275",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19104"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9747045638",
          price: 94.01,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "3377900078",
          price: 260.68,
          options: {
            compatibility: "Apple HomeKit",
            color: "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 354.69,
          payment_method_id: "gift_card_5328393"
        }
      ]
    },
    "#W3916020": {
      order_id: "#W3916020",
      user_id: "sofia_li_9219",
      address: {
        address1: "285 Elm Street",
        address2: "Suite 121",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76155"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4068787148",
          price: 52.01,
          options: {
            pieces: "500",
            theme: "art",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "7758198585",
          price: 1917.21,
          options: {
            "frame size": "medium",
            color: "green",
            type: "road"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["580826001577"],
          item_ids: ["4068787148", "7758198585"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1969.22,
          payment_method_id: "credit_card_8105988"
        }
      ]
    },
    "#W9228376": {
      order_id: "#W9228376",
      user_id: "daiki_hernandez_1356",
      address: {
        address1: "243 Sunset Drive",
        address2: "Suite 890",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91203"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2989722512",
          price: 455.34,
          options: {
            material: "glass",
            color: "white",
            height: "3 ft"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9747045638",
          price: 94.01,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "electric"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["334553725675"],
          item_ids: ["2989722512", "9747045638"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 549.35,
          payment_method_id: "credit_card_1289579"
        }
      ]
    },
    "#W4213437": {
      order_id: "#W4213437",
      user_id: "emma_rossi_6933",
      address: {
        address1: "478 Highland Drive",
        address2: "Suite 397",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43215"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8649999816",
          price: 540.49,
          options: {
            material: "glass",
            color: "brown",
            height: "4 ft"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "1270145486",
          price: 144.07,
          options: {
            color: "white",
            brightness: "high",
            "power source": "battery"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "1657832319",
          price: 2729.32,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "512GB SSD",
            color: "black"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "6342039236",
          price: 244.91,
          options: {
            "switch type": "clicky",
            backlight: "white",
            size: "full size"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["476785109611"],
          item_ids: ["8649999816", "1270145486", "1657832319", "6342039236"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3658.79,
          payment_method_id: "gift_card_2601062"
        }
      ]
    },
    "#W9360566": {
      order_id: "#W9360566",
      user_id: "chen_lopez_3345",
      address: {
        address1: "720 Lakeview Drive",
        address2: "Suite 785",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98155"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9237024510",
          price: 53.53,
          options: {
            pieces: "500",
            theme: "animals",
            "difficulty level": "expert"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3339188619",
          price: 200.24,
          options: {
            size: "M",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "3928046918",
          price: 198,
          options: {
            color: "black",
            size: "large",
            material: "nylon",
            compartment: "camera"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["857108578448"],
          item_ids: ["9237024510", "3339188619", "3928046918"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 451.77,
          payment_method_id: "paypal_2833385"
        }
      ]
    },
    "#W5564375": {
      order_id: "#W5564375",
      user_id: "mei_martin_4260",
      address: {
        address1: "322 Elm Street",
        address2: "Suite 586",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43133"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "1793929609",
          price: 514.34,
          options: {
            material: "fabric",
            color: "black",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7583936705",
          price: 3101.43,
          options: {
            resolution: "20MP",
            zoom: "10x",
            storage: "CF card"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "1775591963",
          price: 154.75,
          options: {
            size: "10",
            color: "white",
            material: "leather",
            sole: "EVA"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "5570660360",
          price: 51.54,
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "none"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["961161785495"],
          item_ids: ["1793929609", "7583936705", "1775591963", "5570660360"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3822.06,
          payment_method_id: "paypal_2299608"
        }
      ]
    },
    "#W3295833": {
      order_id: "#W3295833",
      user_id: "liam_thomas_7882",
      address: {
        address1: "629 Pine Lane",
        address2: "Suite 380",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85049"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5312063289",
          price: 195.15,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "graphic"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "8926329222",
          price: 452.28,
          options: {
            "piece count": "2-piece",
            color: "black",
            material: "softshell"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "4063401924",
          price: 109.27,
          options: {
            capacity: "20000mAh",
            output: "Wireless",
            color: "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 756.7,
          payment_method_id: "paypal_3650980"
        }
      ]
    },
    "#W3809933": {
      order_id: "#W3809933",
      user_id: "james_martin_1500",
      address: {
        address1: "153 Cedar Street",
        address2: "Suite 769",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92112"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6697922351",
          price: 194.47,
          options: {
            size: "L",
            color: "white",
            ventilation: "medium"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "1270145486",
          price: 144.07,
          options: {
            color: "white",
            brightness: "high",
            "power source": "battery"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3339188619",
          price: 200.24,
          options: {
            size: "M",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2960542086",
          price: 512.77,
          options: {
            material: "wood",
            color: "black",
            height: "5 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["579223538421"],
          item_ids: ["6697922351", "1270145486", "3339188619", "2960542086"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1051.55,
          payment_method_id: "paypal_6661566"
        }
      ]
    },
    "#W9342124": {
      order_id: "#W9342124",
      user_id: "mason_sanchez_7536",
      address: {
        address1: "737 Elm Avenue",
        address2: "Suite 780",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78213"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "8363011723",
          price: 2823.96,
          options: {
            resolution: "20MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7597543861",
          price: 310.47,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "8153356023",
          price: 212.47,
          options: {
            size: "L",
            color: "blue",
            ventilation: "medium"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "2177997696",
          price: 206.6,
          options: {
            "deck material": "plastic",
            length: "28 inch",
            design: "custom"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2554056026",
          price: 367.38,
          options: {
            color: "gold",
            "band material": "metal",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["158568145487"],
          item_ids: [
            "8363011723",
            "7597543861",
            "8153356023",
            "2177997696",
            "2554056026"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3920.88,
          payment_method_id: "gift_card_2647591"
        }
      ]
    },
    "#W4731920": {
      order_id: "#W4731920",
      user_id: "yusuf_garcia_5427",
      address: {
        address1: "370 Maple Drive",
        address2: "Suite 371",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10155"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "5418781403",
          price: 267.58,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "8GB"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "6117189161",
          price: 481.5,
          options: {
            resolution: "4K",
            waterproof: "yes",
            color: "silver"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8798690242",
          price: 208.07,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["165504224957"],
          item_ids: ["5418781403", "6117189161", "8798690242"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 957.15,
          payment_method_id: "gift_card_6337815"
        },
        {
          transaction_type: "refund",
          amount: 957.15,
          payment_method_id: "gift_card_6337815"
        }
      ]
    },
    "#W4011814": {
      order_id: "#W4011814",
      user_id: "liam_santos_5468",
      address: {
        address1: "441 Hillcrest Drive",
        address2: "Suite 386",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78762"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1151293680",
          price: 272.33,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "full size"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1304426904",
          price: 565.79,
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9991484137",
          price: 240.97,
          options: {
            "switch type": "tactile",
            backlight: "white",
            size: "80%"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "5992316252",
          price: 141.29,
          options: {
            size: "S",
            color: "red",
            zipper: "half"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "2439754078",
          price: 49.51,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "red"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1269.89,
          payment_method_id: "credit_card_1055108"
        }
      ]
    },
    "#W2053532": {
      order_id: "#W2053532",
      user_id: "raj_ito_1740",
      address: {
        address1: "988 Cedar Avenue",
        address2: "Suite 982",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77135"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2768401027",
          price: 2346.49,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "silver"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "3892645120",
          price: 3070.64,
          options: {
            resolution: "30MP",
            zoom: "10x",
            storage: "CF card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["140430627442"],
          item_ids: ["2768401027", "3892645120"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5417.13,
          payment_method_id: "credit_card_6480285"
        }
      ]
    },
    "#W8998368": {
      order_id: "#W8998368",
      user_id: "mason_li_6934",
      address: {
        address1: "773 Park Avenue",
        address2: "Suite 707",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98131"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "9594745976",
          price: 184.13,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "custom"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4572024853",
          price: 53.72,
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "expert"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8277474082",
          price: 236.57,
          options: {
            size: "12",
            material: "leather",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["667497254458"],
          item_ids: ["9594745976", "4572024853", "8277474082"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 474.42,
          payment_method_id: "gift_card_6486968"
        }
      ]
    },
    "#W2782744": {
      order_id: "#W2782744",
      user_id: "ivan_hernandez_6923",
      address: {
        address1: "894 Hickory Lane",
        address2: "Suite 665",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92133"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "6857426243",
          price: 196.53,
          options: {
            size: "medium",
            material: "fleece",
            color: "grey"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6690069155",
          price: 466.47,
          options: {
            "piece count": "3-piece",
            color: "silver",
            material: "softshell"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8920458606",
          price: 510.02,
          options: {
            material: "wood",
            color: "white",
            height: "4 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["576024865660"],
          item_ids: ["6857426243", "6690069155", "8920458606"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1173.02,
          payment_method_id: "credit_card_7455506"
        },
        {
          transaction_type: "refund",
          amount: 1173.02,
          payment_method_id: "credit_card_7455506"
        }
      ]
    },
    "#W3239882": {
      order_id: "#W3239882",
      user_id: "mei_ahmed_4909",
      address: {
        address1: "572 Cedar Street",
        address2: "Suite 469",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78705"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "9494281769",
          price: 252.06,
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "2106335193",
          price: 903.95,
          options: {
            "screen size": "10-inch",
            storage: "64GB",
            color: "silver"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "2146648441",
          price: 105.85,
          options: {
            capacity: "10000mAh",
            output: "Wireless",
            color: "blue"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "6509212169",
          price: 256.14,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand A"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["618282621876"],
          item_ids: ["9494281769", "2106335193", "2146648441", "6509212169"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1518,
          payment_method_id: "credit_card_5902940"
        }
      ]
    },
    "#W1348788": {
      order_id: "#W1348788",
      user_id: "chen_anderson_8078",
      address: {
        address1: "233 Lakeview Drive",
        address2: "Suite 676",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19158"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "9045948550",
          price: 279.78,
          options: {
            "frame color": "black",
            "lens color": "blue",
            "lens type": "polarized",
            "frame material": "metal"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "2025713343",
          price: 336.15,
          options: {
            type: "on-ear",
            connectivity: "wired",
            color: "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 615.93,
          payment_method_id: "credit_card_9389219"
        }
      ]
    },
    "#W5220869": {
      order_id: "#W5220869",
      user_id: "olivia_smith_5265",
      address: {
        address1: "273 Highland Drive",
        address2: "Suite 953",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80216"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "8293778132",
          price: 100.62,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "6906307980",
          price: 202.39,
          options: {
            color: "black",
            size: "large",
            material: "polyester",
            compartment: "laptop"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "9190635437",
          price: 153.23,
          options: {
            color: "black",
            brightness: "low",
            "power source": "USB"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6690069155",
          price: 466.47,
          options: {
            "piece count": "3-piece",
            color: "silver",
            material: "softshell"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["113781450344"],
          item_ids: ["8293778132", "6906307980", "9190635437", "6690069155"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 922.71,
          payment_method_id: "credit_card_7971769"
        }
      ]
    },
    "#W4304974": {
      order_id: "#W4304974",
      user_id: "aarav_sanchez_9729",
      address: {
        address1: "800 Cedar Avenue",
        address2: "Suite 828",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77015"
      },
      items: [
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "7528037711",
          price: 157.86,
          options: {
            size: "XL",
            color: "navy",
            zipper: "full"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["449875449670"],
          item_ids: ["7528037711"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 157.86,
          payment_method_id: "credit_card_2690859"
        }
      ]
    },
    "#W2230795": {
      order_id: "#W2230795",
      user_id: "yusuf_gonzalez_8900",
      address: {
        address1: "285 Lakeview Drive",
        address2: "Suite 657",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91455"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7539442683",
          price: 461.49,
          options: {
            material: "metal",
            color: "black",
            height: "4 ft"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "3034017579",
          price: 49.72,
          options: {
            brightness: "75W equivalent",
            "color temperature": "warm white",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6948061616",
          price: 950.96,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "gold"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "2177260429",
          price: 296.47,
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "polarized",
            "frame material": "metal"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1758.64,
          payment_method_id: "paypal_3022415"
        }
      ]
    },
    "#W7048824": {
      order_id: "#W7048824",
      user_id: "raj_moore_7909",
      address: {
        address1: "508 Maple Drive",
        address2: "Suite 379",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20598"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "2190871011",
          price: 3105.6,
          options: {
            pressure: "9 bar",
            capacity: "1.5L",
            type: "manual"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9030221155",
          price: 51.98,
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9320099340",
          price: 375.03,
          options: {
            color: "black",
            "band material": "leather",
            display: "AMOLED"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "9270970345",
          price: 259.03,
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "not resistant"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "2819462352",
          price: 180.66,
          options: {
            "deck material": "maple",
            length: "28 inch",
            design: "graphic"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3972.3,
          payment_method_id: "gift_card_6009199"
        }
      ]
    },
    "#W7008160": {
      order_id: "#W7008160",
      user_id: "ivan_rossi_9776",
      address: {
        address1: "653 Elm Avenue",
        address2: "Suite 531",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10056"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "3613716226",
          price: 253.54,
          options: {
            size: "8",
            material: "synthetic",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["261046357015"],
          item_ids: ["3613716226"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 253.54,
          payment_method_id: "gift_card_9293123"
        }
      ]
    },
    "#W6760641": {
      order_id: "#W6760641",
      user_id: "sophia_smith_8223",
      address: {
        address1: "138 River Road",
        address2: "Suite 534",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28204"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "6942241102",
          price: 180.93,
          options: {
            size: "large",
            material: "memory foam",
            color: "beige"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "7602931732",
          price: 153.25,
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7736359414",
          price: 253.08,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand C"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8649999816",
          price: 540.49,
          options: {
            material: "glass",
            color: "brown",
            height: "4 ft"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "4458619711",
          price: 153.81,
          options: {
            capacity: "2L",
            material: "stainless steel",
            color: "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1281.56,
          payment_method_id: "gift_card_8630599"
        }
      ]
    },
    "#W9474165": {
      order_id: "#W9474165",
      user_id: "omar_muller_7891",
      address: {
        address1: "292 Chestnut Street",
        address2: "Suite 262",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60628"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8649999816",
          price: 540.49,
          options: {
            material: "glass",
            color: "brown",
            height: "4 ft"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6469567736",
          price: 47.84,
          options: {
            capacity: "1000ml",
            material: "glass",
            color: "blue"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "3788616824",
          price: 951.21,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5428723833",
          price: 145.48,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1685.02,
          payment_method_id: "gift_card_3689412"
        }
      ]
    },
    "#W9710999": {
      order_id: "#W9710999",
      user_id: "liam_lee_5696",
      address: {
        address1: "668 Highland Drive",
        address2: "Suite 584",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76176"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5645314103",
          price: 46.19,
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "3320557165",
          price: 188.67,
          options: {
            color: "blue",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7605253559",
          price: 97.88,
          options: {
            material: "stainless steel",
            capacity: "1 liter",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "1349017811",
          price: 226.05,
          options: {
            color: "white",
            capacity: "4 cups",
            type: "drip",
            features: "auto shutoff"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2244749153",
          price: 473.82,
          options: {
            material: "wood",
            color: "brown",
            height: "5 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["504533920646"],
          item_ids: [
            "5645314103",
            "3320557165",
            "7605253559",
            "1349017811",
            "2244749153"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1032.61,
          payment_method_id: "credit_card_5809636"
        }
      ]
    },
    "#W8268544": {
      order_id: "#W8268544",
      user_id: "chen_ahmed_3232",
      address: {
        address1: "571 Broadway",
        address2: "Suite 486",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46210"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7401244629",
          price: 188.92,
          options: {
            size: "L",
            color: "red",
            ventilation: "high"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4806644905",
          price: 658.89,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "cordless"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6130713659",
          price: 483.66,
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "1631373418",
          price: 1291.21,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "6GB",
            "screen size": "6.1-inch"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2622.68,
          payment_method_id: "gift_card_1402922"
        }
      ]
    },
    "#W4277243": {
      order_id: "#W4277243",
      user_id: "isabella_sanchez_2068",
      address: {
        address1: "728 Elm Street",
        address2: "Suite 964",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75239"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "2635605237",
          price: 271.89,
          options: {
            color: "blue",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["600300674229"],
          item_ids: ["2635605237"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 271.89,
          payment_method_id: "paypal_8516781"
        },
        {
          transaction_type: "refund",
          amount: 271.89,
          payment_method_id: "paypal_8516781"
        }
      ]
    },
    "#W2090453": {
      order_id: "#W2090453",
      user_id: "olivia_jackson_1219",
      address: {
        address1: "575 Broadway",
        address2: "Suite 604",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20388"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2989722512",
          price: 455.34,
          options: {
            material: "glass",
            color: "white",
            height: "3 ft"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "1157853815",
          price: 3096.7,
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3552.04,
          payment_method_id: "paypal_3999493"
        }
      ]
    },
    "#W4960069": {
      order_id: "#W4960069",
      user_id: "juan_brown_8562",
      address: {
        address1: "314 Highland Drive",
        address2: "Suite 426",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75347"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "1793929609",
          price: 514.34,
          options: {
            material: "fabric",
            color: "black",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "3614853563",
          price: 46.99,
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "5952720925",
          price: 260.19,
          options: {
            color: "black",
            capacity: "4 cups",
            type: "espresso",
            features: "timer"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["709442264870"],
          item_ids: ["1793929609", "3614853563", "5952720925"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 821.52,
          payment_method_id: "credit_card_2288437"
        }
      ]
    },
    "#W9854700": {
      order_id: "#W9854700",
      user_id: "fatima_taylor_2349",
      address: {
        address1: "940 Oak Street",
        address2: "Suite 612",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43224"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "8193934556",
          price: 2548.73,
          options: {
            "screen size": "13-inch",
            processor: "i9",
            ram: "8GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9690244451",
          price: 236.51,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "60%"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2785.24,
          payment_method_id: "paypal_4421257"
        }
      ]
    },
    "#W4776164": {
      order_id: "#W4776164",
      user_id: "yusuf_rossi_9620",
      address: {
        address1: "763 Broadway",
        address2: "Suite 135",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19122"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8349118980",
          price: 53.43,
          options: {
            color: "blue",
            size: "S",
            material: "cotton",
            style: "v-neck"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6324294385",
          price: 2719.01,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "automatic"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2772.44,
          payment_method_id: "credit_card_9513926"
        }
      ]
    },
    "#W9594011": {
      order_id: "#W9594011",
      user_id: "ava_nguyen_6971",
      address: {
        address1: "670 Maple Drive",
        address2: "Suite 412",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80286"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "3104857380",
          price: 377.97,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "red"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 377.97,
          payment_method_id: "gift_card_8640626"
        }
      ]
    },
    "#W3931703": {
      order_id: "#W3931703",
      user_id: "lei_ahmed_1705",
      address: {
        address1: "125 Cedar Street",
        address2: "Suite 574",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19128"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "4024196380",
          price: 102.9,
          options: {
            length: "50ft",
            material: "latex",
            color: "black"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7751905257",
          price: 321.18,
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2698416822",
          price: 149.45,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "white"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "4458619711",
          price: 153.81,
          options: {
            capacity: "2L",
            material: "stainless steel",
            color: "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 727.34,
          payment_method_id: "credit_card_3593714"
        }
      ]
    },
    "#W8826221": {
      order_id: "#W8826221",
      user_id: "noah_kovacs_1216",
      address: {
        address1: "191 Lakeview Drive",
        address2: "Suite 781",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20566"
      },
      items: [
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8590708195",
          price: 157.61,
          options: {
            size: "XL",
            color: "navy",
            zipper: "half"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3265035808",
          price: 2530.72,
          options: {
            "screen size": "17-inch",
            processor: "i9",
            ram: "8GB",
            storage: "256GB SSD",
            color: "silver"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3877338112",
          price: 545.68,
          options: {
            "weight range": "5-25 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8479046075",
          price: 451.01,
          options: {
            material: "wood",
            color: "white",
            height: "5 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["227876540944"],
          item_ids: ["8590708195", "3265035808", "3877338112", "8479046075"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3685.02,
          payment_method_id: "gift_card_2486551"
        }
      ]
    },
    "#W3864587": {
      order_id: "#W3864587",
      user_id: "mei_hernandez_3296",
      address: {
        address1: "445 Spruce Street",
        address2: "Suite 559",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20140"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "4843487907",
          price: 254.84,
          options: {
            "switch type": "clicky",
            backlight: "white",
            size: "80%"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7597543861",
          price: 310.47,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["378586227558"],
          item_ids: ["4843487907", "7597543861"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 565.31,
          payment_method_id: "paypal_1768431"
        }
      ]
    },
    "#W2040365": {
      order_id: "#W2040365",
      user_id: "fatima_muller_6713",
      address: {
        address1: "514 Hillcrest Drive",
        address2: "Suite 243",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78213"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "2820119811",
          price: 94.68,
          options: {
            material: "glass",
            capacity: "2 liters",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "2060066974",
          price: 51.05,
          options: {
            color: "black",
            size: "XL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "8384507844",
          price: 137.94,
          options: {
            color: "white",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "9884666842",
          price: 2794.7,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "manual"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3709608322",
          price: 2744.7,
          options: {
            pressure: "9 bar",
            capacity: "2L",
            type: "automatic"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5823.07,
          payment_method_id: "paypal_5541158"
        }
      ]
    },
    "#W3929227": {
      order_id: "#W3929227",
      user_id: "lucas_martin_4549",
      address: {
        address1: "499 Broadway",
        address2: "Suite 351",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28205"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7774234341",
          price: 2719.16,
          options: {
            pressure: "9 bar",
            capacity: "2L",
            type: "manual"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7918497119",
          price: 54.51,
          options: {
            capacity: "500ml",
            material: "glass",
            color: "blue"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "9949163720",
          price: 1908.15,
          options: {
            "strap material": "leather",
            "dial color": "black"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "4202497723",
          price: 342.81,
          options: {
            type: "over-ear",
            connectivity: "wireless",
            color: "blue"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "9494281769",
          price: 252.06,
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["517917903605"],
          item_ids: [
            "7774234341",
            "7918497119",
            "9949163720",
            "4202497723",
            "9494281769"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5276.69,
          payment_method_id: "credit_card_7862034"
        }
      ]
    },
    "#W3730488": {
      order_id: "#W3730488",
      user_id: "yara_silva_7567",
      address: {
        address1: "116 Laurel Lane",
        address2: "Suite 319",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77159"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6200867091",
          price: 2955.17,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "capsule"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2913673670",
          price: 2701.89,
          options: {
            "screen size": "15-inch",
            processor: "i9",
            ram: "32GB",
            storage: "512GB SSD",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5657.06,
          payment_method_id: "gift_card_7252880"
        }
      ]
    },
    "#W4538969": {
      order_id: "#W4538969",
      user_id: "yara_martin_9470",
      address: {
        address1: "413 Elm Street",
        address2: "Suite 681",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80209"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "4875647558",
          price: 2805.77,
          options: {
            pressure: "15 bar",
            capacity: "1L",
            type: "capsule"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "3104857380",
          price: 377.97,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "red"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7441167885",
          price: 2866.37,
          options: {
            pressure: "15 bar",
            capacity: "1.5L",
            type: "capsule"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "9580569596",
          price: 257.38,
          options: {
            color: "black",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6307.49,
          payment_method_id: "credit_card_1006622"
        }
      ]
    },
    "#W2317937": {
      order_id: "#W2317937",
      user_id: "ava_johnson_5052",
      address: {
        address1: "344 Park Avenue",
        address2: "Suite 727",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92171"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2658930189",
          price: 241.68,
          options: {
            size: "9",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "8759627937",
          price: 501.65,
          options: {
            "piece count": "4-piece",
            color: "blue",
            material: "softshell"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "8170914468",
          price: 316.29,
          options: {
            size: "6 ft",
            color: "red",
            material: "olefin",
            "tilt mechanism": "manual tilt"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "2751999929",
          price: 195.11,
          options: {
            size: "large",
            material: "memory foam",
            color: "grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["295005425513"],
          item_ids: ["2658930189", "8759627937", "8170914468", "2751999929"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1254.73,
          payment_method_id: "paypal_3846161"
        }
      ]
    },
    "#W3196599": {
      order_id: "#W3196599",
      user_id: "aarav_davis_4756",
      address: {
        address1: "514 Hickory Lane",
        address2: "Suite 343",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91582"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6171242004",
          price: 462.84,
          options: {
            "weight range": "30-50 lbs",
            material: "rubber",
            "set type": "fixed"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7843064651",
          price: 50.14,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "blue"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8920458606",
          price: 510.02,
          options: {
            material: "wood",
            color: "white",
            height: "4 ft"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "8214883393",
          price: 150.58,
          options: {
            color: "black",
            "sensor type": "laser",
            connectivity: "wireless"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "2444431651",
          price: 534.84,
          options: {
            "weight range": "55-75 lbs",
            material: "iron",
            "set type": "fixed"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1708.42,
          payment_method_id: "gift_card_9708163"
        }
      ]
    },
    "#W1770559": {
      order_id: "#W1770559",
      user_id: "isabella_thomas_4211",
      address: {
        address1: "469 Elm Street",
        address2: "Suite 285",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91378"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6324294385",
          price: 2719.01,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "automatic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["972763009489"],
          item_ids: ["6324294385"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2719.01,
          payment_method_id: "gift_card_5826260"
        }
      ]
    },
    "#W8921199": {
      order_id: "#W8921199",
      user_id: "olivia_nguyen_6241",
      address: {
        address1: "100 Elm Street",
        address2: "Suite 120",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10171"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "9480266227",
          price: 255.98,
          options: {
            compatibility: "Apple HomeKit",
            color: "stainless steel"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "5796612084",
          price: 158.89,
          options: {
            color: "RGB",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "4510078629",
          price: 2127.62,
          options: {
            "strap material": "metal",
            "dial color": "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["619979868825"],
          item_ids: ["9480266227", "5796612084", "4510078629"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2542.49,
          payment_method_id: "paypal_7706317"
        }
      ]
    },
    "#W1523776": {
      order_id: "#W1523776",
      user_id: "lucas_muller_4380",
      address: {
        address1: "125 River Road",
        address2: "Suite 131",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78763"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "3913310464",
          price: 272.2,
          options: {
            "skin tone": "dark",
            "kit size": "basic",
            brand: "Brand A"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "8593894906",
          price: 263.11,
          options: {
            compatibility: "Amazon Alexa",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["339668688232"],
          item_ids: ["3913310464", "8593894906"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 535.31,
          payment_method_id: "gift_card_2748512"
        }
      ]
    },
    "#W8379216": {
      order_id: "#W8379216",
      user_id: "lucas_johansson_1090",
      address: {
        address1: "813 Oak Street",
        address2: "Suite 412",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94147"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "9459890810",
          price: 510.1,
          options: {
            material: "fabric",
            color: "gray",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "2235648106",
          price: 1054.43,
          options: {
            "screen size": "10-inch",
            storage: "32GB",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1564.53,
          payment_method_id: "credit_card_1864112"
        }
      ]
    },
    "#W1514731": {
      order_id: "#W1514731",
      user_id: "sofia_ito_5484",
      address: {
        address1: "118 Cedar Street",
        address2: "Suite 461",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19169"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9320099340",
          price: 375.03,
          options: {
            color: "black",
            "band material": "leather",
            display: "AMOLED"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "7445824652",
          price: 49.8,
          options: {
            brightness: "75W equivalent",
            "color temperature": "daylight",
            connectivity: "Wi-Fi"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 424.83,
          payment_method_id: "paypal_6882355"
        }
      ]
    },
    "#W5815923": {
      order_id: "#W5815923",
      user_id: "juan_martin_4740",
      address: {
        address1: "200 River Road",
        address2: "Suite 928",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94102"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3704016729",
          price: 487.67,
          options: {
            material: "mesh",
            color: "blue",
            armrest: "fixed",
            "backrest height": "standard"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3379843752",
          price: 3203.76,
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "manual"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6401214406",
          price: 187.02,
          options: {
            size: "M",
            color: "red",
            ventilation: "low"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "5606522780",
          price: 1902.67,
          options: {
            "frame size": "large",
            color: "red",
            type: "mountain"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5781.12,
          payment_method_id: "paypal_7603967"
        }
      ]
    },
    "#W8838515": {
      order_id: "#W8838515",
      user_id: "liam_li_8526",
      address: {
        address1: "707 Maple Drive",
        address2: "Suite 817",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78202"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9408160950",
          price: 381.26,
          options: {
            color: "gold",
            "band material": "leather",
            display: "LCD"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["611746709542"],
          item_ids: ["9408160950"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 381.26,
          payment_method_id: "paypal_9619477"
        }
      ]
    },
    "#W1341845": {
      order_id: "#W1341845",
      user_id: "yara_lee_7701",
      address: {
        address1: "490 Highland Drive",
        address2: "Suite 496",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76153"
      },
      items: [
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "6206533187",
          price: 47.83,
          options: {
            brightness: "75W equivalent",
            "color temperature": "warm white",
            connectivity: "none"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "4402162122",
          price: 233.9,
          options: {
            "switch type": "tactile",
            backlight: "RGB",
            size: "60%"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "6704763132",
          price: 305.45,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["712388952344"],
          item_ids: ["6206533187", "4402162122", "6704763132"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 587.18,
          payment_method_id: "credit_card_6450164"
        }
      ]
    },
    "#W3169501": {
      order_id: "#W3169501",
      user_id: "liam_moore_4057",
      address: {
        address1: "244 Elm Street",
        address2: "Suite 422",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43209"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "8302289002",
          price: 547.55,
          options: {
            "room size": "large",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8895454203",
          price: 504.65,
          options: {
            material: "glass",
            color: "white",
            height: "5 ft"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1052.2,
          payment_method_id: "paypal_4518393"
        }
      ]
    },
    "#W9911714": {
      order_id: "#W9911714",
      user_id: "ethan_garcia_1261",
      address: {
        address1: "667 Highland Drive",
        address2: "Suite 865",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80280"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "2366567022",
          price: 54.04,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "blue"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1340995114",
          price: 235.13,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "full size"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9791469541",
          price: 147.05,
          options: {
            size: "9",
            color: "yellow",
            material: "synthetic",
            sole: "rubber"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1763705424",
          price: 235.44,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand C"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 671.66,
          payment_method_id: "paypal_3798357"
        }
      ]
    },
    "#W2438921": {
      order_id: "#W2438921",
      user_id: "juan_gonzalez_6489",
      address: {
        address1: "920 Laurel Lane",
        address2: "Suite 692",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32182"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "1804581713",
          price: 2875.61,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5537798301",
          price: 204.47,
          options: {
            size: "S",
            color: "black",
            ventilation: "medium"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9665100170",
          price: 45.39,
          options: {
            pieces: "1500",
            theme: "animals",
            "difficulty level": "beginner"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3125.47,
          payment_method_id: "gift_card_2446065"
        }
      ]
    },
    "#W2904339": {
      order_id: "#W2904339",
      user_id: "fatima_nguyen_7539",
      address: {
        address1: "592 Broadway",
        address2: "Suite 330",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43211"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7274158061",
          price: 91.13,
          options: {
            material: "ceramic",
            capacity: "1 liter",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "9447903288",
          price: 296.78,
          options: {
            "scent family": "fresh",
            size: "30ml",
            gender: "men"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "7187199153",
          price: 983.62,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "6245746168",
          price: 46,
          options: {
            pieces: "1500",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6690069155",
          price: 466.47,
          options: {
            "piece count": "3-piece",
            color: "silver",
            material: "softshell"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1884,
          payment_method_id: "paypal_2613218"
        }
      ]
    },
    "#W4442043": {
      order_id: "#W4442043",
      user_id: "anya_sanchez_9707",
      address: {
        address1: "359 Broadway",
        address2: "Suite 411",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28291"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "5917587651",
          price: 212.79,
          options: {
            color: "grey",
            size: "medium",
            material: "polyester",
            compartment: "laptop"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6697922351",
          price: 194.47,
          options: {
            size: "L",
            color: "white",
            ventilation: "medium"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "3187628796",
          price: 1205.66,
          options: {
            color: "rose gold",
            storage: "128GB",
            RAM: "8GB",
            "screen size": "6.1-inch"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "7758198585",
          price: 1917.21,
          options: {
            "frame size": "medium",
            color: "green",
            type: "road"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["798476504676"],
          item_ids: ["5917587651", "6697922351", "3187628796", "7758198585"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3530.13,
          payment_method_id: "paypal_1191071"
        }
      ]
    },
    "#W6319233": {
      order_id: "#W6319233",
      user_id: "mia_silva_4504",
      address: {
        address1: "325 Main Street",
        address2: "Suite 298",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95173"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8798690242",
          price: 208.07,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "1768466237",
          price: 549.84,
          options: {
            material: "glass",
            color: "black",
            height: "3 ft"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "9727387530",
          price: 207.75,
          options: {
            size: "11",
            color: "black",
            material: "synthetic"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1709726483",
          price: 230.26,
          options: {
            "skin tone": "medium",
            "kit size": "basic",
            brand: "Brand A"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "5966895767",
          price: 329.58,
          options: {
            resolution: "2K",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["778452325483"],
          item_ids: [
            "8798690242",
            "1768466237",
            "9727387530",
            "1709726483",
            "5966895767"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1525.5,
          payment_method_id: "credit_card_9308469"
        }
      ]
    },
    "#W4500945": {
      order_id: "#W4500945",
      user_id: "evelyn_gonzalez_8209",
      address: {
        address1: "800 Spruce Street",
        address2: "Suite 800",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78242"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "3676786561",
          price: 502.7,
          options: {
            "room size": "small",
            "filter type": "HEPA",
            features: "quiet operation"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "5109407456",
          price: 182.48,
          options: {
            size: "small",
            material: "fleece",
            color: "grey"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "3330317167",
          price: 137.32,
          options: {
            color: "black",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4920090458",
          price: 381.87,
          options: {
            color: "black",
            "band material": "silicone",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["848274996975"],
          item_ids: ["3676786561", "5109407456", "3330317167", "4920090458"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1204.37,
          payment_method_id: "credit_card_2025256"
        }
      ]
    },
    "#W5690487": {
      order_id: "#W5690487",
      user_id: "yusuf_taylor_7149",
      address: {
        address1: "227 Oak Street",
        address2: "Suite 699",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20564"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "6555827912",
          price: 199.42,
          options: {
            color: "black",
            "speed settings": "low",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3358616356",
          price: 197.33,
          options: {
            size: "S",
            color: "red",
            ventilation: "low"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["467544979708"],
          item_ids: ["6555827912", "3358616356"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 396.75,
          payment_method_id: "credit_card_3599838"
        }
      ]
    },
    "#W1216601": {
      order_id: "#W1216601",
      user_id: "omar_silva_7446",
      address: {
        address1: "119 Laurel Lane",
        address2: "Suite 409",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46243"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "3112842858",
          price: 49.1,
          options: {
            pieces: "1000",
            theme: "fantasy",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "9007697085",
          price: 318.96,
          options: {
            "scent family": "fresh",
            size: "50ml",
            gender: "men"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "6206533187",
          price: 47.83,
          options: {
            brightness: "75W equivalent",
            "color temperature": "warm white",
            connectivity: "none"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "8722653925",
          price: 227.8,
          options: {
            compatibility: "Google Assistant",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["466733640636"],
          item_ids: ["3112842858", "9007697085", "6206533187", "8722653925"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 643.69,
          payment_method_id: "paypal_2192303"
        },
        {
          transaction_type: "refund",
          amount: 643.69,
          payment_method_id: "paypal_2192303"
        }
      ]
    },
    "#W6236251": {
      order_id: "#W6236251",
      user_id: "mia_jackson_2250",
      address: {
        address1: "629 Sunset Drive",
        address2: "Suite 581",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92159"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4965355367",
          price: 620.07,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2540052208",
          price: 346.42,
          options: {
            color: "gold",
            "band material": "silicone",
            display: "LCD"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "4402162122",
          price: 233.9,
          options: {
            "switch type": "tactile",
            backlight: "RGB",
            size: "60%"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "9127591879",
          price: 48.47,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "5012998807",
          price: 258.71,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand B"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1507.57,
          payment_method_id: "gift_card_5715854"
        }
      ]
    },
    "#W7555783": {
      order_id: "#W7555783",
      user_id: "liam_lopez_7019",
      address: {
        address1: "380 Laurel Lane",
        address2: "Suite 960",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75388"
      },
      items: [
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "7866854614",
          price: 105.49,
          options: {
            capacity: "5000mAh",
            output: "USB-C",
            color: "white"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7617930199",
          price: 285.94,
          options: {
            color: "red",
            "battery life": "20 hours",
            "water resistance": "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 391.43,
          payment_method_id: "gift_card_8483518"
        }
      ]
    },
    "#W6209538": {
      order_id: "#W6209538",
      user_id: "mason_sanchez_7536",
      address: {
        address1: "304 Elm Avenue",
        address2: "Suite 347",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60647"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "2177260429",
          price: 296.47,
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "polarized",
            "frame material": "metal"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "6704763132",
          price: 305.45,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["906221606603"],
          item_ids: ["2177260429", "6704763132"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 601.92,
          payment_method_id: "gift_card_2647591"
        }
      ]
    },
    "#W6867036": {
      order_id: "#W6867036",
      user_id: "mei_jackson_1214",
      address: {
        address1: "417 Cedar Avenue",
        address2: "Suite 249",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28267"
      },
      items: [
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "8917609800",
          price: 195.59,
          options: {
            diameter: "10 inches",
            color: "white",
            type: "digital"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "3928046918",
          price: 198,
          options: {
            color: "black",
            size: "large",
            material: "nylon",
            compartment: "camera"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["606802494757"],
          item_ids: ["8917609800", "3928046918"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 393.59,
          payment_method_id: "paypal_8305620"
        }
      ]
    },
    "#W3002300": {
      order_id: "#W3002300",
      user_id: "noah_kovacs_1216",
      address: {
        address1: "191 Lakeview Drive",
        address2: "Suite 781",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20566"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "9179378709",
          price: 326.59,
          options: {
            color: "green",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7597543861",
          price: 310.47,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["166979325965"],
          item_ids: ["9179378709", "7597543861"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 637.06,
          payment_method_id: "gift_card_2486551"
        }
      ]
    },
    "#W6111820": {
      order_id: "#W6111820",
      user_id: "aarav_santos_4279",
      address: {
        address1: "307 Laurel Lane",
        address2: "Suite 982",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85070"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2648909398",
          price: 240.87,
          options: {
            size: "8",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "2115393569",
          price: 270.91,
          options: {
            color: "black",
            capacity: "1 cup",
            type: "drip",
            features: "timer"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2757705742",
          price: 258.97,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1763705424",
          price: 235.44,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand C"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1006.19,
          payment_method_id: "credit_card_3816099"
        }
      ]
    },
    "#W9158156": {
      order_id: "#W9158156",
      user_id: "evelyn_patel_8882",
      address: {
        address1: "829 Chestnut Street",
        address2: "Suite 252",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28262"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7751905257",
          price: 321.18,
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["897634225227"],
          item_ids: ["7751905257"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 321.18,
          payment_method_id: "paypal_3704667"
        }
      ]
    },
    "#W1763367": {
      order_id: "#W1763367",
      user_id: "ethan_kim_8860",
      address: {
        address1: "848 Willow Lane",
        address2: "Suite 453",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78286"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "7127170374",
          price: 52.03,
          options: {
            pieces: "2000",
            theme: "fantasy",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "1199058591",
          price: 32.29,
          options: {
            size: "A4",
            "cover type": "hard cover"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "6017636844",
          price: 2292.37,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3815173328",
          price: 2908.42,
          options: {
            pressure: "9 bar",
            capacity: "1.5L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["243100789761"],
          item_ids: ["7127170374", "1199058591", "6017636844", "3815173328"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5285.11,
          payment_method_id: "gift_card_5701566"
        }
      ]
    },
    "#W6072865": {
      order_id: "#W6072865",
      user_id: "liam_silva_3628",
      address: {
        address1: "904 Highland Drive",
        address2: "Suite 585",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95110"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8920458606",
          price: 510.02,
          options: {
            material: "wood",
            color: "white",
            height: "4 ft"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "3111466194",
          price: 285.66,
          options: {
            size: "7 ft",
            color: "red",
            material: "polyester",
            "tilt mechanism": "manual tilt"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "1859994221",
          price: 182.85,
          options: {
            diameter: "10 inches",
            color: "black",
            type: "analog"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "9179378709",
          price: 326.59,
          options: {
            color: "green",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["102130384546"],
          item_ids: ["8920458606", "3111466194", "1859994221", "9179378709"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1305.12,
          payment_method_id: "paypal_6137664"
        },
        {
          transaction_type: "refund",
          amount: 1305.12,
          payment_method_id: "paypal_6137664"
        }
      ]
    },
    "#W3470184": {
      order_id: "#W3470184",
      user_id: "aarav_anderson_8794",
      address: {
        address1: "931 Maple Drive",
        address2: "Suite 985",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19031"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "6452271382",
          price: 258.84,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "2366567022",
          price: 54.04,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "blue"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "1646531091",
          price: 232.49,
          options: {
            color: "blue",
            "battery life": "6 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2757705742",
          price: 258.97,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "1768466237",
          price: 549.84,
          options: {
            material: "glass",
            color: "black",
            height: "3 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["326433164179"],
          item_ids: [
            "6452271382",
            "2366567022",
            "1646531091",
            "2757705742",
            "1768466237"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1354.18,
          payment_method_id: "gift_card_7245904"
        }
      ]
    },
    "#W1679211": {
      order_id: "#W1679211",
      user_id: "yusuf_gonzalez_8900",
      address: {
        address1: "285 Lakeview Drive",
        address2: "Suite 657",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91455"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4913411651",
          price: 941.03,
          options: {
            "screen size": "7-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "6268080249",
          price: 244.02,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "7127170374",
          price: 52.03,
          options: {
            pieces: "2000",
            theme: "fantasy",
            "difficulty level": "beginner"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9612497925",
          price: 50.88,
          options: {
            color: "blue",
            size: "M",
            material: "cotton",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["568007704518"],
          item_ids: ["4913411651", "6268080249", "7127170374", "9612497925"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1287.96,
          payment_method_id: "paypal_3022415"
        }
      ]
    },
    "#W4435622": {
      order_id: "#W4435622",
      user_id: "james_li_5688",
      address: {
        address1: "215 River Road",
        address2: "Suite 991",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10083"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4694984344",
          price: 239.78,
          options: {
            size: "12",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6777246137",
          price: 47.76,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "red"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["967193221991"],
          item_ids: ["4694984344", "6777246137"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 287.54,
          payment_method_id: "gift_card_1725971"
        }
      ]
    },
    "#W1177016": {
      order_id: "#W1177016",
      user_id: "liam_johnson_5676",
      address: {
        address1: "239 Cedar Street",
        address2: "Suite 337",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46244"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "3230708338",
          price: 99.51,
          options: {
            length: "25ft",
            material: "latex",
            color: "green"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7583936705",
          price: 3101.43,
          options: {
            resolution: "20MP",
            zoom: "10x",
            storage: "CF card"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2860956907",
          price: 315.61,
          options: {
            color: "black",
            "band material": "silicone",
            display: "LCD"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4806644905",
          price: 658.89,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "cordless"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "2194493783",
          price: 471.64,
          options: {
            "weight range": "5-25 lbs",
            material: "iron",
            "set type": "fixed"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["953801270783"],
          item_ids: [
            "3230708338",
            "7583936705",
            "2860956907",
            "4806644905",
            "2194493783"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4647.08,
          payment_method_id: "credit_card_7120747"
        },
        {
          transaction_type: "refund",
          amount: 4647.08,
          payment_method_id: "credit_card_7120747"
        }
      ]
    },
    "#W8520591": {
      order_id: "#W8520591",
      user_id: "james_lee_5010",
      address: {
        address1: "870 Oak Street",
        address2: "Suite 766",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95161"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "9494281769",
          price: 252.06,
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["582631475817"],
          item_ids: ["9494281769"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 252.06,
          payment_method_id: "paypal_2684483"
        },
        {
          transaction_type: "refund",
          amount: 252.06,
          payment_method_id: "paypal_2684483"
        }
      ]
    },
    "#W3614011": {
      order_id: "#W3614011",
      user_id: "emma_smith_8564",
      address: {
        address1: "243 Hillcrest Drive",
        address2: "Suite 113",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10192"
      },
      items: [
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "5436236388",
          price: 538.6,
          options: {
            resolution: "1080p",
            waterproof: "yes",
            color: "silver"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "3076708684",
          price: 535.97,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "quiet operation"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "4410138384",
          price: 197.37,
          options: {
            size: "8",
            color: "gray",
            material: "canvas"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1271.94,
          payment_method_id: "gift_card_8541487"
        }
      ]
    },
    "#W6975922": {
      order_id: "#W6975922",
      user_id: "olivia_jackson_1219",
      address: {
        address1: "320 Oak Street",
        address2: "Suite 822",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94172"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "4953074738",
          price: 226.02,
          options: {
            compatibility: "Amazon Alexa",
            color: "black"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "1646531091",
          price: 232.49,
          options: {
            color: "blue",
            "battery life": "6 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5645314103",
          price: 46.19,
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9665000388",
          price: 269.46,
          options: {
            "switch type": "clicky",
            backlight: "none",
            size: "80%"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 774.16,
          payment_method_id: "paypal_3999493"
        }
      ]
    },
    "#W2470317": {
      order_id: "#W2470317",
      user_id: "harper_kim_3380",
      address: {
        address1: "319 Laurel Lane",
        address2: "Suite 110",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10132"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "2444431651",
          price: 534.84,
          options: {
            "weight range": "55-75 lbs",
            material: "iron",
            "set type": "fixed"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5855700373",
          price: 293.46,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "7624783998",
          price: 154.17,
          options: {
            color: "black",
            brightness: "high",
            "power source": "AC adapter"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2540052208",
          price: 346.42,
          options: {
            color: "gold",
            "band material": "silicone",
            display: "LCD"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["470550612503"],
          item_ids: ["2444431651", "5855700373", "7624783998", "2540052208"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1328.89,
          payment_method_id: "credit_card_7644789"
        }
      ]
    },
    "#W1519594": {
      order_id: "#W1519594",
      user_id: "ivan_khan_7475",
      address: {
        address1: "159 Hickory Lane",
        address2: "Suite 995",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28243"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9472539378",
          price: 143.72,
          options: {
            capacity: "1.5L",
            material: "glass",
            color: "white"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "1646531091",
          price: 232.49,
          options: {
            color: "blue",
            "battery life": "6 hours",
            "water resistance": "IPX4"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["772875761698"],
          item_ids: ["9472539378", "1646531091"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 376.21,
          payment_method_id: "gift_card_1711656"
        }
      ]
    },
    "#W3895186": {
      order_id: "#W3895186",
      user_id: "olivia_jackson_1219",
      address: {
        address1: "350 River Road",
        address2: "Suite 409",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90943"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9320099340",
          price: 375.03,
          options: {
            color: "black",
            "band material": "leather",
            display: "AMOLED"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8798690242",
          price: 208.07,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["677343474695"],
          item_ids: ["9320099340", "8798690242"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 583.1,
          payment_method_id: "paypal_3999493"
        }
      ]
    },
    "#W9907310": {
      order_id: "#W9907310",
      user_id: "ava_moore_4814",
      address: {
        address1: "603 Maple Drive",
        address2: "Suite 859",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85032"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5745575001",
          price: 986.65,
          options: {
            type: "electric",
            size: "portable",
            features: "rotisserie"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8733974883",
          price: 153.18,
          options: {
            size: "L",
            color: "red",
            zipper: "half"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["111101353991"],
          item_ids: ["5745575001", "8733974883"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1139.83,
          payment_method_id: "paypal_7478252"
        }
      ]
    },
    "#W1867876": {
      order_id: "#W1867876",
      user_id: "sophia_thomas_5301",
      address: {
        address1: "963 Lakeview Drive",
        address2: "Suite 696",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75396"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "6906307980",
          price: 202.39,
          options: {
            color: "black",
            size: "large",
            material: "polyester",
            compartment: "laptop"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1304426904",
          price: 565.79,
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6922203216",
          price: 199.12,
          options: {
            diameter: "14 inches",
            color: "black",
            type: "digital"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "7510236436",
          price: 105.68,
          options: {
            thickness: "6mm",
            material: "PVC",
            color: "green"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["408266263402"],
          item_ids: ["6906307980", "1304426904", "6922203216", "7510236436"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1072.98,
          payment_method_id: "credit_card_1034663"
        }
      ]
    },
    "#W2437730": {
      order_id: "#W2437730",
      user_id: "mohamed_li_1979",
      address: {
        address1: "615 Elm Avenue",
        address2: "Suite 790",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43209"
      },
      items: [
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "6574183535",
          price: 28.14,
          options: {
            size: "A6",
            "cover type": "hard cover"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9025753381",
          price: 231.58,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "full size"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "6509212169",
          price: 256.14,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand A"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "3034017579",
          price: 49.72,
          options: {
            brightness: "75W equivalent",
            "color temperature": "warm white",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "7706410293",
          price: 269.16,
          options: {
            "switch type": "clicky",
            backlight: "none",
            size: "full size"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["277023624573"],
          item_ids: [
            "6574183535",
            "9025753381",
            "6509212169",
            "3034017579",
            "7706410293"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 834.74,
          payment_method_id: "paypal_6045911"
        },
        {
          transaction_type: "refund",
          amount: 834.74,
          payment_method_id: "paypal_6045911"
        }
      ]
    },
    "#W9931224": {
      order_id: "#W9931224",
      user_id: "mei_ahmed_5058",
      address: {
        address1: "287 Laurel Lane",
        address2: "Suite 662",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75282"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "2819462352",
          price: 180.66,
          options: {
            "deck material": "maple",
            length: "28 inch",
            design: "graphic"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "3330317167",
          price: 137.32,
          options: {
            color: "black",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3098764622",
          price: 202.13,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "plain"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "5788631787",
          price: 375.55,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "black"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9624127908",
          price: 158.9,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["181292856236"],
          item_ids: [
            "2819462352",
            "3330317167",
            "3098764622",
            "5788631787",
            "9624127908"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1054.56,
          payment_method_id: "paypal_7160322"
        },
        {
          transaction_type: "refund",
          amount: 1054.56,
          payment_method_id: "paypal_7160322"
        }
      ]
    },
    "#W9389413": {
      order_id: "#W9389413",
      user_id: "fatima_johnson_7581",
      address: {
        address1: "123 Elm Street",
        address2: "Suite 640",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78712"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4127323219",
          price: 251.82,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2554056026",
          price: 367.38,
          options: {
            color: "gold",
            "band material": "metal",
            display: "AMOLED"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "6342039236",
          price: 244.91,
          options: {
            "switch type": "clicky",
            backlight: "white",
            size: "full size"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "5047954489",
          price: 54.84,
          options: {
            color: "blue",
            size: "S",
            material: "polyester",
            style: "v-neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["967556659983"],
          item_ids: ["4127323219", "2554056026", "6342039236", "5047954489"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 918.95,
          payment_method_id: "paypal_5364164"
        }
      ]
    },
    "#W9939424": {
      order_id: "#W9939424",
      user_id: "mason_lopez_5208",
      address: {
        address1: "760 Maple Drive",
        address2: "Suite 631",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10257"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "6595128475",
          price: 237.65,
          options: {
            size: "9",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "6704763132",
          price: 305.45,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["289776846280"],
          item_ids: ["6595128475", "6704763132"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 543.1,
          payment_method_id: "paypal_9591556"
        }
      ]
    },
    "#W3899829": {
      order_id: "#W3899829",
      user_id: "fatima_muller_6713",
      address: {
        address1: "377 River Road",
        address2: "Suite 307",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60644"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2499294441",
          price: 258.36,
          options: {
            color: "black",
            "battery life": "8 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6401214406",
          price: 187.02,
          options: {
            size: "M",
            color: "red",
            ventilation: "low"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "2882812427",
          price: 261.11,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand A"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6697922351",
          price: 194.47,
          options: {
            size: "L",
            color: "white",
            ventilation: "medium"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["604649147027"],
          item_ids: ["2499294441", "6401214406", "2882812427", "6697922351"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 900.96,
          payment_method_id: "paypal_5541158"
        },
        {
          transaction_type: "refund",
          amount: 900.96,
          payment_method_id: "paypal_5541158"
        }
      ]
    },
    "#W7454537": {
      order_id: "#W7454537",
      user_id: "isabella_johnson_1272",
      address: {
        address1: "331 Hickory Lane",
        address2: "Suite 260",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28267"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "6245746168",
          price: 46,
          options: {
            pieces: "1500",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["999120515317"],
          item_ids: ["6245746168"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 46,
          payment_method_id: "gift_card_5401084"
        },
        {
          transaction_type: "refund",
          amount: 46,
          payment_method_id: "gift_card_5401084"
        }
      ]
    },
    "#W6701662": {
      order_id: "#W6701662",
      user_id: "harper_patel_2628",
      address: {
        address1: "950 Lakeview Drive",
        address2: "Suite 918",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98198"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9665100170",
          price: 45.39,
          options: {
            pieces: "1500",
            theme: "animals",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "8484921793",
          price: 230.15,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "80%"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "6509212169",
          price: 256.14,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand A"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "5320792178",
          price: 135.24,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "AC adapter"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["809598309121"],
          item_ids: ["9665100170", "8484921793", "6509212169", "5320792178"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 666.92,
          payment_method_id: "gift_card_1461059"
        }
      ]
    },
    "#W7546247": {
      order_id: "#W7546247",
      user_id: "juan_smith_5229",
      address: {
        address1: "444 Highland Drive",
        address2: "Suite 419",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75218"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "8384507844",
          price: 137.94,
          options: {
            color: "white",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "7717598293",
          price: 985.66,
          options: {
            type: "electric",
            size: "medium",
            features: "rotisserie"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8426249116",
          price: 488.81,
          options: {
            material: "fabric",
            color: "black",
            armrest: "fixed",
            "backrest height": "standard"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1612.41,
          payment_method_id: "paypal_9679338"
        }
      ]
    },
    "#W4604258": {
      order_id: "#W4604258",
      user_id: "anya_patel_3710",
      address: {
        address1: "374 Willow Lane",
        address2: "Suite 314",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77256"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7497340597",
          price: 100.83,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7539442683",
          price: 461.49,
          options: {
            material: "metal",
            color: "black",
            height: "4 ft"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9624127908",
          price: 158.9,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "silver"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2648909398",
          price: 240.87,
          options: {
            size: "8",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5855700373",
          price: 293.46,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1255.55,
          payment_method_id: "gift_card_6566420"
        }
      ]
    },
    "#W2593291": {
      order_id: "#W2593291",
      user_id: "yara_sanchez_9692",
      address: {
        address1: "431 Cedar Avenue",
        address2: "Suite 573",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85082"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1437889264",
          price: 258.09,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7195021808",
          price: 2909.87,
          options: {
            resolution: "30MP",
            zoom: "5x",
            storage: "SD card"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3334537816",
          price: 2749.56,
          options: {
            "screen size": "17-inch",
            processor: "i5",
            ram: "8GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "3112842858",
          price: 49.1,
          options: {
            pieces: "1000",
            theme: "fantasy",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "2231112417",
          price: 364.22,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "red"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["910031733497"],
          item_ids: [
            "1437889264",
            "7195021808",
            "3334537816",
            "3112842858",
            "2231112417"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6330.84,
          payment_method_id: "credit_card_9277564"
        }
      ]
    },
    "#W3189752": {
      order_id: "#W3189752",
      user_id: "lei_li_6575",
      address: {
        address1: "604 Pine Lane",
        address2: "Suite 907",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85033"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5268233322",
          price: 155.99,
          options: {
            capacity: "1L",
            material: "glass",
            color: "white"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7617930199",
          price: 285.94,
          options: {
            color: "red",
            "battery life": "20 hours",
            "water resistance": "yes"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6777246137",
          price: 47.76,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "red"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4648362606",
          price: 503.76,
          options: {
            material: "leather",
            color: "black",
            armrest: "adjustable",
            "backrest height": "high-back"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "5012998807",
          price: 258.71,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand B"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1252.16,
          payment_method_id: "paypal_5914760"
        }
      ]
    },
    "#W2497857": {
      order_id: "#W2497857",
      user_id: "yara_li_8961",
      address: {
        address1: "713 Hillcrest Drive",
        address2: "Suite 400",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10126"
      },
      items: [
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "9692325258",
          price: 528.63,
          options: {
            "piece count": "3-piece",
            color: "black",
            material: "softshell"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9408160950",
          price: 381.26,
          options: {
            color: "gold",
            "band material": "leather",
            display: "LCD"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["202468403681"],
          item_ids: ["9692325258", "9408160950"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 909.89,
          payment_method_id: "paypal_4970705"
        }
      ]
    },
    "#W3779151": {
      order_id: "#W3779151",
      user_id: "ava_nguyen_2175",
      address: {
        address1: "346 Laurel Lane",
        address2: "Suite 175",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78786"
      },
      items: [
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "9799386954",
          price: 28.59,
          options: {
            size: "A5",
            "cover type": "soft cover"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "2635605237",
          price: 271.89,
          options: {
            color: "blue",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6130713659",
          price: 483.66,
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["890874465580"],
          item_ids: ["9799386954", "2635605237", "6130713659"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 784.14,
          payment_method_id: "paypal_6262583"
        }
      ]
    },
    "#W1941216": {
      order_id: "#W1941216",
      user_id: "harper_ito_4653",
      address: {
        address1: "220 Laurel Lane",
        address2: "Suite 687",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80256"
      },
      items: [
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9791469541",
          price: 147.05,
          options: {
            size: "9",
            color: "yellow",
            material: "synthetic",
            sole: "rubber"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 147.05,
          payment_method_id: "paypal_1053133"
        }
      ]
    },
    "#W3529525": {
      order_id: "#W3529525",
      user_id: "james_martin_1500",
      address: {
        address1: "153 Cedar Street",
        address2: "Suite 769",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92112"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "7824298782",
          price: 200.38,
          options: {
            color: "black",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3877338112",
          price: 545.68,
          options: {
            "weight range": "5-25 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4127323219",
          price: 251.82,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 997.88,
          payment_method_id: "paypal_6661566"
        }
      ]
    },
    "#W7259788": {
      order_id: "#W7259788",
      user_id: "mia_nguyen_6399",
      address: {
        address1: "412 Lakeview Drive",
        address2: "Suite 698",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78229"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4131464125",
          price: 960.67,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "silver"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "9692325258",
          price: 528.63,
          options: {
            "piece count": "3-piece",
            color: "black",
            material: "softshell"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "6477915553",
          price: 186.45,
          options: {
            size: "6",
            color: "black",
            material: "synthetic"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7401244629",
          price: 188.92,
          options: {
            size: "L",
            color: "red",
            ventilation: "high"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1864.67,
          payment_method_id: "paypal_3722088"
        }
      ]
    },
    "#W4498118": {
      order_id: "#W4498118",
      user_id: "mei_wilson_1792",
      address: {
        address1: "832 Lakeview Drive",
        address2: "Suite 795",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10132"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5745575001",
          price: 986.65,
          options: {
            type: "electric",
            size: "portable",
            features: "rotisserie"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7736359414",
          price: 253.08,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand C"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5312063289",
          price: 195.15,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "graphic"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "5565631513",
          price: 267.9,
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "5339029584",
          price: 1128.99,
          options: {
            color: "black",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "6.5-inch"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2831.77,
          payment_method_id: "gift_card_1888303"
        }
      ]
    },
    "#W4590951": {
      order_id: "#W4590951",
      user_id: "emma_santos_8025",
      address: {
        address1: "641 Elm Avenue",
        address2: "Suite 778",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85079"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "7166996157",
          price: 518.31,
          options: {
            "room size": "small",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2768401027",
          price: 2346.49,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2864.8,
          payment_method_id: "gift_card_3824537"
        }
      ]
    },
    "#W6018481": {
      order_id: "#W6018481",
      user_id: "emma_kim_5391",
      address: {
        address1: "852 Park Avenue",
        address2: "Suite 172",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94142"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "6546364613",
          price: 231.43,
          options: {
            size: "11",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "8941974610",
          price: 200.66,
          options: {
            size: "large",
            material: "fleece",
            color: "beige"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3275928196",
          price: 511.63,
          options: {
            "weight range": "5-25 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["925402666313"],
          item_ids: ["6546364613", "8941974610", "3275928196"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 943.72,
          payment_method_id: "gift_card_8967157"
        },
        {
          transaction_type: "refund",
          amount: 943.72,
          payment_method_id: "gift_card_8967157"
        }
      ]
    },
    "#W6554908": {
      order_id: "#W6554908",
      user_id: "emma_kovacs_5477",
      address: {
        address1: "743 Pine Lane",
        address2: "Suite 319",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94151"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "2299424241",
          price: 237.48,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "80%"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6227345631",
          price: 483.45,
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "fixed"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "9447903288",
          price: 296.78,
          options: {
            "scent family": "fresh",
            size: "30ml",
            gender: "men"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9690244451",
          price: 236.51,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "60%"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "2819462352",
          price: 180.66,
          options: {
            "deck material": "maple",
            length: "28 inch",
            design: "graphic"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1434.88,
          payment_method_id: "gift_card_9246707"
        }
      ]
    },
    "#W6111398": {
      order_id: "#W6111398",
      user_id: "noah_patel_6952",
      address: {
        address1: "224 Elm Street",
        address2: "Suite 491",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10108"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "4293355847",
          price: 200.8,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "plain"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9647292434",
          price: 53.48,
          options: {
            color: "purple",
            size: "S",
            material: "polyester",
            style: "v-neck"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "4545791457",
          price: 186.06,
          options: {
            "deck material": "plastic",
            length: "28 inch",
            design: "plain"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "3104857380",
          price: 377.97,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "red"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["799127560400"],
          item_ids: ["4293355847", "9647292434", "4545791457", "3104857380"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 818.31,
          payment_method_id: "paypal_3169710"
        },
        {
          transaction_type: "refund",
          amount: 818.31,
          payment_method_id: "paypal_3169710"
        }
      ]
    },
    "#W8328493": {
      order_id: "#W8328493",
      user_id: "chen_wilson_4378",
      address: {
        address1: "274 Highland Drive",
        address2: "Suite 982",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80217"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5428723833",
          price: 145.48,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "black"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "8591113813",
          price: 192.65,
          options: {
            size: "M",
            color: "white",
            ventilation: "low"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4572024853",
          price: 53.72,
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 391.85,
          payment_method_id: "gift_card_1806650"
        }
      ]
    },
    "#W6818211": {
      order_id: "#W6818211",
      user_id: "liam_muller_2272",
      address: {
        address1: "421 Chestnut Street",
        address2: "Suite 191",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60642"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "9013366374",
          price: 219.88,
          options: {
            size: "M",
            color: "blue",
            ventilation: "high"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2913673670",
          price: 2701.89,
          options: {
            "screen size": "15-inch",
            processor: "i9",
            ram: "32GB",
            storage: "512GB SSD",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["629926044477"],
          item_ids: ["9013366374", "2913673670"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2921.77,
          payment_method_id: "gift_card_5437583"
        }
      ]
    },
    "#W8377068": {
      order_id: "#W8377068",
      user_id: "mia_moore_8366",
      address: {
        address1: "200 Oak Street",
        address2: "Suite 453",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94180"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "2751999929",
          price: 195.11,
          options: {
            size: "large",
            material: "memory foam",
            color: "grey"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6585768447",
          price: 467.69,
          options: {
            "weight range": "5-25 lbs",
            material: "urethane",
            "set type": "fixed"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6948061616",
          price: 950.96,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "gold"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["701231196244"],
          item_ids: ["2751999929", "6585768447", "6948061616"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1613.76,
          payment_method_id: "credit_card_2641784"
        },
        {
          transaction_type: "refund",
          amount: 1613.76,
          payment_method_id: "credit_card_2641784"
        }
      ]
    },
    "#W8268610": {
      order_id: "#W8268610",
      user_id: "yusuf_taylor_7149",
      address: {
        address1: "163 Cedar Street",
        address2: "Suite 165",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95154"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "9083642334",
          price: 164.28,
          options: {
            color: "white",
            brightness: "high",
            "power source": "USB"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 164.28,
          payment_method_id: "credit_card_3599838"
        }
      ]
    },
    "#W3467101": {
      order_id: "#W3467101",
      user_id: "raj_moore_7909",
      address: {
        address1: "869 Cedar Street",
        address2: "Suite 921",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20566"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2860956907",
          price: 315.61,
          options: {
            color: "black",
            "band material": "silicone",
            display: "LCD"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7381052709",
          price: 193.22,
          options: {
            size: "large",
            material: "memory foam",
            color: "brown"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "6867855179",
          price: 319.53,
          options: {
            resolution: "1080p",
            "field of view": "130 degrees",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "9805150490",
          price: 368.87,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "white"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "5111440845",
          price: 48.55,
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "Bluetooth"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["119569725719"],
          item_ids: [
            "2860956907",
            "7381052709",
            "6867855179",
            "9805150490",
            "5111440845"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1245.78,
          payment_method_id: "gift_card_6009199"
        }
      ]
    },
    "#W6353188": {
      order_id: "#W6353188",
      user_id: "ethan_moore_3587",
      address: {
        address1: "102 Elm Street",
        address2: "Suite 496",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90651"
      },
      items: [
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "5081446110",
          price: 322.52,
          options: {
            "scent family": "woody",
            size: "30ml",
            gender: "men"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["194013180213"],
          item_ids: ["5081446110"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 322.52,
          payment_method_id: "credit_card_6173085"
        }
      ]
    },
    "#W7293142": {
      order_id: "#W7293142",
      user_id: "noah_sanchez_2690",
      address: {
        address1: "297 Highland Drive",
        address2: "Suite 550",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20056"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2185126308",
          price: 241.9,
          options: {
            size: "10",
            material: "leather",
            waterproof: "no"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "4537595158",
          price: 193.79,
          options: {
            size: "small",
            material: "fleece",
            color: "brown"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9025753381",
          price: 231.58,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "full size"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "6956751343",
          price: 217.06,
          options: {
            "deck material": "bamboo",
            length: "34 inch",
            design: "custom"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "3694871183",
          price: 256.67,
          options: {
            color: "white",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["715434915405"],
          item_ids: [
            "2185126308",
            "4537595158",
            "9025753381",
            "6956751343",
            "3694871183"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1141,
          payment_method_id: "gift_card_9909795"
        }
      ]
    },
    "#W7366745": {
      order_id: "#W7366745",
      user_id: "sophia_lee_8294",
      address: {
        address1: "987 Lakeview Drive",
        address2: "Suite 196",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78254"
      },
      items: [
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "7848293342",
          price: 942.71,
          options: {
            type: "charcoal",
            size: "medium",
            features: "side burner"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "5418781403",
          price: 267.58,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "8GB"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "9672174103",
          price: 281.98,
          options: {
            "frame color": "brown",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["815740955876"],
          item_ids: ["7848293342", "5418781403", "9672174103"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1492.27,
          payment_method_id: "paypal_9905859"
        }
      ]
    },
    "#W7450915": {
      order_id: "#W7450915",
      user_id: "ethan_johnson_7053",
      address: {
        address1: "369 Oak Street",
        address2: "Suite 889",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80298"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3334537816",
          price: 2749.56,
          options: {
            "screen size": "17-inch",
            processor: "i5",
            ram: "8GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "6735339143",
          price: 471.77,
          options: {
            material: "metal",
            color: "brown",
            height: "6 ft"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "6454334990",
          price: 98.82,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7195021808",
          price: 2909.87,
          options: {
            resolution: "30MP",
            zoom: "5x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["188735344478"],
          item_ids: ["3334537816", "6735339143", "6454334990", "7195021808"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6230.02,
          payment_method_id: "gift_card_6892585"
        }
      ]
    },
    "#W7532822": {
      order_id: "#W7532822",
      user_id: "sofia_khan_9820",
      address: {
        address1: "256 Cedar Street",
        address2: "Suite 981",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43149"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "2060066974",
          price: 51.05,
          options: {
            color: "black",
            size: "XL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "4326528037",
          price: 2714.51,
          options: {
            resolution: "24MP",
            zoom: "5x",
            storage: "CF card"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4127323219",
          price: 251.82,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "7824298782",
          price: 200.38,
          options: {
            color: "black",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "2060066974",
          price: 51.05,
          options: {
            color: "black",
            size: "XL",
            material: "cotton",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["178222044869"],
          item_ids: [
            "2060066974",
            "4326528037",
            "4127323219",
            "7824298782",
            "2060066974"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3268.81,
          payment_method_id: "paypal_8955373"
        }
      ]
    },
    "#W2082172": {
      order_id: "#W2082172",
      user_id: "sophia_garcia_5025",
      address: {
        address1: "418 Park Avenue",
        address2: "Suite 351",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20156"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "8209752717",
          price: 96.17,
          options: {
            material: "stainless steel",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8018699955",
          price: 467.86,
          options: {
            material: "metal",
            color: "brown",
            height: "4 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["821109586887"],
          item_ids: ["8209752717", "8018699955"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 564.03,
          payment_method_id: "credit_card_4147840"
        },
        {
          transaction_type: "refund",
          amount: 564.03,
          payment_method_id: "credit_card_4147840"
        }
      ]
    },
    "#W1052399": {
      order_id: "#W1052399",
      user_id: "yusuf_patel_7767",
      address: {
        address1: "917 Hickory Lane",
        address2: "Suite 451",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90625"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9747045638",
          price: 94.01,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "8090061879",
          price: 261.4,
          options: {
            "skin tone": "light",
            "kit size": "basic",
            brand: "Brand B"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "8302289002",
          price: 547.55,
          options: {
            "room size": "large",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7195021808",
          price: 2909.87,
          options: {
            resolution: "30MP",
            zoom: "5x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["956166462388"],
          item_ids: ["9747045638", "8090061879", "8302289002", "7195021808"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3812.83,
          payment_method_id: "gift_card_3372949"
        }
      ]
    },
    "#W5367110": {
      order_id: "#W5367110",
      user_id: "harper_ito_5985",
      address: {
        address1: "473 Cedar Avenue",
        address2: "Suite 949",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90152"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7199146548",
          price: 48.02,
          options: {
            capacity: "750ml",
            material: "plastic",
            color: "black"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5312063289",
          price: 195.15,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "graphic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["152028381741"],
          item_ids: ["7199146548", "5312063289"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 243.17,
          payment_method_id: "gift_card_4058084"
        }
      ]
    },
    "#W4633848": {
      order_id: "#W4633848",
      user_id: "chen_taylor_6919",
      address: {
        address1: "123 River Road",
        address2: "Suite 841",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78272"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "7535423717",
          price: 904.46,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 904.46,
          payment_method_id: "gift_card_9563562"
        }
      ]
    },
    "#W8461477": {
      order_id: "#W8461477",
      user_id: "daiki_khan_6856",
      address: {
        address1: "456 Laurel Lane",
        address2: "Suite 904",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28279"
      },
      items: [
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "8886009523",
          price: 1944.02,
          options: {
            "strap material": "silicone",
            "dial color": "blue"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "1810466394",
          price: 502.28,
          options: {
            resolution: "1080p",
            waterproof: "no",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2446.3,
          payment_method_id: "gift_card_2491643"
        }
      ]
    },
    "#W6116680": {
      order_id: "#W6116680",
      user_id: "olivia_jackson_1219",
      address: {
        address1: "208 Cedar Street",
        address2: "Suite 993",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95119"
      },
      items: [
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "5209958006",
          price: 514.72,
          options: {
            "piece count": "2-piece",
            color: "silver",
            material: "hardshell"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "9179378709",
          price: 326.59,
          options: {
            color: "green",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "6906307980",
          price: 202.39,
          options: {
            color: "black",
            size: "large",
            material: "polyester",
            compartment: "laptop"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "7407609582",
          price: 602.48,
          options: {
            type: "upright",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2611676054",
          price: 2743.08,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "16GB",
            storage: "256GB SSD",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4389.26,
          payment_method_id: "paypal_3999493"
        }
      ]
    },
    "#W7905419": {
      order_id: "#W7905419",
      user_id: "sophia_patel_6833",
      address: {
        address1: "624 Cedar Avenue",
        address2: "Suite 554",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76169"
      },
      items: [
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "5421902839",
          price: 328.25,
          options: {
            "scent family": "oriental",
            size: "100ml",
            gender: "men"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "6454334990",
          price: 98.82,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2323972008",
          price: 146.98,
          options: {
            capacity: "1L",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "4410138384",
          price: 197.37,
          options: {
            size: "8",
            color: "gray",
            material: "canvas"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 771.42,
          payment_method_id: "credit_card_6017489"
        }
      ]
    },
    "#W8161562": {
      order_id: "#W8161562",
      user_id: "mason_wilson_4597",
      address: {
        address1: "821 Park Avenue",
        address2: "Suite 532",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46269"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7195021808",
          price: 2909.87,
          options: {
            resolution: "30MP",
            zoom: "5x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["959510744004"],
          item_ids: ["7195021808"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2909.87,
          payment_method_id: "gift_card_6767859"
        }
      ]
    },
    "#W3579467": {
      order_id: "#W3579467",
      user_id: "yusuf_khan_7091",
      address: {
        address1: "621 Highland Drive",
        address2: "Suite 629",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75313"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5428723833",
          price: 145.48,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 145.48,
          payment_method_id: "paypal_5796936"
        }
      ]
    },
    "#W2579604": {
      order_id: "#W2579604",
      user_id: "mia_taylor_6226",
      address: {
        address1: "668 Park Avenue",
        address2: "Suite 311",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78257"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "8593894906",
          price: 263.11,
          options: {
            compatibility: "Amazon Alexa",
            color: "white"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8649999816",
          price: 540.49,
          options: {
            material: "glass",
            color: "brown",
            height: "4 ft"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3264130640",
          price: 211.41,
          options: {
            size: "M",
            color: "black",
            ventilation: "medium"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "9647374798",
          price: 109.58,
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "8140269513",
          price: 528.12,
          options: {
            "weight range": "55-75 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["874467659752"],
          item_ids: [
            "8593894906",
            "8649999816",
            "3264130640",
            "9647374798",
            "8140269513"
          ]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1652.71,
          payment_method_id: "gift_card_2294498"
        }
      ]
    },
    "#W2297062": {
      order_id: "#W2297062",
      user_id: "chen_taylor_6919",
      address: {
        address1: "123 River Road",
        address2: "Suite 841",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78272"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7381052709",
          price: 193.22,
          options: {
            size: "large",
            material: "memory foam",
            color: "brown"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["407089395330"],
          item_ids: ["7381052709"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 193.22,
          payment_method_id: "gift_card_9563562"
        }
      ]
    },
    "#W9432206": {
      order_id: "#W9432206",
      user_id: "emma_martin_6993",
      address: {
        address1: "727 Sunset Drive",
        address2: "Suite 930",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78750"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "3104857380",
          price: 377.97,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "red"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 377.97,
          payment_method_id: "paypal_6129397"
        }
      ]
    },
    "#W9892169": {
      order_id: "#W9892169",
      user_id: "mason_lopez_8519",
      address: {
        address1: "330 Maple Drive",
        address2: "Suite 316",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28221"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6401214406",
          price: 187.02,
          options: {
            size: "M",
            color: "red",
            ventilation: "low"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "7497340597",
          price: 100.83,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "gas"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 287.85,
          payment_method_id: "credit_card_2327218"
        }
      ]
    },
    "#W3977493": {
      order_id: "#W3977493",
      user_id: "sophia_jackson_7119",
      address: {
        address1: "673 Spruce Street",
        address2: "Suite 583",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77035"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "2216662955",
          price: 2520.52,
          options: {
            "screen size": "15-inch",
            processor: "i5",
            ram: "32GB",
            storage: "256GB SSD",
            color: "space grey"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7533802601",
          price: 48.59,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "green"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "7144237253",
          price: 210.53,
          options: {
            color: "blue",
            "speed settings": "low",
            "battery type": "rechargeable"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "1586641416",
          price: 497.39,
          options: {
            resolution: "5K",
            waterproof: "yes",
            color: "silver"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7533802601",
          price: 48.59,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "green"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["521327673770"],
          item_ids: [
            "2216662955",
            "7533802601",
            "7144237253",
            "1586641416",
            "7533802601"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3325.62,
          payment_method_id: "credit_card_6748580"
        }
      ]
    },
    "#W6679257": {
      order_id: "#W6679257",
      user_id: "yusuf_rossi_9620",
      address: {
        address1: "763 Broadway",
        address2: "Suite 135",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19122"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "5996159312",
          price: 2895.55,
          options: {
            resolution: "24MP",
            zoom: "3x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["522129247270"],
          item_ids: ["5996159312"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2895.55,
          payment_method_id: "credit_card_9513926"
        }
      ]
    },
    "#W8121088": {
      order_id: "#W8121088",
      user_id: "harper_kim_2998",
      address: {
        address1: "853 Broadway",
        address2: "Suite 947",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78222"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7441167885",
          price: 2866.37,
          options: {
            pressure: "15 bar",
            capacity: "1.5L",
            type: "capsule"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6401214406",
          price: 187.02,
          options: {
            size: "M",
            color: "red",
            ventilation: "low"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "4510078629",
          price: 2127.62,
          options: {
            "strap material": "metal",
            "dial color": "black"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "4728397765",
          price: 149.48,
          options: {
            size: "M",
            color: "black",
            zipper: "full"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5330.49,
          payment_method_id: "gift_card_5328393"
        }
      ]
    },
    "#W1790752": {
      order_id: "#W1790752",
      user_id: "chen_lopez_3345",
      address: {
        address1: "720 Lakeview Drive",
        address2: "Suite 785",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98155"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "3616838507",
          price: 226.11,
          options: {
            "switch type": "tactile",
            backlight: "white",
            size: "full size"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 226.11,
          payment_method_id: "paypal_2833385"
        }
      ]
    },
    "#W4423731": {
      order_id: "#W4423731",
      user_id: "evelyn_ahmed_3960",
      address: {
        address1: "400 Willow Lane",
        address2: "Suite 502",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80256"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "2343503231",
          price: 196.86,
          options: {
            "deck material": "maple",
            length: "34 inch",
            design: "graphic"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "7523669277",
          price: 523.66,
          options: {
            resolution: "5K",
            waterproof: "no",
            color: "black"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "2231112417",
          price: 364.22,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "red"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "6243981804",
          price: 329.85,
          options: {
            size: "7 ft",
            color: "green",
            material: "sunbrella",
            "tilt mechanism": "auto tilt"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1414.59,
          payment_method_id: "credit_card_7898168"
        }
      ]
    },
    "#W1809337": {
      order_id: "#W1809337",
      user_id: "yara_ito_8499",
      address: {
        address1: "947 Elm Avenue",
        address2: "Suite 599",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20258"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "3339188619",
          price: 200.24,
          options: {
            size: "M",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "2882812427",
          price: 261.11,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand A"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "4238115171",
          price: 91.78,
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "8610532516",
          price: 203.76,
          options: {
            diameter: "10 inches",
            color: "black",
            type: "digital"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["581363444050"],
          item_ids: ["3339188619", "2882812427", "4238115171", "8610532516"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 756.89,
          payment_method_id: "paypal_1679017"
        }
      ]
    },
    "#W8389220": {
      order_id: "#W8389220",
      user_id: "raj_anderson_8746",
      address: {
        address1: "854 Broadway",
        address2: "Suite 872",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76134"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "8997785118",
          price: 2674.4,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "space grey"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6324294385",
          price: 2719.01,
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "automatic"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 5393.41,
          payment_method_id: "paypal_4104940"
        }
      ]
    },
    "#W8747662": {
      order_id: "#W8747662",
      user_id: "liam_gonzalez_4265",
      address: {
        address1: "647 Laurel Lane",
        address2: "Suite 627",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78747"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "8538875209",
          price: 45.13,
          options: {
            capacity: "500ml",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8323284863",
          price: 511.24,
          options: {
            material: "fabric",
            color: "blue",
            armrest: "adjustable",
            "backrest height": "standard"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "8470360507",
          price: 291.31,
          options: {
            resolution: "2K",
            "field of view": "130 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4965355367",
          price: 620.07,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "2509076505",
          price: 189.5,
          options: {
            size: "10",
            color: "gray",
            material: "leather"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1657.25,
          payment_method_id: "paypal_1697207"
        }
      ]
    },
    "#W1659844": {
      order_id: "#W1659844",
      user_id: "noah_patel_1311",
      address: {
        address1: "229 Maple Drive",
        address2: "Suite 494",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91103"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "7453605304",
          price: 150.01,
          options: {
            color: "silver",
            brightness: "low",
            "power source": "battery"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9237024510",
          price: 53.53,
          options: {
            pieces: "500",
            theme: "animals",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["371846865904"],
          item_ids: ["7453605304", "9237024510"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 203.54,
          payment_method_id: "gift_card_7733255"
        },
        {
          transaction_type: "refund",
          amount: 203.54,
          payment_method_id: "gift_card_7733255"
        }
      ]
    },
    "#W9631970": {
      order_id: "#W9631970",
      user_id: "ethan_johnson_5450",
      address: {
        address1: "341 Broadway",
        address2: "Suite 547",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94102"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2554056026",
          price: 367.38,
          options: {
            color: "gold",
            "band material": "metal",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["377354035632"],
          item_ids: ["2554056026"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 367.38,
          payment_method_id: "gift_card_8545954"
        },
        {
          transaction_type: "refund",
          amount: 367.38,
          payment_method_id: "gift_card_8545954"
        }
      ]
    },
    "#W9655299": {
      order_id: "#W9655299",
      user_id: "emma_santos_9753",
      address: {
        address1: "463 Pine Lane",
        address2: "Suite 570",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78228"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "3019027053",
          price: 553.03,
          options: {
            type: "upright",
            "bagged/bagless": "bagless",
            features: "cordless"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "3694871183",
          price: 256.67,
          options: {
            color: "white",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "5669664287",
          price: 543.68,
          options: {
            "room size": "small",
            "filter type": "ionic",
            features: "quiet operation"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "8896479688",
          price: 143.15,
          options: {
            color: "white",
            "sensor type": "optical",
            connectivity: "wireless"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "9672174103",
          price: 281.98,
          options: {
            "frame color": "brown",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1778.51,
          payment_method_id: "gift_card_6023546"
        }
      ]
    },
    "#W3400144": {
      order_id: "#W3400144",
      user_id: "yara_li_8961",
      address: {
        address1: "713 Hillcrest Drive",
        address2: "Suite 400",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10126"
      },
      items: [
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "7579176349",
          price: 29.28,
          options: {
            size: "A4",
            "cover type": "soft cover"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3265035808",
          price: 2530.72,
          options: {
            "screen size": "17-inch",
            processor: "i9",
            ram: "8GB",
            storage: "256GB SSD",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["509644415516"],
          item_ids: ["7579176349", "3265035808"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2560,
          payment_method_id: "paypal_4970705"
        }
      ]
    },
    "#W1326557": {
      order_id: "#W1326557",
      user_id: "sophia_hernandez_2054",
      address: {
        address1: "663 Willow Lane",
        address2: "Suite 886",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20335"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6777246137",
          price: 47.76,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "red"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6501071631",
          price: 1018.68,
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "gold"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "6259501109",
          price: 652.61,
          options: {
            type: "robotic",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1421289881",
          price: 268.77,
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "80%"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["365651976748"],
          item_ids: ["6777246137", "6501071631", "6259501109", "1421289881"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1987.82,
          payment_method_id: "gift_card_1139567"
        }
      ]
    },
    "#W8997398": {
      order_id: "#W8997398",
      user_id: "mei_kovacs_5767",
      address: {
        address1: "593 Willow Lane",
        address2: "Suite 420",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43295"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "8722653925",
          price: 227.8,
          options: {
            compatibility: "Google Assistant",
            color: "white"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1304426904",
          price: 565.79,
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "7535423717",
          price: 904.46,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "silver"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1698.05,
          payment_method_id: "gift_card_1776915"
        }
      ]
    },
    "#W7597893": {
      order_id: "#W7597893",
      user_id: "ava_nguyen_6971",
      address: {
        address1: "670 Maple Drive",
        address2: "Suite 412",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80286"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "9480266227",
          price: 255.98,
          options: {
            compatibility: "Apple HomeKit",
            color: "stainless steel"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9991484137",
          price: 240.97,
          options: {
            "switch type": "tactile",
            backlight: "white",
            size: "80%"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["785859146065"],
          item_ids: ["9480266227", "9991484137"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 496.95,
          payment_method_id: "gift_card_8640626"
        }
      ]
    },
    "#W5321777": {
      order_id: "#W5321777",
      user_id: "ethan_johnson_7053",
      address: {
        address1: "369 Oak Street",
        address2: "Suite 889",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80298"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "7441167885",
          price: 2866.37,
          options: {
            pressure: "15 bar",
            capacity: "1.5L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["273291812345"],
          item_ids: ["7441167885"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2866.37,
          payment_method_id: "gift_card_6892585"
        }
      ]
    },
    "#W6023202": {
      order_id: "#W6023202",
      user_id: "evelyn_patel_7348",
      address: {
        address1: "838 Hickory Lane",
        address2: "Suite 409",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77052"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7661609223",
          price: 46.51,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "7903094618",
          price: 90.32,
          options: {
            capacity: "5000mAh",
            output: "USB-A",
            color: "white"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "9385662952",
          price: 159.92,
          options: {
            size: "L",
            color: "black",
            zipper: "full"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "9805150490",
          price: 368.87,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "white"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "5810561222",
          price: 274.98,
          options: {
            resolution: "4K",
            "field of view": "130 degrees",
            connectivity: "Wi-Fi"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 940.6,
          payment_method_id: "gift_card_4710495"
        }
      ]
    },
    "#W6126711": {
      order_id: "#W6126711",
      user_id: "noah_li_2316",
      address: {
        address1: "332 Hillcrest Drive",
        address2: "Suite 437",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19019"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "9013366374",
          price: 219.88,
          options: {
            size: "M",
            color: "blue",
            ventilation: "high"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1763705424",
          price: 235.44,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand C"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9192177173",
          price: 335.99,
          options: {
            color: "gold",
            "band material": "metal",
            display: "LCD"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "9168994198",
          price: 466.76,
          options: {
            resolution: "1080p",
            waterproof: "no",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["424627297091"],
          item_ids: ["9013366374", "1763705424", "9192177173", "9168994198"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1258.07,
          payment_method_id: "credit_card_4467209"
        }
      ]
    },
    "#W6805991": {
      order_id: "#W6805991",
      user_id: "ava_silva_4632",
      address: {
        address1: "450 Sunset Drive",
        address2: "Suite 845",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76109"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9030221155",
          price: 51.98,
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "beginner"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "9884666842",
          price: 2794.7,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "manual"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2846.68,
          payment_method_id: "gift_card_2721181"
        }
      ]
    },
    "#W7156413": {
      order_id: "#W7156413",
      user_id: "ethan_moore_3587",
      address: {
        address1: "102 Elm Street",
        address2: "Suite 496",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90651"
      },
      items: [
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "2509076505",
          price: 189.5,
          options: {
            size: "10",
            color: "gray",
            material: "leather"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "1689914594",
          price: 315.2,
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6690069155",
          price: 466.47,
          options: {
            "piece count": "3-piece",
            color: "silver",
            material: "softshell"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["292028275580"],
          item_ids: ["2509076505", "1689914594", "6690069155"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 971.17,
          payment_method_id: "credit_card_6173085"
        }
      ]
    },
    "#W2239230": {
      order_id: "#W2239230",
      user_id: "aarav_ito_1827",
      address: {
        address1: "295 Broadway",
        address2: "Suite 930",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60613"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "3104857380",
          price: 377.97,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "red"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "1768466237",
          price: 549.84,
          options: {
            material: "glass",
            color: "black",
            height: "3 ft"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "9838673490",
          price: 344.55,
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "red"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1272.36,
          payment_method_id: "gift_card_1468632"
        }
      ]
    },
    "#W7988753": {
      order_id: "#W7988753",
      user_id: "emma_martin_6993",
      address: {
        address1: "727 Sunset Drive",
        address2: "Suite 930",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78750"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "3453331371",
          price: 52.79,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3951031513",
          price: 3289.46,
          options: {
            pressure: "19 bar",
            capacity: "1.5L",
            type: "automatic"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6245231688",
          price: 522.03,
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3864.28,
          payment_method_id: "paypal_6129397"
        }
      ]
    },
    "#W5875596": {
      order_id: "#W5875596",
      user_id: "daiki_khan_6856",
      address: {
        address1: "456 Laurel Lane",
        address2: "Suite 904",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28279"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "7747408585",
          price: 249.01,
          options: {
            compatibility: "Google Assistant",
            color: "black"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4913411651",
          price: 941.03,
          options: {
            "screen size": "7-inch",
            storage: "128GB",
            color: "black"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "3187628796",
          price: 1205.66,
          options: {
            color: "rose gold",
            storage: "128GB",
            RAM: "8GB",
            "screen size": "6.1-inch"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6922203216",
          price: 199.12,
          options: {
            diameter: "14 inches",
            color: "black",
            type: "digital"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2594.82,
          payment_method_id: "paypal_8879986"
        }
      ]
    },
    "#W1579160": {
      order_id: "#W1579160",
      user_id: "daiki_silva_5033",
      address: {
        address1: "866 Hillcrest Drive",
        address2: "Suite 737",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28268"
      },
      items: [
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3909406921",
          price: 98.25,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7661609223",
          price: 46.51,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "7407609582",
          price: 602.48,
          options: {
            type: "upright",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "1133777903",
          price: 359.66,
          options: {
            type: "in-ear",
            connectivity: "wired",
            color: "red"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9472539378",
          price: 143.72,
          options: {
            capacity: "1.5L",
            material: "glass",
            color: "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1250.62,
          payment_method_id: "paypal_2233507"
        }
      ]
    },
    "#W6067464": {
      order_id: "#W6067464",
      user_id: "omar_anderson_3203",
      address: {
        address1: "845 Willow Lane",
        address2: "Suite 906",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19031"
      },
      items: [
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "8917609800",
          price: 195.59,
          options: {
            diameter: "10 inches",
            color: "white",
            type: "digital"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8426249116",
          price: 488.81,
          options: {
            material: "fabric",
            color: "black",
            armrest: "fixed",
            "backrest height": "standard"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "5019835484",
          price: 138.73,
          options: {
            color: "RGB",
            "sensor type": "laser",
            connectivity: "wired"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "9624127908",
          price: 158.9,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "silver"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["674931187716"],
          item_ids: ["8917609800", "8426249116", "5019835484", "9624127908"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 982.03,
          payment_method_id: "credit_card_4190576"
        }
      ]
    },
    "#W3489690": {
      order_id: "#W3489690",
      user_id: "isabella_johansson_7408",
      address: {
        address1: "289 Willow Lane",
        address2: "Suite 172",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60625"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1631806422",
          price: 339.85,
          options: {
            color: "black",
            "band material": "metal",
            display: "AMOLED"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7381052709",
          price: 193.22,
          options: {
            size: "large",
            material: "memory foam",
            color: "brown"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4127323219",
          price: 251.82,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["999147077439"],
          item_ids: ["1631806422", "7381052709", "4127323219"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 784.89,
          payment_method_id: "paypal_8540436"
        }
      ]
    },
    "#W9571698": {
      order_id: "#W9571698",
      user_id: "chen_silva_7485",
      address: {
        address1: "139 River Road",
        address2: "Suite 418",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46281"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9973034634",
          price: 2850.32,
          options: {
            resolution: "20MP",
            zoom: "3x",
            storage: "CF card"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "5952720925",
          price: 260.19,
          options: {
            color: "black",
            capacity: "4 cups",
            type: "espresso",
            features: "timer"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7381052709",
          price: 193.22,
          options: {
            size: "large",
            material: "memory foam",
            color: "brown"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6065192424",
          price: 989.7,
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "gold"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["304189154726"],
          item_ids: ["9973034634", "5952720925", "7381052709", "6065192424"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4293.43,
          payment_method_id: "gift_card_7250692"
        }
      ]
    },
    "#W2575533": {
      order_id: "#W2575533",
      user_id: "isabella_johansson_2152",
      address: {
        address1: "313 Chestnut Street",
        address2: "Suite 537",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32286"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4806644905",
          price: 658.89,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "cordless"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "8349903180",
          price: 102.07,
          options: {
            capacity: "20000mAh",
            output: "Wireless",
            color: "black"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "9494281769",
          price: 252.06,
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "5206946487",
          price: 95.08,
          options: {
            length: "50ft",
            material: "vinyl",
            color: "black"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8323284863",
          price: 511.24,
          options: {
            material: "fabric",
            color: "blue",
            armrest: "adjustable",
            "backrest height": "standard"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1619.34,
          payment_method_id: "paypal_3024827"
        }
      ]
    },
    "#W3025991": {
      order_id: "#W3025991",
      user_id: "sofia_muller_1555",
      address: {
        address1: "674 Willow Lane",
        address2: "Suite 397",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20590"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5312063289",
          price: 195.15,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "graphic"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "2115393569",
          price: 270.91,
          options: {
            color: "black",
            capacity: "1 cup",
            type: "drip",
            features: "timer"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 466.06,
          payment_method_id: "paypal_6980481"
        }
      ]
    },
    "#W2273069": {
      order_id: "#W2273069",
      user_id: "harper_brown_7363",
      address: {
        address1: "723 Park Avenue",
        address2: "Suite 802",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76112"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2681513500",
          price: 356.23,
          options: {
            color: "gold",
            "band material": "silicone",
            display: "AMOLED"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "3909406921",
          price: 98.25,
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "gas"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "3399869890",
          price: 312.04,
          options: {
            "scent family": "woody",
            size: "100ml",
            gender: "men"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8098621301",
          price: 192.15,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "rechargeable"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2185126308",
          price: 241.9,
          options: {
            size: "10",
            material: "leather",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1200.57,
          payment_method_id: "credit_card_3240550"
        }
      ]
    },
    "#W5782623": {
      order_id: "#W5782623",
      user_id: "ivan_khan_7475",
      address: {
        address1: "159 Hickory Lane",
        address2: "Suite 995",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28243"
      },
      items: [
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "2492465580",
          price: 201.95,
          options: {
            color: "navy",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "1002370030",
          price: 290.25,
          options: {
            "scent family": "woody",
            size: "50ml",
            gender: "women"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 492.2,
          payment_method_id: "gift_card_1711656"
        }
      ]
    },
    "#W5911118": {
      order_id: "#W5911118",
      user_id: "harper_ahmed_4844",
      address: {
        address1: "744 Maple Drive",
        address2: "Suite 403",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19147"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "4953074738",
          price: 226.02,
          options: {
            compatibility: "Amazon Alexa",
            color: "black"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2499294441",
          price: 258.36,
          options: {
            color: "black",
            "battery life": "8 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5120532699",
          price: 187.23,
          options: {
            "deck material": "maple",
            length: "31 inch",
            design: "graphic"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1437889264",
          price: 258.09,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "7958300294",
          price: 642.72,
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["861543398402"],
          item_ids: [
            "4953074738",
            "2499294441",
            "5120532699",
            "1437889264",
            "7958300294"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1572.42,
          payment_method_id: "gift_card_4529075"
        }
      ]
    },
    "#W3109038": {
      order_id: "#W3109038",
      user_id: "daiki_moore_8567",
      address: {
        address1: "139 Cedar Avenue",
        address2: "Suite 899",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85078"
      },
      items: [
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "9168994198",
          price: 466.76,
          options: {
            resolution: "1080p",
            waterproof: "no",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["570620421147"],
          item_ids: ["9168994198"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 466.76,
          payment_method_id: "gift_card_2977513"
        }
      ]
    },
    "#W1890669": {
      order_id: "#W1890669",
      user_id: "evelyn_lopez_5487",
      address: {
        address1: "142 Chestnut Street",
        address2: "Suite 757",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92195"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1676105083",
          price: 191.56,
          options: {
            size: "S",
            color: "blue",
            ventilation: "high"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 191.56,
          payment_method_id: "credit_card_3566337"
        }
      ]
    },
    "#W9323073": {
      order_id: "#W9323073",
      user_id: "sofia_li_8235",
      address: {
        address1: "430 Cedar Street",
        address2: "Suite 288",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75390"
      },
      items: [
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "2001307871",
          price: 302.63,
          options: {
            size: "6 ft",
            color: "blue",
            material: "sunbrella",
            "tilt mechanism": "auto tilt"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "5788631787",
          price: 375.55,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "black"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "6245746168",
          price: 46,
          options: {
            pieces: "1500",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["884945836271"],
          item_ids: ["2001307871", "5788631787", "6245746168"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 724.18,
          payment_method_id: "credit_card_8296913"
        }
      ]
    },
    "#W3691773": {
      order_id: "#W3691773",
      user_id: "yusuf_garcia_1670",
      address: {
        address1: "691 Park Avenue",
        address2: "Suite 274",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46202"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1345513440",
          price: 655.59,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "cordless"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3609437808",
          price: 466.44,
          options: {
            material: "leather",
            color: "red",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7533802601",
          price: 48.59,
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "green"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "4293355847",
          price: 200.8,
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "plain"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9811090008",
          price: 370.38,
          options: {
            color: "silver",
            "band material": "leather",
            display: "LCD"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1741.8,
          payment_method_id: "gift_card_4303603"
        }
      ]
    },
    "#W4824466": {
      order_id: "#W4824466",
      user_id: "daiki_kim_2165",
      address: {
        address1: "554 Main Street",
        address2: "Suite 638",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80298"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "5635439102",
          price: 353.76,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "blue"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8106223139",
          price: 249.12,
          options: {
            size: "9",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "2235648106",
          price: 1054.43,
          options: {
            "screen size": "10-inch",
            storage: "32GB",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["983210342778"],
          item_ids: ["5635439102", "8106223139", "2235648106"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1657.31,
          payment_method_id: "gift_card_9919420"
        }
      ]
    },
    "#W8642391": {
      order_id: "#W8642391",
      user_id: "omar_muller_7891",
      address: {
        address1: "158 Hillcrest Drive",
        address2: "Suite 274",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92175"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "5222576926",
          price: 249.95,
          options: {
            "switch type": "linear",
            backlight: "white",
            size: "full size"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "5992316252",
          price: 141.29,
          options: {
            size: "S",
            color: "red",
            zipper: "half"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "7228247242",
          price: 251.38,
          options: {
            size: "10",
            material: "leather",
            waterproof: "yes"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8920458606",
          price: 510.02,
          options: {
            material: "wood",
            color: "white",
            height: "4 ft"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1152.64,
          payment_method_id: "gift_card_3689412"
        }
      ]
    },
    "#W3547545": {
      order_id: "#W3547545",
      user_id: "juan_smith_9901",
      address: {
        address1: "127 Oak Street",
        address2: "Suite 727",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78770"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "9013366374",
          price: 219.88,
          options: {
            size: "M",
            color: "blue",
            ventilation: "high"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "8293778132",
          price: 100.62,
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["994402099406"],
          item_ids: ["9013366374", "8293778132"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 320.5,
          payment_method_id: "gift_card_9106672"
        }
      ]
    },
    "#W4725115": {
      order_id: "#W4725115",
      user_id: "harper_khan_8862",
      address: {
        address1: "363 Cedar Avenue",
        address2: "Suite 894",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85063"
      },
      items: [
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "1859994221",
          price: 182.85,
          options: {
            diameter: "10 inches",
            color: "black",
            type: "analog"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "8209752717",
          price: 96.17,
          options: {
            material: "stainless steel",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "6452271382",
          price: 258.84,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "4447749792",
          price: 139.8,
          options: {
            color: "white",
            brightness: "medium",
            "power source": "AC adapter"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 677.66,
          payment_method_id: "credit_card_1586014"
        }
      ]
    },
    "#W9348897": {
      order_id: "#W9348897",
      user_id: "daiki_sanchez_3253",
      address: {
        address1: "113 Hickory Lane",
        address2: "Suite 991",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80298"
      },
      items: [
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "6117189161",
          price: 481.5,
          options: {
            resolution: "4K",
            waterproof: "yes",
            color: "silver"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "9879255677",
          price: 288.82,
          options: {
            size: "6 ft",
            color: "green",
            material: "olefin",
            "tilt mechanism": "auto tilt"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "7453605304",
          price: 150.01,
          options: {
            color: "silver",
            brightness: "low",
            "power source": "battery"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "3799046073",
          price: 53.27,
          options: {
            color: "black",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "9851293632",
          price: 193.38,
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "camera"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1166.98,
          payment_method_id: "credit_card_8853416"
        }
      ]
    },
    "#W2727221": {
      order_id: "#W2727221",
      user_id: "anya_taylor_1082",
      address: {
        address1: "519 Laurel Lane",
        address2: "Suite 210",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19069"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7843064651",
          price: 50.14,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "blue"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9635758562",
          price: 148.95,
          options: {
            size: "9",
            color: "white",
            material: "mesh",
            sole: "rubber"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 199.09,
          payment_method_id: "gift_card_7296062"
        }
      ]
    },
    "#W6002467": {
      order_id: "#W6002467",
      user_id: "lei_anderson_8271",
      address: {
        address1: "461 Willow Lane",
        address2: "Suite 823",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76192"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "8140269513",
          price: 528.12,
          options: {
            "weight range": "55-75 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7907773809",
          price: 209.69,
          options: {
            size: "L",
            color: "blue",
            ventilation: "low"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1151293680",
          price: 272.33,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "full size"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "7597543861",
          price: 310.47,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7843064651",
          price: 50.14,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1370.75,
          payment_method_id: "paypal_1808675"
        }
      ]
    },
    "#W9869592": {
      order_id: "#W9869592",
      user_id: "sofia_kovacs_7075",
      address: {
        address1: "546 Lakeview Drive",
        address2: "Suite 491",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19049"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3232433601",
          price: 204.14,
          options: {
            "deck material": "maple",
            length: "28 inch",
            design: "plain"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "3098764622",
          price: 202.13,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "plain"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4548300368",
          price: 287.79,
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "9127591879",
          price: 48.47,
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "black"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 742.53,
          payment_method_id: "paypal_6840891"
        }
      ]
    },
    "#W9552705": {
      order_id: "#W9552705",
      user_id: "aarav_sanchez_6636",
      address: {
        address1: "361 Willow Lane",
        address2: "Suite 946",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60609"
      },
      items: [
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "1178356107",
          price: 98.25,
          options: {
            capacity: "20000mAh",
            output: "USB-C",
            color: "white"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "2244749153",
          price: 473.82,
          options: {
            material: "wood",
            color: "brown",
            height: "5 ft"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6697922351",
          price: 194.47,
          options: {
            size: "L",
            color: "white",
            ventilation: "medium"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["901795762594"],
          item_ids: ["1178356107", "2244749153", "6697922351"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 766.54,
          payment_method_id: "gift_card_8922351"
        }
      ]
    },
    "#W7773202": {
      order_id: "#W7773202",
      user_id: "amelia_silva_7726",
      address: {
        address1: "182 Elm Avenue",
        address2: "Suite 875",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19117"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "8277474082",
          price: 236.57,
          options: {
            size: "12",
            material: "leather",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["638927335105"],
          item_ids: ["8277474082"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 236.57,
          payment_method_id: "gift_card_3491931"
        }
      ]
    },
    "#W7449508": {
      order_id: "#W7449508",
      user_id: "olivia_lopez_3865",
      address: {
        address1: "310 Laurel Lane",
        address2: "Suite 480",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76171"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6200867091",
          price: 2955.17,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "capsule"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "6477915553",
          price: 186.45,
          options: {
            size: "6",
            color: "black",
            material: "synthetic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["194496721133"],
          item_ids: ["6200867091", "6477915553"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3141.62,
          payment_method_id: "gift_card_7711863"
        }
      ]
    },
    "#W9409203": {
      order_id: "#W9409203",
      user_id: "ethan_lopez_6291",
      address: {
        address1: "103 Hillcrest Drive",
        address2: "Suite 162",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43275"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8426249116",
          price: 488.81,
          options: {
            material: "fabric",
            color: "black",
            armrest: "fixed",
            "backrest height": "standard"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7811981098",
          price: 213.86,
          options: {
            size: "S",
            color: "white",
            ventilation: "medium"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "3694871183",
          price: 256.67,
          options: {
            color: "white",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "2143041831",
          price: 2076.5,
          options: {
            "frame size": "medium",
            color: "black",
            type: "mountain"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2757705742",
          price: 258.97,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3294.81,
          payment_method_id: "credit_card_9789590"
        }
      ]
    },
    "#W5416052": {
      order_id: "#W5416052",
      user_id: "sofia_li_9219",
      address: {
        address1: "245 Laurel Lane",
        address2: "Suite 772",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77052"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "6942241102",
          price: 180.93,
          options: {
            size: "large",
            material: "memory foam",
            color: "beige"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6401214406",
          price: 187.02,
          options: {
            size: "M",
            color: "red",
            ventilation: "low"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2499294441",
          price: 258.36,
          options: {
            color: "black",
            "battery life": "8 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4068787148",
          price: 52.01,
          options: {
            pieces: "500",
            theme: "art",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1631806422",
          price: 339.85,
          options: {
            color: "black",
            "band material": "metal",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["772163555469"],
          item_ids: [
            "6942241102",
            "6401214406",
            "2499294441",
            "4068787148",
            "1631806422"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1018.17,
          payment_method_id: "credit_card_8105988"
        }
      ]
    },
    "#W8562406": {
      order_id: "#W8562406",
      user_id: "sofia_kovacs_7075",
      address: {
        address1: "546 Lakeview Drive",
        address2: "Suite 491",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19049"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "5222576926",
          price: 249.95,
          options: {
            "switch type": "linear",
            backlight: "white",
            size: "full size"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "3111466194",
          price: 285.66,
          options: {
            size: "7 ft",
            color: "red",
            material: "polyester",
            "tilt mechanism": "manual tilt"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["112023638083"],
          item_ids: ["5222576926", "3111466194"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 535.61,
          payment_method_id: "paypal_6840891"
        }
      ]
    },
    "#W7533832": {
      order_id: "#W7533832",
      user_id: "anya_brown_2024",
      address: {
        address1: "391 Lakeview Drive",
        address2: "Suite 326",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10121"
      },
      items: [
        {
          name: "Bicycle",
          product_id: "9783735446",
          item_id: "6170152315",
          price: 1814.72,
          options: {
            "frame size": "small",
            color: "red",
            type: "mountain"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9228757377",
          price: 3066.23,
          options: {
            resolution: "30MP",
            zoom: "10x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["755589089190"],
          item_ids: ["6170152315", "9228757377"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4880.95,
          payment_method_id: "paypal_5206520"
        },
        {
          transaction_type: "refund",
          amount: 4880.95,
          payment_method_id: "paypal_5206520"
        }
      ]
    },
    "#W9660692": {
      order_id: "#W9660692",
      user_id: "isabella_nguyen_1748",
      address: {
        address1: "406 Maple Drive",
        address2: "Suite 975",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78716"
      },
      items: [
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "9879255677",
          price: 288.82,
          options: {
            size: "6 ft",
            color: "green",
            material: "olefin",
            "tilt mechanism": "auto tilt"
          }
        },
        {
          name: "Tea Kettle",
          product_id: "9832717871",
          item_id: "2820119811",
          price: 94.68,
          options: {
            material: "glass",
            capacity: "2 liters",
            "stovetop compatibility": "electric"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "5826601160",
          price: 506.15,
          options: {
            "room size": "medium",
            "filter type": "carbon",
            features: "night mode"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["248905076239"],
          item_ids: ["9879255677", "2820119811", "5826601160"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 889.65,
          payment_method_id: "gift_card_9452856"
        },
        {
          transaction_type: "refund",
          amount: 889.65,
          payment_method_id: "gift_card_9452856"
        }
      ]
    },
    "#W3232025": {
      order_id: "#W3232025",
      user_id: "yara_santos_1202",
      address: {
        address1: "206 Cedar Avenue",
        address2: "Suite 376",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "91163"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "2444431651",
          price: 534.84,
          options: {
            "weight range": "55-75 lbs",
            material: "iron",
            "set type": "fixed"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["391658202453"],
          item_ids: ["2444431651"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 534.84,
          payment_method_id: "gift_card_4543462"
        }
      ]
    },
    "#W2493472": {
      order_id: "#W2493472",
      user_id: "ivan_kim_7727",
      address: {
        address1: "712 Chestnut Street",
        address2: "Suite 103",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60636"
      },
      items: [
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "9844888101",
          price: 2459.74,
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "8GB",
            storage: "1TB SSD",
            color: "black"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9408160950",
          price: 381.26,
          options: {
            color: "gold",
            "band material": "leather",
            display: "LCD"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "2872451762",
          price: 622.12,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3463.12,
          payment_method_id: "credit_card_1920989"
        }
      ]
    },
    "#W4817567": {
      order_id: "#W4817567",
      user_id: "yusuf_hernandez_5411",
      address: {
        address1: "698 Chestnut Street",
        address2: "Suite 576",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78219"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "6704763132",
          price: 305.45,
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "4875647558",
          price: 2805.77,
          options: {
            pressure: "15 bar",
            capacity: "1L",
            type: "capsule"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "6452271382",
          price: 258.84,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7199146548",
          price: 48.02,
          options: {
            capacity: "750ml",
            material: "plastic",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["413979049328"],
          item_ids: ["6704763132", "4875647558", "6452271382", "7199146548"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3418.08,
          payment_method_id: "paypal_6753664"
        },
        {
          transaction_type: "refund",
          amount: 3418.08,
          payment_method_id: "paypal_6753664"
        }
      ]
    },
    "#W1130240": {
      order_id: "#W1130240",
      user_id: "liam_li_8526",
      address: {
        address1: "638 Hickory Lane",
        address2: "Suite 502",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28226"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "7159180318",
          price: 512.88,
          options: {
            "weight range": "30-50 lbs",
            material: "urethane",
            "set type": "fixed"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 512.88,
          payment_method_id: "gift_card_5427896"
        }
      ]
    },
    "#W9677982": {
      order_id: "#W9677982",
      user_id: "harper_johansson_2663",
      address: {
        address1: "490 River Road",
        address2: "Suite 486",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80281"
      },
      items: [
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "9672174103",
          price: 281.98,
          options: {
            "frame color": "brown",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "3478699712",
          price: 2291.87,
          options: {
            "screen size": "15-inch",
            processor: "i5",
            ram: "16GB",
            storage: "512GB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2573.85,
          payment_method_id: "paypal_4820484"
        }
      ]
    },
    "#W8065207": {
      order_id: "#W8065207",
      user_id: "mei_kovacs_8020",
      address: {
        address1: "317 Elm Street",
        address2: "Suite 461",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28236"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "5694328282",
          price: 323.19,
          options: {
            color: "gold",
            "band material": "leather",
            display: "AMOLED"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "1631373418",
          price: 1291.21,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "6GB",
            "screen size": "6.1-inch"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "9956648681",
          price: 452.62,
          options: {
            "piece count": "4-piece",
            color: "red",
            material: "hardshell"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "4024196380",
          price: 102.9,
          options: {
            length: "50ft",
            material: "latex",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["731287459054"],
          item_ids: ["5694328282", "1631373418", "9956648681", "4024196380"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2169.92,
          payment_method_id: "paypal_7644869"
        }
      ]
    },
    "#W7677118": {
      order_id: "#W7677118",
      user_id: "harper_nguyen_9170",
      address: {
        address1: "386 Broadway",
        address2: "Suite 145",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78715"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "4953074738",
          price: 226.02,
          options: {
            compatibility: "Amazon Alexa",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["403042895339"],
          item_ids: ["4953074738"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 226.02,
          payment_method_id: "gift_card_8578732"
        }
      ]
    },
    "#W7822344": {
      order_id: "#W7822344",
      user_id: "daiki_muller_8062",
      address: {
        address1: "538 Elm Avenue",
        address2: "Suite 294",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94157"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "8142779083",
          price: 157.53,
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "silver"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "4982943126",
          price: 214.33,
          options: {
            size: "small",
            material: "fleece",
            color: "beige"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 371.86,
          payment_method_id: "gift_card_8385925"
        }
      ]
    },
    "#W3320020": {
      order_id: "#W3320020",
      user_id: "yara_lee_7701",
      address: {
        address1: "944 Laurel Lane",
        address2: "Suite 386",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77243"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4127323219",
          price: 251.82,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3609437808",
          price: 466.44,
          options: {
            material: "leather",
            color: "red",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "6342039236",
          price: 244.91,
          options: {
            "switch type": "clicky",
            backlight: "white",
            size: "full size"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 963.17,
          payment_method_id: "credit_card_6680679"
        }
      ]
    },
    "#W2598324": {
      order_id: "#W2598324",
      user_id: "mei_ahmed_4909",
      address: {
        address1: "572 Cedar Street",
        address2: "Suite 469",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78705"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7583936705",
          price: 3101.43,
          options: {
            resolution: "20MP",
            zoom: "10x",
            storage: "CF card"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3379843752",
          price: 3203.76,
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "manual"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 6305.19,
          payment_method_id: "credit_card_5902940"
        }
      ]
    },
    "#W5107138": {
      order_id: "#W5107138",
      user_id: "raj_lopez_5873",
      address: {
        address1: "575 Chestnut Street",
        address2: "Suite 251",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76195"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1437889264",
          price: 258.09,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "8249784860",
          price: 96.42,
          options: {
            length: "50ft",
            material: "vinyl",
            color: "green"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "9083642334",
          price: 164.28,
          options: {
            color: "white",
            brightness: "high",
            "power source": "USB"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5666020311",
          price: 1058.86,
          options: {
            type: "electric",
            size: "medium",
            features: "side burner"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "3557711149",
          price: 205.35,
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1783,
          payment_method_id: "credit_card_6731308"
        }
      ]
    },
    "#W9126675": {
      order_id: "#W9126675",
      user_id: "ava_nguyen_2175",
      address: {
        address1: "346 Laurel Lane",
        address2: "Suite 175",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78786"
      },
      items: [
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1596993217",
          price: 180.02,
          options: {
            size: "S",
            color: "white",
            ventilation: "low"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "4920090458",
          price: 381.87,
          options: {
            color: "black",
            "band material": "silicone",
            display: "AMOLED"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "6555827912",
          price: 199.42,
          options: {
            color: "black",
            "speed settings": "low",
            "battery type": "AA batteries"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["303818392513"],
          item_ids: ["1596993217", "4920090458", "6555827912"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 761.31,
          payment_method_id: "paypal_6262583"
        }
      ]
    },
    "#W1430028": {
      order_id: "#W1430028",
      user_id: "anya_brown_2024",
      address: {
        address1: "391 Lakeview Drive",
        address2: "Suite 326",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10121"
      },
      items: [
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "4107812777",
          price: 155.33,
          options: {
            size: "9",
            color: "black",
            material: "synthetic",
            sole: "rubber"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4965355367",
          price: 620.07,
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 775.4,
          payment_method_id: "paypal_5206520"
        }
      ]
    },
    "#W7342738": {
      order_id: "#W7342738",
      user_id: "amelia_silva_7726",
      address: {
        address1: "182 Elm Avenue",
        address2: "Suite 875",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19117"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "6164262152",
          price: 211.11,
          options: {
            color: "white",
            "speed settings": "low",
            "battery type": "rechargeable"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "6974536207",
          price: 49.3,
          options: {
            capacity: "750ml",
            material: "plastic",
            color: "blue"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2499294441",
          price: 258.36,
          options: {
            color: "black",
            "battery life": "8 hours",
            "water resistance": "IPX7"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "3275928196",
          price: 511.63,
          options: {
            "weight range": "5-25 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1030.4,
          payment_method_id: "gift_card_3491931"
        }
      ]
    },
    "#W5356919": {
      order_id: "#W5356919",
      user_id: "james_lee_5010",
      address: {
        address1: "303 Elm Avenue",
        address2: "Suite 851",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90245"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9370300555",
          price: 45.9,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 45.9,
          payment_method_id: "paypal_2684483"
        }
      ]
    },
    "#W3007862": {
      order_id: "#W3007862",
      user_id: "evelyn_lopez_5487",
      address: {
        address1: "142 Chestnut Street",
        address2: "Suite 757",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92195"
      },
      items: [
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "1775591963",
          price: 154.75,
          options: {
            size: "10",
            color: "white",
            material: "leather",
            sole: "EVA"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5666020311",
          price: 1058.86,
          options: {
            type: "electric",
            size: "medium",
            features: "side burner"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1213.61,
          payment_method_id: "credit_card_3566337"
        }
      ]
    },
    "#W8844578": {
      order_id: "#W8844578",
      user_id: "mohamed_li_1979",
      address: {
        address1: "615 Elm Avenue",
        address2: "Suite 790",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43209"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "9991484137",
          price: 240.97,
          options: {
            "switch type": "tactile",
            backlight: "white",
            size: "80%"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "1569829406",
          price: 320.55,
          options: {
            resolution: "1080p",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "2060066974",
          price: 51.05,
          options: {
            color: "black",
            size: "XL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2681513500",
          price: 356.23,
          options: {
            color: "gold",
            "band material": "silicone",
            display: "AMOLED"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "9973034634",
          price: 2850.32,
          options: {
            resolution: "20MP",
            zoom: "3x",
            storage: "CF card"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3819.12,
          payment_method_id: "paypal_6045911"
        }
      ]
    },
    "#W3840181": {
      order_id: "#W3840181",
      user_id: "olivia_khan_9030",
      address: {
        address1: "146 Cedar Street",
        address2: "Suite 863",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46290"
      },
      items: [
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "3542102174",
          price: 47.25,
          options: {
            color: "red",
            size: "S",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4358482460",
          price: 290.94,
          options: {
            "frame color": "black",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7381052709",
          price: 193.22,
          options: {
            size: "large",
            material: "memory foam",
            color: "brown"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "9112290483",
          price: 1925.16,
          options: {
            "strap material": "metal",
            "dial color": "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2456.57,
          payment_method_id: "paypal_4992138"
        }
      ]
    },
    "#W7284266": {
      order_id: "#W7284266",
      user_id: "james_kim_7213",
      address: {
        address1: "579 Highland Drive",
        address2: "Suite 492",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92199"
      },
      items: [
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "8170914468",
          price: 316.29,
          options: {
            size: "6 ft",
            color: "red",
            material: "olefin",
            "tilt mechanism": "manual tilt"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "1673859111",
          price: 484.96,
          options: {
            material: "wood",
            color: "black",
            height: "4 ft"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["622213689602"],
          item_ids: ["8170914468", "1673859111"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 801.25,
          payment_method_id: "paypal_8963303"
        }
      ]
    },
    "#W7538736": {
      order_id: "#W7538736",
      user_id: "mei_johansson_5847",
      address: {
        address1: "257 Maple Drive",
        address2: "Suite 338",
        city: "Washington",
        country: "USA",
        state: "DC",
        zip: "20509"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1007724142",
          price: 382.41,
          options: {
            color: "black",
            "band material": "leather",
            display: "LCD"
          }
        },
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "5635439102",
          price: 353.76,
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "blue"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "1569829406",
          price: 320.55,
          options: {
            resolution: "1080p",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8426249116",
          price: 488.81,
          options: {
            material: "fabric",
            color: "black",
            armrest: "fixed",
            "backrest height": "standard"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["790735957247"],
          item_ids: ["1007724142", "5635439102", "1569829406", "8426249116"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1545.53,
          payment_method_id: "gift_card_6568084"
        },
        {
          transaction_type: "refund",
          amount: 1545.53,
          payment_method_id: "gift_card_6568084"
        }
      ]
    },
    "#W6798117": {
      order_id: "#W6798117",
      user_id: "evelyn_davis_7541",
      address: {
        address1: "296 Elm Street",
        address2: "Suite 128",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32136"
      },
      items: [
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "8538875209",
          price: 45.13,
          options: {
            capacity: "500ml",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1706622510",
          price: 328.67,
          options: {
            color: "black",
            "band material": "metal",
            display: "LCD"
          }
        },
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "6508153405",
          price: 191.55,
          options: {
            diameter: "12 inches",
            color: "white",
            type: "analog"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["415075076959"],
          item_ids: ["8538875209", "1706622510", "6508153405"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 565.35,
          payment_method_id: "paypal_9734841"
        }
      ]
    },
    "#W6302827": {
      order_id: "#W6302827",
      user_id: "mohamed_lee_5442",
      address: {
        address1: "961 Pine Lane",
        address2: "Suite 277",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75372"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4582956489",
          price: 241.96,
          options: {
            size: "12",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "8349903180",
          price: 102.07,
          options: {
            capacity: "20000mAh",
            output: "Wireless",
            color: "black"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1665571435",
          price: 196.89,
          options: {
            size: "L",
            color: "black",
            ventilation: "high"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 540.92,
          payment_method_id: "credit_card_8169552"
        }
      ]
    },
    "#W5767256": {
      order_id: "#W5767256",
      user_id: "mei_garcia_1676",
      address: {
        address1: "812 Spruce Street",
        address2: "Suite 342",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32204"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1262139877",
          price: 239.99,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["742075969664"],
          item_ids: ["1262139877"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 239.99,
          payment_method_id: "credit_card_2924258"
        }
      ]
    },
    "#W3883329": {
      order_id: "#W3883329",
      user_id: "amelia_ito_8772",
      address: {
        address1: "798 Hickory Lane",
        address2: "Suite 353",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98137"
      },
      items: [
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8161321868",
          price: 152.45,
          options: {
            size: "XS",
            color: "navy",
            zipper: "full"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5537798301",
          price: 204.47,
          options: {
            size: "S",
            color: "black",
            ventilation: "medium"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "6509212169",
          price: 256.14,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand A"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7255224608",
          price: 2922.97,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "CF card"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3536.03,
          payment_method_id: "credit_card_1016162"
        }
      ]
    },
    "#W4895606": {
      order_id: "#W4895606",
      user_id: "evelyn_hernandez_1701",
      address: {
        address1: "736 Hillcrest Drive",
        address2: "Suite 196",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92139"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "5418781403",
          price: 267.58,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "8GB"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7902309762",
          price: 243.62,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand B"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "7624783998",
          price: 154.17,
          options: {
            color: "black",
            brightness: "high",
            "power source": "AC adapter"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 665.37,
          payment_method_id: "credit_card_3631888"
        }
      ]
    },
    "#W5733668": {
      order_id: "#W5733668",
      user_id: "ethan_garcia_1261",
      address: {
        address1: "667 Highland Drive",
        address2: "Suite 865",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80280"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "8323284863",
          price: 511.24,
          options: {
            material: "fabric",
            color: "blue",
            armrest: "adjustable",
            "backrest height": "standard"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "7866854614",
          price: 105.49,
          options: {
            capacity: "5000mAh",
            output: "USB-C",
            color: "white"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "4064702754",
          price: 159.78,
          options: {
            capacity: "2L",
            material: "glass",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["365054630723"],
          item_ids: ["8323284863", "7866854614", "4064702754"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 776.51,
          payment_method_id: "paypal_3798357"
        }
      ]
    },
    "#W8098147": {
      order_id: "#W8098147",
      user_id: "fatima_lee_3440",
      address: {
        address1: "339 Lakeview Drive",
        address2: "Suite 683",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95109"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "8484921793",
          price: 230.15,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "80%"
          }
        },
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8798690242",
          price: 208.07,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "4410138384",
          price: 197.37,
          options: {
            size: "8",
            color: "gray",
            material: "canvas"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 635.59,
          payment_method_id: "credit_card_3395407"
        }
      ]
    },
    "#W6958840": {
      order_id: "#W6958840",
      user_id: "daiki_li_8218",
      address: {
        address1: "560 Main Street",
        address2: "Suite 402",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75201"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5650803029",
          price: 324.63,
          options: {
            color: "black",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "1596993217",
          price: 180.02,
          options: {
            size: "S",
            color: "white",
            ventilation: "low"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4131464125",
          price: 960.67,
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "silver"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6048672633",
          price: 208.05,
          options: {
            size: "L",
            color: "black",
            ventilation: "low"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "2386562819",
          price: 508.21,
          options: {
            material: "mesh",
            color: "gray",
            armrest: "fixed",
            "backrest height": "high-back"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2181.58,
          payment_method_id: "credit_card_1687024"
        }
      ]
    },
    "#W9667707": {
      order_id: "#W9667707",
      user_id: "isabella_santos_1643",
      address: {
        address1: "474 Chestnut Street",
        address2: "Suite 601",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10020"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "1763705424",
          price: 235.44,
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand C"
          }
        },
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "7609274509",
          price: 243.4,
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "32GB"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9635758562",
          price: 148.95,
          options: {
            size: "9",
            color: "white",
            material: "mesh",
            sole: "rubber"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 627.79,
          payment_method_id: "credit_card_4056740"
        }
      ]
    },
    "#W1874267": {
      order_id: "#W1874267",
      user_id: "omar_moore_9540",
      address: {
        address1: "548 Broadway",
        address2: "Suite 950",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10096"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "2284404181",
          price: 3204.43,
          options: {
            resolution: "20MP",
            zoom: "5x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["830871016038"],
          item_ids: ["2284404181"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3204.43,
          payment_method_id: "credit_card_8008637"
        }
      ]
    },
    "#W2378156": {
      order_id: "#W2378156",
      user_id: "yusuf_rossi_9620",
      address: {
        address1: "763 Broadway",
        address2: "Suite 135",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19122"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "4202497723",
          price: 342.81,
          options: {
            type: "over-ear",
            connectivity: "wireless",
            color: "blue"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "4602305039",
          price: 561.05,
          options: {
            type: "robotic",
            "bagged/bagless": "bagged",
            features: "cordless"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1151293680",
          price: 272.33,
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "full size"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "4983901480",
          price: 262.47,
          options: {
            compatibility: "Apple HomeKit",
            color: "black"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9408160950",
          price: 381.26,
          options: {
            color: "gold",
            "band material": "leather",
            display: "LCD"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["843053632392"],
          item_ids: [
            "4202497723",
            "4602305039",
            "1151293680",
            "4983901480",
            "9408160950"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1819.92,
          payment_method_id: "credit_card_9513926"
        }
      ]
    },
    "#W6070601": {
      order_id: "#W6070601",
      user_id: "sophia_nguyen_2370",
      address: {
        address1: "144 Elm Street",
        address2: "Suite 934",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28237"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1437889264",
          price: 258.09,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["847087478426"],
          item_ids: ["1437889264"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 258.09,
          payment_method_id: "paypal_3738584"
        }
      ]
    },
    "#W4622215": {
      order_id: "#W4622215",
      user_id: "liam_kovacs_4286",
      address: {
        address1: "254 River Road",
        address2: "Suite 961",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92111"
      },
      items: [
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "1725100896",
          price: 289.66,
          options: {
            "scent family": "oriental",
            size: "30ml",
            gender: "unisex"
          }
        },
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "5111440845",
          price: 48.55,
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "Bluetooth"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "7528037711",
          price: 157.86,
          options: {
            size: "XL",
            color: "navy",
            zipper: "full"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["690365443540"],
          item_ids: ["1725100896", "5111440845", "7528037711"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 496.07,
          payment_method_id: "gift_card_4544711"
        }
      ]
    },
    "#W9232383": {
      order_id: "#W9232383",
      user_id: "ava_nguyen_6646",
      address: {
        address1: "238 Oak Street",
        address2: "Suite 636",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94128"
      },
      items: [
        {
          name: "Headphones",
          product_id: "6992792935",
          item_id: "9805150490",
          price: 368.87,
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "white"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "1111254697",
          price: 531.57,
          options: {
            material: "glass",
            color: "white",
            height: "6 ft"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 900.44,
          payment_method_id: "credit_card_5683823"
        }
      ]
    },
    "#W3561024": {
      order_id: "#W3561024",
      user_id: "evelyn_patel_8882",
      address: {
        address1: "814 River Road",
        address2: "Suite 485",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90358"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "7166996157",
          price: 518.31,
          options: {
            "room size": "small",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "8140269513",
          price: 528.12,
          options: {
            "weight range": "55-75 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "6690069155",
          price: 466.47,
          options: {
            "piece count": "3-piece",
            color: "silver",
            material: "softshell"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7195021808",
          price: 2909.87,
          options: {
            resolution: "30MP",
            zoom: "5x",
            storage: "SD card"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4422.77,
          payment_method_id: "paypal_3704667"
        }
      ]
    },
    "#W1067251": {
      order_id: "#W1067251",
      user_id: "raj_sanchez_2970",
      address: {
        address1: "557 Sunset Drive",
        address2: "Suite 454",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92147"
      },
      items: [
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "6452271382",
          price: 258.84,
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX4"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "7848293342",
          price: 942.71,
          options: {
            type: "charcoal",
            size: "medium",
            features: "side burner"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["787450420748"],
          item_ids: ["6452271382", "7848293342"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1201.55,
          payment_method_id: "credit_card_3362387"
        }
      ]
    },
    "#W5442520": {
      order_id: "#W5442520",
      user_id: "olivia_ito_3591",
      address: {
        address1: "570 Elm Avenue",
        address2: "Suite 175",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80218"
      },
      items: [
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "3330317167",
          price: 137.32,
          options: {
            color: "black",
            "sensor type": "optical",
            connectivity: "wired"
          }
        },
        {
          name: "Patio Umbrella",
          product_id: "9743693396",
          item_id: "3111466194",
          price: 285.66,
          options: {
            size: "7 ft",
            color: "red",
            material: "polyester",
            "tilt mechanism": "manual tilt"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "2648909398",
          price: 240.87,
          options: {
            size: "8",
            material: "leather",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 663.85,
          payment_method_id: "credit_card_9753331"
        }
      ]
    },
    "#W8864622": {
      order_id: "#W8864622",
      user_id: "mohamed_li_1979",
      address: {
        address1: "615 Elm Avenue",
        address2: "Suite 790",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43209"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "4024196380",
          price: 102.9,
          options: {
            length: "50ft",
            material: "latex",
            color: "black"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "9594745976",
          price: 184.13,
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "custom"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "5428723833",
          price: 145.48,
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "black"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5172162216",
          price: 48.51,
          options: {
            pieces: "2000",
            theme: "landscape",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9030221155",
          price: 51.98,
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "beginner"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["614439924617"],
          item_ids: [
            "4024196380",
            "9594745976",
            "5428723833",
            "5172162216",
            "9030221155"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 533,
          payment_method_id: "paypal_6045911"
        }
      ]
    },
    "#W3638028": {
      order_id: "#W3638028",
      user_id: "james_li_5688",
      address: {
        address1: "215 River Road",
        address2: "Suite 991",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10083"
      },
      items: [
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "5810561222",
          price: 274.98,
          options: {
            resolution: "4K",
            "field of view": "130 degrees",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4572024853",
          price: 53.72,
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["295951712663"],
          item_ids: ["5810561222", "4572024853"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 328.7,
          payment_method_id: "gift_card_1725971"
        }
      ]
    },
    "#W8343509": {
      order_id: "#W8343509",
      user_id: "omar_muller_8833",
      address: {
        address1: "377 Maple Drive",
        address2: "Suite 683",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80263"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "4537595158",
          price: 193.79,
          options: {
            size: "small",
            material: "fleece",
            color: "brown"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9237024510",
          price: 53.53,
          options: {
            pieces: "500",
            theme: "animals",
            "difficulty level": "expert"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "2115393569",
          price: 270.91,
          options: {
            color: "black",
            capacity: "1 cup",
            type: "drip",
            features: "timer"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 518.23,
          payment_method_id: "paypal_4439305"
        }
      ]
    },
    "#W2800409": {
      order_id: "#W2800409",
      user_id: "emma_martin_6993",
      address: {
        address1: "288 Elm Avenue",
        address2: "Suite 403",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76170"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "2882812427",
          price: 261.11,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand A"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5120532699",
          price: 187.23,
          options: {
            "deck material": "maple",
            length: "31 inch",
            design: "graphic"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["170005532588"],
          item_ids: ["2882812427", "5120532699"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 448.34,
          payment_method_id: "gift_card_4129829"
        }
      ]
    },
    "#W8209112": {
      order_id: "#W8209112",
      user_id: "sophia_wilson_7936",
      address: {
        address1: "686 Cedar Street",
        address2: "Suite 667",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94107"
      },
      items: [
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "3034017579",
          price: 49.72,
          options: {
            brightness: "75W equivalent",
            "color temperature": "warm white",
            connectivity: "Wi-Fi"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6130713659",
          price: 483.66,
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "8997785118",
          price: 2674.4,
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "space grey"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7199146548",
          price: 48.02,
          options: {
            capacity: "750ml",
            material: "plastic",
            color: "black"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "6867855179",
          price: 319.53,
          options: {
            resolution: "1080p",
            "field of view": "130 degrees",
            connectivity: "Wi-Fi"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["330749993557"],
          item_ids: [
            "3034017579",
            "6130713659",
            "8997785118",
            "7199146548",
            "6867855179"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3575.33,
          payment_method_id: "credit_card_6428848"
        }
      ]
    },
    "#W5382576": {
      order_id: "#W5382576",
      user_id: "mei_kovacs_5767",
      address: {
        address1: "593 Willow Lane",
        address2: "Suite 420",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43295"
      },
      items: [
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "9929635042",
          price: 1261.14,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "5.8-inch"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["388169751917"],
          item_ids: ["9929635042"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1261.14,
          payment_method_id: "gift_card_1776915"
        }
      ]
    },
    "#W3101067": {
      order_id: "#W3101067",
      user_id: "lei_hernandez_8500",
      address: {
        address1: "196 Main Street",
        address2: "Suite 800",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43222"
      },
      items: [
        {
          name: "Wall Clock",
          product_id: "2344688344",
          item_id: "9850781806",
          price: 184.48,
          options: {
            diameter: "14 inches",
            color: "white",
            type: "digital"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["620964466631"],
          item_ids: ["9850781806"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 184.48,
          payment_method_id: "gift_card_5245016"
        }
      ]
    },
    "#W2022128": {
      order_id: "#W2022128",
      user_id: "mei_kovacs_5767",
      address: {
        address1: "593 Willow Lane",
        address2: "Suite 420",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43295"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6501071631",
          price: 1018.68,
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "gold"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "7658724607",
          price: 256.73,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1421289881",
          price: 268.77,
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Sunglasses",
          product_id: "7314138884",
          item_id: "4548300368",
          price: 287.79,
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "polarized",
            "frame material": "plastic"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1615379700",
          price: 253.89,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2085.86,
          payment_method_id: "gift_card_1776915"
        }
      ]
    },
    "#W3919881": {
      order_id: "#W3919881",
      user_id: "liam_nguyen_9081",
      address: {
        address1: "950 Park Avenue",
        address2: "Suite 809",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95184"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6200867091",
          price: 2955.17,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "capsule"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "5855700373",
          price: 293.46,
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "yes"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["636829750170"],
          item_ids: ["6200867091", "5855700373"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3248.63,
          payment_method_id: "gift_card_4387500"
        }
      ]
    },
    "#W8033354": {
      order_id: "#W8033354",
      user_id: "olivia_brown_4616",
      address: {
        address1: "287 Pine Lane",
        address2: "Suite 248",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43118"
      },
      items: [
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "1327854740",
          price: 492.65,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "night mode"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "8153356023",
          price: 212.47,
          options: {
            size: "L",
            color: "blue",
            ventilation: "medium"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "6697922351",
          price: 194.47,
          options: {
            size: "L",
            color: "white",
            ventilation: "medium"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1631806422",
          price: 339.85,
          options: {
            color: "black",
            "band material": "metal",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["952088243689"],
          item_ids: ["1327854740", "8153356023", "6697922351", "1631806422"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1239.44,
          payment_method_id: "credit_card_3081930"
        }
      ]
    },
    "#W8063026": {
      order_id: "#W8063026",
      user_id: "emma_kovacs_5477",
      address: {
        address1: "323 Broadway",
        address2: "Suite 430",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92113"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "1421289881",
          price: 268.77,
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "80%"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "9692325258",
          price: 528.63,
          options: {
            "piece count": "3-piece",
            color: "black",
            material: "softshell"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "9612497925",
          price: 50.88,
          options: {
            color: "blue",
            size: "M",
            material: "cotton",
            style: "crew neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["442414740913"],
          item_ids: ["1421289881", "9692325258", "9612497925"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 848.28,
          payment_method_id: "gift_card_9246707"
        }
      ]
    },
    "#W6790887": {
      order_id: "#W6790887",
      user_id: "daiki_muller_8062",
      address: {
        address1: "747 Pine Lane",
        address2: "Suite 604",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92106"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6585768447",
          price: 467.69,
          options: {
            "weight range": "5-25 lbs",
            material: "urethane",
            "set type": "fixed"
          }
        },
        {
          name: "Wireless Earbuds",
          product_id: "9924732112",
          item_id: "2052249669",
          price: 237.14,
          options: {
            color: "white",
            "battery life": "4 hours",
            "water resistance": "not resistant"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 704.83,
          payment_method_id: "gift_card_8385925"
        }
      ]
    },
    "#W6002958": {
      order_id: "#W6002958",
      user_id: "anya_sanchez_9707",
      address: {
        address1: "308 Main Street",
        address2: "Suite 214",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43171"
      },
      items: [
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "2509076505",
          price: 189.5,
          options: {
            size: "10",
            color: "gray",
            material: "leather"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 189.5,
          payment_method_id: "paypal_1191071"
        }
      ]
    },
    "#W8512927": {
      order_id: "#W8512927",
      user_id: "liam_li_5260",
      address: {
        address1: "205 Highland Drive",
        address2: "Suite 104",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94120"
      },
      items: [
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5120532699",
          price: 187.23,
          options: {
            "deck material": "maple",
            length: "31 inch",
            design: "graphic"
          }
        },
        {
          name: "Notebook",
          product_id: "2892623495",
          item_id: "9799386954",
          price: 28.59,
          options: {
            size: "A5",
            "cover type": "soft cover"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["851370057661"],
          item_ids: ["5120532699", "9799386954"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 215.82,
          payment_method_id: "credit_card_7933535"
        }
      ]
    },
    "#W7941031": {
      order_id: "#W7941031",
      user_id: "olivia_ito_3591",
      address: {
        address1: "570 Elm Avenue",
        address2: "Suite 175",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80218"
      },
      items: [
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1355937109",
          price: 1985.3,
          options: {
            "strap material": "leather",
            "dial color": "white"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "5917587651",
          price: 212.79,
          options: {
            color: "grey",
            size: "medium",
            material: "polyester",
            compartment: "laptop"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2198.09,
          payment_method_id: "credit_card_9753331"
        }
      ]
    },
    "#W2591905": {
      order_id: "#W2591905",
      user_id: "isabella_johansson_7408",
      address: {
        address1: "289 Willow Lane",
        address2: "Suite 172",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60625"
      },
      items: [
        {
          name: "Sneakers",
          product_id: "7471004230",
          item_id: "2509076505",
          price: 189.5,
          options: {
            size: "10",
            color: "gray",
            material: "leather"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 189.5,
          payment_method_id: "paypal_8540436"
        }
      ]
    },
    "#W9506777": {
      order_id: "#W9506777",
      user_id: "lei_patel_3139",
      address: {
        address1: "865 Park Avenue",
        address2: "Suite 944",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60604"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "6501071631",
          price: 1018.68,
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "gold"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6245231688",
          price: 522.03,
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "adjustable"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "4572024853",
          price: 53.72,
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["967406273478"],
          item_ids: ["6501071631", "6245231688", "4572024853"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1594.43,
          payment_method_id: "credit_card_4589919"
        },
        {
          transaction_type: "refund",
          amount: 1594.43,
          payment_method_id: "credit_card_4589919"
        }
      ]
    },
    "#W3913498": {
      order_id: "#W3913498",
      user_id: "ivan_santos_6635",
      address: {
        address1: "477 Park Avenue",
        address2: "Suite 558",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75277"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1706622510",
          price: 328.67,
          options: {
            color: "black",
            "band material": "metal",
            display: "LCD"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "5996159312",
          price: 2895.55,
          options: {
            resolution: "24MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Skateboard",
          product_id: "1968349452",
          item_id: "5038485381",
          price: 189.65,
          options: {
            "deck material": "plastic",
            length: "31 inch",
            design: "custom"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3413.87,
          payment_method_id: "paypal_6151711"
        }
      ]
    },
    "#W5955464": {
      order_id: "#W5955464",
      user_id: "harper_kovacs_7861",
      address: {
        address1: "241 Cedar Street",
        address2: "Suite 966",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98117"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "3015420423",
          price: 141.76,
          options: {
            capacity: "2L",
            material: "glass",
            color: "silver"
          }
        },
        {
          name: "Smartphone",
          product_id: "1801728040",
          item_id: "1631373418",
          price: 1291.21,
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "6GB",
            "screen size": "6.1-inch"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "2323972008",
          price: 146.98,
          options: {
            capacity: "1L",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "4404981319",
          price: 1031,
          options: {
            type: "electric",
            size: "large",
            features: "rotisserie"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["681606824290"],
          item_ids: ["3015420423", "1631373418", "2323972008", "4404981319"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2610.95,
          payment_method_id: "paypal_3246095"
        }
      ]
    },
    "#W6478051": {
      order_id: "#W6478051",
      user_id: "aarav_ito_1827",
      address: {
        address1: "830 Main Street",
        address2: "Suite 500",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90131"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "5418781403",
          price: 267.58,
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "8GB"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "3909704820",
          price: 308.38,
          options: {
            resolution: "4K",
            "field of view": "110 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "3379843752",
          price: 3203.76,
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "manual"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "3076708684",
          price: 535.97,
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "quiet operation"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4315.69,
          payment_method_id: "gift_card_1468632"
        }
      ]
    },
    "#W1443906": {
      order_id: "#W1443906",
      user_id: "fatima_wilson_6873",
      address: {
        address1: "788 Park Avenue",
        address2: "Suite 932",
        city: "Austin",
        country: "USA",
        state: "TX",
        zip: "78746"
      },
      items: [
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "3915604618",
          price: 487.6,
          options: {
            material: "leather",
            color: "blue",
            armrest: "fixed",
            "backrest height": "standard"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "6589665742",
          price: 933.17,
          options: {
            type: "gas",
            size: "large",
            features: "rotisserie"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1420.77,
          payment_method_id: "credit_card_9557278"
        }
      ]
    },
    "#W7538230": {
      order_id: "#W7538230",
      user_id: "fatima_martin_9326",
      address: {
        address1: "512 Maple Drive",
        address2: "Suite 729",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92151"
      },
      items: [
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "1052700637",
          price: 285.81,
          options: {
            color: "red",
            "battery life": "20 hours",
            "water resistance": "no"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "5796612084",
          price: 158.89,
          options: {
            color: "RGB",
            "sensor type": "optical",
            connectivity: "wired"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 444.7,
          payment_method_id: "credit_card_6513839"
        }
      ]
    },
    "#W2618034": {
      order_id: "#W2618034",
      user_id: "mia_jackson_2250",
      address: {
        address1: "982 Laurel Lane",
        address2: "Suite 332",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32113"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "9829827210",
          price: 90.43,
          options: {
            length: "25ft",
            material: "vinyl",
            color: "blue"
          }
        },
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8018699955",
          price: 467.86,
          options: {
            material: "metal",
            color: "brown",
            height: "4 ft"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "3112842858",
          price: 49.1,
          options: {
            pieces: "1000",
            theme: "fantasy",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Grill",
          product_id: "6819683148",
          item_id: "5745575001",
          price: 986.65,
          options: {
            type: "electric",
            size: "portable",
            features: "rotisserie"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "2880340443",
          price: 137.22,
          options: {
            color: "white",
            "sensor type": "optical",
            connectivity: "wired"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1731.26,
          payment_method_id: "paypal_2031016"
        }
      ]
    },
    "#W9196189": {
      order_id: "#W9196189",
      user_id: "emma_brown_8847",
      address: {
        address1: "984 Hickory Lane",
        address2: "Suite 834",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32165"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9811090008",
          price: 370.38,
          options: {
            color: "silver",
            "band material": "leather",
            display: "LCD"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "1793929609",
          price: 514.34,
          options: {
            material: "fabric",
            color: "black",
            armrest: "none",
            "backrest height": "high-back"
          }
        },
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "4024196380",
          price: 102.9,
          options: {
            length: "50ft",
            material: "latex",
            color: "black"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "1262139877",
          price: 239.99,
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "yes"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "8140269513",
          price: 528.12,
          options: {
            "weight range": "55-75 lbs",
            material: "rubber",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["829720840943"],
          item_ids: [
            "9811090008",
            "1793929609",
            "4024196380",
            "1262139877",
            "8140269513"
          ]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1755.73,
          payment_method_id: "credit_card_8850930"
        },
        {
          transaction_type: "refund",
          amount: 1755.73,
          payment_method_id: "credit_card_8850930"
        }
      ]
    },
    "#W9397272": {
      order_id: "#W9397272",
      user_id: "emma_nguyen_6662",
      address: {
        address1: "785 Spruce Street",
        address2: "Suite 792",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75276"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "7736359414",
          price: 253.08,
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand C"
          }
        },
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "2554056026",
          price: 367.38,
          options: {
            color: "gold",
            "band material": "metal",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["265206323656"],
          item_ids: ["7736359414", "2554056026"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 620.46,
          payment_method_id: "paypal_2499655"
        }
      ]
    },
    "#W6174054": {
      order_id: "#W6174054",
      user_id: "anya_patel_3710",
      address: {
        address1: "374 Willow Lane",
        address2: "Suite 314",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77256"
      },
      items: [
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "9970989750",
          price: 569.43,
          options: {
            type: "upright",
            "bagged/bagless": "bagged",
            features: "cordless"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "8590708195",
          price: 157.61,
          options: {
            size: "XL",
            color: "navy",
            zipper: "half"
          }
        },
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "6130713659",
          price: 483.66,
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "adjustable"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["746898571093"],
          item_ids: ["9970989750", "8590708195", "6130713659"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1210.7,
          payment_method_id: "gift_card_6566420"
        }
      ]
    },
    "#W3657213": {
      order_id: "#W3657213",
      user_id: "olivia_ito_3591",
      address: {
        address1: "570 Elm Avenue",
        address2: "Suite 175",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80218"
      },
      items: [
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "6700049080",
          price: 466.75,
          options: {
            resolution: "4K",
            waterproof: "yes",
            color: "black"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "5996159312",
          price: 2895.55,
          options: {
            resolution: "24MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "5886093635",
          price: 208.04,
          options: {
            size: "S",
            color: "blue",
            ventilation: "low"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3570.34,
          payment_method_id: "gift_card_7794233"
        }
      ]
    },
    "#W2392556": {
      order_id: "#W2392556",
      user_id: "mason_li_6934",
      address: {
        address1: "773 Park Avenue",
        address2: "Suite 707",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98131"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "5320792178",
          price: 135.24,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "AC adapter"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 135.24,
          payment_method_id: "gift_card_6486968"
        }
      ]
    },
    "#W7128968": {
      order_id: "#W7128968",
      user_id: "yusuf_jackson_7865",
      address: {
        address1: "391 Broadway",
        address2: "Suite 435",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98127"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "7539442683",
          price: 461.49,
          options: {
            material: "metal",
            color: "black",
            height: "4 ft"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7729002517",
          price: 193,
          options: {
            size: "large",
            material: "polyester",
            color: "brown"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "6259501109",
          price: 652.61,
          options: {
            type: "robotic",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          }
        },
        {
          name: "Bluetooth Speaker",
          product_id: "4768869376",
          item_id: "2652637226",
          price: 295.94,
          options: {
            color: "green",
            "battery life": "20 hours",
            "water resistance": "yes"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["322548232432"],
          item_ids: ["7539442683", "7729002517", "6259501109", "2652637226"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1603.04,
          payment_method_id: "paypal_3392566"
        }
      ]
    },
    "#W9933266": {
      order_id: "#W9933266",
      user_id: "raj_lee_3061",
      address: {
        address1: "723 Hickory Lane",
        address2: "Suite 917",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75368"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "4537595158",
          price: 193.79,
          options: {
            size: "small",
            material: "fleece",
            color: "brown"
          }
        },
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "5586947715",
          price: 92.53,
          options: {
            thickness: "4mm",
            material: "PVC",
            color: "blue"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 286.32,
          payment_method_id: "paypal_4133936"
        }
      ]
    },
    "#W8904134": {
      order_id: "#W8904134",
      user_id: "harper_kovacs_7861",
      address: {
        address1: "998 Pine Lane",
        address2: "Suite 270",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78282"
      },
      items: [
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "1804581713",
          price: 2875.61,
          options: {
            resolution: "30MP",
            zoom: "3x",
            storage: "SD card"
          }
        },
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4803681337",
          price: 962.34,
          options: {
            "screen size": "8-inch",
            storage: "64GB",
            color: "black"
          }
        },
        {
          name: "Coffee Maker",
          product_id: "7996920482",
          item_id: "3020722515",
          price: 238.64,
          options: {
            color: "black",
            capacity: "1 cup",
            type: "french press",
            features: "auto shutoff"
          }
        },
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "3812493782",
          price: 244.34,
          options: {
            size: "7",
            material: "leather",
            waterproof: "yes"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["172624915783"],
          item_ids: ["1804581713", "4803681337", "3020722515", "3812493782"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4320.93,
          payment_method_id: "paypal_3246095"
        }
      ]
    },
    "#W2989580": {
      order_id: "#W2989580",
      user_id: "anya_lee_8315",
      address: {
        address1: "912 Elm Avenue",
        address2: "Suite 936",
        city: "San Antonio",
        country: "USA",
        state: "TX",
        zip: "78227"
      },
      items: [
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "5109407456",
          price: 182.48,
          options: {
            size: "small",
            material: "fleece",
            color: "grey"
          }
        },
        {
          name: "Air Purifier",
          product_id: "3821016478",
          item_id: "3676786561",
          price: 502.7,
          options: {
            "room size": "small",
            "filter type": "HEPA",
            features: "quiet operation"
          }
        },
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "5320792178",
          price: 135.24,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "AC adapter"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "8538875209",
          price: 45.13,
          options: {
            capacity: "500ml",
            material: "glass",
            color: "black"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "9385662952",
          price: 159.92,
          options: {
            size: "L",
            color: "black",
            zipper: "full"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1025.47,
          payment_method_id: "paypal_3728317"
        }
      ]
    },
    "#W3223435": {
      order_id: "#W3223435",
      user_id: "aarav_davis_4756",
      address: {
        address1: "178 Lakeview Drive",
        address2: "Suite 576",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76150"
      },
      items: [
        {
          name: "Garden Hose",
          product_id: "6679515468",
          item_id: "3230708338",
          price: 99.51,
          options: {
            length: "25ft",
            material: "latex",
            color: "green"
          }
        },
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "3015420423",
          price: 141.76,
          options: {
            capacity: "2L",
            material: "glass",
            color: "silver"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "3799046073",
          price: 53.27,
          options: {
            color: "black",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "6901578702",
          price: 307.42,
          options: {
            resolution: "4K",
            "field of view": "130 degrees",
            connectivity: "Ethernet"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["696769314695"],
          item_ids: ["3230708338", "3015420423", "3799046073", "6901578702"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 601.96,
          payment_method_id: "gift_card_9708163"
        }
      ]
    },
    "#W6573840": {
      order_id: "#W6573840",
      user_id: "omar_muller_7891",
      address: {
        address1: "292 Chestnut Street",
        address2: "Suite 262",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60628"
      },
      items: [
        {
          name: "Electric Kettle",
          product_id: "1075968781",
          item_id: "4458619711",
          price: 153.81,
          options: {
            capacity: "2L",
            material: "stainless steel",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["791260225865"],
          item_ids: ["4458619711"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 153.81,
          payment_method_id: "gift_card_3689412"
        }
      ]
    },
    "#W5502159": {
      order_id: "#W5502159",
      user_id: "amelia_moore_7658",
      address: {
        address1: "782 Spruce Street",
        address2: "Suite 227",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75281"
      },
      items: [
        {
          name: "LED Light Bulb",
          product_id: "2696197613",
          item_id: "5570660360",
          price: 51.54,
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "none"
          }
        },
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "6254646215",
          price: 248.85,
          options: {
            "skin tone": "dark",
            "kit size": "basic",
            brand: "Brand B"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["603709008196"],
          item_ids: ["5570660360", "6254646215"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 300.39,
          payment_method_id: "gift_card_3785349"
        }
      ]
    },
    "#W6030591": {
      order_id: "#W6030591",
      user_id: "raj_johnson_1989",
      address: {
        address1: "969 River Road",
        address2: "Suite 291",
        city: "Los Angeles",
        country: "USA",
        state: "CA",
        zip: "90888"
      },
      items: [
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "1569829406",
          price: 320.55,
          options: {
            resolution: "1080p",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["920345395432"],
          item_ids: ["1569829406"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 320.55,
          payment_method_id: "paypal_2183164"
        },
        {
          transaction_type: "refund",
          amount: 320.55,
          payment_method_id: "paypal_2183164"
        }
      ]
    },
    "#W5616509": {
      order_id: "#W5616509",
      user_id: "juan_jackson_6087",
      address: {
        address1: "540 Hickory Lane",
        address2: "Suite 190",
        city: "San Jose",
        country: "USA",
        state: "CA",
        zip: "95170"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9370300555",
          price: 45.9,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "expert"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["426361192509"],
          item_ids: ["9370300555"]
        }
      ],
      status: "cancelled",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 45.9,
          payment_method_id: "credit_card_1367142"
        },
        {
          transaction_type: "refund",
          amount: 45.9,
          payment_method_id: "credit_card_1367142"
        }
      ]
    },
    "#W6874763": {
      order_id: "#W6874763",
      user_id: "sofia_li_3261",
      address: {
        address1: "130 Hickory Lane",
        address2: "Suite 869",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10199"
      },
      items: [
        {
          name: "E-Reader",
          product_id: "3801771308",
          item_id: "9494281769",
          price: 252.06,
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "7528037711",
          price: 157.86,
          options: {
            size: "XL",
            color: "navy",
            zipper: "full"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "6700049080",
          price: 466.75,
          options: {
            resolution: "4K",
            waterproof: "yes",
            color: "black"
          }
        },
        {
          name: "Digital Camera",
          product_id: "8940227892",
          item_id: "7583936705",
          price: 3101.43,
          options: {
            resolution: "20MP",
            zoom: "10x",
            storage: "CF card"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "9385662952",
          price: 159.92,
          options: {
            size: "L",
            color: "black",
            zipper: "full"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["342513139974"],
          item_ids: [
            "9494281769",
            "7528037711",
            "6700049080",
            "7583936705",
            "9385662952"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4138.02,
          payment_method_id: "credit_card_4046723"
        }
      ]
    },
    "#W6131421": {
      order_id: "#W6131421",
      user_id: "anya_patel_3710",
      address: {
        address1: "374 Willow Lane",
        address2: "Suite 314",
        city: "Houston",
        country: "USA",
        state: "TX",
        zip: "77256"
      },
      items: [
        {
          name: "Makeup Kit",
          product_id: "5149340237",
          item_id: "6509212169",
          price: 256.14,
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand A"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["455151188073"],
          item_ids: ["6509212169"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 256.14,
          payment_method_id: "credit_card_4142574"
        }
      ]
    },
    "#W1762492": {
      order_id: "#W1762492",
      user_id: "amelia_gonzalez_4098",
      address: {
        address1: "722 Sunset Drive",
        address2: "Suite 670",
        city: "Denver",
        country: "USA",
        state: "CO",
        zip: "80245"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4127323219",
          price: 251.82,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "no"
          }
        },
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "2407258246",
          price: 1822.82,
          options: {
            "strap material": "metal",
            "dial color": "white"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "5758737025",
          price: 45.09,
          options: {
            capacity: "500ml",
            material: "glass",
            color: "green"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "9791469541",
          price: 147.05,
          options: {
            size: "9",
            color: "yellow",
            material: "synthetic",
            sole: "rubber"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["692670832334"],
          item_ids: ["4127323219", "2407258246", "5758737025", "9791469541"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2266.78,
          payment_method_id: "gift_card_2611937"
        }
      ]
    },
    "#W9924897": {
      order_id: "#W9924897",
      user_id: "mei_moore_8248",
      address: {
        address1: "429 Park Avenue",
        address2: "Suite 398",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28215"
      },
      items: [
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "8593894906",
          price: 263.11,
          options: {
            compatibility: "Amazon Alexa",
            color: "white"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["582528392762"],
          item_ids: ["8593894906"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 263.11,
          payment_method_id: "credit_card_2902980"
        }
      ]
    },
    "#W4843514": {
      order_id: "#W4843514",
      user_id: "daiki_moore_2408",
      address: {
        address1: "111 Pine Lane",
        address2: "Suite 653",
        city: "Dallas",
        country: "USA",
        state: "TX",
        zip: "75338"
      },
      items: [
        {
          name: "Dumbbell Set",
          product_id: "7233192239",
          item_id: "2444431651",
          price: 534.84,
          options: {
            "weight range": "55-75 lbs",
            material: "iron",
            "set type": "fixed"
          }
        },
        {
          name: "Office Chair",
          product_id: "4794339885",
          item_id: "4274709903",
          price: 544.29,
          options: {
            material: "mesh",
            color: "red",
            armrest: "none",
            "backrest height": "standard"
          }
        },
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "6200867091",
          price: 2955.17,
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "capsule"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 4034.3,
          payment_method_id: "gift_card_7999104"
        }
      ]
    },
    "#W4466964": {
      order_id: "#W4466964",
      user_id: "juan_lopez_5820",
      address: {
        address1: "411 Park Avenue",
        address2: "Suite 987",
        city: "Phoenix",
        country: "USA",
        state: "AZ",
        zip: "85060"
      },
      items: [
        {
          name: "Espresso Machine",
          product_id: "4354588079",
          item_id: "1157853815",
          price: 3096.7,
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "capsule"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "3330317167",
          price: 137.32,
          options: {
            color: "black",
            "sensor type": "optical",
            connectivity: "wired"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 3234.02,
          payment_method_id: "paypal_6729210"
        }
      ]
    },
    "#W9833379": {
      order_id: "#W9833379",
      user_id: "aarav_thomas_2711",
      address: {
        address1: "422 Oak Street",
        address2: "Suite 149",
        city: "Jacksonville",
        country: "USA",
        state: "FL",
        zip: "32175"
      },
      items: [
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9370300555",
          price: 45.9,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "expert"
          }
        },
        {
          name: "T-Shirt",
          product_id: "9523456873",
          item_id: "8349118980",
          price: 53.43,
          options: {
            color: "blue",
            size: "S",
            material: "cotton",
            style: "v-neck"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["388793014320"],
          item_ids: ["9370300555", "8349118980"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 99.33,
          payment_method_id: "gift_card_6253568"
        }
      ]
    },
    "#W4646940": {
      order_id: "#W4646940",
      user_id: "emma_kim_1076",
      address: {
        address1: "562 Elm Avenue",
        address2: "Suite 656",
        city: "Indianapolis",
        country: "USA",
        state: "IN",
        zip: "46214"
      },
      items: [
        {
          name: "Desk Lamp",
          product_id: "6817146515",
          item_id: "6805564527",
          price: 158.41,
          options: {
            color: "black",
            brightness: "medium",
            "power source": "USB"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "7661609223",
          price: 46.51,
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "black"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9370300555",
          price: 45.9,
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "expert"
          }
        },
        {
          name: "Laptop",
          product_id: "4760268021",
          item_id: "8193934556",
          price: 2548.73,
          options: {
            "screen size": "13-inch",
            processor: "i9",
            ram: "8GB",
            storage: "1TB SSD",
            color: "space grey"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["294204750585"],
          item_ids: ["6805564527", "7661609223", "9370300555", "8193934556"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2799.55,
          payment_method_id: "gift_card_5402003"
        }
      ]
    },
    "#W5931168": {
      order_id: "#W5931168",
      user_id: "evelyn_anderson_9102",
      address: {
        address1: "268 Broadway",
        address2: "Suite 151",
        city: "Charlotte",
        country: "USA",
        state: "NC",
        zip: "28257"
      },
      items: [
        {
          name: "Yoga Mat",
          product_id: "4635925001",
          item_id: "7510236436",
          price: 105.68,
          options: {
            thickness: "6mm",
            material: "PVC",
            color: "green"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["368981580752"],
          item_ids: ["7510236436"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 105.68,
          payment_method_id: "credit_card_8033789"
        }
      ]
    },
    "#W7895761": {
      order_id: "#W7895761",
      user_id: "lucas_santos_6600",
      address: {
        address1: "943 Maple Drive",
        address2: "Suite 356",
        city: "Chicago",
        country: "USA",
        state: "IL",
        zip: "60621"
      },
      items: [
        {
          name: "Tablet",
          product_id: "8024098596",
          item_id: "4803681337",
          price: 962.34,
          options: {
            "screen size": "8-inch",
            storage: "64GB",
            color: "black"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "8725040869",
          price: 522.86,
          options: {
            resolution: "4K",
            waterproof: "no",
            color: "black"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "6439196450",
          price: 254.56,
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "60%"
          }
        },
        {
          name: "Vacuum Cleaner",
          product_id: "1762337868",
          item_id: "1345513440",
          price: 655.59,
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "cordless"
          }
        },
        {
          name: "Smart Thermostat",
          product_id: "4896585277",
          item_id: "4983901480",
          price: 262.47,
          options: {
            compatibility: "Apple HomeKit",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["840887978435"],
          item_ids: [
            "4803681337",
            "8725040869",
            "6439196450",
            "1345513440",
            "4983901480"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2657.82,
          payment_method_id: "paypal_3820631"
        }
      ]
    },
    "#W9980894": {
      order_id: "#W9980894",
      user_id: "anya_taylor_1082",
      address: {
        address1: "223 Willow Lane",
        address2: "Suite 676",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10006"
      },
      items: [
        {
          name: "Bookshelf",
          product_id: "8600330539",
          item_id: "8649999816",
          price: 540.49,
          options: {
            material: "glass",
            color: "brown",
            height: "4 ft"
          }
        },
        {
          name: "Perfume",
          product_id: "6858788497",
          item_id: "1325156478",
          price: 298.52,
          options: {
            "scent family": "oriental",
            size: "30ml",
            gender: "men"
          }
        },
        {
          name: "Pet Bed",
          product_id: "2747247837",
          item_id: "7381052709",
          price: 193.22,
          options: {
            size: "large",
            material: "memory foam",
            color: "brown"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["605417753322"],
          item_ids: ["8649999816", "1325156478", "7381052709"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1032.23,
          payment_method_id: "gift_card_7296062"
        }
      ]
    },
    "#W9722559": {
      order_id: "#W9722559",
      user_id: "james_kim_7213",
      address: {
        address1: "579 Highland Drive",
        address2: "Suite 492",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92199"
      },
      items: [
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "8827799340",
          price: 106.44,
          options: {
            capacity: "5000mAh",
            output: "Wireless",
            color: "black"
          }
        },
        {
          name: "Luggage Set",
          product_id: "5426915165",
          item_id: "8964750292",
          price: 532.58,
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "hardshell"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "4728397765",
          price: 149.48,
          options: {
            size: "M",
            color: "black",
            zipper: "full"
          }
        },
        {
          name: "Running Shoes",
          product_id: "6938111410",
          item_id: "4107812777",
          price: 155.33,
          options: {
            size: "9",
            color: "black",
            material: "synthetic",
            sole: "rubber"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 943.83,
          payment_method_id: "paypal_8963303"
        }
      ]
    },
    "#W8042635": {
      order_id: "#W8042635",
      user_id: "evelyn_wilson_8460",
      address: {
        address1: "664 Oak Street",
        address2: "Suite 956",
        city: "Seattle",
        country: "USA",
        state: "WA",
        zip: "98148"
      },
      items: [
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "2407258246",
          price: 1822.82,
          options: {
            "strap material": "metal",
            "dial color": "white"
          }
        },
        {
          name: "Indoor Security Camera",
          product_id: "2985987096",
          item_id: "3909704820",
          price: 308.38,
          options: {
            resolution: "4K",
            "field of view": "110 degrees",
            connectivity: "Ethernet"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "9237024510",
          price: 53.53,
          options: {
            pieces: "500",
            theme: "animals",
            "difficulty level": "expert"
          }
        },
        {
          name: "Jigsaw Puzzle",
          product_id: "1808611083",
          item_id: "5645314103",
          price: 46.19,
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "intermediate"
          }
        },
        {
          name: "Fleece Jacket",
          product_id: "8560156827",
          item_id: "7528037711",
          price: 157.86,
          options: {
            size: "XL",
            color: "navy",
            zipper: "full"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["668382776307"],
          item_ids: [
            "2407258246",
            "3909704820",
            "9237024510",
            "5645314103",
            "7528037711"
          ]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2388.78,
          payment_method_id: "gift_card_8931217"
        }
      ]
    },
    "#W5256976": {
      order_id: "#W5256976",
      user_id: "fatima_nguyen_7539",
      address: {
        address1: "592 Broadway",
        address2: "Suite 330",
        city: "Columbus",
        country: "USA",
        state: "OH",
        zip: "43211"
      },
      items: [
        {
          name: "Hiking Boots",
          product_id: "7363354090",
          item_id: "4127323219",
          price: 251.82,
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "no"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["200537866304"],
          item_ids: ["4127323219"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 251.82,
          payment_method_id: "paypal_2613218"
        }
      ]
    },
    "#W7898533": {
      order_id: "#W7898533",
      user_id: "amelia_nguyen_7748",
      address: {
        address1: "874 River Road",
        address2: "Suite 727",
        city: "Fort Worth",
        country: "USA",
        state: "TX",
        zip: "76124"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "1631806422",
          price: 339.85,
          options: {
            color: "black",
            "band material": "metal",
            display: "AMOLED"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["492296508539"],
          item_ids: ["1631806422"]
        }
      ],
      status: "delivered",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 339.85,
          payment_method_id: "paypal_3393717"
        }
      ]
    },
    "#W7870498": {
      order_id: "#W7870498",
      user_id: "lei_gonzalez_5407",
      address: {
        address1: "767 Park Avenue",
        address2: "Suite 594",
        city: "San Diego",
        country: "USA",
        state: "CA",
        zip: "92105"
      },
      items: [
        {
          name: "Wristwatch",
          product_id: "6066914160",
          item_id: "1994478369",
          price: 2025.51,
          options: {
            "strap material": "silicone",
            "dial color": "black"
          }
        },
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "6342039236",
          price: 244.91,
          options: {
            "switch type": "clicky",
            backlight: "white",
            size: "full size"
          }
        },
        {
          name: "Water Bottle",
          product_id: "8310926033",
          item_id: "8538875209",
          price: 45.13,
          options: {
            capacity: "500ml",
            material: "glass",
            color: "black"
          }
        }
      ],
      fulfillments: [
        {
          tracking_id: ["773631111134"],
          item_ids: ["1994478369", "6342039236", "8538875209"]
        }
      ],
      status: "processed",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 2315.55,
          payment_method_id: "gift_card_4411177"
        }
      ]
    },
    "#W9892465": {
      order_id: "#W9892465",
      user_id: "ava_nguyen_6646",
      address: {
        address1: "238 Oak Street",
        address2: "Suite 636",
        city: "San Francisco",
        country: "USA",
        state: "CA",
        zip: "94128"
      },
      items: [
        {
          name: "Smart Watch",
          product_id: "6945232052",
          item_id: "9811090008",
          price: 370.38,
          options: {
            color: "silver",
            "band material": "leather",
            display: "LCD"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 370.38,
          payment_method_id: "gift_card_1994993"
        }
      ]
    },
    "#W6309286": {
      order_id: "#W6309286",
      user_id: "anya_ahmed_2271",
      address: {
        address1: "892 Lakeview Drive",
        address2: "Suite 301",
        city: "New York",
        country: "USA",
        state: "NY",
        zip: "10133"
      },
      items: [
        {
          name: "Mechanical Keyboard",
          product_id: "1656367028",
          item_id: "2299424241",
          price: 237.48,
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "80%"
          }
        },
        {
          name: "Action Camera",
          product_id: "3377618313",
          item_id: "1586641416",
          price: 497.39,
          options: {
            resolution: "5K",
            waterproof: "yes",
            color: "silver"
          }
        },
        {
          name: "Cycling Helmet",
          product_id: "7765186836",
          item_id: "7811981098",
          price: 213.86,
          options: {
            size: "S",
            color: "white",
            ventilation: "medium"
          }
        },
        {
          name: "Backpack",
          product_id: "2524789262",
          item_id: "8030558068",
          price: 186.78,
          options: {
            color: "black",
            size: "medium",
            material: "nylon",
            compartment: "hydration"
          }
        },
        {
          name: "Gaming Mouse",
          product_id: "5713490933",
          item_id: "2880340443",
          price: 137.22,
          options: {
            color: "white",
            "sensor type": "optical",
            connectivity: "wired"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 1272.73,
          payment_method_id: "paypal_7881036"
        }
      ]
    },
    "#W5765741": {
      order_id: "#W5765741",
      user_id: "sofia_kovacs_7075",
      address: {
        address1: "546 Lakeview Drive",
        address2: "Suite 491",
        city: "Philadelphia",
        country: "USA",
        state: "PA",
        zip: "19049"
      },
      items: [
        {
          name: "Electric Toothbrush",
          product_id: "7352963235",
          item_id: "8798690242",
          price: 208.07,
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "AA batteries"
          }
        },
        {
          name: "Portable Charger",
          product_id: "6942297802",
          item_id: "7903094618",
          price: 90.32,
          options: {
            capacity: "5000mAh",
            output: "USB-A",
            color: "white"
          }
        }
      ],
      fulfillments: [],
      status: "pending",
      payment_history: [
        {
          transaction_type: "payment",
          amount: 298.39,
          payment_method_id: "paypal_6840891"
        }
      ]
    }
  };
});

// tau-bench/retail/data/products.json
var require_products = __commonJS((exports, module) => {
  module.exports = {
    "9523456873": {
      name: "T-Shirt",
      product_id: "9523456873",
      variants: {
        "9612497925": {
          item_id: "9612497925",
          options: {
            color: "blue",
            size: "M",
            material: "cotton",
            style: "crew neck"
          },
          available: true,
          price: 50.88
        },
        "8124970213": {
          item_id: "8124970213",
          options: {
            color: "purple",
            size: "XL",
            material: "cotton",
            style: "crew neck"
          },
          available: true,
          price: 49.67
        },
        "9354168549": {
          item_id: "9354168549",
          options: {
            color: "red",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          },
          available: true,
          price: 46.85
        },
        "5253880258": {
          item_id: "5253880258",
          options: {
            color: "black",
            size: "XXL",
            material: "polyester",
            style: "v-neck"
          },
          available: true,
          price: 49.52
        },
        "1176194968": {
          item_id: "1176194968",
          options: {
            color: "black",
            size: "S",
            material: "polyester",
            style: "crew neck"
          },
          available: true,
          price: 52.88
        },
        "9647292434": {
          item_id: "9647292434",
          options: {
            color: "purple",
            size: "S",
            material: "polyester",
            style: "v-neck"
          },
          available: true,
          price: 53.48
        },
        "8349118980": {
          item_id: "8349118980",
          options: {
            color: "blue",
            size: "S",
            material: "cotton",
            style: "v-neck"
          },
          available: true,
          price: 53.43
        },
        "5047954489": {
          item_id: "5047954489",
          options: {
            color: "blue",
            size: "S",
            material: "polyester",
            style: "v-neck"
          },
          available: false,
          price: 54.84
        },
        "3799046073": {
          item_id: "3799046073",
          options: {
            color: "black",
            size: "XXL",
            material: "cotton",
            style: "crew neck"
          },
          available: true,
          price: 53.27
        },
        "3234800602": {
          item_id: "3234800602",
          options: {
            color: "red",
            size: "L",
            material: "cotton",
            style: "v-neck"
          },
          available: true,
          price: 46.66
        },
        "3542102174": {
          item_id: "3542102174",
          options: {
            color: "red",
            size: "S",
            material: "cotton",
            style: "crew neck"
          },
          available: false,
          price: 47.25
        },
        "2060066974": {
          item_id: "2060066974",
          options: {
            color: "black",
            size: "XL",
            material: "cotton",
            style: "crew neck"
          },
          available: true,
          price: 51.05
        }
      }
    },
    "4760268021": {
      name: "Laptop",
      product_id: "4760268021",
      variants: {
        "8997785118": {
          item_id: "8997785118",
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "space grey"
          },
          available: false,
          price: 2674.4
        },
        "2216662955": {
          item_id: "2216662955",
          options: {
            "screen size": "15-inch",
            processor: "i5",
            ram: "32GB",
            storage: "256GB SSD",
            color: "space grey"
          },
          available: true,
          price: 2520.52
        },
        "2768401027": {
          item_id: "2768401027",
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "256GB SSD",
            color: "silver"
          },
          available: false,
          price: 2346.49
        },
        "1684786391": {
          item_id: "1684786391",
          options: {
            "screen size": "17-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "black"
          },
          available: true,
          price: 2508.06
        },
        "3778566150": {
          item_id: "3778566150",
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "32GB",
            storage: "256GB SSD",
            color: "silver"
          },
          available: false,
          price: 2372.97
        },
        "8193934556": {
          item_id: "8193934556",
          options: {
            "screen size": "13-inch",
            processor: "i9",
            ram: "8GB",
            storage: "1TB SSD",
            color: "space grey"
          },
          available: false,
          price: 2548.73
        },
        "2913673670": {
          item_id: "2913673670",
          options: {
            "screen size": "15-inch",
            processor: "i9",
            ram: "32GB",
            storage: "512GB SSD",
            color: "black"
          },
          available: true,
          price: 2701.89
        },
        "3478699712": {
          item_id: "3478699712",
          options: {
            "screen size": "15-inch",
            processor: "i5",
            ram: "16GB",
            storage: "512GB SSD",
            color: "space grey"
          },
          available: false,
          price: 2291.87
        },
        "6056040996": {
          item_id: "6056040996",
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "16GB",
            storage: "512GB SSD",
            color: "space grey"
          },
          available: true,
          price: 2609.37
        },
        "6017636844": {
          item_id: "6017636844",
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "32GB",
            storage: "1TB SSD",
            color: "space grey"
          },
          available: true,
          price: 2292.37
        },
        "1657832319": {
          item_id: "1657832319",
          options: {
            "screen size": "13-inch",
            processor: "i7",
            ram: "32GB",
            storage: "512GB SSD",
            color: "black"
          },
          available: true,
          price: 2729.32
        },
        "5052031638": {
          item_id: "5052031638",
          options: {
            "screen size": "13-inch",
            processor: "i5",
            ram: "16GB",
            storage: "1TB SSD",
            color: "silver"
          },
          available: true,
          price: 2621.77
        },
        "3265035808": {
          item_id: "3265035808",
          options: {
            "screen size": "17-inch",
            processor: "i9",
            ram: "8GB",
            storage: "256GB SSD",
            color: "silver"
          },
          available: true,
          price: 2530.72
        },
        "3334537816": {
          item_id: "3334537816",
          options: {
            "screen size": "17-inch",
            processor: "i5",
            ram: "8GB",
            storage: "1TB SSD",
            color: "space grey"
          },
          available: false,
          price: 2749.56
        },
        "9844888101": {
          item_id: "9844888101",
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "8GB",
            storage: "1TB SSD",
            color: "black"
          },
          available: true,
          price: 2459.74
        },
        "4241599783": {
          item_id: "4241599783",
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "16GB",
            storage: "1TB SSD",
            color: "black"
          },
          available: false,
          price: 2324.61
        },
        "2611676054": {
          item_id: "2611676054",
          options: {
            "screen size": "15-inch",
            processor: "i7",
            ram: "16GB",
            storage: "256GB SSD",
            color: "silver"
          },
          available: false,
          price: 2743.08
        }
      }
    },
    "6938111410": {
      name: "Running Shoes",
      product_id: "6938111410",
      variants: {
        "4153505238": {
          item_id: "4153505238",
          options: {
            size: "8",
            color: "red",
            material: "leather",
            sole: "EVA"
          },
          available: true,
          price: 158.67
        },
        "1775591963": {
          item_id: "1775591963",
          options: {
            size: "10",
            color: "white",
            material: "leather",
            sole: "EVA"
          },
          available: true,
          price: 154.75
        },
        "9635758562": {
          item_id: "9635758562",
          options: {
            size: "9",
            color: "white",
            material: "mesh",
            sole: "rubber"
          },
          available: true,
          price: 148.95
        },
        "9791469541": {
          item_id: "9791469541",
          options: {
            size: "9",
            color: "yellow",
            material: "synthetic",
            sole: "rubber"
          },
          available: true,
          price: 147.05
        },
        "4107812777": {
          item_id: "4107812777",
          options: {
            size: "9",
            color: "black",
            material: "synthetic",
            sole: "rubber"
          },
          available: true,
          price: 155.33
        }
      }
    },
    "1801728040": {
      name: "Smartphone",
      product_id: "1801728040",
      variants: {
        "1631373418": {
          item_id: "1631373418",
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "6GB",
            "screen size": "6.1-inch"
          },
          available: false,
          price: 1291.21
        },
        "5490694069": {
          item_id: "5490694069",
          options: {
            color: "black",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "5.8-inch"
          },
          available: false,
          price: 1213.51
        },
        "3187628796": {
          item_id: "3187628796",
          options: {
            color: "rose gold",
            storage: "128GB",
            RAM: "8GB",
            "screen size": "6.1-inch"
          },
          available: false,
          price: 1205.66
        },
        "5339029584": {
          item_id: "5339029584",
          options: {
            color: "black",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "6.5-inch"
          },
          available: true,
          price: 1128.99
        },
        "3952176596": {
          item_id: "3952176596",
          options: {
            color: "rose gold",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "6.1-inch"
          },
          available: false,
          price: 1199.77
        },
        "9929635042": {
          item_id: "9929635042",
          options: {
            color: "gold",
            storage: "128GB",
            RAM: "4GB",
            "screen size": "5.8-inch"
          },
          available: false,
          price: 1261.14
        },
        "1507389580": {
          item_id: "1507389580",
          options: {
            color: "black",
            storage: "128GB",
            RAM: "8GB",
            "screen size": "5.8-inch"
          },
          available: true,
          price: 1157.86
        },
        "5758570643": {
          item_id: "5758570643",
          options: {
            color: "rose gold",
            storage: "256GB",
            RAM: "4GB",
            "screen size": "6.5-inch"
          },
          available: false,
          price: 1233.68
        },
        "5311660992": {
          item_id: "5311660992",
          options: {
            color: "rose gold",
            storage: "64GB",
            RAM: "8GB",
            "screen size": "5.8-inch"
          },
          available: false,
          price: 1161.04
        }
      }
    },
    "2524789262": {
      name: "Backpack",
      product_id: "2524789262",
      variants: {
        "3928046918": {
          item_id: "3928046918",
          options: {
            color: "black",
            size: "large",
            material: "nylon",
            compartment: "camera"
          },
          available: true,
          price: 198
        },
        "7251508981": {
          item_id: "7251508981",
          options: {
            color: "green",
            size: "small",
            material: "leather",
            compartment: "camera"
          },
          available: true,
          price: 212.04
        },
        "5726859009": {
          item_id: "5726859009",
          options: {
            color: "grey",
            size: "large",
            material: "nylon",
            compartment: "hydration"
          },
          available: true,
          price: 200.48
        },
        "3557711149": {
          item_id: "3557711149",
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "laptop"
          },
          available: true,
          price: 205.35
        },
        "6309044598": {
          item_id: "6309044598",
          options: {
            color: "grey",
            size: "large",
            material: "polyester",
            compartment: "hydration"
          },
          available: true,
          price: 218.59
        },
        "8030558068": {
          item_id: "8030558068",
          options: {
            color: "black",
            size: "medium",
            material: "nylon",
            compartment: "hydration"
          },
          available: false,
          price: 186.78
        },
        "8054888773": {
          item_id: "8054888773",
          options: {
            color: "grey",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          },
          available: true,
          price: 206.03
        },
        "7824298782": {
          item_id: "7824298782",
          options: {
            color: "black",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          },
          available: false,
          price: 200.38
        },
        "2492465580": {
          item_id: "2492465580",
          options: {
            color: "navy",
            size: "small",
            material: "nylon",
            compartment: "laptop"
          },
          available: false,
          price: 201.95
        },
        "9851293632": {
          item_id: "9851293632",
          options: {
            color: "green",
            size: "small",
            material: "polyester",
            compartment: "camera"
          },
          available: true,
          price: 193.38
        },
        "4947717507": {
          item_id: "4947717507",
          options: {
            color: "green",
            size: "medium",
            material: "leather",
            compartment: "camera"
          },
          available: false,
          price: 218.04
        },
        "6906307980": {
          item_id: "6906307980",
          options: {
            color: "black",
            size: "large",
            material: "polyester",
            compartment: "laptop"
          },
          available: true,
          price: 202.39
        },
        "5917587651": {
          item_id: "5917587651",
          options: {
            color: "grey",
            size: "medium",
            material: "polyester",
            compartment: "laptop"
          },
          available: true,
          price: 212.79
        },
        "8084436579": {
          item_id: "8084436579",
          options: {
            color: "navy",
            size: "large",
            material: "polyester",
            compartment: "laptop"
          },
          available: true,
          price: 219.43
        }
      }
    },
    "7996920482": {
      name: "Coffee Maker",
      product_id: "7996920482",
      variants: {
        "3020722515": {
          item_id: "3020722515",
          options: {
            color: "black",
            capacity: "1 cup",
            type: "french press",
            features: "auto shutoff"
          },
          available: true,
          price: 238.64
        },
        "2115393569": {
          item_id: "2115393569",
          options: {
            color: "black",
            capacity: "1 cup",
            type: "drip",
            features: "timer"
          },
          available: true,
          price: 270.91
        },
        "3039787582": {
          item_id: "3039787582",
          options: {
            color: "stainless steel",
            capacity: "4 cups",
            type: "drip",
            features: "auto shutoff"
          },
          available: true,
          price: 256.94
        },
        "9862136885": {
          item_id: "9862136885",
          options: {
            color: "black",
            capacity: "2 cups",
            type: "espresso",
            features: "timer"
          },
          available: true,
          price: 258.32
        },
        "3062461148": {
          item_id: "3062461148",
          options: {
            color: "stainless steel",
            capacity: "2 cups",
            type: "french press",
            features: "auto shutoff"
          },
          available: false,
          price: 247.88
        },
        "5952720925": {
          item_id: "5952720925",
          options: {
            color: "black",
            capacity: "4 cups",
            type: "espresso",
            features: "timer"
          },
          available: true,
          price: 260.19
        },
        "1323134954": {
          item_id: "1323134954",
          options: {
            color: "stainless steel",
            capacity: "4 cups",
            type: "drip",
            features: "built-in grinder"
          },
          available: true,
          price: 236.95
        },
        "7211586944": {
          item_id: "7211586944",
          options: {
            color: "black",
            capacity: "8 cups",
            type: "espresso",
            features: "built-in grinder"
          },
          available: true,
          price: 272.71
        },
        "1349017811": {
          item_id: "1349017811",
          options: {
            color: "white",
            capacity: "4 cups",
            type: "drip",
            features: "auto shutoff"
          },
          available: true,
          price: 226.05
        },
        "4821837102": {
          item_id: "4821837102",
          options: {
            color: "white",
            capacity: "4 cups",
            type: "french press",
            features: "built-in grinder"
          },
          available: false,
          price: 243.59
        }
      }
    },
    "8310926033": {
      name: "Water Bottle",
      product_id: "8310926033",
      variants: {
        "1434748144": {
          item_id: "1434748144",
          options: {
            capacity: "1000ml",
            material: "glass",
            color: "red"
          },
          available: false,
          price: 49.72
        },
        "4579334072": {
          item_id: "4579334072",
          options: {
            capacity: "750ml",
            material: "glass",
            color: "black"
          },
          available: true,
          price: 54.85
        },
        "6469567736": {
          item_id: "6469567736",
          options: {
            capacity: "1000ml",
            material: "glass",
            color: "blue"
          },
          available: false,
          price: 47.84
        },
        "3453331371": {
          item_id: "3453331371",
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "black"
          },
          available: true,
          price: 52.79
        },
        "2439754078": {
          item_id: "2439754078",
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "red"
          },
          available: true,
          price: 49.51
        },
        "7843064651": {
          item_id: "7843064651",
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "blue"
          },
          available: true,
          price: 50.14
        },
        "7918497119": {
          item_id: "7918497119",
          options: {
            capacity: "500ml",
            material: "glass",
            color: "blue"
          },
          available: false,
          price: 54.51
        },
        "5758737025": {
          item_id: "5758737025",
          options: {
            capacity: "500ml",
            material: "glass",
            color: "green"
          },
          available: true,
          price: 45.09
        },
        "7533802601": {
          item_id: "7533802601",
          options: {
            capacity: "500ml",
            material: "stainless steel",
            color: "green"
          },
          available: true,
          price: 48.59
        },
        "3229676465": {
          item_id: "3229676465",
          options: {
            capacity: "500ml",
            material: "plastic",
            color: "black"
          },
          available: true,
          price: 51.94
        },
        "2366567022": {
          item_id: "2366567022",
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "blue"
          },
          available: false,
          price: 54.04
        },
        "6974536207": {
          item_id: "6974536207",
          options: {
            capacity: "750ml",
            material: "plastic",
            color: "blue"
          },
          available: true,
          price: 49.3
        },
        "6777246137": {
          item_id: "6777246137",
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "red"
          },
          available: true,
          price: 47.76
        },
        "8538875209": {
          item_id: "8538875209",
          options: {
            capacity: "500ml",
            material: "glass",
            color: "black"
          },
          available: true,
          price: 45.13
        },
        "9127591879": {
          item_id: "9127591879",
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "black"
          },
          available: false,
          price: 48.47
        },
        "7661609223": {
          item_id: "7661609223",
          options: {
            capacity: "1000ml",
            material: "stainless steel",
            color: "black"
          },
          available: true,
          price: 46.51
        },
        "4947921075": {
          item_id: "4947921075",
          options: {
            capacity: "750ml",
            material: "stainless steel",
            color: "green"
          },
          available: false,
          price: 49.57
        },
        "7199146548": {
          item_id: "7199146548",
          options: {
            capacity: "750ml",
            material: "plastic",
            color: "black"
          },
          available: true,
          price: 48.02
        }
      }
    },
    "6817146515": {
      name: "Desk Lamp",
      product_id: "6817146515",
      variants: {
        "9083642334": {
          item_id: "9083642334",
          options: {
            color: "white",
            brightness: "high",
            "power source": "USB"
          },
          available: true,
          price: 164.28
        },
        "4385534692": {
          item_id: "4385534692",
          options: {
            color: "white",
            brightness: "high",
            "power source": "AC adapter"
          },
          available: false,
          price: 138.07
        },
        "7624783998": {
          item_id: "7624783998",
          options: {
            color: "black",
            brightness: "high",
            "power source": "AC adapter"
          },
          available: true,
          price: 154.17
        },
        "1270145486": {
          item_id: "1270145486",
          options: {
            color: "white",
            brightness: "high",
            "power source": "battery"
          },
          available: false,
          price: 144.07
        },
        "5320792178": {
          item_id: "5320792178",
          options: {
            color: "black",
            brightness: "medium",
            "power source": "AC adapter"
          },
          available: true,
          price: 135.24
        },
        "5370728469": {
          item_id: "5370728469",
          options: {
            color: "silver",
            brightness: "medium",
            "power source": "USB"
          },
          available: true,
          price: 164.97
        },
        "6805564527": {
          item_id: "6805564527",
          options: {
            color: "black",
            brightness: "medium",
            "power source": "USB"
          },
          available: true,
          price: 158.41
        },
        "1569765161": {
          item_id: "1569765161",
          options: {
            color: "silver",
            brightness: "low",
            "power source": "AC adapter"
          },
          available: true,
          price: 143.02
        },
        "7453605304": {
          item_id: "7453605304",
          options: {
            color: "silver",
            brightness: "low",
            "power source": "battery"
          },
          available: true,
          price: 150.01
        },
        "9190635437": {
          item_id: "9190635437",
          options: {
            color: "black",
            brightness: "low",
            "power source": "USB"
          },
          available: true,
          price: 153.23
        },
        "4447749792": {
          item_id: "4447749792",
          options: {
            color: "white",
            brightness: "medium",
            "power source": "AC adapter"
          },
          available: false,
          price: 139.8
        },
        "8384507844": {
          item_id: "8384507844",
          options: {
            color: "white",
            brightness: "medium",
            "power source": "USB"
          },
          available: false,
          price: 137.94
        }
      }
    },
    "2892623495": {
      name: "Notebook",
      product_id: "2892623495",
      variants: {
        "1199058591": {
          item_id: "1199058591",
          options: { size: "A4", "cover type": "hard cover" },
          available: true,
          price: 32.29
        },
        "6574183535": {
          item_id: "6574183535",
          options: { size: "A6", "cover type": "hard cover" },
          available: false,
          price: 28.14
        },
        "9421195098": {
          item_id: "9421195098",
          options: { size: "A6", "cover type": "soft cover" },
          available: false,
          price: 32.37
        },
        "9799386954": {
          item_id: "9799386954",
          options: { size: "A5", "cover type": "soft cover" },
          available: true,
          price: 28.59
        },
        "7579176349": {
          item_id: "7579176349",
          options: { size: "A4", "cover type": "soft cover" },
          available: true,
          price: 29.28
        }
      }
    },
    "7314138884": {
      name: "Sunglasses",
      product_id: "7314138884",
      variants: {
        "2177260429": {
          item_id: "2177260429",
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "polarized",
            "frame material": "metal"
          },
          available: false,
          price: 296.47
        },
        "4548300368": {
          item_id: "4548300368",
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "polarized",
            "frame material": "plastic"
          },
          available: true,
          price: 287.79
        },
        "4358482460": {
          item_id: "4358482460",
          options: {
            "frame color": "black",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          },
          available: true,
          price: 290.94
        },
        "2198125883": {
          item_id: "2198125883",
          options: {
            "frame color": "silver",
            "lens color": "black",
            "lens type": "polarized",
            "frame material": "metal"
          },
          available: true,
          price: 296.16
        },
        "9045948550": {
          item_id: "9045948550",
          options: {
            "frame color": "black",
            "lens color": "blue",
            "lens type": "polarized",
            "frame material": "metal"
          },
          available: false,
          price: 279.78
        },
        "4245201809": {
          item_id: "4245201809",
          options: {
            "frame color": "black",
            "lens color": "green",
            "lens type": "non-polarized",
            "frame material": "metal"
          },
          available: true,
          price: 281.48
        },
        "9672174103": {
          item_id: "9672174103",
          options: {
            "frame color": "brown",
            "lens color": "brown",
            "lens type": "polarized",
            "frame material": "plastic"
          },
          available: true,
          price: 281.98
        },
        "4329558751": {
          item_id: "4329558751",
          options: {
            "frame color": "silver",
            "lens color": "blue",
            "lens type": "non-polarized",
            "frame material": "plastic"
          },
          available: true,
          price: 297.33
        }
      }
    },
    "6066914160": {
      name: "Wristwatch",
      product_id: "6066914160",
      variants: {
        "4510078629": {
          item_id: "4510078629",
          options: { "strap material": "metal", "dial color": "black" },
          available: true,
          price: 2127.62
        },
        "2226219750": {
          item_id: "2226219750",
          options: { "strap material": "silicone", "dial color": "white" },
          available: true,
          price: 2009.03
        },
        "9949163720": {
          item_id: "9949163720",
          options: { "strap material": "leather", "dial color": "black" },
          available: true,
          price: 1908.15
        },
        "8886009523": {
          item_id: "8886009523",
          options: { "strap material": "silicone", "dial color": "blue" },
          available: true,
          price: 1944.02
        },
        "1355937109": {
          item_id: "1355937109",
          options: { "strap material": "leather", "dial color": "white" },
          available: true,
          price: 1985.3
        },
        "1994478369": {
          item_id: "1994478369",
          options: { "strap material": "silicone", "dial color": "black" },
          available: true,
          price: 2025.51
        },
        "2407258246": {
          item_id: "2407258246",
          options: { "strap material": "metal", "dial color": "white" },
          available: true,
          price: 1822.82
        },
        "9112290483": {
          item_id: "9112290483",
          options: { "strap material": "metal", "dial color": "blue" },
          available: false,
          price: 1925.16
        }
      }
    },
    "7352963235": {
      name: "Electric Toothbrush",
      product_id: "7352963235",
      variants: {
        "2645006275": {
          item_id: "2645006275",
          options: {
            color: "white",
            "speed settings": "high",
            "battery type": "AA batteries"
          },
          available: true,
          price: 183.11
        },
        "1583904702": {
          item_id: "1583904702",
          options: {
            color: "blue",
            "speed settings": "low",
            "battery type": "AA batteries"
          },
          available: true,
          price: 195.84
        },
        "6555827912": {
          item_id: "6555827912",
          options: {
            color: "black",
            "speed settings": "low",
            "battery type": "AA batteries"
          },
          available: false,
          price: 199.42
        },
        "8098621301": {
          item_id: "8098621301",
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "rechargeable"
          },
          available: true,
          price: 192.15
        },
        "7144237253": {
          item_id: "7144237253",
          options: {
            color: "blue",
            "speed settings": "low",
            "battery type": "rechargeable"
          },
          available: false,
          price: 210.53
        },
        "3320557165": {
          item_id: "3320557165",
          options: {
            color: "blue",
            "speed settings": "high",
            "battery type": "AA batteries"
          },
          available: false,
          price: 188.67
        },
        "8798690242": {
          item_id: "8798690242",
          options: {
            color: "black",
            "speed settings": "high",
            "battery type": "AA batteries"
          },
          available: true,
          price: 208.07
        },
        "6164262152": {
          item_id: "6164262152",
          options: {
            color: "white",
            "speed settings": "low",
            "battery type": "rechargeable"
          },
          available: true,
          price: 211.11
        }
      }
    },
    "4635925001": {
      name: "Yoga Mat",
      product_id: "4635925001",
      variants: {
        "5586947715": {
          item_id: "5586947715",
          options: { thickness: "4mm", material: "PVC", color: "blue" },
          available: true,
          price: 92.53
        },
        "7510236436": {
          item_id: "7510236436",
          options: { thickness: "6mm", material: "PVC", color: "green" },
          available: true,
          price: 105.68
        },
        "1794273251": {
          item_id: "1794273251",
          options: { thickness: "5mm", material: "TPE", color: "pink" },
          available: true,
          price: 103.84
        },
        "6195938807": {
          item_id: "6195938807",
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "green"
          },
          available: false,
          price: 103.98
        },
        "2733768059": {
          item_id: "2733768059",
          options: {
            thickness: "6mm",
            material: "natural rubber",
            color: "pink"
          },
          available: false,
          price: 94.38
        }
      }
    },
    "4768869376": {
      name: "Bluetooth Speaker",
      product_id: "4768869376",
      variants: {
        "5967152432": {
          item_id: "5967152432",
          options: {
            color: "green",
            "battery life": "10 hours",
            "water resistance": "yes"
          },
          available: false,
          price: 292.71
        },
        "9179378709": {
          item_id: "9179378709",
          options: {
            color: "green",
            "battery life": "10 hours",
            "water resistance": "no"
          },
          available: false,
          price: 326.59
        },
        "9440686670": {
          item_id: "9440686670",
          options: {
            color: "green",
            "battery life": "20 hours",
            "water resistance": "no"
          },
          available: true,
          price: 298.91
        },
        "4716977452": {
          item_id: "4716977452",
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "yes"
          },
          available: true,
          price: 289.69
        },
        "2652637226": {
          item_id: "2652637226",
          options: {
            color: "green",
            "battery life": "20 hours",
            "water resistance": "yes"
          },
          available: false,
          price: 295.94
        },
        "5650803029": {
          item_id: "5650803029",
          options: {
            color: "black",
            "battery life": "20 hours",
            "water resistance": "no"
          },
          available: false,
          price: 324.63
        },
        "5855700373": {
          item_id: "5855700373",
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "yes"
          },
          available: false,
          price: 293.46
        },
        "7751905257": {
          item_id: "7751905257",
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "yes"
          },
          available: true,
          price: 321.18
        },
        "2635605237": {
          item_id: "2635605237",
          options: {
            color: "blue",
            "battery life": "20 hours",
            "water resistance": "no"
          },
          available: true,
          price: 271.89
        },
        "6704763132": {
          item_id: "6704763132",
          options: {
            color: "blue",
            "battery life": "10 hours",
            "water resistance": "no"
          },
          available: true,
          price: 305.45
        },
        "7597543861": {
          item_id: "7597543861",
          options: {
            color: "black",
            "battery life": "10 hours",
            "water resistance": "no"
          },
          available: false,
          price: 310.47
        },
        "7617930199": {
          item_id: "7617930199",
          options: {
            color: "red",
            "battery life": "20 hours",
            "water resistance": "yes"
          },
          available: true,
          price: 285.94
        },
        "1052700637": {
          item_id: "1052700637",
          options: {
            color: "red",
            "battery life": "20 hours",
            "water resistance": "no"
          },
          available: true,
          price: 285.81
        },
        "1689914594": {
          item_id: "1689914594",
          options: {
            color: "red",
            "battery life": "10 hours",
            "water resistance": "no"
          },
          available: true,
          price: 315.2
        },
        "3254583681": {
          item_id: "3254583681",
          options: {
            color: "blue",
            "battery life": "20 hours",
            "water resistance": "yes"
          },
          available: true,
          price: 302.67
        },
        "6455132774": {
          item_id: "6455132774",
          options: {
            color: "black",
            "battery life": "20 hours",
            "water resistance": "yes"
          },
          available: false,
          price: 273.38
        }
      }
    },
    "5713490933": {
      name: "Gaming Mouse",
      product_id: "5713490933",
      variants: {
        "8896479688": {
          item_id: "8896479688",
          options: {
            color: "white",
            "sensor type": "optical",
            connectivity: "wireless"
          },
          available: true,
          price: 143.15
        },
        "8214883393": {
          item_id: "8214883393",
          options: {
            color: "black",
            "sensor type": "laser",
            connectivity: "wireless"
          },
          available: true,
          price: 150.58
        },
        "7420906769": {
          item_id: "7420906769",
          options: {
            color: "white",
            "sensor type": "laser",
            connectivity: "wireless"
          },
          available: false,
          price: 138.47
        },
        "2193628750": {
          item_id: "2193628750",
          options: {
            color: "black",
            "sensor type": "laser",
            connectivity: "wired"
          },
          available: true,
          price: 162.15
        },
        "2880340443": {
          item_id: "2880340443",
          options: {
            color: "white",
            "sensor type": "optical",
            connectivity: "wired"
          },
          available: true,
          price: 137.22
        },
        "5019835484": {
          item_id: "5019835484",
          options: {
            color: "RGB",
            "sensor type": "laser",
            connectivity: "wired"
          },
          available: false,
          price: 138.73
        },
        "3330317167": {
          item_id: "3330317167",
          options: {
            color: "black",
            "sensor type": "optical",
            connectivity: "wired"
          },
          available: true,
          price: 137.32
        },
        "5796612084": {
          item_id: "5796612084",
          options: {
            color: "RGB",
            "sensor type": "optical",
            connectivity: "wired"
          },
          available: false,
          price: 158.89
        }
      }
    },
    "3377618313": {
      name: "Action Camera",
      product_id: "3377618313",
      variants: {
        "6700049080": {
          item_id: "6700049080",
          options: {
            resolution: "4K",
            waterproof: "yes",
            color: "black"
          },
          available: true,
          price: 466.75
        },
        "4859937227": {
          item_id: "4859937227",
          options: {
            resolution: "5K",
            waterproof: "no",
            color: "silver"
          },
          available: false,
          price: 503.58
        },
        "1586641416": {
          item_id: "1586641416",
          options: {
            resolution: "5K",
            waterproof: "yes",
            color: "silver"
          },
          available: false,
          price: 497.39
        },
        "5925362855": {
          item_id: "5925362855",
          options: {
            resolution: "1080p",
            waterproof: "yes",
            color: "black"
          },
          available: true,
          price: 503.51
        },
        "8725040869": {
          item_id: "8725040869",
          options: { resolution: "4K", waterproof: "no", color: "black" },
          available: false,
          price: 522.86
        },
        "6117189161": {
          item_id: "6117189161",
          options: {
            resolution: "4K",
            waterproof: "yes",
            color: "silver"
          },
          available: true,
          price: 481.5
        },
        "7523669277": {
          item_id: "7523669277",
          options: { resolution: "5K", waterproof: "no", color: "black" },
          available: true,
          price: 523.66
        },
        "9168994198": {
          item_id: "9168994198",
          options: {
            resolution: "1080p",
            waterproof: "no",
            color: "black"
          },
          available: false,
          price: 466.76
        },
        "1810466394": {
          item_id: "1810466394",
          options: {
            resolution: "1080p",
            waterproof: "no",
            color: "silver"
          },
          available: false,
          price: 502.28
        },
        "6571567889": {
          item_id: "6571567889",
          options: {
            resolution: "5K",
            waterproof: "yes",
            color: "black"
          },
          available: false,
          price: 507.06
        },
        "9391733462": {
          item_id: "9391733462",
          options: {
            resolution: "4K",
            waterproof: "no",
            color: "silver"
          },
          available: true,
          price: 521.07
        },
        "5436236388": {
          item_id: "5436236388",
          options: {
            resolution: "1080p",
            waterproof: "yes",
            color: "silver"
          },
          available: false,
          price: 538.6
        }
      }
    },
    "6679515468": {
      name: "Garden Hose",
      product_id: "6679515468",
      variants: {
        "5753502325": {
          item_id: "5753502325",
          options: { length: "25ft", material: "rubber", color: "green" },
          available: false,
          price: 96.35
        },
        "8249784860": {
          item_id: "8249784860",
          options: { length: "50ft", material: "vinyl", color: "green" },
          available: false,
          price: 96.42
        },
        "8481719475": {
          item_id: "8481719475",
          options: { length: "100ft", material: "latex", color: "blue" },
          available: true,
          price: 98.61
        },
        "9829827210": {
          item_id: "9829827210",
          options: { length: "25ft", material: "vinyl", color: "blue" },
          available: true,
          price: 90.43
        },
        "1518544029": {
          item_id: "1518544029",
          options: {
            length: "100ft",
            material: "rubber",
            color: "black"
          },
          available: false,
          price: 95.39
        },
        "3369928769": {
          item_id: "3369928769",
          options: { length: "25ft", material: "vinyl", color: "green" },
          available: true,
          price: 97.35
        },
        "4024196380": {
          item_id: "4024196380",
          options: { length: "50ft", material: "latex", color: "black" },
          available: true,
          price: 102.9
        },
        "4764314102": {
          item_id: "4764314102",
          options: { length: "50ft", material: "rubber", color: "green" },
          available: false,
          price: 96.51
        },
        "3230708338": {
          item_id: "3230708338",
          options: { length: "25ft", material: "latex", color: "green" },
          available: true,
          price: 99.51
        },
        "5206946487": {
          item_id: "5206946487",
          options: { length: "50ft", material: "vinyl", color: "black" },
          available: true,
          price: 95.08
        }
      }
    },
    "7363354090": {
      name: "Hiking Boots",
      product_id: "7363354090",
      variants: {
        "1615379700": {
          item_id: "1615379700",
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "yes"
          },
          available: true,
          price: 253.89
        },
        "8106223139": {
          item_id: "8106223139",
          options: { size: "9", material: "leather", waterproof: "yes" },
          available: true,
          price: 249.12
        },
        "2658930189": {
          item_id: "2658930189",
          options: {
            size: "9",
            material: "synthetic",
            waterproof: "yes"
          },
          available: false,
          price: 241.68
        },
        "3812493782": {
          item_id: "3812493782",
          options: { size: "7", material: "leather", waterproof: "yes" },
          available: true,
          price: 244.34
        },
        "2648909398": {
          item_id: "2648909398",
          options: { size: "8", material: "leather", waterproof: "yes" },
          available: false,
          price: 240.87
        },
        "4582956489": {
          item_id: "4582956489",
          options: {
            size: "12",
            material: "synthetic",
            waterproof: "no"
          },
          available: true,
          price: 241.96
        },
        "7228247242": {
          item_id: "7228247242",
          options: { size: "10", material: "leather", waterproof: "yes" },
          available: false,
          price: 251.38
        },
        "2185126308": {
          item_id: "2185126308",
          options: { size: "10", material: "leather", waterproof: "no" },
          available: false,
          price: 241.9
        },
        "6159919747": {
          item_id: "6159919747",
          options: { size: "11", material: "leather", waterproof: "yes" },
          available: true,
          price: 259.75
        },
        "1437889264": {
          item_id: "1437889264",
          options: { size: "7", material: "synthetic", waterproof: "no" },
          available: true,
          price: 258.09
        },
        "8277474082": {
          item_id: "8277474082",
          options: { size: "12", material: "leather", waterproof: "yes" },
          available: true,
          price: 236.57
        },
        "6546364613": {
          item_id: "6546364613",
          options: {
            size: "11",
            material: "synthetic",
            waterproof: "yes"
          },
          available: false,
          price: 231.43
        },
        "1262139877": {
          item_id: "1262139877",
          options: {
            size: "7",
            material: "synthetic",
            waterproof: "yes"
          },
          available: false,
          price: 239.99
        },
        "6595128475": {
          item_id: "6595128475",
          options: { size: "9", material: "synthetic", waterproof: "no" },
          available: false,
          price: 237.65
        },
        "5676696062": {
          item_id: "5676696062",
          options: { size: "11", material: "leather", waterproof: "no" },
          available: true,
          price: 245.99
        },
        "4694984344": {
          item_id: "4694984344",
          options: {
            size: "12",
            material: "synthetic",
            waterproof: "yes"
          },
          available: false,
          price: 239.78
        },
        "3613716226": {
          item_id: "3613716226",
          options: { size: "8", material: "synthetic", waterproof: "no" },
          available: true,
          price: 253.54
        },
        "8118291112": {
          item_id: "8118291112",
          options: { size: "12", material: "leather", waterproof: "no" },
          available: false,
          price: 260.56
        },
        "4127323219": {
          item_id: "4127323219",
          options: {
            size: "10",
            material: "synthetic",
            waterproof: "no"
          },
          available: false,
          price: 251.82
        }
      }
    },
    "8024098596": {
      name: "Tablet",
      product_id: "8024098596",
      variants: {
        "3788616824": {
          item_id: "3788616824",
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "black"
          },
          available: false,
          price: 951.21
        },
        "2235648106": {
          item_id: "2235648106",
          options: {
            "screen size": "10-inch",
            storage: "32GB",
            color: "black"
          },
          available: true,
          price: 1054.43
        },
        "7535423717": {
          item_id: "7535423717",
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "silver"
          },
          available: false,
          price: 904.46
        },
        "2106335193": {
          item_id: "2106335193",
          options: {
            "screen size": "10-inch",
            storage: "64GB",
            color: "silver"
          },
          available: true,
          price: 903.95
        },
        "6501071631": {
          item_id: "6501071631",
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "gold"
          },
          available: true,
          price: 1018.68
        },
        "2633090267": {
          item_id: "2633090267",
          options: {
            "screen size": "7-inch",
            storage: "64GB",
            color: "silver"
          },
          available: false,
          price: 1046.33
        },
        "4803681337": {
          item_id: "4803681337",
          options: {
            "screen size": "8-inch",
            storage: "64GB",
            color: "black"
          },
          available: false,
          price: 962.34
        },
        "6065192424": {
          item_id: "6065192424",
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "gold"
          },
          available: true,
          price: 989.7
        },
        "7187199153": {
          item_id: "7187199153",
          options: {
            "screen size": "8-inch",
            storage: "128GB",
            color: "black"
          },
          available: false,
          price: 983.62
        },
        "4913411651": {
          item_id: "4913411651",
          options: {
            "screen size": "7-inch",
            storage: "128GB",
            color: "black"
          },
          available: true,
          price: 941.03
        },
        "8551474201": {
          item_id: "8551474201",
          options: {
            "screen size": "8-inch",
            storage: "64GB",
            color: "silver"
          },
          available: false,
          price: 938.92
        },
        "4615543240": {
          item_id: "4615543240",
          options: {
            "screen size": "7-inch",
            storage: "32GB",
            color: "silver"
          },
          available: true,
          price: 1042.93
        },
        "6948061616": {
          item_id: "6948061616",
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "gold"
          },
          available: true,
          price: 950.96
        },
        "4131464125": {
          item_id: "4131464125",
          options: {
            "screen size": "10-inch",
            storage: "128GB",
            color: "silver"
          },
          available: false,
          price: 960.67
        }
      }
    },
    "3801771308": {
      name: "E-Reader",
      product_id: "3801771308",
      variants: {
        "9494281769": {
          item_id: "9494281769",
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          },
          available: true,
          price: 252.06
        },
        "4273929280": {
          item_id: "4273929280",
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "32GB"
          },
          available: true,
          price: 244.95
        },
        "6268080249": {
          item_id: "6268080249",
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          },
          available: false,
          price: 244.02
        },
        "5510402676": {
          item_id: "5510402676",
          options: {
            "screen size": "6-inch",
            connectivity: "Wi-Fi",
            storage: "8GB"
          },
          available: true,
          price: 267.07
        },
        "7609274509": {
          item_id: "7609274509",
          options: {
            "screen size": "8-inch",
            connectivity: "Wi-Fi",
            storage: "32GB"
          },
          available: true,
          price: 243.4
        },
        "5418781403": {
          item_id: "5418781403",
          options: {
            "screen size": "7-inch",
            connectivity: "Wi-Fi + Cellular",
            storage: "8GB"
          },
          available: true,
          price: 267.58
        }
      }
    },
    "6942297802": {
      name: "Portable Charger",
      product_id: "6942297802",
      variants: {
        "7866854614": {
          item_id: "7866854614",
          options: {
            capacity: "5000mAh",
            output: "USB-C",
            color: "white"
          },
          available: true,
          price: 105.49
        },
        "8349903180": {
          item_id: "8349903180",
          options: {
            capacity: "20000mAh",
            output: "Wireless",
            color: "black"
          },
          available: true,
          price: 102.07
        },
        "8827799340": {
          item_id: "8827799340",
          options: {
            capacity: "5000mAh",
            output: "Wireless",
            color: "black"
          },
          available: false,
          price: 106.44
        },
        "2146648441": {
          item_id: "2146648441",
          options: {
            capacity: "10000mAh",
            output: "Wireless",
            color: "blue"
          },
          available: false,
          price: 105.85
        },
        "7884173033": {
          item_id: "7884173033",
          options: {
            capacity: "10000mAh",
            output: "USB-C",
            color: "blue"
          },
          available: true,
          price: 101.99
        },
        "7903094618": {
          item_id: "7903094618",
          options: {
            capacity: "5000mAh",
            output: "USB-A",
            color: "white"
          },
          available: false,
          price: 90.32
        },
        "1178356107": {
          item_id: "1178356107",
          options: {
            capacity: "20000mAh",
            output: "USB-C",
            color: "white"
          },
          available: true,
          price: 98.25
        },
        "4063401924": {
          item_id: "4063401924",
          options: {
            capacity: "20000mAh",
            output: "Wireless",
            color: "blue"
          },
          available: true,
          price: 109.27
        }
      }
    },
    "2985987096": {
      name: "Indoor Security Camera",
      product_id: "2985987096",
      variants: {
        "8470360507": {
          item_id: "8470360507",
          options: {
            resolution: "2K",
            "field of view": "130 degrees",
            connectivity: "Ethernet"
          },
          available: true,
          price: 291.31
        },
        "5810561222": {
          item_id: "5810561222",
          options: {
            resolution: "4K",
            "field of view": "130 degrees",
            connectivity: "Wi-Fi"
          },
          available: false,
          price: 274.98
        },
        "1999523885": {
          item_id: "1999523885",
          options: {
            resolution: "4K",
            "field of view": "160 degrees",
            connectivity: "Wi-Fi"
          },
          available: false,
          price: 294.47
        },
        "6901578702": {
          item_id: "6901578702",
          options: {
            resolution: "4K",
            "field of view": "130 degrees",
            connectivity: "Ethernet"
          },
          available: true,
          price: 307.42
        },
        "3909704820": {
          item_id: "3909704820",
          options: {
            resolution: "4K",
            "field of view": "110 degrees",
            connectivity: "Ethernet"
          },
          available: false,
          price: 308.38
        },
        "6867855179": {
          item_id: "6867855179",
          options: {
            resolution: "1080p",
            "field of view": "130 degrees",
            connectivity: "Wi-Fi"
          },
          available: false,
          price: 319.53
        },
        "5966895767": {
          item_id: "5966895767",
          options: {
            resolution: "2K",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          },
          available: false,
          price: 329.58
        },
        "1569829406": {
          item_id: "1569829406",
          options: {
            resolution: "1080p",
            "field of view": "160 degrees",
            connectivity: "Ethernet"
          },
          available: true,
          price: 320.55
        }
      }
    },
    "1075968781": {
      name: "Electric Kettle",
      product_id: "1075968781",
      variants: {
        "4064702754": {
          item_id: "4064702754",
          options: { capacity: "2L", material: "glass", color: "white" },
          available: true,
          price: 159.78
        },
        "8142779083": {
          item_id: "8142779083",
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "silver"
          },
          available: false,
          price: 157.53
        },
        "5428723833": {
          item_id: "5428723833",
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "black"
          },
          available: true,
          price: 145.48
        },
        "1240311797": {
          item_id: "1240311797",
          options: { capacity: "1L", material: "glass", color: "silver" },
          available: true,
          price: 137.17
        },
        "9132333852": {
          item_id: "9132333852",
          options: {
            capacity: "1L",
            material: "plastic",
            color: "silver"
          },
          available: false,
          price: 139.47
        },
        "9472539378": {
          item_id: "9472539378",
          options: {
            capacity: "1.5L",
            material: "glass",
            color: "white"
          },
          available: true,
          price: 143.72
        },
        "2243454707": {
          item_id: "2243454707",
          options: {
            capacity: "1L",
            material: "plastic",
            color: "white"
          },
          available: true,
          price: 164.46
        },
        "5268233322": {
          item_id: "5268233322",
          options: { capacity: "1L", material: "glass", color: "white" },
          available: true,
          price: 155.99
        },
        "2698416822": {
          item_id: "2698416822",
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "white"
          },
          available: true,
          price: 149.45
        },
        "9335834276": {
          item_id: "9335834276",
          options: { capacity: "2L", material: "glass", color: "black" },
          available: false,
          price: 137.92
        },
        "2323972008": {
          item_id: "2323972008",
          options: { capacity: "1L", material: "glass", color: "black" },
          available: true,
          price: 146.98
        },
        "9624127908": {
          item_id: "9624127908",
          options: {
            capacity: "1.5L",
            material: "plastic",
            color: "silver"
          },
          available: true,
          price: 158.9
        },
        "3015420423": {
          item_id: "3015420423",
          options: { capacity: "2L", material: "glass", color: "silver" },
          available: false,
          price: 141.76
        },
        "4458619711": {
          item_id: "4458619711",
          options: {
            capacity: "2L",
            material: "stainless steel",
            color: "white"
          },
          available: true,
          price: 153.81
        },
        "5930656038": {
          item_id: "5930656038",
          options: {
            capacity: "1.5L",
            material: "glass",
            color: "silver"
          },
          available: false,
          price: 142.3
        },
        "7602931732": {
          item_id: "7602931732",
          options: {
            capacity: "1L",
            material: "stainless steel",
            color: "black"
          },
          available: true,
          price: 153.25
        }
      }
    },
    "1656367028": {
      name: "Mechanical Keyboard",
      product_id: "1656367028",
      variants: {
        "9690244451": {
          item_id: "9690244451",
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "60%"
          },
          available: false,
          price: 236.51
        },
        "7706410293": {
          item_id: "7706410293",
          options: {
            "switch type": "clicky",
            backlight: "none",
            size: "full size"
          },
          available: true,
          price: 269.16
        },
        "3616838507": {
          item_id: "3616838507",
          options: {
            "switch type": "tactile",
            backlight: "white",
            size: "full size"
          },
          available: true,
          price: 226.11
        },
        "8484921793": {
          item_id: "8484921793",
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "80%"
          },
          available: true,
          price: 230.15
        },
        "1340995114": {
          item_id: "1340995114",
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "full size"
          },
          available: false,
          price: 235.13
        },
        "6342039236": {
          item_id: "6342039236",
          options: {
            "switch type": "clicky",
            backlight: "white",
            size: "full size"
          },
          available: true,
          price: 244.91
        },
        "1421289881": {
          item_id: "1421289881",
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "80%"
          },
          available: true,
          price: 268.77
        },
        "7867398203": {
          item_id: "7867398203",
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "60%"
          },
          available: true,
          price: 232.7
        },
        "4648814700": {
          item_id: "4648814700",
          options: {
            "switch type": "linear",
            backlight: "white",
            size: "60%"
          },
          available: false,
          price: 228.84
        },
        "5222576926": {
          item_id: "5222576926",
          options: {
            "switch type": "linear",
            backlight: "white",
            size: "full size"
          },
          available: false,
          price: 249.95
        },
        "4402162122": {
          item_id: "4402162122",
          options: {
            "switch type": "tactile",
            backlight: "RGB",
            size: "60%"
          },
          available: true,
          price: 233.9
        },
        "1151293680": {
          item_id: "1151293680",
          options: {
            "switch type": "linear",
            backlight: "RGB",
            size: "full size"
          },
          available: true,
          price: 272.33
        },
        "2299424241": {
          item_id: "2299424241",
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "80%"
          },
          available: true,
          price: 237.48
        },
        "4843487907": {
          item_id: "4843487907",
          options: {
            "switch type": "clicky",
            backlight: "white",
            size: "80%"
          },
          available: false,
          price: 254.84
        },
        "9025753381": {
          item_id: "9025753381",
          options: {
            "switch type": "clicky",
            backlight: "RGB",
            size: "full size"
          },
          available: false,
          price: 231.58
        },
        "6439196450": {
          item_id: "6439196450",
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "60%"
          },
          available: false,
          price: 254.56
        },
        "9991484137": {
          item_id: "9991484137",
          options: {
            "switch type": "tactile",
            backlight: "white",
            size: "80%"
          },
          available: true,
          price: 240.97
        },
        "9665000388": {
          item_id: "9665000388",
          options: {
            "switch type": "clicky",
            backlight: "none",
            size: "80%"
          },
          available: true,
          price: 269.46
        },
        "9570044148": {
          item_id: "9570044148",
          options: {
            "switch type": "linear",
            backlight: "none",
            size: "full size"
          },
          available: true,
          price: 231.37
        },
        "7658724607": {
          item_id: "7658724607",
          options: {
            "switch type": "tactile",
            backlight: "none",
            size: "80%"
          },
          available: true,
          price: 256.73
        }
      }
    },
    "9924732112": {
      name: "Wireless Earbuds",
      product_id: "9924732112",
      variants: {
        "9580569596": {
          item_id: "9580569596",
          options: {
            color: "black",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          },
          available: true,
          price: 257.38
        },
        "2499294441": {
          item_id: "2499294441",
          options: {
            color: "black",
            "battery life": "8 hours",
            "water resistance": "IPX7"
          },
          available: false,
          price: 258.36
        },
        "1646531091": {
          item_id: "1646531091",
          options: {
            color: "blue",
            "battery life": "6 hours",
            "water resistance": "IPX4"
          },
          available: true,
          price: 232.49
        },
        "8555936349": {
          item_id: "8555936349",
          options: {
            color: "blue",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          },
          available: true,
          price: 226.49
        },
        "5565631513": {
          item_id: "5565631513",
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "IPX7"
          },
          available: false,
          price: 267.9
        },
        "6077640618": {
          item_id: "6077640618",
          options: {
            color: "blue",
            "battery life": "8 hours",
            "water resistance": "not resistant"
          },
          available: true,
          price: 242.92
        },
        "9270970345": {
          item_id: "9270970345",
          options: {
            color: "black",
            "battery life": "6 hours",
            "water resistance": "not resistant"
          },
          available: false,
          price: 259.03
        },
        "4063058357": {
          item_id: "4063058357",
          options: {
            color: "black",
            "battery life": "4 hours",
            "water resistance": "not resistant"
          },
          available: true,
          price: 243.34
        },
        "3694871183": {
          item_id: "3694871183",
          options: {
            color: "white",
            "battery life": "8 hours",
            "water resistance": "IPX4"
          },
          available: false,
          price: 256.67
        },
        "6452271382": {
          item_id: "6452271382",
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX4"
          },
          available: true,
          price: 258.84
        },
        "2052249669": {
          item_id: "2052249669",
          options: {
            color: "white",
            "battery life": "4 hours",
            "water resistance": "not resistant"
          },
          available: true,
          price: 237.14
        },
        "2757705742": {
          item_id: "2757705742",
          options: {
            color: "blue",
            "battery life": "4 hours",
            "water resistance": "IPX7"
          },
          available: false,
          price: 258.97
        }
      }
    },
    "4896585277": {
      name: "Smart Thermostat",
      product_id: "4896585277",
      variants: {
        "8722653925": {
          item_id: "8722653925",
          options: { compatibility: "Google Assistant", color: "white" },
          available: false,
          price: 227.8
        },
        "8593894906": {
          item_id: "8593894906",
          options: { compatibility: "Amazon Alexa", color: "white" },
          available: false,
          price: 263.11
        },
        "2791467853": {
          item_id: "2791467853",
          options: {
            compatibility: "Google Assistant",
            color: "stainless steel"
          },
          available: false,
          price: 242.53
        },
        "7747408585": {
          item_id: "7747408585",
          options: { compatibility: "Google Assistant", color: "black" },
          available: true,
          price: 249.01
        },
        "4953074738": {
          item_id: "4953074738",
          options: { compatibility: "Amazon Alexa", color: "black" },
          available: true,
          price: 226.02
        },
        "4983901480": {
          item_id: "4983901480",
          options: { compatibility: "Apple HomeKit", color: "black" },
          available: true,
          price: 262.47
        },
        "9480266227": {
          item_id: "9480266227",
          options: {
            compatibility: "Apple HomeKit",
            color: "stainless steel"
          },
          available: true,
          price: 255.98
        },
        "6243148452": {
          item_id: "6243148452",
          options: {
            compatibility: "Amazon Alexa",
            color: "stainless steel"
          },
          available: true,
          price: 247
        },
        "3377900078": {
          item_id: "3377900078",
          options: { compatibility: "Apple HomeKit", color: "white" },
          available: true,
          price: 260.68
        }
      }
    },
    "8560156827": {
      name: "Fleece Jacket",
      product_id: "8560156827",
      variants: {
        "8590708195": {
          item_id: "8590708195",
          options: { size: "XL", color: "navy", zipper: "half" },
          available: true,
          price: 157.61
        },
        "9385662952": {
          item_id: "9385662952",
          options: { size: "L", color: "black", zipper: "full" },
          available: true,
          price: 159.92
        },
        "5992316252": {
          item_id: "5992316252",
          options: { size: "S", color: "red", zipper: "half" },
          available: true,
          price: 141.29
        },
        "8161321868": {
          item_id: "8161321868",
          options: { size: "XS", color: "navy", zipper: "full" },
          available: true,
          price: 152.45
        },
        "7528037711": {
          item_id: "7528037711",
          options: { size: "XL", color: "navy", zipper: "full" },
          available: true,
          price: 157.86
        },
        "8733974883": {
          item_id: "8733974883",
          options: { size: "L", color: "red", zipper: "half" },
          available: true,
          price: 153.18
        },
        "4728397765": {
          item_id: "4728397765",
          options: { size: "M", color: "black", zipper: "full" },
          available: false,
          price: 149.48
        }
      }
    },
    "2344688344": {
      name: "Wall Clock",
      product_id: "2344688344",
      variants: {
        "8917609800": {
          item_id: "8917609800",
          options: {
            diameter: "10 inches",
            color: "white",
            type: "digital"
          },
          available: false,
          price: 195.59
        },
        "1859994221": {
          item_id: "1859994221",
          options: {
            diameter: "10 inches",
            color: "black",
            type: "analog"
          },
          available: false,
          price: 182.85
        },
        "6922203216": {
          item_id: "6922203216",
          options: {
            diameter: "14 inches",
            color: "black",
            type: "digital"
          },
          available: false,
          price: 199.12
        },
        "9850781806": {
          item_id: "9850781806",
          options: {
            diameter: "14 inches",
            color: "white",
            type: "digital"
          },
          available: true,
          price: 184.48
        },
        "8610532516": {
          item_id: "8610532516",
          options: {
            diameter: "10 inches",
            color: "black",
            type: "digital"
          },
          available: true,
          price: 203.76
        },
        "6508153405": {
          item_id: "6508153405",
          options: {
            diameter: "12 inches",
            color: "white",
            type: "analog"
          },
          available: true,
          price: 191.55
        },
        "7791931443": {
          item_id: "7791931443",
          options: {
            diameter: "14 inches",
            color: "black",
            type: "analog"
          },
          available: true,
          price: 195.63
        },
        "6534134392": {
          item_id: "6534134392",
          options: {
            diameter: "10 inches",
            color: "wood",
            type: "analog"
          },
          available: true,
          price: 196.15
        }
      }
    },
    "7233192239": {
      name: "Dumbbell Set",
      product_id: "7233192239",
      variants: {
        "8140269513": {
          item_id: "8140269513",
          options: {
            "weight range": "55-75 lbs",
            material: "rubber",
            "set type": "adjustable"
          },
          available: false,
          price: 528.12
        },
        "2444431651": {
          item_id: "2444431651",
          options: {
            "weight range": "55-75 lbs",
            material: "iron",
            "set type": "fixed"
          },
          available: true,
          price: 534.84
        },
        "8068777068": {
          item_id: "8068777068",
          options: {
            "weight range": "5-25 lbs",
            material: "rubber",
            "set type": "fixed"
          },
          available: true,
          price: 507.13
        },
        "3333391894": {
          item_id: "3333391894",
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "fixed"
          },
          available: true,
          price: 534.14
        },
        "4422467033": {
          item_id: "4422467033",
          options: {
            "weight range": "30-50 lbs",
            material: "urethane",
            "set type": "adjustable"
          },
          available: true,
          price: 483.47
        },
        "1300392224": {
          item_id: "1300392224",
          options: {
            "weight range": "55-75 lbs",
            material: "rubber",
            "set type": "fixed"
          },
          available: false,
          price: 480.74
        },
        "6227345631": {
          item_id: "6227345631",
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "fixed"
          },
          available: false,
          price: 483.45
        },
        "6130713659": {
          item_id: "6130713659",
          options: {
            "weight range": "55-75 lbs",
            material: "urethane",
            "set type": "adjustable"
          },
          available: true,
          price: 483.66
        },
        "6245231688": {
          item_id: "6245231688",
          options: {
            "weight range": "30-50 lbs",
            material: "iron",
            "set type": "adjustable"
          },
          available: true,
          price: 522.03
        },
        "3877338112": {
          item_id: "3877338112",
          options: {
            "weight range": "5-25 lbs",
            material: "iron",
            "set type": "adjustable"
          },
          available: true,
          price: 545.68
        },
        "6171242004": {
          item_id: "6171242004",
          options: {
            "weight range": "30-50 lbs",
            material: "rubber",
            "set type": "fixed"
          },
          available: true,
          price: 462.84
        },
        "7159180318": {
          item_id: "7159180318",
          options: {
            "weight range": "30-50 lbs",
            material: "urethane",
            "set type": "fixed"
          },
          available: true,
          price: 512.88
        },
        "3735133539": {
          item_id: "3735133539",
          options: {
            "weight range": "30-50 lbs",
            material: "rubber",
            "set type": "adjustable"
          },
          available: true,
          price: 508.37
        },
        "3275928196": {
          item_id: "3275928196",
          options: {
            "weight range": "5-25 lbs",
            material: "urethane",
            "set type": "adjustable"
          },
          available: true,
          price: 511.63
        },
        "2194493783": {
          item_id: "2194493783",
          options: {
            "weight range": "5-25 lbs",
            material: "iron",
            "set type": "fixed"
          },
          available: false,
          price: 471.64
        },
        "6921939887": {
          item_id: "6921939887",
          options: {
            "weight range": "55-75 lbs",
            material: "iron",
            "set type": "adjustable"
          },
          available: false,
          price: 451.62
        },
        "7896397433": {
          item_id: "7896397433",
          options: {
            "weight range": "5-25 lbs",
            material: "rubber",
            "set type": "adjustable"
          },
          available: true,
          price: 457.81
        },
        "6585768447": {
          item_id: "6585768447",
          options: {
            "weight range": "5-25 lbs",
            material: "urethane",
            "set type": "fixed"
          },
          available: true,
          price: 467.69
        }
      }
    },
    "2747247837": {
      name: "Pet Bed",
      product_id: "2747247837",
      variants: {
        "3360679910": {
          item_id: "3360679910",
          options: {
            size: "medium",
            material: "memory foam",
            color: "beige"
          },
          available: true,
          price: 195.26
        },
        "4537595158": {
          item_id: "4537595158",
          options: { size: "small", material: "fleece", color: "brown" },
          available: false,
          price: 193.79
        },
        "6499892866": {
          item_id: "6499892866",
          options: {
            size: "medium",
            material: "polyester",
            color: "beige"
          },
          available: true,
          price: 191.21
        },
        "4982943126": {
          item_id: "4982943126",
          options: { size: "small", material: "fleece", color: "beige" },
          available: false,
          price: 214.33
        },
        "2751999929": {
          item_id: "2751999929",
          options: {
            size: "large",
            material: "memory foam",
            color: "grey"
          },
          available: true,
          price: 195.11
        },
        "7729002517": {
          item_id: "7729002517",
          options: {
            size: "large",
            material: "polyester",
            color: "brown"
          },
          available: true,
          price: 193
        },
        "8056198669": {
          item_id: "8056198669",
          options: {
            size: "small",
            material: "polyester",
            color: "brown"
          },
          available: true,
          price: 208.32
        },
        "5067898160": {
          item_id: "5067898160",
          options: {
            size: "medium",
            material: "memory foam",
            color: "brown"
          },
          available: false,
          price: 209.95
        },
        "6857426243": {
          item_id: "6857426243",
          options: { size: "medium", material: "fleece", color: "grey" },
          available: true,
          price: 196.53
        },
        "2405281423": {
          item_id: "2405281423",
          options: {
            size: "medium",
            material: "polyester",
            color: "grey"
          },
          available: true,
          price: 204.09
        },
        "7917269097": {
          item_id: "7917269097",
          options: {
            size: "large",
            material: "polyester",
            color: "grey"
          },
          available: true,
          price: 184.25
        },
        "6942241102": {
          item_id: "6942241102",
          options: {
            size: "large",
            material: "memory foam",
            color: "beige"
          },
          available: true,
          price: 180.93
        },
        "8941974610": {
          item_id: "8941974610",
          options: { size: "large", material: "fleece", color: "beige" },
          available: false,
          price: 200.66
        },
        "7381052709": {
          item_id: "7381052709",
          options: {
            size: "large",
            material: "memory foam",
            color: "brown"
          },
          available: true,
          price: 193.22
        },
        "5109407456": {
          item_id: "5109407456",
          options: { size: "small", material: "fleece", color: "grey" },
          available: true,
          price: 182.48
        }
      }
    },
    "4354588079": {
      name: "Espresso Machine",
      product_id: "4354588079",
      variants: {
        "3709608322": {
          item_id: "3709608322",
          options: {
            pressure: "9 bar",
            capacity: "2L",
            type: "automatic"
          },
          available: true,
          price: 2744.7
        },
        "7407838442": {
          item_id: "7407838442",
          options: { pressure: "9 bar", capacity: "1L", type: "manual" },
          available: true,
          price: 3081.91
        },
        "6324294385": {
          item_id: "6324294385",
          options: {
            pressure: "9 bar",
            capacity: "1L",
            type: "automatic"
          },
          available: false,
          price: 2719.01
        },
        "1157853815": {
          item_id: "1157853815",
          options: {
            pressure: "19 bar",
            capacity: "2L",
            type: "capsule"
          },
          available: true,
          price: 3096.7
        },
        "2190871011": {
          item_id: "2190871011",
          options: {
            pressure: "9 bar",
            capacity: "1.5L",
            type: "manual"
          },
          available: true,
          price: 3105.6
        },
        "3714494375": {
          item_id: "3714494375",
          options: { pressure: "15 bar", capacity: "1L", type: "manual" },
          available: true,
          price: 2709.83
        },
        "4875647558": {
          item_id: "4875647558",
          options: {
            pressure: "15 bar",
            capacity: "1L",
            type: "capsule"
          },
          available: false,
          price: 2805.77
        },
        "7441167885": {
          item_id: "7441167885",
          options: {
            pressure: "15 bar",
            capacity: "1.5L",
            type: "capsule"
          },
          available: false,
          price: 2866.37
        },
        "3815173328": {
          item_id: "3815173328",
          options: {
            pressure: "9 bar",
            capacity: "1.5L",
            type: "capsule"
          },
          available: true,
          price: 2908.42
        },
        "5839483328": {
          item_id: "5839483328",
          options: {
            pressure: "15 bar",
            capacity: "2L",
            type: "automatic"
          },
          available: false,
          price: 2929.06
        },
        "7806008610": {
          item_id: "7806008610",
          options: { pressure: "9 bar", capacity: "1L", type: "capsule" },
          available: true,
          price: 2742.67
        },
        "7774234341": {
          item_id: "7774234341",
          options: { pressure: "9 bar", capacity: "2L", type: "manual" },
          available: true,
          price: 2719.16
        },
        "3951031513": {
          item_id: "3951031513",
          options: {
            pressure: "19 bar",
            capacity: "1.5L",
            type: "automatic"
          },
          available: true,
          price: 3289.46
        },
        "6242772310": {
          item_id: "6242772310",
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "automatic"
          },
          available: false,
          price: 2996.03
        },
        "6200867091": {
          item_id: "6200867091",
          options: {
            pressure: "19 bar",
            capacity: "1L",
            type: "capsule"
          },
          available: true,
          price: 2955.17
        },
        "9884666842": {
          item_id: "9884666842",
          options: { pressure: "19 bar", capacity: "1L", type: "manual" },
          available: true,
          price: 2794.7
        },
        "3379843752": {
          item_id: "3379843752",
          options: { pressure: "19 bar", capacity: "2L", type: "manual" },
          available: true,
          price: 3203.76
        }
      }
    },
    "7765186836": {
      name: "Cycling Helmet",
      product_id: "7765186836",
      variants: {
        "3358616356": {
          item_id: "3358616356",
          options: { size: "S", color: "red", ventilation: "low" },
          available: true,
          price: 197.33
        },
        "8573379326": {
          item_id: "8573379326",
          options: { size: "M", color: "red", ventilation: "high" },
          available: true,
          price: 196.73
        },
        "1676105083": {
          item_id: "1676105083",
          options: { size: "S", color: "blue", ventilation: "high" },
          available: false,
          price: 191.56
        },
        "7811981098": {
          item_id: "7811981098",
          options: { size: "S", color: "white", ventilation: "medium" },
          available: true,
          price: 213.86
        },
        "8591113813": {
          item_id: "8591113813",
          options: { size: "M", color: "white", ventilation: "low" },
          available: true,
          price: 192.65
        },
        "5537798301": {
          item_id: "5537798301",
          options: { size: "S", color: "black", ventilation: "medium" },
          available: true,
          price: 204.47
        },
        "7907773809": {
          item_id: "7907773809",
          options: { size: "L", color: "blue", ventilation: "low" },
          available: false,
          price: 209.69
        },
        "6048672633": {
          item_id: "6048672633",
          options: { size: "L", color: "black", ventilation: "low" },
          available: false,
          price: 208.05
        },
        "9013366374": {
          item_id: "9013366374",
          options: { size: "M", color: "blue", ventilation: "high" },
          available: true,
          price: 219.88
        },
        "7401244629": {
          item_id: "7401244629",
          options: { size: "L", color: "red", ventilation: "high" },
          available: false,
          price: 188.92
        },
        "3339188619": {
          item_id: "3339188619",
          options: { size: "M", color: "blue", ventilation: "low" },
          available: false,
          price: 200.24
        },
        "1596993217": {
          item_id: "1596993217",
          options: { size: "S", color: "white", ventilation: "low" },
          available: true,
          price: 180.02
        },
        "2206116040": {
          item_id: "2206116040",
          options: { size: "L", color: "blue", ventilation: "high" },
          available: false,
          price: 209.91
        },
        "1719127154": {
          item_id: "1719127154",
          options: { size: "M", color: "red", ventilation: "medium" },
          available: true,
          price: 206.26
        },
        "1665571435": {
          item_id: "1665571435",
          options: { size: "L", color: "black", ventilation: "high" },
          available: true,
          price: 196.89
        },
        "8153356023": {
          item_id: "8153356023",
          options: { size: "L", color: "blue", ventilation: "medium" },
          available: false,
          price: 212.47
        },
        "5886093635": {
          item_id: "5886093635",
          options: { size: "S", color: "blue", ventilation: "low" },
          available: true,
          price: 208.04
        },
        "6401214406": {
          item_id: "6401214406",
          options: { size: "M", color: "red", ventilation: "low" },
          available: false,
          price: 187.02
        },
        "6697922351": {
          item_id: "6697922351",
          options: { size: "L", color: "white", ventilation: "medium" },
          available: true,
          price: 194.47
        },
        "3264130640": {
          item_id: "3264130640",
          options: { size: "M", color: "black", ventilation: "medium" },
          available: false,
          price: 211.41
        }
      }
    },
    "2696197613": {
      name: "LED Light Bulb",
      product_id: "2696197613",
      variants: {
        "7445824652": {
          item_id: "7445824652",
          options: {
            brightness: "75W equivalent",
            "color temperature": "daylight",
            connectivity: "Wi-Fi"
          },
          available: true,
          price: 49.8
        },
        "3034017579": {
          item_id: "3034017579",
          options: {
            brightness: "75W equivalent",
            "color temperature": "warm white",
            connectivity: "Wi-Fi"
          },
          available: false,
          price: 49.72
        },
        "5111440845": {
          item_id: "5111440845",
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "Bluetooth"
          },
          available: true,
          price: 48.55
        },
        "5570660360": {
          item_id: "5570660360",
          options: {
            brightness: "60W equivalent",
            "color temperature": "daylight",
            connectivity: "none"
          },
          available: true,
          price: 51.54
        },
        "6206533187": {
          item_id: "6206533187",
          options: {
            brightness: "75W equivalent",
            "color temperature": "warm white",
            connectivity: "none"
          },
          available: false,
          price: 47.83
        },
        "4938013542": {
          item_id: "4938013542",
          options: {
            brightness: "100W equivalent",
            "color temperature": "warm white",
            connectivity: "none"
          },
          available: true,
          price: 47.2
        }
      }
    },
    "8940227892": {
      name: "Digital Camera",
      product_id: "8940227892",
      variants: {
        "6384525445": {
          item_id: "6384525445",
          options: { resolution: "30MP", zoom: "5x", storage: "CF card" },
          available: true,
          price: 2929.62
        },
        "3892645120": {
          item_id: "3892645120",
          options: {
            resolution: "30MP",
            zoom: "10x",
            storage: "CF card"
          },
          available: false,
          price: 3070.64
        },
        "1804581713": {
          item_id: "1804581713",
          options: { resolution: "30MP", zoom: "3x", storage: "SD card" },
          available: true,
          price: 2875.61
        },
        "9644439410": {
          item_id: "9644439410",
          options: { resolution: "20MP", zoom: "5x", storage: "CF card" },
          available: true,
          price: 3280.31
        },
        "5996159312": {
          item_id: "5996159312",
          options: { resolution: "24MP", zoom: "3x", storage: "SD card" },
          available: true,
          price: 2895.55
        },
        "7255224608": {
          item_id: "7255224608",
          options: { resolution: "30MP", zoom: "3x", storage: "CF card" },
          available: true,
          price: 2922.97
        },
        "2284404181": {
          item_id: "2284404181",
          options: { resolution: "20MP", zoom: "5x", storage: "SD card" },
          available: false,
          price: 3204.43
        },
        "7583936705": {
          item_id: "7583936705",
          options: {
            resolution: "20MP",
            zoom: "10x",
            storage: "CF card"
          },
          available: false,
          price: 3101.43
        },
        "9973034634": {
          item_id: "9973034634",
          options: { resolution: "20MP", zoom: "3x", storage: "CF card" },
          available: false,
          price: 2850.32
        },
        "5484530610": {
          item_id: "5484530610",
          options: {
            resolution: "24MP",
            zoom: "10x",
            storage: "CF card"
          },
          available: false,
          price: 3109.83
        },
        "4326528037": {
          item_id: "4326528037",
          options: { resolution: "24MP", zoom: "5x", storage: "CF card" },
          available: true,
          price: 2714.51
        },
        "9228757377": {
          item_id: "9228757377",
          options: {
            resolution: "30MP",
            zoom: "10x",
            storage: "SD card"
          },
          available: true,
          price: 3066.23
        },
        "7195021808": {
          item_id: "7195021808",
          options: { resolution: "30MP", zoom: "5x", storage: "SD card" },
          available: false,
          price: 2909.87
        },
        "8363011723": {
          item_id: "8363011723",
          options: { resolution: "20MP", zoom: "3x", storage: "SD card" },
          available: true,
          price: 2823.96
        }
      }
    },
    "8600330539": {
      name: "Bookshelf",
      product_id: "8600330539",
      variants: {
        "8479046075": {
          item_id: "8479046075",
          options: { material: "wood", color: "white", height: "5 ft" },
          available: true,
          price: 451.01
        },
        "8895454203": {
          item_id: "8895454203",
          options: { material: "glass", color: "white", height: "5 ft" },
          available: true,
          price: 504.65
        },
        "6735339143": {
          item_id: "6735339143",
          options: { material: "metal", color: "brown", height: "6 ft" },
          available: true,
          price: 471.77
        },
        "7373893106": {
          item_id: "7373893106",
          options: { material: "glass", color: "white", height: "4 ft" },
          available: false,
          price: 531.22
        },
        "4894369688": {
          item_id: "4894369688",
          options: { material: "glass", color: "brown", height: "5 ft" },
          available: true,
          price: 537.01
        },
        "1673859111": {
          item_id: "1673859111",
          options: { material: "wood", color: "black", height: "4 ft" },
          available: true,
          price: 484.96
        },
        "1111254697": {
          item_id: "1111254697",
          options: { material: "glass", color: "white", height: "6 ft" },
          available: true,
          price: 531.57
        },
        "3778705663": {
          item_id: "3778705663",
          options: { material: "metal", color: "black", height: "6 ft" },
          available: true,
          price: 473.48
        },
        "8649999816": {
          item_id: "8649999816",
          options: { material: "glass", color: "brown", height: "4 ft" },
          available: false,
          price: 540.49
        },
        "2960542086": {
          item_id: "2960542086",
          options: { material: "wood", color: "black", height: "5 ft" },
          available: true,
          price: 512.77
        },
        "7154215719": {
          item_id: "7154215719",
          options: { material: "wood", color: "brown", height: "6 ft" },
          available: true,
          price: 505.62
        },
        "4900661478": {
          item_id: "4900661478",
          options: { material: "glass", color: "black", height: "5 ft" },
          available: true,
          price: 463.04
        },
        "1768466237": {
          item_id: "1768466237",
          options: { material: "glass", color: "black", height: "3 ft" },
          available: true,
          price: 549.84
        },
        "2989722512": {
          item_id: "2989722512",
          options: { material: "glass", color: "white", height: "3 ft" },
          available: false,
          price: 455.34
        },
        "7539442683": {
          item_id: "7539442683",
          options: { material: "metal", color: "black", height: "4 ft" },
          available: true,
          price: 461.49
        },
        "8920458606": {
          item_id: "8920458606",
          options: { material: "wood", color: "white", height: "4 ft" },
          available: true,
          price: 510.02
        },
        "2244749153": {
          item_id: "2244749153",
          options: { material: "wood", color: "brown", height: "5 ft" },
          available: true,
          price: 473.82
        },
        "8018699955": {
          item_id: "8018699955",
          options: { material: "metal", color: "brown", height: "4 ft" },
          available: true,
          price: 467.86
        }
      }
    },
    "9783735446": {
      name: "Bicycle",
      product_id: "9783735446",
      variants: {
        "7758198585": {
          item_id: "7758198585",
          options: { "frame size": "medium", color: "green", type: "road" },
          available: true,
          price: 1917.21
        },
        "5606522780": {
          item_id: "5606522780",
          options: {
            "frame size": "large",
            color: "red",
            type: "mountain"
          },
          available: true,
          price: 1902.67
        },
        "6170152315": {
          item_id: "6170152315",
          options: {
            "frame size": "small",
            color: "red",
            type: "mountain"
          },
          available: false,
          price: 1814.72
        },
        "3624655057": {
          item_id: "3624655057",
          options: { "frame size": "medium", color: "blue", type: "road" },
          available: true,
          price: 2195.04
        },
        "2143041831": {
          item_id: "2143041831",
          options: {
            "frame size": "medium",
            color: "black",
            type: "mountain"
          },
          available: true,
          price: 2076.5
        }
      }
    },
    "7471004230": {
      name: "Sneakers",
      product_id: "7471004230",
      variants: {
        "3631875806": {
          item_id: "3631875806",
          options: { size: "11", color: "red", material: "leather" },
          available: false,
          price: 203.82
        },
        "9727387530": {
          item_id: "9727387530",
          options: { size: "11", color: "black", material: "synthetic" },
          available: false,
          price: 207.75
        },
        "2509076505": {
          item_id: "2509076505",
          options: { size: "10", color: "gray", material: "leather" },
          available: true,
          price: 189.5
        },
        "6477915553": {
          item_id: "6477915553",
          options: { size: "6", color: "black", material: "synthetic" },
          available: true,
          price: 186.45
        },
        "4410138384": {
          item_id: "4410138384",
          options: { size: "8", color: "gray", material: "canvas" },
          available: false,
          price: 197.37
        }
      }
    },
    "4794339885": {
      name: "Office Chair",
      product_id: "4794339885",
      variants: {
        "1793929609": {
          item_id: "1793929609",
          options: {
            material: "fabric",
            color: "black",
            armrest: "none",
            "backrest height": "high-back"
          },
          available: true,
          price: 514.34
        },
        "4274709903": {
          item_id: "4274709903",
          options: {
            material: "mesh",
            color: "red",
            armrest: "none",
            "backrest height": "standard"
          },
          available: true,
          price: 544.29
        },
        "8426249116": {
          item_id: "8426249116",
          options: {
            material: "fabric",
            color: "black",
            armrest: "fixed",
            "backrest height": "standard"
          },
          available: true,
          price: 488.81
        },
        "1071497737": {
          item_id: "1071497737",
          options: {
            material: "leather",
            color: "gray",
            armrest: "fixed",
            "backrest height": "high-back"
          },
          available: true,
          price: 483.95
        },
        "4168944673": {
          item_id: "4168944673",
          options: {
            material: "leather",
            color: "blue",
            armrest: "none",
            "backrest height": "standard"
          },
          available: true,
          price: 471.82
        },
        "3704016729": {
          item_id: "3704016729",
          options: {
            material: "mesh",
            color: "blue",
            armrest: "fixed",
            "backrest height": "standard"
          },
          available: true,
          price: 487.67
        },
        "8069050545": {
          item_id: "8069050545",
          options: {
            material: "leather",
            color: "blue",
            armrest: "none",
            "backrest height": "high-back"
          },
          available: true,
          price: 499.28
        },
        "8323284863": {
          item_id: "8323284863",
          options: {
            material: "fabric",
            color: "blue",
            armrest: "adjustable",
            "backrest height": "standard"
          },
          available: true,
          price: 511.24
        },
        "3609437808": {
          item_id: "3609437808",
          options: {
            material: "leather",
            color: "red",
            armrest: "none",
            "backrest height": "high-back"
          },
          available: false,
          price: 466.44
        },
        "4648362606": {
          item_id: "4648362606",
          options: {
            material: "leather",
            color: "black",
            armrest: "adjustable",
            "backrest height": "high-back"
          },
          available: true,
          price: 503.76
        },
        "2386562819": {
          item_id: "2386562819",
          options: {
            material: "mesh",
            color: "gray",
            armrest: "fixed",
            "backrest height": "high-back"
          },
          available: true,
          price: 508.21
        },
        "3915604618": {
          item_id: "3915604618",
          options: {
            material: "leather",
            color: "blue",
            armrest: "fixed",
            "backrest height": "standard"
          },
          available: true,
          price: 487.6
        },
        "9459890810": {
          item_id: "9459890810",
          options: {
            material: "fabric",
            color: "gray",
            armrest: "none",
            "backrest height": "high-back"
          },
          available: true,
          price: 510.1
        }
      }
    },
    "6945232052": {
      name: "Smart Watch",
      product_id: "6945232052",
      variants: {
        "4920090458": {
          item_id: "4920090458",
          options: {
            color: "black",
            "band material": "silicone",
            display: "AMOLED"
          },
          available: false,
          price: 381.87
        },
        "9320099340": {
          item_id: "9320099340",
          options: {
            color: "black",
            "band material": "leather",
            display: "AMOLED"
          },
          available: false,
          price: 375.03
        },
        "2860956907": {
          item_id: "2860956907",
          options: {
            color: "black",
            "band material": "silicone",
            display: "LCD"
          },
          available: true,
          price: 315.61
        },
        "1631806422": {
          item_id: "1631806422",
          options: {
            color: "black",
            "band material": "metal",
            display: "AMOLED"
          },
          available: false,
          price: 339.85
        },
        "9192177173": {
          item_id: "9192177173",
          options: {
            color: "gold",
            "band material": "metal",
            display: "LCD"
          },
          available: false,
          price: 335.99
        },
        "4900990404": {
          item_id: "4900990404",
          options: {
            color: "silver",
            "band material": "metal",
            display: "AMOLED"
          },
          available: false,
          price: 336.71
        },
        "8739626972": {
          item_id: "8739626972",
          options: {
            color: "silver",
            "band material": "silicone",
            display: "AMOLED"
          },
          available: false,
          price: 370.87
        },
        "1706622510": {
          item_id: "1706622510",
          options: {
            color: "black",
            "band material": "metal",
            display: "LCD"
          },
          available: false,
          price: 328.67
        },
        "2540052208": {
          item_id: "2540052208",
          options: {
            color: "gold",
            "band material": "silicone",
            display: "LCD"
          },
          available: false,
          price: 346.42
        },
        "5694328282": {
          item_id: "5694328282",
          options: {
            color: "gold",
            "band material": "leather",
            display: "AMOLED"
          },
          available: true,
          price: 323.19
        },
        "9408160950": {
          item_id: "9408160950",
          options: {
            color: "gold",
            "band material": "leather",
            display: "LCD"
          },
          available: true,
          price: 381.26
        },
        "2554056026": {
          item_id: "2554056026",
          options: {
            color: "gold",
            "band material": "metal",
            display: "AMOLED"
          },
          available: false,
          price: 367.38
        },
        "1007724142": {
          item_id: "1007724142",
          options: {
            color: "black",
            "band material": "leather",
            display: "LCD"
          },
          available: true,
          price: 382.41
        },
        "2993891288": {
          item_id: "2993891288",
          options: {
            color: "silver",
            "band material": "leather",
            display: "AMOLED"
          },
          available: false,
          price: 383.08
        },
        "9811090008": {
          item_id: "9811090008",
          options: {
            color: "silver",
            "band material": "leather",
            display: "LCD"
          },
          available: true,
          price: 370.38
        },
        "2681513500": {
          item_id: "2681513500",
          options: {
            color: "gold",
            "band material": "silicone",
            display: "AMOLED"
          },
          available: true,
          price: 356.23
        }
      }
    },
    "9832717871": {
      name: "Tea Kettle",
      product_id: "9832717871",
      variants: {
        "9647374798": {
          item_id: "9647374798",
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "gas"
          },
          available: true,
          price: 109.58
        },
        "6454334990": {
          item_id: "6454334990",
          options: {
            material: "glass",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          },
          available: false,
          price: 98.82
        },
        "4238115171": {
          item_id: "4238115171",
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "gas"
          },
          available: true,
          price: 91.78
        },
        "3909406921": {
          item_id: "3909406921",
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "gas"
          },
          available: true,
          price: 98.25
        },
        "7605253559": {
          item_id: "7605253559",
          options: {
            material: "stainless steel",
            capacity: "1 liter",
            "stovetop compatibility": "induction"
          },
          available: false,
          price: 97.88
        },
        "2820119811": {
          item_id: "2820119811",
          options: {
            material: "glass",
            capacity: "2 liters",
            "stovetop compatibility": "electric"
          },
          available: true,
          price: 94.68
        },
        "3761330360": {
          item_id: "3761330360",
          options: {
            material: "ceramic",
            capacity: "2 liters",
            "stovetop compatibility": "gas"
          },
          available: true,
          price: 101.12
        },
        "7292993796": {
          item_id: "7292993796",
          options: {
            material: "glass",
            capacity: "2 liters",
            "stovetop compatibility": "induction"
          },
          available: true,
          price: 94.8
        },
        "9747045638": {
          item_id: "9747045638",
          options: {
            material: "glass",
            capacity: "1 liter",
            "stovetop compatibility": "electric"
          },
          available: true,
          price: 94.01
        },
        "3312883418": {
          item_id: "3312883418",
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          },
          available: true,
          price: 104.82
        },
        "8209752717": {
          item_id: "8209752717",
          options: {
            material: "stainless steel",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          },
          available: false,
          price: 96.17
        },
        "1906487464": {
          item_id: "1906487464",
          options: {
            material: "stainless steel",
            capacity: "2 liters",
            "stovetop compatibility": "induction"
          },
          available: true,
          price: 102.02
        },
        "3738831434": {
          item_id: "3738831434",
          options: {
            material: "stainless steel",
            capacity: "1.5 liters",
            "stovetop compatibility": "induction"
          },
          available: true,
          price: 98.89
        },
        "7497340597": {
          item_id: "7497340597",
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "gas"
          },
          available: false,
          price: 100.83
        },
        "7274158061": {
          item_id: "7274158061",
          options: {
            material: "ceramic",
            capacity: "1 liter",
            "stovetop compatibility": "induction"
          },
          available: false,
          price: 91.13
        },
        "8293778132": {
          item_id: "8293778132",
          options: {
            material: "ceramic",
            capacity: "1.5 liters",
            "stovetop compatibility": "electric"
          },
          available: true,
          price: 100.62
        }
      }
    },
    "5426915165": {
      name: "Luggage Set",
      product_id: "5426915165",
      variants: {
        "5209958006": {
          item_id: "5209958006",
          options: {
            "piece count": "2-piece",
            color: "silver",
            material: "hardshell"
          },
          available: false,
          price: 514.72
        },
        "6690069155": {
          item_id: "6690069155",
          options: {
            "piece count": "3-piece",
            color: "silver",
            material: "softshell"
          },
          available: false,
          price: 466.47
        },
        "8759627937": {
          item_id: "8759627937",
          options: {
            "piece count": "4-piece",
            color: "blue",
            material: "softshell"
          },
          available: true,
          price: 501.65
        },
        "9692325258": {
          item_id: "9692325258",
          options: {
            "piece count": "3-piece",
            color: "black",
            material: "softshell"
          },
          available: false,
          price: 528.63
        },
        "6301799585": {
          item_id: "6301799585",
          options: {
            "piece count": "3-piece",
            color: "blue",
            material: "softshell"
          },
          available: true,
          price: 495.87
        },
        "9956648681": {
          item_id: "9956648681",
          options: {
            "piece count": "4-piece",
            color: "red",
            material: "hardshell"
          },
          available: true,
          price: 452.62
        },
        "8964750292": {
          item_id: "8964750292",
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "hardshell"
          },
          available: true,
          price: 532.58
        },
        "8926329222": {
          item_id: "8926329222",
          options: {
            "piece count": "2-piece",
            color: "black",
            material: "softshell"
          },
          available: true,
          price: 452.28
        },
        "7160999700": {
          item_id: "7160999700",
          options: {
            "piece count": "2-piece",
            color: "red",
            material: "softshell"
          },
          available: true,
          price: 499.29
        }
      }
    },
    "9743693396": {
      name: "Patio Umbrella",
      product_id: "9743693396",
      variants: {
        "2001307871": {
          item_id: "2001307871",
          options: {
            size: "6 ft",
            color: "blue",
            material: "sunbrella",
            "tilt mechanism": "auto tilt"
          },
          available: true,
          price: 302.63
        },
        "8170914468": {
          item_id: "8170914468",
          options: {
            size: "6 ft",
            color: "red",
            material: "olefin",
            "tilt mechanism": "manual tilt"
          },
          available: false,
          price: 316.29
        },
        "9879255677": {
          item_id: "9879255677",
          options: {
            size: "6 ft",
            color: "green",
            material: "olefin",
            "tilt mechanism": "auto tilt"
          },
          available: true,
          price: 288.82
        },
        "7068351115": {
          item_id: "7068351115",
          options: {
            size: "7 ft",
            color: "black",
            material: "polyester",
            "tilt mechanism": "auto tilt"
          },
          available: true,
          price: 300.24
        },
        "6243981804": {
          item_id: "6243981804",
          options: {
            size: "7 ft",
            color: "green",
            material: "sunbrella",
            "tilt mechanism": "auto tilt"
          },
          available: true,
          price: 329.85
        },
        "3111466194": {
          item_id: "3111466194",
          options: {
            size: "7 ft",
            color: "red",
            material: "polyester",
            "tilt mechanism": "manual tilt"
          },
          available: false,
          price: 285.66
        }
      }
    },
    "3821016478": {
      name: "Air Purifier",
      product_id: "3821016478",
      variants: {
        "8302289002": {
          item_id: "8302289002",
          options: {
            "room size": "large",
            "filter type": "HEPA",
            features: "night mode"
          },
          available: true,
          price: 547.55
        },
        "3676786561": {
          item_id: "3676786561",
          options: {
            "room size": "small",
            "filter type": "HEPA",
            features: "quiet operation"
          },
          available: true,
          price: 502.7
        },
        "5669664287": {
          item_id: "5669664287",
          options: {
            "room size": "small",
            "filter type": "ionic",
            features: "quiet operation"
          },
          available: true,
          price: 543.68
        },
        "6341716129": {
          item_id: "6341716129",
          options: {
            "room size": "large",
            "filter type": "HEPA",
            features: "smart sensors"
          },
          available: false,
          price: 523.31
        },
        "4035304400": {
          item_id: "4035304400",
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "smart sensors"
          },
          available: false,
          price: 504.19
        },
        "5826601160": {
          item_id: "5826601160",
          options: {
            "room size": "medium",
            "filter type": "carbon",
            features: "night mode"
          },
          available: false,
          price: 506.15
        },
        "3076708684": {
          item_id: "3076708684",
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "quiet operation"
          },
          available: true,
          price: 535.97
        },
        "7166996157": {
          item_id: "7166996157",
          options: {
            "room size": "small",
            "filter type": "HEPA",
            features: "night mode"
          },
          available: true,
          price: 518.31
        },
        "1327854740": {
          item_id: "1327854740",
          options: {
            "room size": "medium",
            "filter type": "HEPA",
            features: "night mode"
          },
          available: true,
          price: 492.65
        },
        "9534205511": {
          item_id: "9534205511",
          options: {
            "room size": "large",
            "filter type": "ionic",
            features: "smart sensors"
          },
          available: true,
          price: 473.43
        },
        "9375701158": {
          item_id: "9375701158",
          options: {
            "room size": "medium",
            "filter type": "carbon",
            features: "quiet operation"
          },
          available: true,
          price: 489.5
        }
      }
    },
    "5149340237": {
      name: "Makeup Kit",
      product_id: "5149340237",
      variants: {
        "1573035764": {
          item_id: "1573035764",
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand A"
          },
          available: true,
          price: 253.98
        },
        "1709726483": {
          item_id: "1709726483",
          options: {
            "skin tone": "medium",
            "kit size": "basic",
            brand: "Brand A"
          },
          available: false,
          price: 230.26
        },
        "3913310464": {
          item_id: "3913310464",
          options: {
            "skin tone": "dark",
            "kit size": "basic",
            brand: "Brand A"
          },
          available: false,
          price: 272.2
        },
        "6254646215": {
          item_id: "6254646215",
          options: {
            "skin tone": "dark",
            "kit size": "basic",
            brand: "Brand B"
          },
          available: true,
          price: 248.85
        },
        "6509212169": {
          item_id: "6509212169",
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand A"
          },
          available: false,
          price: 256.14
        },
        "3017803871": {
          item_id: "3017803871",
          options: {
            "skin tone": "medium",
            "kit size": "basic",
            brand: "Brand C"
          },
          available: true,
          price: 237.37
        },
        "5012998807": {
          item_id: "5012998807",
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand B"
          },
          available: true,
          price: 258.71
        },
        "2882812427": {
          item_id: "2882812427",
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand A"
          },
          available: true,
          price: 261.11
        },
        "4624254797": {
          item_id: "4624254797",
          options: {
            "skin tone": "light",
            "kit size": "basic",
            brand: "Brand C"
          },
          available: false,
          price: 272.99
        },
        "7736359414": {
          item_id: "7736359414",
          options: {
            "skin tone": "medium",
            "kit size": "professional",
            brand: "Brand C"
          },
          available: false,
          price: 253.08
        },
        "8090061879": {
          item_id: "8090061879",
          options: {
            "skin tone": "light",
            "kit size": "basic",
            brand: "Brand B"
          },
          available: false,
          price: 261.4
        },
        "7902309762": {
          item_id: "7902309762",
          options: {
            "skin tone": "light",
            "kit size": "professional",
            brand: "Brand B"
          },
          available: true,
          price: 243.62
        },
        "1763705424": {
          item_id: "1763705424",
          options: {
            "skin tone": "dark",
            "kit size": "professional",
            brand: "Brand C"
          },
          available: true,
          price: 235.44
        }
      }
    },
    "1968349452": {
      name: "Skateboard",
      product_id: "1968349452",
      variants: {
        "6843647669": {
          item_id: "6843647669",
          options: {
            "deck material": "bamboo",
            length: "28 inch",
            design: "graphic"
          },
          available: true,
          price: 180.1
        },
        "3232433601": {
          item_id: "3232433601",
          options: {
            "deck material": "maple",
            length: "28 inch",
            design: "plain"
          },
          available: true,
          price: 204.14
        },
        "3098764622": {
          item_id: "3098764622",
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "plain"
          },
          available: true,
          price: 202.13
        },
        "3541421151": {
          item_id: "3541421151",
          options: {
            "deck material": "bamboo",
            length: "34 inch",
            design: "graphic"
          },
          available: true,
          price: 193.79
        },
        "4545791457": {
          item_id: "4545791457",
          options: {
            "deck material": "plastic",
            length: "28 inch",
            design: "plain"
          },
          available: true,
          price: 186.06
        },
        "6313971174": {
          item_id: "6313971174",
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "custom"
          },
          available: true,
          price: 193.97
        },
        "3877188862": {
          item_id: "3877188862",
          options: {
            "deck material": "plastic",
            length: "31 inch",
            design: "plain"
          },
          available: true,
          price: 182.03
        },
        "5038485381": {
          item_id: "5038485381",
          options: {
            "deck material": "plastic",
            length: "31 inch",
            design: "custom"
          },
          available: true,
          price: 189.65
        },
        "9594745976": {
          item_id: "9594745976",
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "custom"
          },
          available: true,
          price: 184.13
        },
        "6673921677": {
          item_id: "6673921677",
          options: {
            "deck material": "bamboo",
            length: "28 inch",
            design: "custom"
          },
          available: true,
          price: 189.57
        },
        "6956751343": {
          item_id: "6956751343",
          options: {
            "deck material": "bamboo",
            length: "34 inch",
            design: "custom"
          },
          available: true,
          price: 217.06
        },
        "5489028872": {
          item_id: "5489028872",
          options: {
            "deck material": "plastic",
            length: "34 inch",
            design: "graphic"
          },
          available: true,
          price: 187.71
        },
        "8176740019": {
          item_id: "8176740019",
          options: {
            "deck material": "bamboo",
            length: "28 inch",
            design: "plain"
          },
          available: true,
          price: 208.6
        },
        "5120532699": {
          item_id: "5120532699",
          options: {
            "deck material": "maple",
            length: "31 inch",
            design: "graphic"
          },
          available: true,
          price: 187.23
        },
        "5312063289": {
          item_id: "5312063289",
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "graphic"
          },
          available: true,
          price: 195.15
        },
        "4293355847": {
          item_id: "4293355847",
          options: {
            "deck material": "bamboo",
            length: "31 inch",
            design: "plain"
          },
          available: true,
          price: 200.8
        },
        "2819462352": {
          item_id: "2819462352",
          options: {
            "deck material": "maple",
            length: "28 inch",
            design: "graphic"
          },
          available: true,
          price: 180.66
        },
        "2177997696": {
          item_id: "2177997696",
          options: {
            "deck material": "plastic",
            length: "28 inch",
            design: "custom"
          },
          available: true,
          price: 206.6
        },
        "2343503231": {
          item_id: "2343503231",
          options: {
            "deck material": "maple",
            length: "34 inch",
            design: "graphic"
          },
          available: false,
          price: 196.86
        }
      }
    },
    "1808611083": {
      name: "Jigsaw Puzzle",
      product_id: "1808611083",
      variants: {
        "3614853563": {
          item_id: "3614853563",
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "intermediate"
          },
          available: false,
          price: 46.99
        },
        "4772738468": {
          item_id: "4772738468",
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "beginner"
          },
          available: false,
          price: 53.91
        },
        "4068787148": {
          item_id: "4068787148",
          options: {
            pieces: "500",
            theme: "art",
            "difficulty level": "intermediate"
          },
          available: true,
          price: 52.01
        },
        "3112842858": {
          item_id: "3112842858",
          options: {
            pieces: "1000",
            theme: "fantasy",
            "difficulty level": "intermediate"
          },
          available: true,
          price: 49.1
        },
        "7869640094": {
          item_id: "7869640094",
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "expert"
          },
          available: false,
          price: 47.59
        },
        "1096508426": {
          item_id: "1096508426",
          options: {
            pieces: "500",
            theme: "art",
            "difficulty level": "beginner"
          },
          available: true,
          price: 46.13
        },
        "9237024510": {
          item_id: "9237024510",
          options: {
            pieces: "500",
            theme: "animals",
            "difficulty level": "expert"
          },
          available: true,
          price: 53.53
        },
        "5546244844": {
          item_id: "5546244844",
          options: {
            pieces: "1500",
            theme: "art",
            "difficulty level": "intermediate"
          },
          available: true,
          price: 51.59
        },
        "1008948180": {
          item_id: "1008948180",
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "beginner"
          },
          available: false,
          price: 54.34
        },
        "6245746168": {
          item_id: "6245746168",
          options: {
            pieces: "1500",
            theme: "animals",
            "difficulty level": "intermediate"
          },
          available: true,
          price: 46
        },
        "7127170374": {
          item_id: "7127170374",
          options: {
            pieces: "2000",
            theme: "fantasy",
            "difficulty level": "beginner"
          },
          available: false,
          price: 52.03
        },
        "9370300555": {
          item_id: "9370300555",
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "expert"
          },
          available: false,
          price: 45.9
        },
        "9665100170": {
          item_id: "9665100170",
          options: {
            pieces: "1500",
            theme: "animals",
            "difficulty level": "beginner"
          },
          available: true,
          price: 45.39
        },
        "4572024853": {
          item_id: "4572024853",
          options: {
            pieces: "1000",
            theme: "animals",
            "difficulty level": "expert"
          },
          available: true,
          price: 53.72
        },
        "5645314103": {
          item_id: "5645314103",
          options: {
            pieces: "2000",
            theme: "animals",
            "difficulty level": "intermediate"
          },
          available: true,
          price: 46.19
        },
        "9779102705": {
          item_id: "9779102705",
          options: {
            pieces: "1000",
            theme: "art",
            "difficulty level": "intermediate"
          },
          available: false,
          price: 54.11
        },
        "9030221155": {
          item_id: "9030221155",
          options: {
            pieces: "2000",
            theme: "art",
            "difficulty level": "beginner"
          },
          available: false,
          price: 51.98
        },
        "5172162216": {
          item_id: "5172162216",
          options: {
            pieces: "2000",
            theme: "landscape",
            "difficulty level": "intermediate"
          },
          available: false,
          price: 48.51
        }
      }
    },
    "6819683148": {
      name: "Grill",
      product_id: "6819683148",
      variants: {
        "4404981319": {
          item_id: "4404981319",
          options: {
            type: "electric",
            size: "large",
            features: "rotisserie"
          },
          available: true,
          price: 1031
        },
        "3876764226": {
          item_id: "3876764226",
          options: {
            type: "electric",
            size: "portable",
            features: "side burner"
          },
          available: true,
          price: 981.47
        },
        "5745575001": {
          item_id: "5745575001",
          options: {
            type: "electric",
            size: "portable",
            features: "rotisserie"
          },
          available: true,
          price: 986.65
        },
        "5666020311": {
          item_id: "5666020311",
          options: {
            type: "electric",
            size: "medium",
            features: "side burner"
          },
          available: false,
          price: 1058.86
        },
        "7082455361": {
          item_id: "7082455361",
          options: {
            type: "charcoal",
            size: "medium",
            features: "rotisserie"
          },
          available: true,
          price: 962.69
        },
        "9724317332": {
          item_id: "9724317332",
          options: {
            type: "gas",
            size: "portable",
            features: "side burner"
          },
          available: true,
          price: 1042.19
        },
        "7848293342": {
          item_id: "7848293342",
          options: {
            type: "charcoal",
            size: "medium",
            features: "side burner"
          },
          available: true,
          price: 942.71
        },
        "1120917161": {
          item_id: "1120917161",
          options: {
            type: "electric",
            size: "portable",
            features: "none"
          },
          available: false,
          price: 953.39
        },
        "5105441284": {
          item_id: "5105441284",
          options: {
            type: "charcoal",
            size: "portable",
            features: "none"
          },
          available: true,
          price: 924.5
        },
        "5946177616": {
          item_id: "5946177616",
          options: { type: "gas", size: "portable", features: "none" },
          available: true,
          price: 1057.24
        },
        "7717598293": {
          item_id: "7717598293",
          options: {
            type: "electric",
            size: "medium",
            features: "rotisserie"
          },
          available: false,
          price: 985.66
        },
        "6589665742": {
          item_id: "6589665742",
          options: { type: "gas", size: "large", features: "rotisserie" },
          available: false,
          price: 933.17
        }
      }
    },
    "6992792935": {
      name: "Headphones",
      product_id: "6992792935",
      variants: {
        "9314474252": {
          item_id: "9314474252",
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "blue"
          },
          available: false,
          price: 330.08
        },
        "5788631787": {
          item_id: "5788631787",
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "black"
          },
          available: false,
          price: 375.55
        },
        "3374679624": {
          item_id: "3374679624",
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "black"
          },
          available: true,
          price: 370.53
        },
        "3104857380": {
          item_id: "3104857380",
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "red"
          },
          available: true,
          price: 377.97
        },
        "7493556126": {
          item_id: "7493556126",
          options: {
            type: "over-ear",
            connectivity: "wireless",
            color: "black"
          },
          available: true,
          price: 346.97
        },
        "5635439102": {
          item_id: "5635439102",
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "blue"
          },
          available: false,
          price: 353.76
        },
        "9805150490": {
          item_id: "9805150490",
          options: {
            type: "on-ear",
            connectivity: "wireless",
            color: "white"
          },
          available: true,
          price: 368.87
        },
        "4202497723": {
          item_id: "4202497723",
          options: {
            type: "over-ear",
            connectivity: "wireless",
            color: "blue"
          },
          available: false,
          price: 342.81
        },
        "2231112417": {
          item_id: "2231112417",
          options: {
            type: "over-ear",
            connectivity: "wired",
            color: "red"
          },
          available: false,
          price: 364.22
        },
        "7184044281": {
          item_id: "7184044281",
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "black"
          },
          available: true,
          price: 344.55
        },
        "2025713343": {
          item_id: "2025713343",
          options: {
            type: "on-ear",
            connectivity: "wired",
            color: "white"
          },
          available: false,
          price: 336.15
        },
        "9838673490": {
          item_id: "9838673490",
          options: {
            type: "in-ear",
            connectivity: "wireless",
            color: "red"
          },
          available: false,
          price: 344.55
        },
        "1133777903": {
          item_id: "1133777903",
          options: {
            type: "in-ear",
            connectivity: "wired",
            color: "red"
          },
          available: false,
          price: 359.66
        }
      }
    },
    "1762337868": {
      name: "Vacuum Cleaner",
      product_id: "1762337868",
      variants: {
        "4602305039": {
          item_id: "4602305039",
          options: {
            type: "robotic",
            "bagged/bagless": "bagged",
            features: "cordless"
          },
          available: true,
          price: 561.05
        },
        "3019027053": {
          item_id: "3019027053",
          options: {
            type: "upright",
            "bagged/bagless": "bagless",
            features: "cordless"
          },
          available: false,
          price: 553.03
        },
        "1345513440": {
          item_id: "1345513440",
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "cordless"
          },
          available: true,
          price: 655.59
        },
        "4806644905": {
          item_id: "4806644905",
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "cordless"
          },
          available: true,
          price: 658.89
        },
        "7407609582": {
          item_id: "7407609582",
          options: {
            type: "upright",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          },
          available: true,
          price: 602.48
        },
        "4965355367": {
          item_id: "4965355367",
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          },
          available: true,
          price: 620.07
        },
        "3526747930": {
          item_id: "3526747930",
          options: {
            type: "upright",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          },
          available: true,
          price: 540.12
        },
        "2872451762": {
          item_id: "2872451762",
          options: {
            type: "canister",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          },
          available: true,
          price: 622.12
        },
        "7958300294": {
          item_id: "7958300294",
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "pet hair removal"
          },
          available: true,
          price: 642.72
        },
        "9970989750": {
          item_id: "9970989750",
          options: {
            type: "upright",
            "bagged/bagless": "bagged",
            features: "cordless"
          },
          available: false,
          price: 569.43
        },
        "4725166838": {
          item_id: "4725166838",
          options: {
            type: "robotic",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          },
          available: true,
          price: 602.11
        },
        "1304426904": {
          item_id: "1304426904",
          options: {
            type: "canister",
            "bagged/bagless": "bagless",
            features: "HEPA filter"
          },
          available: false,
          price: 565.79
        },
        "6259501109": {
          item_id: "6259501109",
          options: {
            type: "robotic",
            "bagged/bagless": "bagged",
            features: "pet hair removal"
          },
          available: false,
          price: 652.61
        }
      }
    },
    "6858788497": {
      name: "Perfume",
      product_id: "6858788497",
      variants: {
        "9007697085": {
          item_id: "9007697085",
          options: { "scent family": "fresh", size: "50ml", gender: "men" },
          available: true,
          price: 318.96
        },
        "5081446110": {
          item_id: "5081446110",
          options: { "scent family": "woody", size: "30ml", gender: "men" },
          available: true,
          price: 322.52
        },
        "1325156478": {
          item_id: "1325156478",
          options: {
            "scent family": "oriental",
            size: "30ml",
            gender: "men"
          },
          available: true,
          price: 298.52
        },
        "1002370030": {
          item_id: "1002370030",
          options: {
            "scent family": "woody",
            size: "50ml",
            gender: "women"
          },
          available: false,
          price: 290.25
        },
        "3399869890": {
          item_id: "3399869890",
          options: {
            "scent family": "woody",
            size: "100ml",
            gender: "men"
          },
          available: true,
          price: 312.04
        },
        "5421902839": {
          item_id: "5421902839",
          options: {
            "scent family": "oriental",
            size: "100ml",
            gender: "men"
          },
          available: true,
          price: 328.25
        },
        "1725100896": {
          item_id: "1725100896",
          options: {
            "scent family": "oriental",
            size: "30ml",
            gender: "unisex"
          },
          available: false,
          price: 289.66
        },
        "9447903288": {
          item_id: "9447903288",
          options: { "scent family": "fresh", size: "30ml", gender: "men" },
          available: false,
          price: 296.78
        },
        "8316205423": {
          item_id: "8316205423",
          options: {
            "scent family": "woody",
            size: "30ml",
            gender: "women"
          },
          available: true,
          price: 288.75
        },
        "6826843914": {
          item_id: "6826843914",
          options: {
            "scent family": "fresh",
            size: "100ml",
            gender: "men"
          },
          available: false,
          price: 326.74
        }
      }
    }
  };
});

// tau-bench/retail/tau-bench-retail.ts
var exports_tau_bench_retail = {};
__export(exports_tau_bench_retail, {
  serve: () => serve,
  policy: () => policy,
  getDB: () => getDB
});
var import_bearer_auth = __toESM(require_bearer_auth(), 1);
var import_swagger = __toESM(require_swagger2(), 1);
var import_swagger_ui = __toESM(require_swagger_ui(), 1);

// node_modules/@sinclair/typebox/build/esm/type/guard/value.mjs
var exports_value = {};
__export(exports_value, {
  IsUndefined: () => IsUndefined,
  IsUint8Array: () => IsUint8Array,
  IsSymbol: () => IsSymbol,
  IsString: () => IsString,
  IsRegExp: () => IsRegExp,
  IsObject: () => IsObject,
  IsNumber: () => IsNumber,
  IsNull: () => IsNull,
  IsIterator: () => IsIterator,
  IsFunction: () => IsFunction,
  IsDate: () => IsDate,
  IsBoolean: () => IsBoolean,
  IsBigInt: () => IsBigInt,
  IsAsyncIterator: () => IsAsyncIterator,
  IsArray: () => IsArray,
  HasPropertyKey: () => HasPropertyKey
});
function HasPropertyKey(value, key) {
  return key in value;
}
function IsAsyncIterator(value) {
  return IsObject(value) && !IsArray(value) && !IsUint8Array(value) && Symbol.asyncIterator in value;
}
function IsArray(value) {
  return Array.isArray(value);
}
function IsBigInt(value) {
  return typeof value === "bigint";
}
function IsBoolean(value) {
  return typeof value === "boolean";
}
function IsDate(value) {
  return value instanceof globalThis.Date;
}
function IsFunction(value) {
  return typeof value === "function";
}
function IsIterator(value) {
  return IsObject(value) && !IsArray(value) && !IsUint8Array(value) && Symbol.iterator in value;
}
function IsNull(value) {
  return value === null;
}
function IsNumber(value) {
  return typeof value === "number";
}
function IsObject(value) {
  return typeof value === "object" && value !== null;
}
function IsRegExp(value) {
  return value instanceof globalThis.RegExp;
}
function IsString(value) {
  return typeof value === "string";
}
function IsSymbol(value) {
  return typeof value === "symbol";
}
function IsUint8Array(value) {
  return value instanceof globalThis.Uint8Array;
}
function IsUndefined(value) {
  return value === undefined;
}

// node_modules/@sinclair/typebox/build/esm/type/clone/value.mjs
function ArrayType(value) {
  return value.map((value2) => Visit(value2));
}
function DateType(value) {
  return new Date(value.getTime());
}
function Uint8ArrayType(value) {
  return new Uint8Array(value);
}
function RegExpType(value) {
  return new RegExp(value.source, value.flags);
}
function ObjectType(value) {
  const result = {};
  for (const key of Object.getOwnPropertyNames(value)) {
    result[key] = Visit(value[key]);
  }
  for (const key of Object.getOwnPropertySymbols(value)) {
    result[key] = Visit(value[key]);
  }
  return result;
}
function Visit(value) {
  return IsArray(value) ? ArrayType(value) : IsDate(value) ? DateType(value) : IsUint8Array(value) ? Uint8ArrayType(value) : IsRegExp(value) ? RegExpType(value) : IsObject(value) ? ObjectType(value) : value;
}
function Clone(value) {
  return Visit(value);
}

// node_modules/@sinclair/typebox/build/esm/type/clone/type.mjs
function CloneType(schema, options) {
  return options === undefined ? Clone(schema) : Clone({ ...options, ...schema });
}

// node_modules/@sinclair/typebox/build/esm/value/guard/guard.mjs
function IsAsyncIterator2(value) {
  return IsObject2(value) && globalThis.Symbol.asyncIterator in value;
}
function IsIterator2(value) {
  return IsObject2(value) && globalThis.Symbol.iterator in value;
}
function IsStandardObject(value) {
  return IsObject2(value) && (globalThis.Object.getPrototypeOf(value) === Object.prototype || globalThis.Object.getPrototypeOf(value) === null);
}
function IsPromise(value) {
  return value instanceof globalThis.Promise;
}
function IsDate2(value) {
  return value instanceof Date && globalThis.Number.isFinite(value.getTime());
}
function IsMap(value) {
  return value instanceof globalThis.Map;
}
function IsSet(value) {
  return value instanceof globalThis.Set;
}
function IsTypedArray(value) {
  return globalThis.ArrayBuffer.isView(value);
}
function IsUint8Array2(value) {
  return value instanceof globalThis.Uint8Array;
}
function HasPropertyKey2(value, key) {
  return key in value;
}
function IsObject2(value) {
  return value !== null && typeof value === "object";
}
function IsArray2(value) {
  return globalThis.Array.isArray(value) && !globalThis.ArrayBuffer.isView(value);
}
function IsUndefined2(value) {
  return value === undefined;
}
function IsNull2(value) {
  return value === null;
}
function IsBoolean2(value) {
  return typeof value === "boolean";
}
function IsNumber2(value) {
  return typeof value === "number";
}
function IsInteger(value) {
  return globalThis.Number.isInteger(value);
}
function IsBigInt2(value) {
  return typeof value === "bigint";
}
function IsString2(value) {
  return typeof value === "string";
}
function IsFunction2(value) {
  return typeof value === "function";
}
function IsSymbol2(value) {
  return typeof value === "symbol";
}
function IsValueType(value) {
  return IsBigInt2(value) || IsBoolean2(value) || IsNull2(value) || IsNumber2(value) || IsString2(value) || IsSymbol2(value) || IsUndefined2(value);
}

// node_modules/@sinclair/typebox/build/esm/system/policy.mjs
var TypeSystemPolicy;
(function(TypeSystemPolicy2) {
  TypeSystemPolicy2.InstanceMode = "default";
  TypeSystemPolicy2.ExactOptionalPropertyTypes = false;
  TypeSystemPolicy2.AllowArrayObject = false;
  TypeSystemPolicy2.AllowNaN = false;
  TypeSystemPolicy2.AllowNullVoid = false;
  function IsExactOptionalProperty(value, key) {
    return TypeSystemPolicy2.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;
  }
  TypeSystemPolicy2.IsExactOptionalProperty = IsExactOptionalProperty;
  function IsObjectLike(value) {
    const isObject = IsObject2(value);
    return TypeSystemPolicy2.AllowArrayObject ? isObject : isObject && !IsArray2(value);
  }
  TypeSystemPolicy2.IsObjectLike = IsObjectLike;
  function IsRecordLike(value) {
    return IsObjectLike(value) && !(value instanceof Date) && !(value instanceof Uint8Array);
  }
  TypeSystemPolicy2.IsRecordLike = IsRecordLike;
  function IsNumberLike(value) {
    return TypeSystemPolicy2.AllowNaN ? IsNumber2(value) : Number.isFinite(value);
  }
  TypeSystemPolicy2.IsNumberLike = IsNumberLike;
  function IsVoidLike(value) {
    const isUndefined = IsUndefined2(value);
    return TypeSystemPolicy2.AllowNullVoid ? isUndefined || value === null : isUndefined;
  }
  TypeSystemPolicy2.IsVoidLike = IsVoidLike;
})(TypeSystemPolicy || (TypeSystemPolicy = {}));

// node_modules/@sinclair/typebox/build/esm/type/create/immutable.mjs
function ImmutableArray(value) {
  return globalThis.Object.freeze(value).map((value2) => Immutable(value2));
}
function ImmutableDate(value) {
  return value;
}
function ImmutableUint8Array(value) {
  return value;
}
function ImmutableRegExp(value) {
  return value;
}
function ImmutableObject(value) {
  const result = {};
  for (const key of Object.getOwnPropertyNames(value)) {
    result[key] = Immutable(value[key]);
  }
  for (const key of Object.getOwnPropertySymbols(value)) {
    result[key] = Immutable(value[key]);
  }
  return globalThis.Object.freeze(result);
}
function Immutable(value) {
  return IsArray(value) ? ImmutableArray(value) : IsDate(value) ? ImmutableDate(value) : IsUint8Array(value) ? ImmutableUint8Array(value) : IsRegExp(value) ? ImmutableRegExp(value) : IsObject(value) ? ImmutableObject(value) : value;
}

// node_modules/@sinclair/typebox/build/esm/type/create/type.mjs
function CreateType(schema, options) {
  const result = options !== undefined ? { ...options, ...schema } : schema;
  switch (TypeSystemPolicy.InstanceMode) {
    case "freeze":
      return Immutable(result);
    case "clone":
      return Clone(result);
    default:
      return result;
  }
}

// node_modules/@sinclair/typebox/build/esm/type/error/error.mjs
class TypeBoxError extends Error {
  constructor(message) {
    super(message);
  }
}

// node_modules/@sinclair/typebox/build/esm/type/symbols/symbols.mjs
var TransformKind = Symbol.for("TypeBox.Transform");
var ReadonlyKind = Symbol.for("TypeBox.Readonly");
var OptionalKind = Symbol.for("TypeBox.Optional");
var Hint = Symbol.for("TypeBox.Hint");
var Kind = Symbol.for("TypeBox.Kind");

// node_modules/@sinclair/typebox/build/esm/type/guard/kind.mjs
function IsReadonly(value) {
  return IsObject(value) && value[ReadonlyKind] === "Readonly";
}
function IsOptional(value) {
  return IsObject(value) && value[OptionalKind] === "Optional";
}
function IsAny(value) {
  return IsKindOf(value, "Any");
}
function IsArgument(value) {
  return IsKindOf(value, "Argument");
}
function IsArray3(value) {
  return IsKindOf(value, "Array");
}
function IsAsyncIterator3(value) {
  return IsKindOf(value, "AsyncIterator");
}
function IsBigInt3(value) {
  return IsKindOf(value, "BigInt");
}
function IsBoolean3(value) {
  return IsKindOf(value, "Boolean");
}
function IsComputed(value) {
  return IsKindOf(value, "Computed");
}
function IsConstructor(value) {
  return IsKindOf(value, "Constructor");
}
function IsDate3(value) {
  return IsKindOf(value, "Date");
}
function IsFunction3(value) {
  return IsKindOf(value, "Function");
}
function IsInteger2(value) {
  return IsKindOf(value, "Integer");
}
function IsIntersect(value) {
  return IsKindOf(value, "Intersect");
}
function IsIterator3(value) {
  return IsKindOf(value, "Iterator");
}
function IsKindOf(value, kind) {
  return IsObject(value) && Kind in value && value[Kind] === kind;
}
function IsLiteralValue(value) {
  return IsBoolean(value) || IsNumber(value) || IsString(value);
}
function IsLiteral(value) {
  return IsKindOf(value, "Literal");
}
function IsMappedKey(value) {
  return IsKindOf(value, "MappedKey");
}
function IsMappedResult(value) {
  return IsKindOf(value, "MappedResult");
}
function IsNever(value) {
  return IsKindOf(value, "Never");
}
function IsNot(value) {
  return IsKindOf(value, "Not");
}
function IsNull3(value) {
  return IsKindOf(value, "Null");
}
function IsNumber3(value) {
  return IsKindOf(value, "Number");
}
function IsObject3(value) {
  return IsKindOf(value, "Object");
}
function IsPromise2(value) {
  return IsKindOf(value, "Promise");
}
function IsRecord(value) {
  return IsKindOf(value, "Record");
}
function IsRef(value) {
  return IsKindOf(value, "Ref");
}
function IsRegExp2(value) {
  return IsKindOf(value, "RegExp");
}
function IsString3(value) {
  return IsKindOf(value, "String");
}
function IsSymbol3(value) {
  return IsKindOf(value, "Symbol");
}
function IsTemplateLiteral(value) {
  return IsKindOf(value, "TemplateLiteral");
}
function IsThis(value) {
  return IsKindOf(value, "This");
}
function IsTransform(value) {
  return IsObject(value) && TransformKind in value;
}
function IsTuple(value) {
  return IsKindOf(value, "Tuple");
}
function IsUndefined3(value) {
  return IsKindOf(value, "Undefined");
}
function IsUnion(value) {
  return IsKindOf(value, "Union");
}
function IsUint8Array3(value) {
  return IsKindOf(value, "Uint8Array");
}
function IsUnknown(value) {
  return IsKindOf(value, "Unknown");
}
function IsUnsafe(value) {
  return IsKindOf(value, "Unsafe");
}
function IsVoid(value) {
  return IsKindOf(value, "Void");
}
function IsKind(value) {
  return IsObject(value) && Kind in value && IsString(value[Kind]);
}
function IsSchema(value) {
  return IsAny(value) || IsArgument(value) || IsArray3(value) || IsBoolean3(value) || IsBigInt3(value) || IsAsyncIterator3(value) || IsComputed(value) || IsConstructor(value) || IsDate3(value) || IsFunction3(value) || IsInteger2(value) || IsIntersect(value) || IsIterator3(value) || IsLiteral(value) || IsMappedKey(value) || IsMappedResult(value) || IsNever(value) || IsNot(value) || IsNull3(value) || IsNumber3(value) || IsObject3(value) || IsPromise2(value) || IsRecord(value) || IsRef(value) || IsRegExp2(value) || IsString3(value) || IsSymbol3(value) || IsTemplateLiteral(value) || IsThis(value) || IsTuple(value) || IsUndefined3(value) || IsUnion(value) || IsUint8Array3(value) || IsUnknown(value) || IsUnsafe(value) || IsVoid(value) || IsKind(value);
}
// node_modules/@sinclair/typebox/build/esm/type/guard/type.mjs
var exports_type = {};
__export(exports_type, {
  TypeGuardUnknownTypeError: () => TypeGuardUnknownTypeError,
  IsVoid: () => IsVoid2,
  IsUnsafe: () => IsUnsafe2,
  IsUnknown: () => IsUnknown2,
  IsUnionLiteral: () => IsUnionLiteral,
  IsUnion: () => IsUnion2,
  IsUndefined: () => IsUndefined4,
  IsUint8Array: () => IsUint8Array4,
  IsTuple: () => IsTuple2,
  IsTransform: () => IsTransform2,
  IsThis: () => IsThis2,
  IsTemplateLiteral: () => IsTemplateLiteral2,
  IsSymbol: () => IsSymbol4,
  IsString: () => IsString4,
  IsSchema: () => IsSchema2,
  IsRegExp: () => IsRegExp3,
  IsRef: () => IsRef2,
  IsRecursive: () => IsRecursive,
  IsRecord: () => IsRecord2,
  IsReadonly: () => IsReadonly2,
  IsProperties: () => IsProperties,
  IsPromise: () => IsPromise3,
  IsOptional: () => IsOptional2,
  IsObject: () => IsObject4,
  IsNumber: () => IsNumber4,
  IsNull: () => IsNull4,
  IsNot: () => IsNot2,
  IsNever: () => IsNever2,
  IsMappedResult: () => IsMappedResult2,
  IsMappedKey: () => IsMappedKey2,
  IsLiteralValue: () => IsLiteralValue2,
  IsLiteralString: () => IsLiteralString,
  IsLiteralNumber: () => IsLiteralNumber,
  IsLiteralBoolean: () => IsLiteralBoolean,
  IsLiteral: () => IsLiteral2,
  IsKindOf: () => IsKindOf2,
  IsKind: () => IsKind2,
  IsIterator: () => IsIterator4,
  IsIntersect: () => IsIntersect2,
  IsInteger: () => IsInteger3,
  IsImport: () => IsImport,
  IsFunction: () => IsFunction4,
  IsDate: () => IsDate4,
  IsConstructor: () => IsConstructor2,
  IsComputed: () => IsComputed2,
  IsBoolean: () => IsBoolean4,
  IsBigInt: () => IsBigInt4,
  IsAsyncIterator: () => IsAsyncIterator4,
  IsArray: () => IsArray4,
  IsArgument: () => IsArgument2,
  IsAny: () => IsAny2
});
class TypeGuardUnknownTypeError extends TypeBoxError {
}
var KnownTypes = [
  "Argument",
  "Any",
  "Array",
  "AsyncIterator",
  "BigInt",
  "Boolean",
  "Computed",
  "Constructor",
  "Date",
  "Enum",
  "Function",
  "Integer",
  "Intersect",
  "Iterator",
  "Literal",
  "MappedKey",
  "MappedResult",
  "Not",
  "Null",
  "Number",
  "Object",
  "Promise",
  "Record",
  "Ref",
  "RegExp",
  "String",
  "Symbol",
  "TemplateLiteral",
  "This",
  "Tuple",
  "Undefined",
  "Union",
  "Uint8Array",
  "Unknown",
  "Void"
];
function IsPattern(value) {
  try {
    new RegExp(value);
    return true;
  } catch {
    return false;
  }
}
function IsControlCharacterFree(value) {
  if (!IsString(value))
    return false;
  for (let i = 0;i < value.length; i++) {
    const code = value.charCodeAt(i);
    if (code >= 7 && code <= 13 || code === 27 || code === 127) {
      return false;
    }
  }
  return true;
}
function IsAdditionalProperties(value) {
  return IsOptionalBoolean(value) || IsSchema2(value);
}
function IsOptionalBigInt(value) {
  return IsUndefined(value) || IsBigInt(value);
}
function IsOptionalNumber(value) {
  return IsUndefined(value) || IsNumber(value);
}
function IsOptionalBoolean(value) {
  return IsUndefined(value) || IsBoolean(value);
}
function IsOptionalString(value) {
  return IsUndefined(value) || IsString(value);
}
function IsOptionalPattern(value) {
  return IsUndefined(value) || IsString(value) && IsControlCharacterFree(value) && IsPattern(value);
}
function IsOptionalFormat(value) {
  return IsUndefined(value) || IsString(value) && IsControlCharacterFree(value);
}
function IsOptionalSchema(value) {
  return IsUndefined(value) || IsSchema2(value);
}
function IsReadonly2(value) {
  return IsObject(value) && value[ReadonlyKind] === "Readonly";
}
function IsOptional2(value) {
  return IsObject(value) && value[OptionalKind] === "Optional";
}
function IsAny2(value) {
  return IsKindOf2(value, "Any") && IsOptionalString(value.$id);
}
function IsArgument2(value) {
  return IsKindOf2(value, "Argument") && IsNumber(value.index);
}
function IsArray4(value) {
  return IsKindOf2(value, "Array") && value.type === "array" && IsOptionalString(value.$id) && IsSchema2(value.items) && IsOptionalNumber(value.minItems) && IsOptionalNumber(value.maxItems) && IsOptionalBoolean(value.uniqueItems) && IsOptionalSchema(value.contains) && IsOptionalNumber(value.minContains) && IsOptionalNumber(value.maxContains);
}
function IsAsyncIterator4(value) {
  return IsKindOf2(value, "AsyncIterator") && value.type === "AsyncIterator" && IsOptionalString(value.$id) && IsSchema2(value.items);
}
function IsBigInt4(value) {
  return IsKindOf2(value, "BigInt") && value.type === "bigint" && IsOptionalString(value.$id) && IsOptionalBigInt(value.exclusiveMaximum) && IsOptionalBigInt(value.exclusiveMinimum) && IsOptionalBigInt(value.maximum) && IsOptionalBigInt(value.minimum) && IsOptionalBigInt(value.multipleOf);
}
function IsBoolean4(value) {
  return IsKindOf2(value, "Boolean") && value.type === "boolean" && IsOptionalString(value.$id);
}
function IsComputed2(value) {
  return IsKindOf2(value, "Computed") && IsString(value.target) && IsArray(value.parameters) && value.parameters.every((schema) => IsSchema2(schema));
}
function IsConstructor2(value) {
  return IsKindOf2(value, "Constructor") && value.type === "Constructor" && IsOptionalString(value.$id) && IsArray(value.parameters) && value.parameters.every((schema) => IsSchema2(schema)) && IsSchema2(value.returns);
}
function IsDate4(value) {
  return IsKindOf2(value, "Date") && value.type === "Date" && IsOptionalString(value.$id) && IsOptionalNumber(value.exclusiveMaximumTimestamp) && IsOptionalNumber(value.exclusiveMinimumTimestamp) && IsOptionalNumber(value.maximumTimestamp) && IsOptionalNumber(value.minimumTimestamp) && IsOptionalNumber(value.multipleOfTimestamp);
}
function IsFunction4(value) {
  return IsKindOf2(value, "Function") && value.type === "Function" && IsOptionalString(value.$id) && IsArray(value.parameters) && value.parameters.every((schema) => IsSchema2(schema)) && IsSchema2(value.returns);
}
function IsImport(value) {
  return IsKindOf2(value, "Import") && HasPropertyKey(value, "$defs") && IsObject(value.$defs) && IsProperties(value.$defs) && HasPropertyKey(value, "$ref") && IsString(value.$ref) && value.$ref in value.$defs;
}
function IsInteger3(value) {
  return IsKindOf2(value, "Integer") && value.type === "integer" && IsOptionalString(value.$id) && IsOptionalNumber(value.exclusiveMaximum) && IsOptionalNumber(value.exclusiveMinimum) && IsOptionalNumber(value.maximum) && IsOptionalNumber(value.minimum) && IsOptionalNumber(value.multipleOf);
}
function IsProperties(value) {
  return IsObject(value) && Object.entries(value).every(([key, schema]) => IsControlCharacterFree(key) && IsSchema2(schema));
}
function IsIntersect2(value) {
  return IsKindOf2(value, "Intersect") && (IsString(value.type) && value.type !== "object" ? false : true) && IsArray(value.allOf) && value.allOf.every((schema) => IsSchema2(schema) && !IsTransform2(schema)) && IsOptionalString(value.type) && (IsOptionalBoolean(value.unevaluatedProperties) || IsOptionalSchema(value.unevaluatedProperties)) && IsOptionalString(value.$id);
}
function IsIterator4(value) {
  return IsKindOf2(value, "Iterator") && value.type === "Iterator" && IsOptionalString(value.$id) && IsSchema2(value.items);
}
function IsKindOf2(value, kind) {
  return IsObject(value) && Kind in value && value[Kind] === kind;
}
function IsLiteralString(value) {
  return IsLiteral2(value) && IsString(value.const);
}
function IsLiteralNumber(value) {
  return IsLiteral2(value) && IsNumber(value.const);
}
function IsLiteralBoolean(value) {
  return IsLiteral2(value) && IsBoolean(value.const);
}
function IsLiteral2(value) {
  return IsKindOf2(value, "Literal") && IsOptionalString(value.$id) && IsLiteralValue2(value.const);
}
function IsLiteralValue2(value) {
  return IsBoolean(value) || IsNumber(value) || IsString(value);
}
function IsMappedKey2(value) {
  return IsKindOf2(value, "MappedKey") && IsArray(value.keys) && value.keys.every((key) => IsNumber(key) || IsString(key));
}
function IsMappedResult2(value) {
  return IsKindOf2(value, "MappedResult") && IsProperties(value.properties);
}
function IsNever2(value) {
  return IsKindOf2(value, "Never") && IsObject(value.not) && Object.getOwnPropertyNames(value.not).length === 0;
}
function IsNot2(value) {
  return IsKindOf2(value, "Not") && IsSchema2(value.not);
}
function IsNull4(value) {
  return IsKindOf2(value, "Null") && value.type === "null" && IsOptionalString(value.$id);
}
function IsNumber4(value) {
  return IsKindOf2(value, "Number") && value.type === "number" && IsOptionalString(value.$id) && IsOptionalNumber(value.exclusiveMaximum) && IsOptionalNumber(value.exclusiveMinimum) && IsOptionalNumber(value.maximum) && IsOptionalNumber(value.minimum) && IsOptionalNumber(value.multipleOf);
}
function IsObject4(value) {
  return IsKindOf2(value, "Object") && value.type === "object" && IsOptionalString(value.$id) && IsProperties(value.properties) && IsAdditionalProperties(value.additionalProperties) && IsOptionalNumber(value.minProperties) && IsOptionalNumber(value.maxProperties);
}
function IsPromise3(value) {
  return IsKindOf2(value, "Promise") && value.type === "Promise" && IsOptionalString(value.$id) && IsSchema2(value.item);
}
function IsRecord2(value) {
  return IsKindOf2(value, "Record") && value.type === "object" && IsOptionalString(value.$id) && IsAdditionalProperties(value.additionalProperties) && IsObject(value.patternProperties) && ((schema) => {
    const keys = Object.getOwnPropertyNames(schema.patternProperties);
    return keys.length === 1 && IsPattern(keys[0]) && IsObject(schema.patternProperties) && IsSchema2(schema.patternProperties[keys[0]]);
  })(value);
}
function IsRecursive(value) {
  return IsObject(value) && Hint in value && value[Hint] === "Recursive";
}
function IsRef2(value) {
  return IsKindOf2(value, "Ref") && IsOptionalString(value.$id) && IsString(value.$ref);
}
function IsRegExp3(value) {
  return IsKindOf2(value, "RegExp") && IsOptionalString(value.$id) && IsString(value.source) && IsString(value.flags) && IsOptionalNumber(value.maxLength) && IsOptionalNumber(value.minLength);
}
function IsString4(value) {
  return IsKindOf2(value, "String") && value.type === "string" && IsOptionalString(value.$id) && IsOptionalNumber(value.minLength) && IsOptionalNumber(value.maxLength) && IsOptionalPattern(value.pattern) && IsOptionalFormat(value.format);
}
function IsSymbol4(value) {
  return IsKindOf2(value, "Symbol") && value.type === "symbol" && IsOptionalString(value.$id);
}
function IsTemplateLiteral2(value) {
  return IsKindOf2(value, "TemplateLiteral") && value.type === "string" && IsString(value.pattern) && value.pattern[0] === "^" && value.pattern[value.pattern.length - 1] === "$";
}
function IsThis2(value) {
  return IsKindOf2(value, "This") && IsOptionalString(value.$id) && IsString(value.$ref);
}
function IsTransform2(value) {
  return IsObject(value) && TransformKind in value;
}
function IsTuple2(value) {
  return IsKindOf2(value, "Tuple") && value.type === "array" && IsOptionalString(value.$id) && IsNumber(value.minItems) && IsNumber(value.maxItems) && value.minItems === value.maxItems && (IsUndefined(value.items) && IsUndefined(value.additionalItems) && value.minItems === 0 || IsArray(value.items) && value.items.every((schema) => IsSchema2(schema)));
}
function IsUndefined4(value) {
  return IsKindOf2(value, "Undefined") && value.type === "undefined" && IsOptionalString(value.$id);
}
function IsUnionLiteral(value) {
  return IsUnion2(value) && value.anyOf.every((schema) => IsLiteralString(schema) || IsLiteralNumber(schema));
}
function IsUnion2(value) {
  return IsKindOf2(value, "Union") && IsOptionalString(value.$id) && IsObject(value) && IsArray(value.anyOf) && value.anyOf.every((schema) => IsSchema2(schema));
}
function IsUint8Array4(value) {
  return IsKindOf2(value, "Uint8Array") && value.type === "Uint8Array" && IsOptionalString(value.$id) && IsOptionalNumber(value.minByteLength) && IsOptionalNumber(value.maxByteLength);
}
function IsUnknown2(value) {
  return IsKindOf2(value, "Unknown") && IsOptionalString(value.$id);
}
function IsUnsafe2(value) {
  return IsKindOf2(value, "Unsafe");
}
function IsVoid2(value) {
  return IsKindOf2(value, "Void") && value.type === "void" && IsOptionalString(value.$id);
}
function IsKind2(value) {
  return IsObject(value) && Kind in value && IsString(value[Kind]) && !KnownTypes.includes(value[Kind]);
}
function IsSchema2(value) {
  return IsObject(value) && (IsAny2(value) || IsArgument2(value) || IsArray4(value) || IsBoolean4(value) || IsBigInt4(value) || IsAsyncIterator4(value) || IsComputed2(value) || IsConstructor2(value) || IsDate4(value) || IsFunction4(value) || IsInteger3(value) || IsIntersect2(value) || IsIterator4(value) || IsLiteral2(value) || IsMappedKey2(value) || IsMappedResult2(value) || IsNever2(value) || IsNot2(value) || IsNull4(value) || IsNumber4(value) || IsObject4(value) || IsPromise3(value) || IsRecord2(value) || IsRef2(value) || IsRegExp3(value) || IsString4(value) || IsSymbol4(value) || IsTemplateLiteral2(value) || IsThis2(value) || IsTuple2(value) || IsUndefined4(value) || IsUnion2(value) || IsUint8Array4(value) || IsUnknown2(value) || IsUnsafe2(value) || IsVoid2(value) || IsKind2(value));
}
// node_modules/@sinclair/typebox/build/esm/type/patterns/patterns.mjs
var PatternBoolean = "(true|false)";
var PatternNumber = "(0|[1-9][0-9]*)";
var PatternString = "(.*)";
var PatternNever = "(?!.*)";
var PatternBooleanExact = `^${PatternBoolean}$`;
var PatternNumberExact = `^${PatternNumber}$`;
var PatternStringExact = `^${PatternString}$`;
var PatternNeverExact = `^${PatternNever}$`;

// node_modules/@sinclair/typebox/build/esm/type/registry/format.mjs
var exports_format = {};
__export(exports_format, {
  Set: () => Set2,
  Has: () => Has,
  Get: () => Get,
  Entries: () => Entries,
  Delete: () => Delete,
  Clear: () => Clear
});
var map = new Map;
function Entries() {
  return new Map(map);
}
function Clear() {
  return map.clear();
}
function Delete(format) {
  return map.delete(format);
}
function Has(format) {
  return map.has(format);
}
function Set2(format, func) {
  map.set(format, func);
}
function Get(format) {
  return map.get(format);
}
// node_modules/@sinclair/typebox/build/esm/type/registry/type.mjs
var exports_type2 = {};
__export(exports_type2, {
  Set: () => Set3,
  Has: () => Has2,
  Get: () => Get2,
  Entries: () => Entries2,
  Delete: () => Delete2,
  Clear: () => Clear2
});
var map2 = new Map;
function Entries2() {
  return new Map(map2);
}
function Clear2() {
  return map2.clear();
}
function Delete2(kind) {
  return map2.delete(kind);
}
function Has2(kind) {
  return map2.has(kind);
}
function Set3(kind, func) {
  map2.set(kind, func);
}
function Get2(kind) {
  return map2.get(kind);
}
// node_modules/@sinclair/typebox/build/esm/type/sets/set.mjs
function SetIncludes(T, S) {
  return T.includes(S);
}
function SetDistinct(T) {
  return [...new Set(T)];
}
function SetIntersect(T, S) {
  return T.filter((L) => S.includes(L));
}
function SetIntersectManyResolve(T, Init) {
  return T.reduce((Acc, L) => {
    return SetIntersect(Acc, L);
  }, Init);
}
function SetIntersectMany(T) {
  return T.length === 1 ? T[0] : T.length > 1 ? SetIntersectManyResolve(T.slice(1), T[0]) : [];
}
function SetUnionMany(T) {
  const Acc = [];
  for (const L of T)
    Acc.push(...L);
  return Acc;
}

// node_modules/@sinclair/typebox/build/esm/type/any/any.mjs
function Any(options) {
  return CreateType({ [Kind]: "Any" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/array/array.mjs
function Array2(items, options) {
  return CreateType({ [Kind]: "Array", type: "array", items }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/argument/argument.mjs
function Argument(index) {
  return CreateType({ [Kind]: "Argument", index });
}

// node_modules/@sinclair/typebox/build/esm/type/async-iterator/async-iterator.mjs
function AsyncIterator(items, options) {
  return CreateType({ [Kind]: "AsyncIterator", type: "AsyncIterator", items }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/computed/computed.mjs
function Computed(target, parameters, options) {
  return CreateType({ [Kind]: "Computed", target, parameters }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/discard/discard.mjs
function DiscardKey(value, key) {
  const { [key]: _, ...rest } = value;
  return rest;
}
function Discard(value, keys) {
  return keys.reduce((acc, key) => DiscardKey(acc, key), value);
}

// node_modules/@sinclair/typebox/build/esm/type/never/never.mjs
function Never(options) {
  return CreateType({ [Kind]: "Never", not: {} }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/mapped/mapped-result.mjs
function MappedResult(properties) {
  return CreateType({
    [Kind]: "MappedResult",
    properties
  });
}

// node_modules/@sinclair/typebox/build/esm/type/constructor/constructor.mjs
function Constructor(parameters, returns, options) {
  return CreateType({ [Kind]: "Constructor", type: "Constructor", parameters, returns }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/function/function.mjs
function Function2(parameters, returns, options) {
  return CreateType({ [Kind]: "Function", type: "Function", parameters, returns }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/union/union-create.mjs
function UnionCreate(T, options) {
  return CreateType({ [Kind]: "Union", anyOf: T }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/union/union-evaluated.mjs
function IsUnionOptional(types) {
  return types.some((type) => IsOptional(type));
}
function RemoveOptionalFromRest(types) {
  return types.map((left) => IsOptional(left) ? RemoveOptionalFromType(left) : left);
}
function RemoveOptionalFromType(T) {
  return Discard(T, [OptionalKind]);
}
function ResolveUnion(types, options) {
  const isOptional = IsUnionOptional(types);
  return isOptional ? Optional(UnionCreate(RemoveOptionalFromRest(types), options)) : UnionCreate(RemoveOptionalFromRest(types), options);
}
function UnionEvaluated(T, options) {
  return T.length === 1 ? CreateType(T[0], options) : T.length === 0 ? Never(options) : ResolveUnion(T, options);
}

// node_modules/@sinclair/typebox/build/esm/type/union/union.mjs
function Union(types, options) {
  return types.length === 0 ? Never(options) : types.length === 1 ? CreateType(types[0], options) : UnionCreate(types, options);
}

// node_modules/@sinclair/typebox/build/esm/type/template-literal/parse.mjs
class TemplateLiteralParserError extends TypeBoxError {
}
function Unescape(pattern) {
  return pattern.replace(/\\\$/g, "$").replace(/\\\*/g, "*").replace(/\\\^/g, "^").replace(/\\\|/g, "|").replace(/\\\(/g, "(").replace(/\\\)/g, ")");
}
function IsNonEscaped(pattern, index, char) {
  return pattern[index] === char && pattern.charCodeAt(index - 1) !== 92;
}
function IsOpenParen(pattern, index) {
  return IsNonEscaped(pattern, index, "(");
}
function IsCloseParen(pattern, index) {
  return IsNonEscaped(pattern, index, ")");
}
function IsSeparator(pattern, index) {
  return IsNonEscaped(pattern, index, "|");
}
function IsGroup(pattern) {
  if (!(IsOpenParen(pattern, 0) && IsCloseParen(pattern, pattern.length - 1)))
    return false;
  let count = 0;
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index))
      count += 1;
    if (IsCloseParen(pattern, index))
      count -= 1;
    if (count === 0 && index !== pattern.length - 1)
      return false;
  }
  return true;
}
function InGroup(pattern) {
  return pattern.slice(1, pattern.length - 1);
}
function IsPrecedenceOr(pattern) {
  let count = 0;
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index))
      count += 1;
    if (IsCloseParen(pattern, index))
      count -= 1;
    if (IsSeparator(pattern, index) && count === 0)
      return true;
  }
  return false;
}
function IsPrecedenceAnd(pattern) {
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index))
      return true;
  }
  return false;
}
function Or(pattern) {
  let [count, start] = [0, 0];
  const expressions = [];
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index))
      count += 1;
    if (IsCloseParen(pattern, index))
      count -= 1;
    if (IsSeparator(pattern, index) && count === 0) {
      const range2 = pattern.slice(start, index);
      if (range2.length > 0)
        expressions.push(TemplateLiteralParse(range2));
      start = index + 1;
    }
  }
  const range = pattern.slice(start);
  if (range.length > 0)
    expressions.push(TemplateLiteralParse(range));
  if (expressions.length === 0)
    return { type: "const", const: "" };
  if (expressions.length === 1)
    return expressions[0];
  return { type: "or", expr: expressions };
}
function And(pattern) {
  function Group(value, index) {
    if (!IsOpenParen(value, index))
      throw new TemplateLiteralParserError(`TemplateLiteralParser: Index must point to open parens`);
    let count = 0;
    for (let scan = index;scan < value.length; scan++) {
      if (IsOpenParen(value, scan))
        count += 1;
      if (IsCloseParen(value, scan))
        count -= 1;
      if (count === 0)
        return [index, scan];
    }
    throw new TemplateLiteralParserError(`TemplateLiteralParser: Unclosed group parens in expression`);
  }
  function Range(pattern2, index) {
    for (let scan = index;scan < pattern2.length; scan++) {
      if (IsOpenParen(pattern2, scan))
        return [index, scan];
    }
    return [index, pattern2.length];
  }
  const expressions = [];
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index)) {
      const [start, end] = Group(pattern, index);
      const range = pattern.slice(start, end + 1);
      expressions.push(TemplateLiteralParse(range));
      index = end;
    } else {
      const [start, end] = Range(pattern, index);
      const range = pattern.slice(start, end);
      if (range.length > 0)
        expressions.push(TemplateLiteralParse(range));
      index = end - 1;
    }
  }
  return expressions.length === 0 ? { type: "const", const: "" } : expressions.length === 1 ? expressions[0] : { type: "and", expr: expressions };
}
function TemplateLiteralParse(pattern) {
  return IsGroup(pattern) ? TemplateLiteralParse(InGroup(pattern)) : IsPrecedenceOr(pattern) ? Or(pattern) : IsPrecedenceAnd(pattern) ? And(pattern) : { type: "const", const: Unescape(pattern) };
}
function TemplateLiteralParseExact(pattern) {
  return TemplateLiteralParse(pattern.slice(1, pattern.length - 1));
}

// node_modules/@sinclair/typebox/build/esm/type/template-literal/finite.mjs
class TemplateLiteralFiniteError extends TypeBoxError {
}
function IsNumberExpression(expression) {
  return expression.type === "or" && expression.expr.length === 2 && expression.expr[0].type === "const" && expression.expr[0].const === "0" && expression.expr[1].type === "const" && expression.expr[1].const === "[1-9][0-9]*";
}
function IsBooleanExpression(expression) {
  return expression.type === "or" && expression.expr.length === 2 && expression.expr[0].type === "const" && expression.expr[0].const === "true" && expression.expr[1].type === "const" && expression.expr[1].const === "false";
}
function IsStringExpression(expression) {
  return expression.type === "const" && expression.const === ".*";
}
function IsTemplateLiteralExpressionFinite(expression) {
  return IsNumberExpression(expression) || IsStringExpression(expression) ? false : IsBooleanExpression(expression) ? true : expression.type === "and" ? expression.expr.every((expr) => IsTemplateLiteralExpressionFinite(expr)) : expression.type === "or" ? expression.expr.every((expr) => IsTemplateLiteralExpressionFinite(expr)) : expression.type === "const" ? true : (() => {
    throw new TemplateLiteralFiniteError(`Unknown expression type`);
  })();
}
function IsTemplateLiteralFinite(schema) {
  const expression = TemplateLiteralParseExact(schema.pattern);
  return IsTemplateLiteralExpressionFinite(expression);
}

// node_modules/@sinclair/typebox/build/esm/type/template-literal/generate.mjs
class TemplateLiteralGenerateError extends TypeBoxError {
}
function* GenerateReduce(buffer) {
  if (buffer.length === 1)
    return yield* buffer[0];
  for (const left of buffer[0]) {
    for (const right of GenerateReduce(buffer.slice(1))) {
      yield `${left}${right}`;
    }
  }
}
function* GenerateAnd(expression) {
  return yield* GenerateReduce(expression.expr.map((expr) => [...TemplateLiteralExpressionGenerate(expr)]));
}
function* GenerateOr(expression) {
  for (const expr of expression.expr)
    yield* TemplateLiteralExpressionGenerate(expr);
}
function* GenerateConst(expression) {
  return yield expression.const;
}
function* TemplateLiteralExpressionGenerate(expression) {
  return expression.type === "and" ? yield* GenerateAnd(expression) : expression.type === "or" ? yield* GenerateOr(expression) : expression.type === "const" ? yield* GenerateConst(expression) : (() => {
    throw new TemplateLiteralGenerateError("Unknown expression");
  })();
}
function TemplateLiteralGenerate(schema) {
  const expression = TemplateLiteralParseExact(schema.pattern);
  return IsTemplateLiteralExpressionFinite(expression) ? [...TemplateLiteralExpressionGenerate(expression)] : [];
}

// node_modules/@sinclair/typebox/build/esm/type/literal/literal.mjs
function Literal(value, options) {
  return CreateType({
    [Kind]: "Literal",
    const: value,
    type: typeof value
  }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/boolean/boolean.mjs
function Boolean2(options) {
  return CreateType({ [Kind]: "Boolean", type: "boolean" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/bigint/bigint.mjs
function BigInt2(options) {
  return CreateType({ [Kind]: "BigInt", type: "bigint" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/number/number.mjs
function Number2(options) {
  return CreateType({ [Kind]: "Number", type: "number" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/string/string.mjs
function String2(options) {
  return CreateType({ [Kind]: "String", type: "string" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/template-literal/syntax.mjs
function* FromUnion(syntax) {
  const trim = syntax.trim().replace(/"|'/g, "");
  return trim === "boolean" ? yield Boolean2() : trim === "number" ? yield Number2() : trim === "bigint" ? yield BigInt2() : trim === "string" ? yield String2() : yield (() => {
    const literals = trim.split("|").map((literal) => Literal(literal.trim()));
    return literals.length === 0 ? Never() : literals.length === 1 ? literals[0] : UnionEvaluated(literals);
  })();
}
function* FromTerminal(syntax) {
  if (syntax[1] !== "{") {
    const L = Literal("$");
    const R = FromSyntax(syntax.slice(1));
    return yield* [L, ...R];
  }
  for (let i = 2;i < syntax.length; i++) {
    if (syntax[i] === "}") {
      const L = FromUnion(syntax.slice(2, i));
      const R = FromSyntax(syntax.slice(i + 1));
      return yield* [...L, ...R];
    }
  }
  yield Literal(syntax);
}
function* FromSyntax(syntax) {
  for (let i = 0;i < syntax.length; i++) {
    if (syntax[i] === "$") {
      const L = Literal(syntax.slice(0, i));
      const R = FromTerminal(syntax.slice(i));
      return yield* [L, ...R];
    }
  }
  yield Literal(syntax);
}
function TemplateLiteralSyntax(syntax) {
  return [...FromSyntax(syntax)];
}

// node_modules/@sinclair/typebox/build/esm/type/template-literal/pattern.mjs
class TemplateLiteralPatternError extends TypeBoxError {
}
function Escape(value) {
  return value.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function Visit2(schema, acc) {
  return IsTemplateLiteral(schema) ? schema.pattern.slice(1, schema.pattern.length - 1) : IsUnion(schema) ? `(${schema.anyOf.map((schema2) => Visit2(schema2, acc)).join("|")})` : IsNumber3(schema) ? `${acc}${PatternNumber}` : IsInteger2(schema) ? `${acc}${PatternNumber}` : IsBigInt3(schema) ? `${acc}${PatternNumber}` : IsString3(schema) ? `${acc}${PatternString}` : IsLiteral(schema) ? `${acc}${Escape(schema.const.toString())}` : IsBoolean3(schema) ? `${acc}${PatternBoolean}` : (() => {
    throw new TemplateLiteralPatternError(`Unexpected Kind '${schema[Kind]}'`);
  })();
}
function TemplateLiteralPattern(kinds) {
  return `^${kinds.map((schema) => Visit2(schema, "")).join("")}$`;
}

// node_modules/@sinclair/typebox/build/esm/type/template-literal/union.mjs
function TemplateLiteralToUnion(schema) {
  const R = TemplateLiteralGenerate(schema);
  const L = R.map((S) => Literal(S));
  return UnionEvaluated(L);
}

// node_modules/@sinclair/typebox/build/esm/type/template-literal/template-literal.mjs
function TemplateLiteral(unresolved, options) {
  const pattern = IsString(unresolved) ? TemplateLiteralPattern(TemplateLiteralSyntax(unresolved)) : TemplateLiteralPattern(unresolved);
  return CreateType({ [Kind]: "TemplateLiteral", type: "string", pattern }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/indexed/indexed-property-keys.mjs
function FromTemplateLiteral(templateLiteral) {
  const keys = TemplateLiteralGenerate(templateLiteral);
  return keys.map((key) => key.toString());
}
function FromUnion2(types) {
  const result = [];
  for (const type of types)
    result.push(...IndexPropertyKeys(type));
  return result;
}
function FromLiteral(literalValue) {
  return [literalValue.toString()];
}
function IndexPropertyKeys(type) {
  return [...new Set(IsTemplateLiteral(type) ? FromTemplateLiteral(type) : IsUnion(type) ? FromUnion2(type.anyOf) : IsLiteral(type) ? FromLiteral(type.const) : IsNumber3(type) ? ["[number]"] : IsInteger2(type) ? ["[number]"] : [])];
}

// node_modules/@sinclair/typebox/build/esm/type/indexed/indexed-from-mapped-result.mjs
function FromProperties(type, properties, options) {
  const result = {};
  for (const K2 of Object.getOwnPropertyNames(properties)) {
    result[K2] = Index(type, IndexPropertyKeys(properties[K2]), options);
  }
  return result;
}
function FromMappedResult(type, mappedResult, options) {
  return FromProperties(type, mappedResult.properties, options);
}
function IndexFromMappedResult(type, mappedResult, options) {
  const properties = FromMappedResult(type, mappedResult, options);
  return MappedResult(properties);
}

// node_modules/@sinclair/typebox/build/esm/type/indexed/indexed.mjs
function FromRest(types, key) {
  return types.map((type) => IndexFromPropertyKey(type, key));
}
function FromIntersectRest(types) {
  return types.filter((type) => !IsNever(type));
}
function FromIntersect(types, key) {
  return IntersectEvaluated(FromIntersectRest(FromRest(types, key)));
}
function FromUnionRest(types) {
  return types.some((L) => IsNever(L)) ? [] : types;
}
function FromUnion3(types, key) {
  return UnionEvaluated(FromUnionRest(FromRest(types, key)));
}
function FromTuple(types, key) {
  return key in types ? types[key] : key === "[number]" ? UnionEvaluated(types) : Never();
}
function FromArray(type, key) {
  return key === "[number]" ? type : Never();
}
function FromProperty(properties, propertyKey) {
  return propertyKey in properties ? properties[propertyKey] : Never();
}
function IndexFromPropertyKey(type, propertyKey) {
  return IsIntersect(type) ? FromIntersect(type.allOf, propertyKey) : IsUnion(type) ? FromUnion3(type.anyOf, propertyKey) : IsTuple(type) ? FromTuple(type.items ?? [], propertyKey) : IsArray3(type) ? FromArray(type.items, propertyKey) : IsObject3(type) ? FromProperty(type.properties, propertyKey) : Never();
}
function IndexFromPropertyKeys(type, propertyKeys) {
  return propertyKeys.map((propertyKey) => IndexFromPropertyKey(type, propertyKey));
}
function FromSchema(type, propertyKeys) {
  return UnionEvaluated(IndexFromPropertyKeys(type, propertyKeys));
}
function Index(type, key, options) {
  if (IsRef(type) || IsRef(key)) {
    const error = `Index types using Ref parameters require both Type and Key to be of TSchema`;
    if (!IsSchema(type) || !IsSchema(key))
      throw new TypeBoxError(error);
    return Computed("Index", [type, key]);
  }
  if (IsMappedResult(key))
    return IndexFromMappedResult(type, key, options);
  if (IsMappedKey(key))
    return IndexFromMappedKey(type, key, options);
  return CreateType(IsSchema(key) ? FromSchema(type, IndexPropertyKeys(key)) : FromSchema(type, key), options);
}

// node_modules/@sinclair/typebox/build/esm/type/indexed/indexed-from-mapped-key.mjs
function MappedIndexPropertyKey(type, key, options) {
  return { [key]: Index(type, [key], Clone(options)) };
}
function MappedIndexPropertyKeys(type, propertyKeys, options) {
  return propertyKeys.reduce((result, left) => {
    return { ...result, ...MappedIndexPropertyKey(type, left, options) };
  }, {});
}
function MappedIndexProperties(type, mappedKey, options) {
  return MappedIndexPropertyKeys(type, mappedKey.keys, options);
}
function IndexFromMappedKey(type, mappedKey, options) {
  const properties = MappedIndexProperties(type, mappedKey, options);
  return MappedResult(properties);
}

// node_modules/@sinclair/typebox/build/esm/type/iterator/iterator.mjs
function Iterator(items, options) {
  return CreateType({ [Kind]: "Iterator", type: "Iterator", items }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/object/object.mjs
function RequiredKeys(properties) {
  const keys = [];
  for (let key in properties) {
    if (!IsOptional(properties[key]))
      keys.push(key);
  }
  return keys;
}
function _Object(properties, options) {
  const required = RequiredKeys(properties);
  const schematic = required.length > 0 ? { [Kind]: "Object", type: "object", properties, required } : { [Kind]: "Object", type: "object", properties };
  return CreateType(schematic, options);
}
var Object2 = _Object;

// node_modules/@sinclair/typebox/build/esm/type/promise/promise.mjs
function Promise2(item, options) {
  return CreateType({ [Kind]: "Promise", type: "Promise", item }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/readonly/readonly.mjs
function RemoveReadonly(schema) {
  return CreateType(Discard(schema, [ReadonlyKind]));
}
function AddReadonly(schema) {
  return CreateType({ ...schema, [ReadonlyKind]: "Readonly" });
}
function ReadonlyWithFlag(schema, F) {
  return F === false ? RemoveReadonly(schema) : AddReadonly(schema);
}
function Readonly(schema, enable) {
  const F = enable ?? true;
  return IsMappedResult(schema) ? ReadonlyFromMappedResult(schema, F) : ReadonlyWithFlag(schema, F);
}

// node_modules/@sinclair/typebox/build/esm/type/readonly/readonly-from-mapped-result.mjs
function FromProperties2(K, F) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(K))
    Acc[K2] = Readonly(K[K2], F);
  return Acc;
}
function FromMappedResult2(R, F) {
  return FromProperties2(R.properties, F);
}
function ReadonlyFromMappedResult(R, F) {
  const P = FromMappedResult2(R, F);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/tuple/tuple.mjs
function Tuple(types, options) {
  return CreateType(types.length > 0 ? { [Kind]: "Tuple", type: "array", items: types, additionalItems: false, minItems: types.length, maxItems: types.length } : { [Kind]: "Tuple", type: "array", minItems: types.length, maxItems: types.length }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/mapped/mapped.mjs
function FromMappedResult3(K, P) {
  return K in P ? FromSchemaType(K, P[K]) : MappedResult(P);
}
function MappedKeyToKnownMappedResultProperties(K) {
  return { [K]: Literal(K) };
}
function MappedKeyToUnknownMappedResultProperties(P) {
  const Acc = {};
  for (const L of P)
    Acc[L] = Literal(L);
  return Acc;
}
function MappedKeyToMappedResultProperties(K, P) {
  return SetIncludes(P, K) ? MappedKeyToKnownMappedResultProperties(K) : MappedKeyToUnknownMappedResultProperties(P);
}
function FromMappedKey(K, P) {
  const R = MappedKeyToMappedResultProperties(K, P);
  return FromMappedResult3(K, R);
}
function FromRest2(K, T) {
  return T.map((L) => FromSchemaType(K, L));
}
function FromProperties3(K, T) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(T))
    Acc[K2] = FromSchemaType(K, T[K2]);
  return Acc;
}
function FromSchemaType(K, T) {
  const options = { ...T };
  return IsOptional(T) ? Optional(FromSchemaType(K, Discard(T, [OptionalKind]))) : IsReadonly(T) ? Readonly(FromSchemaType(K, Discard(T, [ReadonlyKind]))) : IsMappedResult(T) ? FromMappedResult3(K, T.properties) : IsMappedKey(T) ? FromMappedKey(K, T.keys) : IsConstructor(T) ? Constructor(FromRest2(K, T.parameters), FromSchemaType(K, T.returns), options) : IsFunction3(T) ? Function2(FromRest2(K, T.parameters), FromSchemaType(K, T.returns), options) : IsAsyncIterator3(T) ? AsyncIterator(FromSchemaType(K, T.items), options) : IsIterator3(T) ? Iterator(FromSchemaType(K, T.items), options) : IsIntersect(T) ? Intersect(FromRest2(K, T.allOf), options) : IsUnion(T) ? Union(FromRest2(K, T.anyOf), options) : IsTuple(T) ? Tuple(FromRest2(K, T.items ?? []), options) : IsObject3(T) ? Object2(FromProperties3(K, T.properties), options) : IsArray3(T) ? Array2(FromSchemaType(K, T.items), options) : IsPromise2(T) ? Promise2(FromSchemaType(K, T.item), options) : T;
}
function MappedFunctionReturnType(K, T) {
  const Acc = {};
  for (const L of K)
    Acc[L] = FromSchemaType(L, T);
  return Acc;
}
function Mapped(key, map3, options) {
  const K = IsSchema(key) ? IndexPropertyKeys(key) : key;
  const RT = map3({ [Kind]: "MappedKey", keys: K });
  const R = MappedFunctionReturnType(K, RT);
  return Object2(R, options);
}

// node_modules/@sinclair/typebox/build/esm/type/optional/optional.mjs
function RemoveOptional(schema) {
  return CreateType(Discard(schema, [OptionalKind]));
}
function AddOptional(schema) {
  return CreateType({ ...schema, [OptionalKind]: "Optional" });
}
function OptionalWithFlag(schema, F) {
  return F === false ? RemoveOptional(schema) : AddOptional(schema);
}
function Optional(schema, enable) {
  const F = enable ?? true;
  return IsMappedResult(schema) ? OptionalFromMappedResult(schema, F) : OptionalWithFlag(schema, F);
}

// node_modules/@sinclair/typebox/build/esm/type/optional/optional-from-mapped-result.mjs
function FromProperties4(P, F) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Optional(P[K2], F);
  return Acc;
}
function FromMappedResult4(R, F) {
  return FromProperties4(R.properties, F);
}
function OptionalFromMappedResult(R, F) {
  const P = FromMappedResult4(R, F);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/intersect/intersect-create.mjs
function IntersectCreate(T, options = {}) {
  const allObjects = T.every((schema) => IsObject3(schema));
  const clonedUnevaluatedProperties = IsSchema(options.unevaluatedProperties) ? { unevaluatedProperties: options.unevaluatedProperties } : {};
  return CreateType(options.unevaluatedProperties === false || IsSchema(options.unevaluatedProperties) || allObjects ? { ...clonedUnevaluatedProperties, [Kind]: "Intersect", type: "object", allOf: T } : { ...clonedUnevaluatedProperties, [Kind]: "Intersect", allOf: T }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/intersect/intersect-evaluated.mjs
function IsIntersectOptional(types) {
  return types.every((left) => IsOptional(left));
}
function RemoveOptionalFromType2(type) {
  return Discard(type, [OptionalKind]);
}
function RemoveOptionalFromRest2(types) {
  return types.map((left) => IsOptional(left) ? RemoveOptionalFromType2(left) : left);
}
function ResolveIntersect(types, options) {
  return IsIntersectOptional(types) ? Optional(IntersectCreate(RemoveOptionalFromRest2(types), options)) : IntersectCreate(RemoveOptionalFromRest2(types), options);
}
function IntersectEvaluated(types, options = {}) {
  if (types.length === 1)
    return CreateType(types[0], options);
  if (types.length === 0)
    return Never(options);
  if (types.some((schema) => IsTransform(schema)))
    throw new Error("Cannot intersect transform types");
  return ResolveIntersect(types, options);
}

// node_modules/@sinclair/typebox/build/esm/type/intersect/intersect.mjs
function Intersect(types, options) {
  if (types.length === 1)
    return CreateType(types[0], options);
  if (types.length === 0)
    return Never(options);
  if (types.some((schema) => IsTransform(schema)))
    throw new Error("Cannot intersect transform types");
  return IntersectCreate(types, options);
}

// node_modules/@sinclair/typebox/build/esm/type/ref/ref.mjs
function Ref(...args) {
  const [$ref, options] = typeof args[0] === "string" ? [args[0], args[1]] : [args[0].$id, args[1]];
  if (typeof $ref !== "string")
    throw new TypeBoxError("Ref: $ref must be a string");
  return CreateType({ [Kind]: "Ref", $ref }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/awaited/awaited.mjs
function FromComputed(target, parameters) {
  return Computed("Awaited", [Computed(target, parameters)]);
}
function FromRef($ref) {
  return Computed("Awaited", [Ref($ref)]);
}
function FromIntersect2(types) {
  return Intersect(FromRest3(types));
}
function FromUnion4(types) {
  return Union(FromRest3(types));
}
function FromPromise(type) {
  return Awaited(type);
}
function FromRest3(types) {
  return types.map((type) => Awaited(type));
}
function Awaited(type, options) {
  return CreateType(IsComputed(type) ? FromComputed(type.target, type.parameters) : IsIntersect(type) ? FromIntersect2(type.allOf) : IsUnion(type) ? FromUnion4(type.anyOf) : IsPromise2(type) ? FromPromise(type.item) : IsRef(type) ? FromRef(type.$ref) : type, options);
}

// node_modules/@sinclair/typebox/build/esm/type/keyof/keyof-property-keys.mjs
function FromRest4(types) {
  const result = [];
  for (const L of types)
    result.push(KeyOfPropertyKeys(L));
  return result;
}
function FromIntersect3(types) {
  const propertyKeysArray = FromRest4(types);
  const propertyKeys = SetUnionMany(propertyKeysArray);
  return propertyKeys;
}
function FromUnion5(types) {
  const propertyKeysArray = FromRest4(types);
  const propertyKeys = SetIntersectMany(propertyKeysArray);
  return propertyKeys;
}
function FromTuple2(types) {
  return types.map((_, indexer) => indexer.toString());
}
function FromArray2(_) {
  return ["[number]"];
}
function FromProperties5(T) {
  return globalThis.Object.getOwnPropertyNames(T);
}
function FromPatternProperties(patternProperties) {
  if (!includePatternProperties)
    return [];
  const patternPropertyKeys = globalThis.Object.getOwnPropertyNames(patternProperties);
  return patternPropertyKeys.map((key) => {
    return key[0] === "^" && key[key.length - 1] === "$" ? key.slice(1, key.length - 1) : key;
  });
}
function KeyOfPropertyKeys(type) {
  return IsIntersect(type) ? FromIntersect3(type.allOf) : IsUnion(type) ? FromUnion5(type.anyOf) : IsTuple(type) ? FromTuple2(type.items ?? []) : IsArray3(type) ? FromArray2(type.items) : IsObject3(type) ? FromProperties5(type.properties) : IsRecord(type) ? FromPatternProperties(type.patternProperties) : [];
}
var includePatternProperties = false;
function KeyOfPattern(schema) {
  includePatternProperties = true;
  const keys = KeyOfPropertyKeys(schema);
  includePatternProperties = false;
  const pattern = keys.map((key) => `(${key})`);
  return `^(${pattern.join("|")})$`;
}

// node_modules/@sinclair/typebox/build/esm/type/keyof/keyof.mjs
function FromComputed2(target, parameters) {
  return Computed("KeyOf", [Computed(target, parameters)]);
}
function FromRef2($ref) {
  return Computed("KeyOf", [Ref($ref)]);
}
function KeyOfFromType(type, options) {
  const propertyKeys = KeyOfPropertyKeys(type);
  const propertyKeyTypes = KeyOfPropertyKeysToRest(propertyKeys);
  const result = UnionEvaluated(propertyKeyTypes);
  return CreateType(result, options);
}
function KeyOfPropertyKeysToRest(propertyKeys) {
  return propertyKeys.map((L) => L === "[number]" ? Number2() : Literal(L));
}
function KeyOf(type, options) {
  return IsComputed(type) ? FromComputed2(type.target, type.parameters) : IsRef(type) ? FromRef2(type.$ref) : IsMappedResult(type) ? KeyOfFromMappedResult(type, options) : KeyOfFromType(type, options);
}

// node_modules/@sinclair/typebox/build/esm/type/keyof/keyof-from-mapped-result.mjs
function FromProperties6(properties, options) {
  const result = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(properties))
    result[K2] = KeyOf(properties[K2], Clone(options));
  return result;
}
function FromMappedResult5(mappedResult, options) {
  return FromProperties6(mappedResult.properties, options);
}
function KeyOfFromMappedResult(mappedResult, options) {
  const properties = FromMappedResult5(mappedResult, options);
  return MappedResult(properties);
}

// node_modules/@sinclair/typebox/build/esm/type/keyof/keyof-property-entries.mjs
function KeyOfPropertyEntries(schema) {
  const keys = KeyOfPropertyKeys(schema);
  const schemas = IndexFromPropertyKeys(schema, keys);
  return keys.map((_, index) => [keys[index], schemas[index]]);
}

// node_modules/@sinclair/typebox/build/esm/type/composite/composite.mjs
function CompositeKeys(T) {
  const Acc = [];
  for (const L of T)
    Acc.push(...KeyOfPropertyKeys(L));
  return SetDistinct(Acc);
}
function FilterNever(T) {
  return T.filter((L) => !IsNever(L));
}
function CompositeProperty(T, K) {
  const Acc = [];
  for (const L of T)
    Acc.push(...IndexFromPropertyKeys(L, [K]));
  return FilterNever(Acc);
}
function CompositeProperties(T, K) {
  const Acc = {};
  for (const L of K) {
    Acc[L] = IntersectEvaluated(CompositeProperty(T, L));
  }
  return Acc;
}
function Composite(T, options) {
  const K = CompositeKeys(T);
  const P = CompositeProperties(T, K);
  const R = Object2(P, options);
  return R;
}

// node_modules/@sinclair/typebox/build/esm/type/date/date.mjs
function Date2(options) {
  return CreateType({ [Kind]: "Date", type: "Date" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/null/null.mjs
function Null(options) {
  return CreateType({ [Kind]: "Null", type: "null" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/symbol/symbol.mjs
function Symbol2(options) {
  return CreateType({ [Kind]: "Symbol", type: "symbol" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/undefined/undefined.mjs
function Undefined(options) {
  return CreateType({ [Kind]: "Undefined", type: "undefined" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/uint8array/uint8array.mjs
function Uint8Array2(options) {
  return CreateType({ [Kind]: "Uint8Array", type: "Uint8Array" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/unknown/unknown.mjs
function Unknown(options) {
  return CreateType({ [Kind]: "Unknown" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/const/const.mjs
function FromArray3(T) {
  return T.map((L) => FromValue(L, false));
}
function FromProperties7(value) {
  const Acc = {};
  for (const K of globalThis.Object.getOwnPropertyNames(value))
    Acc[K] = Readonly(FromValue(value[K], false));
  return Acc;
}
function ConditionalReadonly(T, root) {
  return root === true ? T : Readonly(T);
}
function FromValue(value, root) {
  return IsAsyncIterator(value) ? ConditionalReadonly(Any(), root) : IsIterator(value) ? ConditionalReadonly(Any(), root) : IsArray(value) ? Readonly(Tuple(FromArray3(value))) : IsUint8Array(value) ? Uint8Array2() : IsDate(value) ? Date2() : IsObject(value) ? ConditionalReadonly(Object2(FromProperties7(value)), root) : IsFunction(value) ? ConditionalReadonly(Function2([], Unknown()), root) : IsUndefined(value) ? Undefined() : IsNull(value) ? Null() : IsSymbol(value) ? Symbol2() : IsBigInt(value) ? BigInt2() : IsNumber(value) ? Literal(value) : IsBoolean(value) ? Literal(value) : IsString(value) ? Literal(value) : Object2({});
}
function Const(T, options) {
  return CreateType(FromValue(T, true), options);
}

// node_modules/@sinclair/typebox/build/esm/type/constructor-parameters/constructor-parameters.mjs
function ConstructorParameters(schema, options) {
  return IsConstructor(schema) ? Tuple(schema.parameters, options) : Never(options);
}

// node_modules/@sinclair/typebox/build/esm/type/enum/enum.mjs
function Enum(item, options) {
  if (IsUndefined(item))
    throw new Error("Enum undefined or empty");
  const values1 = globalThis.Object.getOwnPropertyNames(item).filter((key) => isNaN(key)).map((key) => item[key]);
  const values2 = [...new Set(values1)];
  const anyOf = values2.map((value) => Literal(value));
  return Union(anyOf, { ...options, [Hint]: "Enum" });
}

// node_modules/@sinclair/typebox/build/esm/type/extends/extends-check.mjs
class ExtendsResolverError extends TypeBoxError {
}
var ExtendsResult;
(function(ExtendsResult2) {
  ExtendsResult2[ExtendsResult2["Union"] = 0] = "Union";
  ExtendsResult2[ExtendsResult2["True"] = 1] = "True";
  ExtendsResult2[ExtendsResult2["False"] = 2] = "False";
})(ExtendsResult || (ExtendsResult = {}));
function IntoBooleanResult(result) {
  return result === ExtendsResult.False ? result : ExtendsResult.True;
}
function Throw(message) {
  throw new ExtendsResolverError(message);
}
function IsStructuralRight(right) {
  return exports_type.IsNever(right) || exports_type.IsIntersect(right) || exports_type.IsUnion(right) || exports_type.IsUnknown(right) || exports_type.IsAny(right);
}
function StructuralRight(left, right) {
  return exports_type.IsNever(right) ? FromNeverRight(left, right) : exports_type.IsIntersect(right) ? FromIntersectRight(left, right) : exports_type.IsUnion(right) ? FromUnionRight(left, right) : exports_type.IsUnknown(right) ? FromUnknownRight(left, right) : exports_type.IsAny(right) ? FromAnyRight(left, right) : Throw("StructuralRight");
}
function FromAnyRight(left, right) {
  return ExtendsResult.True;
}
function FromAny(left, right) {
  return exports_type.IsIntersect(right) ? FromIntersectRight(left, right) : exports_type.IsUnion(right) && right.anyOf.some((schema) => exports_type.IsAny(schema) || exports_type.IsUnknown(schema)) ? ExtendsResult.True : exports_type.IsUnion(right) ? ExtendsResult.Union : exports_type.IsUnknown(right) ? ExtendsResult.True : exports_type.IsAny(right) ? ExtendsResult.True : ExtendsResult.Union;
}
function FromArrayRight(left, right) {
  return exports_type.IsUnknown(left) ? ExtendsResult.False : exports_type.IsAny(left) ? ExtendsResult.Union : exports_type.IsNever(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromArray4(left, right) {
  return exports_type.IsObject(right) && IsObjectArrayLike(right) ? ExtendsResult.True : IsStructuralRight(right) ? StructuralRight(left, right) : !exports_type.IsArray(right) ? ExtendsResult.False : IntoBooleanResult(Visit3(left.items, right.items));
}
function FromAsyncIterator(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : !exports_type.IsAsyncIterator(right) ? ExtendsResult.False : IntoBooleanResult(Visit3(left.items, right.items));
}
function FromBigInt(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : exports_type.IsRecord(right) ? FromRecordRight(left, right) : exports_type.IsBigInt(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromBooleanRight(left, right) {
  return exports_type.IsLiteralBoolean(left) ? ExtendsResult.True : exports_type.IsBoolean(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromBoolean(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : exports_type.IsRecord(right) ? FromRecordRight(left, right) : exports_type.IsBoolean(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromConstructor(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : !exports_type.IsConstructor(right) ? ExtendsResult.False : left.parameters.length > right.parameters.length ? ExtendsResult.False : !left.parameters.every((schema, index) => IntoBooleanResult(Visit3(right.parameters[index], schema)) === ExtendsResult.True) ? ExtendsResult.False : IntoBooleanResult(Visit3(left.returns, right.returns));
}
function FromDate(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : exports_type.IsRecord(right) ? FromRecordRight(left, right) : exports_type.IsDate(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromFunction(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : !exports_type.IsFunction(right) ? ExtendsResult.False : left.parameters.length > right.parameters.length ? ExtendsResult.False : !left.parameters.every((schema, index) => IntoBooleanResult(Visit3(right.parameters[index], schema)) === ExtendsResult.True) ? ExtendsResult.False : IntoBooleanResult(Visit3(left.returns, right.returns));
}
function FromIntegerRight(left, right) {
  return exports_type.IsLiteral(left) && exports_value.IsNumber(left.const) ? ExtendsResult.True : exports_type.IsNumber(left) || exports_type.IsInteger(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromInteger(left, right) {
  return exports_type.IsInteger(right) || exports_type.IsNumber(right) ? ExtendsResult.True : IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : exports_type.IsRecord(right) ? FromRecordRight(left, right) : ExtendsResult.False;
}
function FromIntersectRight(left, right) {
  return right.allOf.every((schema) => Visit3(left, schema) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromIntersect4(left, right) {
  return left.allOf.some((schema) => Visit3(schema, right) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromIterator(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : !exports_type.IsIterator(right) ? ExtendsResult.False : IntoBooleanResult(Visit3(left.items, right.items));
}
function FromLiteral2(left, right) {
  return exports_type.IsLiteral(right) && right.const === left.const ? ExtendsResult.True : IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : exports_type.IsRecord(right) ? FromRecordRight(left, right) : exports_type.IsString(right) ? FromStringRight(left, right) : exports_type.IsNumber(right) ? FromNumberRight(left, right) : exports_type.IsInteger(right) ? FromIntegerRight(left, right) : exports_type.IsBoolean(right) ? FromBooleanRight(left, right) : ExtendsResult.False;
}
function FromNeverRight(left, right) {
  return ExtendsResult.False;
}
function FromNever(left, right) {
  return ExtendsResult.True;
}
function UnwrapTNot(schema) {
  let [current, depth] = [schema, 0];
  while (true) {
    if (!exports_type.IsNot(current))
      break;
    current = current.not;
    depth += 1;
  }
  return depth % 2 === 0 ? current : Unknown();
}
function FromNot(left, right) {
  return exports_type.IsNot(left) ? Visit3(UnwrapTNot(left), right) : exports_type.IsNot(right) ? Visit3(left, UnwrapTNot(right)) : Throw("Invalid fallthrough for Not");
}
function FromNull(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : exports_type.IsRecord(right) ? FromRecordRight(left, right) : exports_type.IsNull(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromNumberRight(left, right) {
  return exports_type.IsLiteralNumber(left) ? ExtendsResult.True : exports_type.IsNumber(left) || exports_type.IsInteger(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromNumber(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : exports_type.IsRecord(right) ? FromRecordRight(left, right) : exports_type.IsInteger(right) || exports_type.IsNumber(right) ? ExtendsResult.True : ExtendsResult.False;
}
function IsObjectPropertyCount(schema, count) {
  return Object.getOwnPropertyNames(schema.properties).length === count;
}
function IsObjectStringLike(schema) {
  return IsObjectArrayLike(schema);
}
function IsObjectSymbolLike(schema) {
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "description" in schema.properties && exports_type.IsUnion(schema.properties.description) && schema.properties.description.anyOf.length === 2 && (exports_type.IsString(schema.properties.description.anyOf[0]) && exports_type.IsUndefined(schema.properties.description.anyOf[1]) || exports_type.IsString(schema.properties.description.anyOf[1]) && exports_type.IsUndefined(schema.properties.description.anyOf[0]));
}
function IsObjectNumberLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectBooleanLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectBigIntLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectDateLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectUint8ArrayLike(schema) {
  return IsObjectArrayLike(schema);
}
function IsObjectFunctionLike(schema) {
  const length = Number2();
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "length" in schema.properties && IntoBooleanResult(Visit3(schema.properties["length"], length)) === ExtendsResult.True;
}
function IsObjectConstructorLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectArrayLike(schema) {
  const length = Number2();
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "length" in schema.properties && IntoBooleanResult(Visit3(schema.properties["length"], length)) === ExtendsResult.True;
}
function IsObjectPromiseLike(schema) {
  const then = Function2([Any()], Any());
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "then" in schema.properties && IntoBooleanResult(Visit3(schema.properties["then"], then)) === ExtendsResult.True;
}
function Property(left, right) {
  return Visit3(left, right) === ExtendsResult.False ? ExtendsResult.False : exports_type.IsOptional(left) && !exports_type.IsOptional(right) ? ExtendsResult.False : ExtendsResult.True;
}
function FromObjectRight(left, right) {
  return exports_type.IsUnknown(left) ? ExtendsResult.False : exports_type.IsAny(left) ? ExtendsResult.Union : exports_type.IsNever(left) || exports_type.IsLiteralString(left) && IsObjectStringLike(right) || exports_type.IsLiteralNumber(left) && IsObjectNumberLike(right) || exports_type.IsLiteralBoolean(left) && IsObjectBooleanLike(right) || exports_type.IsSymbol(left) && IsObjectSymbolLike(right) || exports_type.IsBigInt(left) && IsObjectBigIntLike(right) || exports_type.IsString(left) && IsObjectStringLike(right) || exports_type.IsSymbol(left) && IsObjectSymbolLike(right) || exports_type.IsNumber(left) && IsObjectNumberLike(right) || exports_type.IsInteger(left) && IsObjectNumberLike(right) || exports_type.IsBoolean(left) && IsObjectBooleanLike(right) || exports_type.IsUint8Array(left) && IsObjectUint8ArrayLike(right) || exports_type.IsDate(left) && IsObjectDateLike(right) || exports_type.IsConstructor(left) && IsObjectConstructorLike(right) || exports_type.IsFunction(left) && IsObjectFunctionLike(right) ? ExtendsResult.True : exports_type.IsRecord(left) && exports_type.IsString(RecordKey(left)) ? (() => {
    return right[Hint] === "Record" ? ExtendsResult.True : ExtendsResult.False;
  })() : exports_type.IsRecord(left) && exports_type.IsNumber(RecordKey(left)) ? (() => {
    return IsObjectPropertyCount(right, 0) ? ExtendsResult.True : ExtendsResult.False;
  })() : ExtendsResult.False;
}
function FromObject(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsRecord(right) ? FromRecordRight(left, right) : !exports_type.IsObject(right) ? ExtendsResult.False : (() => {
    for (const key of Object.getOwnPropertyNames(right.properties)) {
      if (!(key in left.properties) && !exports_type.IsOptional(right.properties[key])) {
        return ExtendsResult.False;
      }
      if (exports_type.IsOptional(right.properties[key])) {
        return ExtendsResult.True;
      }
      if (Property(left.properties[key], right.properties[key]) === ExtendsResult.False) {
        return ExtendsResult.False;
      }
    }
    return ExtendsResult.True;
  })();
}
function FromPromise2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) && IsObjectPromiseLike(right) ? ExtendsResult.True : !exports_type.IsPromise(right) ? ExtendsResult.False : IntoBooleanResult(Visit3(left.item, right.item));
}
function RecordKey(schema) {
  return PatternNumberExact in schema.patternProperties ? Number2() : (PatternStringExact in schema.patternProperties) ? String2() : Throw("Unknown record key pattern");
}
function RecordValue(schema) {
  return PatternNumberExact in schema.patternProperties ? schema.patternProperties[PatternNumberExact] : (PatternStringExact in schema.patternProperties) ? schema.patternProperties[PatternStringExact] : Throw("Unable to get record value schema");
}
function FromRecordRight(left, right) {
  const [Key, Value] = [RecordKey(right), RecordValue(right)];
  return exports_type.IsLiteralString(left) && exports_type.IsNumber(Key) && IntoBooleanResult(Visit3(left, Value)) === ExtendsResult.True ? ExtendsResult.True : exports_type.IsUint8Array(left) && exports_type.IsNumber(Key) ? Visit3(left, Value) : exports_type.IsString(left) && exports_type.IsNumber(Key) ? Visit3(left, Value) : exports_type.IsArray(left) && exports_type.IsNumber(Key) ? Visit3(left, Value) : exports_type.IsObject(left) ? (() => {
    for (const key of Object.getOwnPropertyNames(left.properties)) {
      if (Property(Value, left.properties[key]) === ExtendsResult.False) {
        return ExtendsResult.False;
      }
    }
    return ExtendsResult.True;
  })() : ExtendsResult.False;
}
function FromRecord(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : !exports_type.IsRecord(right) ? ExtendsResult.False : Visit3(RecordValue(left), RecordValue(right));
}
function FromRegExp(left, right) {
  const L = exports_type.IsRegExp(left) ? String2() : left;
  const R = exports_type.IsRegExp(right) ? String2() : right;
  return Visit3(L, R);
}
function FromStringRight(left, right) {
  return exports_type.IsLiteral(left) && exports_value.IsString(left.const) ? ExtendsResult.True : exports_type.IsString(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromString(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : exports_type.IsRecord(right) ? FromRecordRight(left, right) : exports_type.IsString(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromSymbol(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : exports_type.IsRecord(right) ? FromRecordRight(left, right) : exports_type.IsSymbol(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromTemplateLiteral2(left, right) {
  return exports_type.IsTemplateLiteral(left) ? Visit3(TemplateLiteralToUnion(left), right) : exports_type.IsTemplateLiteral(right) ? Visit3(left, TemplateLiteralToUnion(right)) : Throw("Invalid fallthrough for TemplateLiteral");
}
function IsArrayOfTuple(left, right) {
  return exports_type.IsArray(right) && left.items !== undefined && left.items.every((schema) => Visit3(schema, right.items) === ExtendsResult.True);
}
function FromTupleRight(left, right) {
  return exports_type.IsNever(left) ? ExtendsResult.True : exports_type.IsUnknown(left) ? ExtendsResult.False : exports_type.IsAny(left) ? ExtendsResult.Union : ExtendsResult.False;
}
function FromTuple3(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) && IsObjectArrayLike(right) ? ExtendsResult.True : exports_type.IsArray(right) && IsArrayOfTuple(left, right) ? ExtendsResult.True : !exports_type.IsTuple(right) ? ExtendsResult.False : exports_value.IsUndefined(left.items) && !exports_value.IsUndefined(right.items) || !exports_value.IsUndefined(left.items) && exports_value.IsUndefined(right.items) ? ExtendsResult.False : exports_value.IsUndefined(left.items) && !exports_value.IsUndefined(right.items) ? ExtendsResult.True : left.items.every((schema, index) => Visit3(schema, right.items[index]) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUint8Array(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : exports_type.IsRecord(right) ? FromRecordRight(left, right) : exports_type.IsUint8Array(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUndefined(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : exports_type.IsRecord(right) ? FromRecordRight(left, right) : exports_type.IsVoid(right) ? FromVoidRight(left, right) : exports_type.IsUndefined(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUnionRight(left, right) {
  return right.anyOf.some((schema) => Visit3(left, schema) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUnion6(left, right) {
  return left.anyOf.every((schema) => Visit3(schema, right) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUnknownRight(left, right) {
  return ExtendsResult.True;
}
function FromUnknown(left, right) {
  return exports_type.IsNever(right) ? FromNeverRight(left, right) : exports_type.IsIntersect(right) ? FromIntersectRight(left, right) : exports_type.IsUnion(right) ? FromUnionRight(left, right) : exports_type.IsAny(right) ? FromAnyRight(left, right) : exports_type.IsString(right) ? FromStringRight(left, right) : exports_type.IsNumber(right) ? FromNumberRight(left, right) : exports_type.IsInteger(right) ? FromIntegerRight(left, right) : exports_type.IsBoolean(right) ? FromBooleanRight(left, right) : exports_type.IsArray(right) ? FromArrayRight(left, right) : exports_type.IsTuple(right) ? FromTupleRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : exports_type.IsUnknown(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromVoidRight(left, right) {
  return exports_type.IsUndefined(left) ? ExtendsResult.True : exports_type.IsUndefined(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromVoid(left, right) {
  return exports_type.IsIntersect(right) ? FromIntersectRight(left, right) : exports_type.IsUnion(right) ? FromUnionRight(left, right) : exports_type.IsUnknown(right) ? FromUnknownRight(left, right) : exports_type.IsAny(right) ? FromAnyRight(left, right) : exports_type.IsObject(right) ? FromObjectRight(left, right) : exports_type.IsVoid(right) ? ExtendsResult.True : ExtendsResult.False;
}
function Visit3(left, right) {
  return exports_type.IsTemplateLiteral(left) || exports_type.IsTemplateLiteral(right) ? FromTemplateLiteral2(left, right) : exports_type.IsRegExp(left) || exports_type.IsRegExp(right) ? FromRegExp(left, right) : exports_type.IsNot(left) || exports_type.IsNot(right) ? FromNot(left, right) : exports_type.IsAny(left) ? FromAny(left, right) : exports_type.IsArray(left) ? FromArray4(left, right) : exports_type.IsBigInt(left) ? FromBigInt(left, right) : exports_type.IsBoolean(left) ? FromBoolean(left, right) : exports_type.IsAsyncIterator(left) ? FromAsyncIterator(left, right) : exports_type.IsConstructor(left) ? FromConstructor(left, right) : exports_type.IsDate(left) ? FromDate(left, right) : exports_type.IsFunction(left) ? FromFunction(left, right) : exports_type.IsInteger(left) ? FromInteger(left, right) : exports_type.IsIntersect(left) ? FromIntersect4(left, right) : exports_type.IsIterator(left) ? FromIterator(left, right) : exports_type.IsLiteral(left) ? FromLiteral2(left, right) : exports_type.IsNever(left) ? FromNever(left, right) : exports_type.IsNull(left) ? FromNull(left, right) : exports_type.IsNumber(left) ? FromNumber(left, right) : exports_type.IsObject(left) ? FromObject(left, right) : exports_type.IsRecord(left) ? FromRecord(left, right) : exports_type.IsString(left) ? FromString(left, right) : exports_type.IsSymbol(left) ? FromSymbol(left, right) : exports_type.IsTuple(left) ? FromTuple3(left, right) : exports_type.IsPromise(left) ? FromPromise2(left, right) : exports_type.IsUint8Array(left) ? FromUint8Array(left, right) : exports_type.IsUndefined(left) ? FromUndefined(left, right) : exports_type.IsUnion(left) ? FromUnion6(left, right) : exports_type.IsUnknown(left) ? FromUnknown(left, right) : exports_type.IsVoid(left) ? FromVoid(left, right) : Throw(`Unknown left type operand '${left[Kind]}'`);
}
function ExtendsCheck(left, right) {
  return Visit3(left, right);
}

// node_modules/@sinclair/typebox/build/esm/type/extends/extends-from-mapped-result.mjs
function FromProperties8(P, Right, True, False, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Extends(P[K2], Right, True, False, Clone(options));
  return Acc;
}
function FromMappedResult6(Left, Right, True, False, options) {
  return FromProperties8(Left.properties, Right, True, False, options);
}
function ExtendsFromMappedResult(Left, Right, True, False, options) {
  const P = FromMappedResult6(Left, Right, True, False, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/extends/extends.mjs
function ExtendsResolve(left, right, trueType, falseType) {
  const R = ExtendsCheck(left, right);
  return R === ExtendsResult.Union ? Union([trueType, falseType]) : R === ExtendsResult.True ? trueType : falseType;
}
function Extends(L, R, T, F, options) {
  return IsMappedResult(L) ? ExtendsFromMappedResult(L, R, T, F, options) : IsMappedKey(L) ? CreateType(ExtendsFromMappedKey(L, R, T, F, options)) : CreateType(ExtendsResolve(L, R, T, F), options);
}

// node_modules/@sinclair/typebox/build/esm/type/extends/extends-from-mapped-key.mjs
function FromPropertyKey(K, U, L, R, options) {
  return {
    [K]: Extends(Literal(K), U, L, R, Clone(options))
  };
}
function FromPropertyKeys(K, U, L, R, options) {
  return K.reduce((Acc, LK) => {
    return { ...Acc, ...FromPropertyKey(LK, U, L, R, options) };
  }, {});
}
function FromMappedKey2(K, U, L, R, options) {
  return FromPropertyKeys(K.keys, U, L, R, options);
}
function ExtendsFromMappedKey(T, U, L, R, options) {
  const P = FromMappedKey2(T, U, L, R, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/extends/extends-undefined.mjs
function Intersect2(schema) {
  return schema.allOf.every((schema2) => ExtendsUndefinedCheck(schema2));
}
function Union2(schema) {
  return schema.anyOf.some((schema2) => ExtendsUndefinedCheck(schema2));
}
function Not(schema) {
  return !ExtendsUndefinedCheck(schema.not);
}
function ExtendsUndefinedCheck(schema) {
  return schema[Kind] === "Intersect" ? Intersect2(schema) : schema[Kind] === "Union" ? Union2(schema) : schema[Kind] === "Not" ? Not(schema) : schema[Kind] === "Undefined" ? true : false;
}

// node_modules/@sinclair/typebox/build/esm/type/exclude/exclude-from-template-literal.mjs
function ExcludeFromTemplateLiteral(L, R) {
  return Exclude(TemplateLiteralToUnion(L), R);
}

// node_modules/@sinclair/typebox/build/esm/type/exclude/exclude.mjs
function ExcludeRest(L, R) {
  const excluded = L.filter((inner) => ExtendsCheck(inner, R) === ExtendsResult.False);
  return excluded.length === 1 ? excluded[0] : Union(excluded);
}
function Exclude(L, R, options = {}) {
  if (IsTemplateLiteral(L))
    return CreateType(ExcludeFromTemplateLiteral(L, R), options);
  if (IsMappedResult(L))
    return CreateType(ExcludeFromMappedResult(L, R), options);
  return CreateType(IsUnion(L) ? ExcludeRest(L.anyOf, R) : ExtendsCheck(L, R) !== ExtendsResult.False ? Never() : L, options);
}

// node_modules/@sinclair/typebox/build/esm/type/exclude/exclude-from-mapped-result.mjs
function FromProperties9(P, U) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Exclude(P[K2], U);
  return Acc;
}
function FromMappedResult7(R, T) {
  return FromProperties9(R.properties, T);
}
function ExcludeFromMappedResult(R, T) {
  const P = FromMappedResult7(R, T);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/extract/extract-from-template-literal.mjs
function ExtractFromTemplateLiteral(L, R) {
  return Extract(TemplateLiteralToUnion(L), R);
}

// node_modules/@sinclair/typebox/build/esm/type/extract/extract.mjs
function ExtractRest(L, R) {
  const extracted = L.filter((inner) => ExtendsCheck(inner, R) !== ExtendsResult.False);
  return extracted.length === 1 ? extracted[0] : Union(extracted);
}
function Extract(L, R, options) {
  if (IsTemplateLiteral(L))
    return CreateType(ExtractFromTemplateLiteral(L, R), options);
  if (IsMappedResult(L))
    return CreateType(ExtractFromMappedResult(L, R), options);
  return CreateType(IsUnion(L) ? ExtractRest(L.anyOf, R) : ExtendsCheck(L, R) !== ExtendsResult.False ? L : Never(), options);
}

// node_modules/@sinclair/typebox/build/esm/type/extract/extract-from-mapped-result.mjs
function FromProperties10(P, T) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Extract(P[K2], T);
  return Acc;
}
function FromMappedResult8(R, T) {
  return FromProperties10(R.properties, T);
}
function ExtractFromMappedResult(R, T) {
  const P = FromMappedResult8(R, T);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/instance-type/instance-type.mjs
function InstanceType(schema, options) {
  return IsConstructor(schema) ? CreateType(schema.returns, options) : Never(options);
}

// node_modules/@sinclair/typebox/build/esm/type/readonly-optional/readonly-optional.mjs
function ReadonlyOptional(schema) {
  return Readonly(Optional(schema));
}

// node_modules/@sinclair/typebox/build/esm/type/record/record.mjs
function RecordCreateFromPattern(pattern, T, options) {
  return CreateType({ [Kind]: "Record", type: "object", patternProperties: { [pattern]: T } }, options);
}
function RecordCreateFromKeys(K, T, options) {
  const result = {};
  for (const K2 of K)
    result[K2] = T;
  return Object2(result, { ...options, [Hint]: "Record" });
}
function FromTemplateLiteralKey(K, T, options) {
  return IsTemplateLiteralFinite(K) ? RecordCreateFromKeys(IndexPropertyKeys(K), T, options) : RecordCreateFromPattern(K.pattern, T, options);
}
function FromUnionKey(key, type, options) {
  return RecordCreateFromKeys(IndexPropertyKeys(Union(key)), type, options);
}
function FromLiteralKey(key, type, options) {
  return RecordCreateFromKeys([key.toString()], type, options);
}
function FromRegExpKey(key, type, options) {
  return RecordCreateFromPattern(key.source, type, options);
}
function FromStringKey(key, type, options) {
  const pattern = IsUndefined(key.pattern) ? PatternStringExact : key.pattern;
  return RecordCreateFromPattern(pattern, type, options);
}
function FromAnyKey(_, type, options) {
  return RecordCreateFromPattern(PatternStringExact, type, options);
}
function FromNeverKey(_key, type, options) {
  return RecordCreateFromPattern(PatternNeverExact, type, options);
}
function FromBooleanKey(_key, type, options) {
  return Object2({ true: type, false: type }, options);
}
function FromIntegerKey(_key, type, options) {
  return RecordCreateFromPattern(PatternNumberExact, type, options);
}
function FromNumberKey(_, type, options) {
  return RecordCreateFromPattern(PatternNumberExact, type, options);
}
function Record(key, type, options = {}) {
  return IsUnion(key) ? FromUnionKey(key.anyOf, type, options) : IsTemplateLiteral(key) ? FromTemplateLiteralKey(key, type, options) : IsLiteral(key) ? FromLiteralKey(key.const, type, options) : IsBoolean3(key) ? FromBooleanKey(key, type, options) : IsInteger2(key) ? FromIntegerKey(key, type, options) : IsNumber3(key) ? FromNumberKey(key, type, options) : IsRegExp2(key) ? FromRegExpKey(key, type, options) : IsString3(key) ? FromStringKey(key, type, options) : IsAny(key) ? FromAnyKey(key, type, options) : IsNever(key) ? FromNeverKey(key, type, options) : Never(options);
}
function RecordPattern(record) {
  return globalThis.Object.getOwnPropertyNames(record.patternProperties)[0];
}
function RecordKey2(type) {
  const pattern = RecordPattern(type);
  return pattern === PatternStringExact ? String2() : pattern === PatternNumberExact ? Number2() : String2({ pattern });
}
function RecordValue2(type) {
  return type.patternProperties[RecordPattern(type)];
}

// node_modules/@sinclair/typebox/build/esm/type/instantiate/instantiate.mjs
function FromConstructor2(args, type) {
  type.parameters = FromTypes(args, type.parameters);
  type.returns = FromType(args, type.returns);
  return type;
}
function FromFunction2(args, type) {
  type.parameters = FromTypes(args, type.parameters);
  type.returns = FromType(args, type.returns);
  return type;
}
function FromIntersect5(args, type) {
  type.allOf = FromTypes(args, type.allOf);
  return type;
}
function FromUnion7(args, type) {
  type.anyOf = FromTypes(args, type.anyOf);
  return type;
}
function FromTuple4(args, type) {
  if (IsUndefined(type.items))
    return type;
  type.items = FromTypes(args, type.items);
  return type;
}
function FromArray5(args, type) {
  type.items = FromType(args, type.items);
  return type;
}
function FromAsyncIterator2(args, type) {
  type.items = FromType(args, type.items);
  return type;
}
function FromIterator2(args, type) {
  type.items = FromType(args, type.items);
  return type;
}
function FromPromise3(args, type) {
  type.item = FromType(args, type.item);
  return type;
}
function FromObject2(args, type) {
  const mappedProperties = FromProperties11(args, type.properties);
  return { ...type, ...Object2(mappedProperties) };
}
function FromRecord2(args, type) {
  const mappedKey = FromType(args, RecordKey2(type));
  const mappedValue = FromType(args, RecordValue2(type));
  const result = Record(mappedKey, mappedValue);
  return { ...type, ...result };
}
function FromArgument(args, argument) {
  return argument.index in args ? args[argument.index] : Unknown();
}
function FromProperty2(args, type) {
  const isReadonly = IsReadonly(type);
  const isOptional = IsOptional(type);
  const mapped = FromType(args, type);
  return isReadonly && isOptional ? ReadonlyOptional(mapped) : isReadonly && !isOptional ? Readonly(mapped) : !isReadonly && isOptional ? Optional(mapped) : mapped;
}
function FromProperties11(args, properties) {
  return globalThis.Object.getOwnPropertyNames(properties).reduce((result, key) => {
    return { ...result, [key]: FromProperty2(args, properties[key]) };
  }, {});
}
function FromTypes(args, types) {
  return types.map((type) => FromType(args, type));
}
function FromType(args, type) {
  return IsConstructor(type) ? FromConstructor2(args, type) : IsFunction3(type) ? FromFunction2(args, type) : IsIntersect(type) ? FromIntersect5(args, type) : IsUnion(type) ? FromUnion7(args, type) : IsTuple(type) ? FromTuple4(args, type) : IsArray3(type) ? FromArray5(args, type) : IsAsyncIterator3(type) ? FromAsyncIterator2(args, type) : IsIterator3(type) ? FromIterator2(args, type) : IsPromise2(type) ? FromPromise3(args, type) : IsObject3(type) ? FromObject2(args, type) : IsRecord(type) ? FromRecord2(args, type) : IsArgument(type) ? FromArgument(args, type) : type;
}
function Instantiate(type, args) {
  return FromType(args, CloneType(type));
}

// node_modules/@sinclair/typebox/build/esm/type/integer/integer.mjs
function Integer(options) {
  return CreateType({ [Kind]: "Integer", type: "integer" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/intrinsic/intrinsic-from-mapped-key.mjs
function MappedIntrinsicPropertyKey(K, M, options) {
  return {
    [K]: Intrinsic(Literal(K), M, Clone(options))
  };
}
function MappedIntrinsicPropertyKeys(K, M, options) {
  const result = K.reduce((Acc, L) => {
    return { ...Acc, ...MappedIntrinsicPropertyKey(L, M, options) };
  }, {});
  return result;
}
function MappedIntrinsicProperties(T, M, options) {
  return MappedIntrinsicPropertyKeys(T["keys"], M, options);
}
function IntrinsicFromMappedKey(T, M, options) {
  const P = MappedIntrinsicProperties(T, M, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/intrinsic/intrinsic.mjs
function ApplyUncapitalize(value) {
  const [first, rest] = [value.slice(0, 1), value.slice(1)];
  return [first.toLowerCase(), rest].join("");
}
function ApplyCapitalize(value) {
  const [first, rest] = [value.slice(0, 1), value.slice(1)];
  return [first.toUpperCase(), rest].join("");
}
function ApplyUppercase(value) {
  return value.toUpperCase();
}
function ApplyLowercase(value) {
  return value.toLowerCase();
}
function FromTemplateLiteral3(schema, mode, options) {
  const expression = TemplateLiteralParseExact(schema.pattern);
  const finite = IsTemplateLiteralExpressionFinite(expression);
  if (!finite)
    return { ...schema, pattern: FromLiteralValue(schema.pattern, mode) };
  const strings = [...TemplateLiteralExpressionGenerate(expression)];
  const literals = strings.map((value) => Literal(value));
  const mapped = FromRest5(literals, mode);
  const union = Union(mapped);
  return TemplateLiteral([union], options);
}
function FromLiteralValue(value, mode) {
  return typeof value === "string" ? mode === "Uncapitalize" ? ApplyUncapitalize(value) : mode === "Capitalize" ? ApplyCapitalize(value) : mode === "Uppercase" ? ApplyUppercase(value) : mode === "Lowercase" ? ApplyLowercase(value) : value : value.toString();
}
function FromRest5(T, M) {
  return T.map((L) => Intrinsic(L, M));
}
function Intrinsic(schema, mode, options = {}) {
  return IsMappedKey(schema) ? IntrinsicFromMappedKey(schema, mode, options) : IsTemplateLiteral(schema) ? FromTemplateLiteral3(schema, mode, options) : IsUnion(schema) ? Union(FromRest5(schema.anyOf, mode), options) : IsLiteral(schema) ? Literal(FromLiteralValue(schema.const, mode), options) : CreateType(schema, options);
}

// node_modules/@sinclair/typebox/build/esm/type/intrinsic/capitalize.mjs
function Capitalize(T, options = {}) {
  return Intrinsic(T, "Capitalize", options);
}

// node_modules/@sinclair/typebox/build/esm/type/intrinsic/lowercase.mjs
function Lowercase(T, options = {}) {
  return Intrinsic(T, "Lowercase", options);
}

// node_modules/@sinclair/typebox/build/esm/type/intrinsic/uncapitalize.mjs
function Uncapitalize(T, options = {}) {
  return Intrinsic(T, "Uncapitalize", options);
}

// node_modules/@sinclair/typebox/build/esm/type/intrinsic/uppercase.mjs
function Uppercase(T, options = {}) {
  return Intrinsic(T, "Uppercase", options);
}

// node_modules/@sinclair/typebox/build/esm/type/omit/omit-from-mapped-result.mjs
function FromProperties12(properties, propertyKeys, options) {
  const result = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(properties))
    result[K2] = Omit(properties[K2], propertyKeys, Clone(options));
  return result;
}
function FromMappedResult9(mappedResult, propertyKeys, options) {
  return FromProperties12(mappedResult.properties, propertyKeys, options);
}
function OmitFromMappedResult(mappedResult, propertyKeys, options) {
  const properties = FromMappedResult9(mappedResult, propertyKeys, options);
  return MappedResult(properties);
}

// node_modules/@sinclair/typebox/build/esm/type/omit/omit.mjs
function FromIntersect6(types, propertyKeys) {
  return types.map((type) => OmitResolve(type, propertyKeys));
}
function FromUnion8(types, propertyKeys) {
  return types.map((type) => OmitResolve(type, propertyKeys));
}
function FromProperty3(properties, key) {
  const { [key]: _, ...R } = properties;
  return R;
}
function FromProperties13(properties, propertyKeys) {
  return propertyKeys.reduce((T, K2) => FromProperty3(T, K2), properties);
}
function FromObject3(properties, propertyKeys) {
  const options = Discard(properties, [TransformKind, "$id", "required", "properties"]);
  const omittedProperties = FromProperties13(properties["properties"], propertyKeys);
  return Object2(omittedProperties, options);
}
function UnionFromPropertyKeys(propertyKeys) {
  const result = propertyKeys.reduce((result2, key) => IsLiteralValue(key) ? [...result2, Literal(key)] : result2, []);
  return Union(result);
}
function OmitResolve(properties, propertyKeys) {
  return IsIntersect(properties) ? Intersect(FromIntersect6(properties.allOf, propertyKeys)) : IsUnion(properties) ? Union(FromUnion8(properties.anyOf, propertyKeys)) : IsObject3(properties) ? FromObject3(properties, propertyKeys) : Object2({});
}
function Omit(type, key, options) {
  const typeKey = IsArray(key) ? UnionFromPropertyKeys(key) : key;
  const propertyKeys = IsSchema(key) ? IndexPropertyKeys(key) : key;
  const isTypeRef = IsRef(type);
  const isKeyRef = IsRef(key);
  return IsMappedResult(type) ? OmitFromMappedResult(type, propertyKeys, options) : IsMappedKey(key) ? OmitFromMappedKey(type, key, options) : isTypeRef && isKeyRef ? Computed("Omit", [type, typeKey], options) : !isTypeRef && isKeyRef ? Computed("Omit", [type, typeKey], options) : isTypeRef && !isKeyRef ? Computed("Omit", [type, typeKey], options) : CreateType({ ...OmitResolve(type, propertyKeys), ...options });
}

// node_modules/@sinclair/typebox/build/esm/type/omit/omit-from-mapped-key.mjs
function FromPropertyKey2(type, key, options) {
  return { [key]: Omit(type, [key], Clone(options)) };
}
function FromPropertyKeys2(type, propertyKeys, options) {
  return propertyKeys.reduce((Acc, LK) => {
    return { ...Acc, ...FromPropertyKey2(type, LK, options) };
  }, {});
}
function FromMappedKey3(type, mappedKey, options) {
  return FromPropertyKeys2(type, mappedKey.keys, options);
}
function OmitFromMappedKey(type, mappedKey, options) {
  const properties = FromMappedKey3(type, mappedKey, options);
  return MappedResult(properties);
}

// node_modules/@sinclair/typebox/build/esm/type/pick/pick-from-mapped-result.mjs
function FromProperties14(properties, propertyKeys, options) {
  const result = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(properties))
    result[K2] = Pick(properties[K2], propertyKeys, Clone(options));
  return result;
}
function FromMappedResult10(mappedResult, propertyKeys, options) {
  return FromProperties14(mappedResult.properties, propertyKeys, options);
}
function PickFromMappedResult(mappedResult, propertyKeys, options) {
  const properties = FromMappedResult10(mappedResult, propertyKeys, options);
  return MappedResult(properties);
}

// node_modules/@sinclair/typebox/build/esm/type/pick/pick.mjs
function FromIntersect7(types, propertyKeys) {
  return types.map((type) => PickResolve(type, propertyKeys));
}
function FromUnion9(types, propertyKeys) {
  return types.map((type) => PickResolve(type, propertyKeys));
}
function FromProperties15(properties, propertyKeys) {
  const result = {};
  for (const K2 of propertyKeys)
    if (K2 in properties)
      result[K2] = properties[K2];
  return result;
}
function FromObject4(T, K) {
  const options = Discard(T, [TransformKind, "$id", "required", "properties"]);
  const properties = FromProperties15(T["properties"], K);
  return Object2(properties, options);
}
function UnionFromPropertyKeys2(propertyKeys) {
  const result = propertyKeys.reduce((result2, key) => IsLiteralValue(key) ? [...result2, Literal(key)] : result2, []);
  return Union(result);
}
function PickResolve(properties, propertyKeys) {
  return IsIntersect(properties) ? Intersect(FromIntersect7(properties.allOf, propertyKeys)) : IsUnion(properties) ? Union(FromUnion9(properties.anyOf, propertyKeys)) : IsObject3(properties) ? FromObject4(properties, propertyKeys) : Object2({});
}
function Pick(type, key, options) {
  const typeKey = IsArray(key) ? UnionFromPropertyKeys2(key) : key;
  const propertyKeys = IsSchema(key) ? IndexPropertyKeys(key) : key;
  const isTypeRef = IsRef(type);
  const isKeyRef = IsRef(key);
  return IsMappedResult(type) ? PickFromMappedResult(type, propertyKeys, options) : IsMappedKey(key) ? PickFromMappedKey(type, key, options) : isTypeRef && isKeyRef ? Computed("Pick", [type, typeKey], options) : !isTypeRef && isKeyRef ? Computed("Pick", [type, typeKey], options) : isTypeRef && !isKeyRef ? Computed("Pick", [type, typeKey], options) : CreateType({ ...PickResolve(type, propertyKeys), ...options });
}

// node_modules/@sinclair/typebox/build/esm/type/pick/pick-from-mapped-key.mjs
function FromPropertyKey3(type, key, options) {
  return {
    [key]: Pick(type, [key], Clone(options))
  };
}
function FromPropertyKeys3(type, propertyKeys, options) {
  return propertyKeys.reduce((result, leftKey) => {
    return { ...result, ...FromPropertyKey3(type, leftKey, options) };
  }, {});
}
function FromMappedKey4(type, mappedKey, options) {
  return FromPropertyKeys3(type, mappedKey.keys, options);
}
function PickFromMappedKey(type, mappedKey, options) {
  const properties = FromMappedKey4(type, mappedKey, options);
  return MappedResult(properties);
}

// node_modules/@sinclair/typebox/build/esm/type/partial/partial.mjs
function FromComputed3(target, parameters) {
  return Computed("Partial", [Computed(target, parameters)]);
}
function FromRef3($ref) {
  return Computed("Partial", [Ref($ref)]);
}
function FromProperties16(properties) {
  const partialProperties = {};
  for (const K of globalThis.Object.getOwnPropertyNames(properties))
    partialProperties[K] = Optional(properties[K]);
  return partialProperties;
}
function FromObject5(type) {
  const options = Discard(type, [TransformKind, "$id", "required", "properties"]);
  const properties = FromProperties16(type["properties"]);
  return Object2(properties, options);
}
function FromRest6(types) {
  return types.map((type) => PartialResolve(type));
}
function PartialResolve(type) {
  return IsComputed(type) ? FromComputed3(type.target, type.parameters) : IsRef(type) ? FromRef3(type.$ref) : IsIntersect(type) ? Intersect(FromRest6(type.allOf)) : IsUnion(type) ? Union(FromRest6(type.anyOf)) : IsObject3(type) ? FromObject5(type) : IsBigInt3(type) ? type : IsBoolean3(type) ? type : IsInteger2(type) ? type : IsLiteral(type) ? type : IsNull3(type) ? type : IsNumber3(type) ? type : IsString3(type) ? type : IsSymbol3(type) ? type : IsUndefined3(type) ? type : Object2({});
}
function Partial(type, options) {
  if (IsMappedResult(type)) {
    return PartialFromMappedResult(type, options);
  } else {
    return CreateType({ ...PartialResolve(type), ...options });
  }
}

// node_modules/@sinclair/typebox/build/esm/type/partial/partial-from-mapped-result.mjs
function FromProperties17(K, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(K))
    Acc[K2] = Partial(K[K2], Clone(options));
  return Acc;
}
function FromMappedResult11(R, options) {
  return FromProperties17(R.properties, options);
}
function PartialFromMappedResult(R, options) {
  const P = FromMappedResult11(R, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/required/required.mjs
function FromComputed4(target, parameters) {
  return Computed("Required", [Computed(target, parameters)]);
}
function FromRef4($ref) {
  return Computed("Required", [Ref($ref)]);
}
function FromProperties18(properties) {
  const requiredProperties = {};
  for (const K of globalThis.Object.getOwnPropertyNames(properties))
    requiredProperties[K] = Discard(properties[K], [OptionalKind]);
  return requiredProperties;
}
function FromObject6(type) {
  const options = Discard(type, [TransformKind, "$id", "required", "properties"]);
  const properties = FromProperties18(type["properties"]);
  return Object2(properties, options);
}
function FromRest7(types) {
  return types.map((type) => RequiredResolve(type));
}
function RequiredResolve(type) {
  return IsComputed(type) ? FromComputed4(type.target, type.parameters) : IsRef(type) ? FromRef4(type.$ref) : IsIntersect(type) ? Intersect(FromRest7(type.allOf)) : IsUnion(type) ? Union(FromRest7(type.anyOf)) : IsObject3(type) ? FromObject6(type) : IsBigInt3(type) ? type : IsBoolean3(type) ? type : IsInteger2(type) ? type : IsLiteral(type) ? type : IsNull3(type) ? type : IsNumber3(type) ? type : IsString3(type) ? type : IsSymbol3(type) ? type : IsUndefined3(type) ? type : Object2({});
}
function Required(type, options) {
  if (IsMappedResult(type)) {
    return RequiredFromMappedResult(type, options);
  } else {
    return CreateType({ ...RequiredResolve(type), ...options });
  }
}

// node_modules/@sinclair/typebox/build/esm/type/required/required-from-mapped-result.mjs
function FromProperties19(P, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Required(P[K2], options);
  return Acc;
}
function FromMappedResult12(R, options) {
  return FromProperties19(R.properties, options);
}
function RequiredFromMappedResult(R, options) {
  const P = FromMappedResult12(R, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/module/compute.mjs
function DereferenceParameters(moduleProperties, types) {
  return types.map((type) => {
    return IsRef(type) ? Dereference(moduleProperties, type.$ref) : FromType2(moduleProperties, type);
  });
}
function Dereference(moduleProperties, ref) {
  return ref in moduleProperties ? IsRef(moduleProperties[ref]) ? Dereference(moduleProperties, moduleProperties[ref].$ref) : FromType2(moduleProperties, moduleProperties[ref]) : Never();
}
function FromAwaited(parameters) {
  return Awaited(parameters[0]);
}
function FromIndex(parameters) {
  return Index(parameters[0], parameters[1]);
}
function FromKeyOf(parameters) {
  return KeyOf(parameters[0]);
}
function FromPartial(parameters) {
  return Partial(parameters[0]);
}
function FromOmit(parameters) {
  return Omit(parameters[0], parameters[1]);
}
function FromPick(parameters) {
  return Pick(parameters[0], parameters[1]);
}
function FromRequired(parameters) {
  return Required(parameters[0]);
}
function FromComputed5(moduleProperties, target, parameters) {
  const dereferenced = DereferenceParameters(moduleProperties, parameters);
  return target === "Awaited" ? FromAwaited(dereferenced) : target === "Index" ? FromIndex(dereferenced) : target === "KeyOf" ? FromKeyOf(dereferenced) : target === "Partial" ? FromPartial(dereferenced) : target === "Omit" ? FromOmit(dereferenced) : target === "Pick" ? FromPick(dereferenced) : target === "Required" ? FromRequired(dereferenced) : Never();
}
function FromArray6(moduleProperties, type) {
  return Array2(FromType2(moduleProperties, type));
}
function FromAsyncIterator3(moduleProperties, type) {
  return AsyncIterator(FromType2(moduleProperties, type));
}
function FromConstructor3(moduleProperties, parameters, instanceType) {
  return Constructor(FromTypes2(moduleProperties, parameters), FromType2(moduleProperties, instanceType));
}
function FromFunction3(moduleProperties, parameters, returnType) {
  return Function2(FromTypes2(moduleProperties, parameters), FromType2(moduleProperties, returnType));
}
function FromIntersect8(moduleProperties, types) {
  return Intersect(FromTypes2(moduleProperties, types));
}
function FromIterator3(moduleProperties, type) {
  return Iterator(FromType2(moduleProperties, type));
}
function FromObject7(moduleProperties, properties) {
  return Object2(globalThis.Object.keys(properties).reduce((result, key) => {
    return { ...result, [key]: FromType2(moduleProperties, properties[key]) };
  }, {}));
}
function FromRecord3(moduleProperties, type) {
  const [value, pattern] = [FromType2(moduleProperties, RecordValue2(type)), RecordPattern(type)];
  const result = CloneType(type);
  result.patternProperties[pattern] = value;
  return result;
}
function FromTransform(moduleProperties, transform) {
  return IsRef(transform) ? { ...Dereference(moduleProperties, transform.$ref), [TransformKind]: transform[TransformKind] } : transform;
}
function FromTuple5(moduleProperties, types) {
  return Tuple(FromTypes2(moduleProperties, types));
}
function FromUnion10(moduleProperties, types) {
  return Union(FromTypes2(moduleProperties, types));
}
function FromTypes2(moduleProperties, types) {
  return types.map((type) => FromType2(moduleProperties, type));
}
function FromType2(moduleProperties, type) {
  return IsOptional(type) ? CreateType(FromType2(moduleProperties, Discard(type, [OptionalKind])), type) : IsReadonly(type) ? CreateType(FromType2(moduleProperties, Discard(type, [ReadonlyKind])), type) : IsTransform(type) ? CreateType(FromTransform(moduleProperties, type), type) : IsArray3(type) ? CreateType(FromArray6(moduleProperties, type.items), type) : IsAsyncIterator3(type) ? CreateType(FromAsyncIterator3(moduleProperties, type.items), type) : IsComputed(type) ? CreateType(FromComputed5(moduleProperties, type.target, type.parameters)) : IsConstructor(type) ? CreateType(FromConstructor3(moduleProperties, type.parameters, type.returns), type) : IsFunction3(type) ? CreateType(FromFunction3(moduleProperties, type.parameters, type.returns), type) : IsIntersect(type) ? CreateType(FromIntersect8(moduleProperties, type.allOf), type) : IsIterator3(type) ? CreateType(FromIterator3(moduleProperties, type.items), type) : IsObject3(type) ? CreateType(FromObject7(moduleProperties, type.properties), type) : IsRecord(type) ? CreateType(FromRecord3(moduleProperties, type)) : IsTuple(type) ? CreateType(FromTuple5(moduleProperties, type.items || []), type) : IsUnion(type) ? CreateType(FromUnion10(moduleProperties, type.anyOf), type) : type;
}
function ComputeType(moduleProperties, key) {
  return key in moduleProperties ? FromType2(moduleProperties, moduleProperties[key]) : Never();
}
function ComputeModuleProperties(moduleProperties) {
  return globalThis.Object.getOwnPropertyNames(moduleProperties).reduce((result, key) => {
    return { ...result, [key]: ComputeType(moduleProperties, key) };
  }, {});
}

// node_modules/@sinclair/typebox/build/esm/type/module/module.mjs
class TModule {
  constructor($defs) {
    const computed = ComputeModuleProperties($defs);
    const identified = this.WithIdentifiers(computed);
    this.$defs = identified;
  }
  Import(key, options) {
    const $defs = { ...this.$defs, [key]: CreateType(this.$defs[key], options) };
    return CreateType({ [Kind]: "Import", $defs, $ref: key });
  }
  WithIdentifiers($defs) {
    return globalThis.Object.getOwnPropertyNames($defs).reduce((result, key) => {
      return { ...result, [key]: { ...$defs[key], $id: key } };
    }, {});
  }
}
function Module(properties) {
  return new TModule(properties);
}

// node_modules/@sinclair/typebox/build/esm/type/not/not.mjs
function Not2(type, options) {
  return CreateType({ [Kind]: "Not", not: type }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/parameters/parameters.mjs
function Parameters(schema, options) {
  return IsFunction3(schema) ? Tuple(schema.parameters, options) : Never();
}

// node_modules/@sinclair/typebox/build/esm/type/recursive/recursive.mjs
var Ordinal = 0;
function Recursive(callback, options = {}) {
  if (IsUndefined(options.$id))
    options.$id = `T${Ordinal++}`;
  const thisType = CloneType(callback({ [Kind]: "This", $ref: `${options.$id}` }));
  thisType.$id = options.$id;
  return CreateType({ [Hint]: "Recursive", ...thisType }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/regexp/regexp.mjs
function RegExp2(unresolved, options) {
  const expr = IsString(unresolved) ? new globalThis.RegExp(unresolved) : unresolved;
  return CreateType({ [Kind]: "RegExp", type: "RegExp", source: expr.source, flags: expr.flags }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/rest/rest.mjs
function RestResolve(T) {
  return IsIntersect(T) ? T.allOf : IsUnion(T) ? T.anyOf : IsTuple(T) ? T.items ?? [] : [];
}
function Rest(T) {
  return RestResolve(T);
}

// node_modules/@sinclair/typebox/build/esm/type/return-type/return-type.mjs
function ReturnType(schema, options) {
  return IsFunction3(schema) ? CreateType(schema.returns, options) : Never(options);
}

// node_modules/@sinclair/typebox/build/esm/type/transform/transform.mjs
class TransformDecodeBuilder {
  constructor(schema) {
    this.schema = schema;
  }
  Decode(decode) {
    return new TransformEncodeBuilder(this.schema, decode);
  }
}

class TransformEncodeBuilder {
  constructor(schema, decode) {
    this.schema = schema;
    this.decode = decode;
  }
  EncodeTransform(encode, schema) {
    const Encode = (value) => schema[TransformKind].Encode(encode(value));
    const Decode = (value) => this.decode(schema[TransformKind].Decode(value));
    const Codec = { Encode, Decode };
    return { ...schema, [TransformKind]: Codec };
  }
  EncodeSchema(encode, schema) {
    const Codec = { Decode: this.decode, Encode: encode };
    return { ...schema, [TransformKind]: Codec };
  }
  Encode(encode) {
    return IsTransform(this.schema) ? this.EncodeTransform(encode, this.schema) : this.EncodeSchema(encode, this.schema);
  }
}
function Transform(schema) {
  return new TransformDecodeBuilder(schema);
}

// node_modules/@sinclair/typebox/build/esm/type/unsafe/unsafe.mjs
function Unsafe(options = {}) {
  return CreateType({ [Kind]: options[Kind] ?? "Unsafe" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/void/void.mjs
function Void(options) {
  return CreateType({ [Kind]: "Void", type: "void" }, options);
}

// node_modules/@sinclair/typebox/build/esm/type/type/type.mjs
var exports_type3 = {};
__export(exports_type3, {
  Void: () => Void,
  Uppercase: () => Uppercase,
  Unsafe: () => Unsafe,
  Unknown: () => Unknown,
  Union: () => Union,
  Undefined: () => Undefined,
  Uncapitalize: () => Uncapitalize,
  Uint8Array: () => Uint8Array2,
  Tuple: () => Tuple,
  Transform: () => Transform,
  TemplateLiteral: () => TemplateLiteral,
  Symbol: () => Symbol2,
  String: () => String2,
  ReturnType: () => ReturnType,
  Rest: () => Rest,
  Required: () => Required,
  RegExp: () => RegExp2,
  Ref: () => Ref,
  Recursive: () => Recursive,
  Record: () => Record,
  ReadonlyOptional: () => ReadonlyOptional,
  Readonly: () => Readonly,
  Promise: () => Promise2,
  Pick: () => Pick,
  Partial: () => Partial,
  Parameters: () => Parameters,
  Optional: () => Optional,
  Omit: () => Omit,
  Object: () => Object2,
  Number: () => Number2,
  Null: () => Null,
  Not: () => Not2,
  Never: () => Never,
  Module: () => Module,
  Mapped: () => Mapped,
  Lowercase: () => Lowercase,
  Literal: () => Literal,
  KeyOf: () => KeyOf,
  Iterator: () => Iterator,
  Intersect: () => Intersect,
  Integer: () => Integer,
  Instantiate: () => Instantiate,
  InstanceType: () => InstanceType,
  Index: () => Index,
  Function: () => Function2,
  Extract: () => Extract,
  Extends: () => Extends,
  Exclude: () => Exclude,
  Enum: () => Enum,
  Date: () => Date2,
  ConstructorParameters: () => ConstructorParameters,
  Constructor: () => Constructor,
  Const: () => Const,
  Composite: () => Composite,
  Capitalize: () => Capitalize,
  Boolean: () => Boolean2,
  BigInt: () => BigInt2,
  Awaited: () => Awaited,
  AsyncIterator: () => AsyncIterator,
  Array: () => Array2,
  Argument: () => Argument,
  Any: () => Any
});

// node_modules/@sinclair/typebox/build/esm/type/type/index.mjs
var Type = exports_type3;

// tau-bench/retail/tau-bench-retail.ts
var import_fastify = __toESM(require_fastify(), 1);
import * as fs from "fs/promises";

// node_modules/@sinclair/typebox/build/esm/errors/function.mjs
function DefaultErrorFunction(error) {
  switch (error.errorType) {
    case ValueErrorType.ArrayContains:
      return "Expected array to contain at least one matching value";
    case ValueErrorType.ArrayMaxContains:
      return `Expected array to contain no more than ${error.schema.maxContains} matching values`;
    case ValueErrorType.ArrayMinContains:
      return `Expected array to contain at least ${error.schema.minContains} matching values`;
    case ValueErrorType.ArrayMaxItems:
      return `Expected array length to be less or equal to ${error.schema.maxItems}`;
    case ValueErrorType.ArrayMinItems:
      return `Expected array length to be greater or equal to ${error.schema.minItems}`;
    case ValueErrorType.ArrayUniqueItems:
      return "Expected array elements to be unique";
    case ValueErrorType.Array:
      return "Expected array";
    case ValueErrorType.AsyncIterator:
      return "Expected AsyncIterator";
    case ValueErrorType.BigIntExclusiveMaximum:
      return `Expected bigint to be less than ${error.schema.exclusiveMaximum}`;
    case ValueErrorType.BigIntExclusiveMinimum:
      return `Expected bigint to be greater than ${error.schema.exclusiveMinimum}`;
    case ValueErrorType.BigIntMaximum:
      return `Expected bigint to be less or equal to ${error.schema.maximum}`;
    case ValueErrorType.BigIntMinimum:
      return `Expected bigint to be greater or equal to ${error.schema.minimum}`;
    case ValueErrorType.BigIntMultipleOf:
      return `Expected bigint to be a multiple of ${error.schema.multipleOf}`;
    case ValueErrorType.BigInt:
      return "Expected bigint";
    case ValueErrorType.Boolean:
      return "Expected boolean";
    case ValueErrorType.DateExclusiveMinimumTimestamp:
      return `Expected Date timestamp to be greater than ${error.schema.exclusiveMinimumTimestamp}`;
    case ValueErrorType.DateExclusiveMaximumTimestamp:
      return `Expected Date timestamp to be less than ${error.schema.exclusiveMaximumTimestamp}`;
    case ValueErrorType.DateMinimumTimestamp:
      return `Expected Date timestamp to be greater or equal to ${error.schema.minimumTimestamp}`;
    case ValueErrorType.DateMaximumTimestamp:
      return `Expected Date timestamp to be less or equal to ${error.schema.maximumTimestamp}`;
    case ValueErrorType.DateMultipleOfTimestamp:
      return `Expected Date timestamp to be a multiple of ${error.schema.multipleOfTimestamp}`;
    case ValueErrorType.Date:
      return "Expected Date";
    case ValueErrorType.Function:
      return "Expected function";
    case ValueErrorType.IntegerExclusiveMaximum:
      return `Expected integer to be less than ${error.schema.exclusiveMaximum}`;
    case ValueErrorType.IntegerExclusiveMinimum:
      return `Expected integer to be greater than ${error.schema.exclusiveMinimum}`;
    case ValueErrorType.IntegerMaximum:
      return `Expected integer to be less or equal to ${error.schema.maximum}`;
    case ValueErrorType.IntegerMinimum:
      return `Expected integer to be greater or equal to ${error.schema.minimum}`;
    case ValueErrorType.IntegerMultipleOf:
      return `Expected integer to be a multiple of ${error.schema.multipleOf}`;
    case ValueErrorType.Integer:
      return "Expected integer";
    case ValueErrorType.IntersectUnevaluatedProperties:
      return "Unexpected property";
    case ValueErrorType.Intersect:
      return "Expected all values to match";
    case ValueErrorType.Iterator:
      return "Expected Iterator";
    case ValueErrorType.Literal:
      return `Expected ${typeof error.schema.const === "string" ? `'${error.schema.const}'` : error.schema.const}`;
    case ValueErrorType.Never:
      return "Never";
    case ValueErrorType.Not:
      return "Value should not match";
    case ValueErrorType.Null:
      return "Expected null";
    case ValueErrorType.NumberExclusiveMaximum:
      return `Expected number to be less than ${error.schema.exclusiveMaximum}`;
    case ValueErrorType.NumberExclusiveMinimum:
      return `Expected number to be greater than ${error.schema.exclusiveMinimum}`;
    case ValueErrorType.NumberMaximum:
      return `Expected number to be less or equal to ${error.schema.maximum}`;
    case ValueErrorType.NumberMinimum:
      return `Expected number to be greater or equal to ${error.schema.minimum}`;
    case ValueErrorType.NumberMultipleOf:
      return `Expected number to be a multiple of ${error.schema.multipleOf}`;
    case ValueErrorType.Number:
      return "Expected number";
    case ValueErrorType.Object:
      return "Expected object";
    case ValueErrorType.ObjectAdditionalProperties:
      return "Unexpected property";
    case ValueErrorType.ObjectMaxProperties:
      return `Expected object to have no more than ${error.schema.maxProperties} properties`;
    case ValueErrorType.ObjectMinProperties:
      return `Expected object to have at least ${error.schema.minProperties} properties`;
    case ValueErrorType.ObjectRequiredProperty:
      return "Expected required property";
    case ValueErrorType.Promise:
      return "Expected Promise";
    case ValueErrorType.RegExp:
      return "Expected string to match regular expression";
    case ValueErrorType.StringFormatUnknown:
      return `Unknown format '${error.schema.format}'`;
    case ValueErrorType.StringFormat:
      return `Expected string to match '${error.schema.format}' format`;
    case ValueErrorType.StringMaxLength:
      return `Expected string length less or equal to ${error.schema.maxLength}`;
    case ValueErrorType.StringMinLength:
      return `Expected string length greater or equal to ${error.schema.minLength}`;
    case ValueErrorType.StringPattern:
      return `Expected string to match '${error.schema.pattern}'`;
    case ValueErrorType.String:
      return "Expected string";
    case ValueErrorType.Symbol:
      return "Expected symbol";
    case ValueErrorType.TupleLength:
      return `Expected tuple to have ${error.schema.maxItems || 0} elements`;
    case ValueErrorType.Tuple:
      return "Expected tuple";
    case ValueErrorType.Uint8ArrayMaxByteLength:
      return `Expected byte length less or equal to ${error.schema.maxByteLength}`;
    case ValueErrorType.Uint8ArrayMinByteLength:
      return `Expected byte length greater or equal to ${error.schema.minByteLength}`;
    case ValueErrorType.Uint8Array:
      return "Expected Uint8Array";
    case ValueErrorType.Undefined:
      return "Expected undefined";
    case ValueErrorType.Union:
      return "Expected union value";
    case ValueErrorType.Void:
      return "Expected void";
    case ValueErrorType.Kind:
      return `Expected kind '${error.schema[Kind]}'`;
    default:
      return "Unknown error type";
  }
}
var errorFunction = DefaultErrorFunction;
function GetErrorFunction() {
  return errorFunction;
}

// node_modules/@sinclair/typebox/build/esm/value/deref/deref.mjs
class TypeDereferenceError extends TypeBoxError {
  constructor(schema) {
    super(`Unable to dereference schema with $id '${schema.$ref}'`);
    this.schema = schema;
  }
}
function Resolve(schema, references) {
  const target = references.find((target2) => target2.$id === schema.$ref);
  if (target === undefined)
    throw new TypeDereferenceError(schema);
  return Deref(target, references);
}
function Pushref(schema, references) {
  if (!IsString2(schema.$id) || references.some((target) => target.$id === schema.$id))
    return references;
  references.push(schema);
  return references;
}
function Deref(schema, references) {
  return schema[Kind] === "This" || schema[Kind] === "Ref" ? Resolve(schema, references) : schema;
}

// node_modules/@sinclair/typebox/build/esm/value/hash/hash.mjs
class ValueHashError extends TypeBoxError {
  constructor(value) {
    super(`Unable to hash value`);
    this.value = value;
  }
}
var ByteMarker;
(function(ByteMarker2) {
  ByteMarker2[ByteMarker2["Undefined"] = 0] = "Undefined";
  ByteMarker2[ByteMarker2["Null"] = 1] = "Null";
  ByteMarker2[ByteMarker2["Boolean"] = 2] = "Boolean";
  ByteMarker2[ByteMarker2["Number"] = 3] = "Number";
  ByteMarker2[ByteMarker2["String"] = 4] = "String";
  ByteMarker2[ByteMarker2["Object"] = 5] = "Object";
  ByteMarker2[ByteMarker2["Array"] = 6] = "Array";
  ByteMarker2[ByteMarker2["Date"] = 7] = "Date";
  ByteMarker2[ByteMarker2["Uint8Array"] = 8] = "Uint8Array";
  ByteMarker2[ByteMarker2["Symbol"] = 9] = "Symbol";
  ByteMarker2[ByteMarker2["BigInt"] = 10] = "BigInt";
})(ByteMarker || (ByteMarker = {}));
var Accumulator = BigInt("14695981039346656037");
var [Prime, Size] = [BigInt("1099511628211"), BigInt("18446744073709551616")];
var Bytes = Array.from({ length: 256 }).map((_, i) => BigInt(i));
var F64 = new Float64Array(1);
var F64In = new DataView(F64.buffer);
var F64Out = new Uint8Array(F64.buffer);
function* NumberToBytes(value) {
  const byteCount = value === 0 ? 1 : Math.ceil(Math.floor(Math.log2(value) + 1) / 8);
  for (let i = 0;i < byteCount; i++) {
    yield value >> 8 * (byteCount - 1 - i) & 255;
  }
}
function ArrayType2(value) {
  FNV1A64(ByteMarker.Array);
  for (const item of value) {
    Visit4(item);
  }
}
function BooleanType(value) {
  FNV1A64(ByteMarker.Boolean);
  FNV1A64(value ? 1 : 0);
}
function BigIntType(value) {
  FNV1A64(ByteMarker.BigInt);
  F64In.setBigInt64(0, value);
  for (const byte of F64Out) {
    FNV1A64(byte);
  }
}
function DateType2(value) {
  FNV1A64(ByteMarker.Date);
  Visit4(value.getTime());
}
function NullType(value) {
  FNV1A64(ByteMarker.Null);
}
function NumberType(value) {
  FNV1A64(ByteMarker.Number);
  F64In.setFloat64(0, value);
  for (const byte of F64Out) {
    FNV1A64(byte);
  }
}
function ObjectType2(value) {
  FNV1A64(ByteMarker.Object);
  for (const key of globalThis.Object.getOwnPropertyNames(value).sort()) {
    Visit4(key);
    Visit4(value[key]);
  }
}
function StringType(value) {
  FNV1A64(ByteMarker.String);
  for (let i = 0;i < value.length; i++) {
    for (const byte of NumberToBytes(value.charCodeAt(i))) {
      FNV1A64(byte);
    }
  }
}
function SymbolType(value) {
  FNV1A64(ByteMarker.Symbol);
  Visit4(value.description);
}
function Uint8ArrayType2(value) {
  FNV1A64(ByteMarker.Uint8Array);
  for (let i = 0;i < value.length; i++) {
    FNV1A64(value[i]);
  }
}
function UndefinedType(value) {
  return FNV1A64(ByteMarker.Undefined);
}
function Visit4(value) {
  if (IsArray2(value))
    return ArrayType2(value);
  if (IsBoolean2(value))
    return BooleanType(value);
  if (IsBigInt2(value))
    return BigIntType(value);
  if (IsDate2(value))
    return DateType2(value);
  if (IsNull2(value))
    return NullType(value);
  if (IsNumber2(value))
    return NumberType(value);
  if (IsObject2(value))
    return ObjectType2(value);
  if (IsString2(value))
    return StringType(value);
  if (IsSymbol2(value))
    return SymbolType(value);
  if (IsUint8Array2(value))
    return Uint8ArrayType2(value);
  if (IsUndefined2(value))
    return UndefinedType(value);
  throw new ValueHashError(value);
}
function FNV1A64(byte) {
  Accumulator = Accumulator ^ Bytes[byte];
  Accumulator = Accumulator * Prime % Size;
}
function Hash(value) {
  Accumulator = BigInt("14695981039346656037");
  Visit4(value);
  return Accumulator;
}

// node_modules/@sinclair/typebox/build/esm/value/check/check.mjs
class ValueCheckUnknownTypeError extends TypeBoxError {
  constructor(schema) {
    super(`Unknown type`);
    this.schema = schema;
  }
}
function IsAnyOrUnknown(schema) {
  return schema[Kind] === "Any" || schema[Kind] === "Unknown";
}
function IsDefined(value) {
  return value !== undefined;
}
function FromAny2(schema, references, value) {
  return true;
}
function FromArgument2(schema, references, value) {
  return true;
}
function FromArray7(schema, references, value) {
  if (!IsArray2(value))
    return false;
  if (IsDefined(schema.minItems) && !(value.length >= schema.minItems)) {
    return false;
  }
  if (IsDefined(schema.maxItems) && !(value.length <= schema.maxItems)) {
    return false;
  }
  if (!value.every((value2) => Visit5(schema.items, references, value2))) {
    return false;
  }
  if (schema.uniqueItems === true && !function() {
    const set = new Set;
    for (const element of value) {
      const hashed = Hash(element);
      if (set.has(hashed)) {
        return false;
      } else {
        set.add(hashed);
      }
    }
    return true;
  }()) {
    return false;
  }
  if (!(IsDefined(schema.contains) || IsNumber2(schema.minContains) || IsNumber2(schema.maxContains))) {
    return true;
  }
  const containsSchema = IsDefined(schema.contains) ? schema.contains : Never();
  const containsCount = value.reduce((acc, value2) => Visit5(containsSchema, references, value2) ? acc + 1 : acc, 0);
  if (containsCount === 0) {
    return false;
  }
  if (IsNumber2(schema.minContains) && containsCount < schema.minContains) {
    return false;
  }
  if (IsNumber2(schema.maxContains) && containsCount > schema.maxContains) {
    return false;
  }
  return true;
}
function FromAsyncIterator4(schema, references, value) {
  return IsAsyncIterator2(value);
}
function FromBigInt2(schema, references, value) {
  if (!IsBigInt2(value))
    return false;
  if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
    return false;
  }
  if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
    return false;
  }
  if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {
    return false;
  }
  if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {
    return false;
  }
  if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === BigInt(0))) {
    return false;
  }
  return true;
}
function FromBoolean2(schema, references, value) {
  return IsBoolean2(value);
}
function FromConstructor4(schema, references, value) {
  return Visit5(schema.returns, references, value.prototype);
}
function FromDate2(schema, references, value) {
  if (!IsDate2(value))
    return false;
  if (IsDefined(schema.exclusiveMaximumTimestamp) && !(value.getTime() < schema.exclusiveMaximumTimestamp)) {
    return false;
  }
  if (IsDefined(schema.exclusiveMinimumTimestamp) && !(value.getTime() > schema.exclusiveMinimumTimestamp)) {
    return false;
  }
  if (IsDefined(schema.maximumTimestamp) && !(value.getTime() <= schema.maximumTimestamp)) {
    return false;
  }
  if (IsDefined(schema.minimumTimestamp) && !(value.getTime() >= schema.minimumTimestamp)) {
    return false;
  }
  if (IsDefined(schema.multipleOfTimestamp) && !(value.getTime() % schema.multipleOfTimestamp === 0)) {
    return false;
  }
  return true;
}
function FromFunction4(schema, references, value) {
  return IsFunction2(value);
}
function FromImport(schema, references, value) {
  const definitions = globalThis.Object.values(schema.$defs);
  const target = schema.$defs[schema.$ref];
  return Visit5(target, [...references, ...definitions], value);
}
function FromInteger2(schema, references, value) {
  if (!IsInteger(value)) {
    return false;
  }
  if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
    return false;
  }
  if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
    return false;
  }
  if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {
    return false;
  }
  if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {
    return false;
  }
  if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {
    return false;
  }
  return true;
}
function FromIntersect9(schema, references, value) {
  const check1 = schema.allOf.every((schema2) => Visit5(schema2, references, value));
  if (schema.unevaluatedProperties === false) {
    const keyPattern = new RegExp(KeyOfPattern(schema));
    const check2 = Object.getOwnPropertyNames(value).every((key) => keyPattern.test(key));
    return check1 && check2;
  } else if (IsSchema(schema.unevaluatedProperties)) {
    const keyCheck = new RegExp(KeyOfPattern(schema));
    const check2 = Object.getOwnPropertyNames(value).every((key) => keyCheck.test(key) || Visit5(schema.unevaluatedProperties, references, value[key]));
    return check1 && check2;
  } else {
    return check1;
  }
}
function FromIterator4(schema, references, value) {
  return IsIterator2(value);
}
function FromLiteral3(schema, references, value) {
  return value === schema.const;
}
function FromNever2(schema, references, value) {
  return false;
}
function FromNot2(schema, references, value) {
  return !Visit5(schema.not, references, value);
}
function FromNull2(schema, references, value) {
  return IsNull2(value);
}
function FromNumber2(schema, references, value) {
  if (!TypeSystemPolicy.IsNumberLike(value))
    return false;
  if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
    return false;
  }
  if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
    return false;
  }
  if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {
    return false;
  }
  if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {
    return false;
  }
  if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {
    return false;
  }
  return true;
}
function FromObject8(schema, references, value) {
  if (!TypeSystemPolicy.IsObjectLike(value))
    return false;
  if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {
    return false;
  }
  if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {
    return false;
  }
  const knownKeys = Object.getOwnPropertyNames(schema.properties);
  for (const knownKey of knownKeys) {
    const property = schema.properties[knownKey];
    if (schema.required && schema.required.includes(knownKey)) {
      if (!Visit5(property, references, value[knownKey])) {
        return false;
      }
      if ((ExtendsUndefinedCheck(property) || IsAnyOrUnknown(property)) && !(knownKey in value)) {
        return false;
      }
    } else {
      if (TypeSystemPolicy.IsExactOptionalProperty(value, knownKey) && !Visit5(property, references, value[knownKey])) {
        return false;
      }
    }
  }
  if (schema.additionalProperties === false) {
    const valueKeys = Object.getOwnPropertyNames(value);
    if (schema.required && schema.required.length === knownKeys.length && valueKeys.length === knownKeys.length) {
      return true;
    } else {
      return valueKeys.every((valueKey) => knownKeys.includes(valueKey));
    }
  } else if (typeof schema.additionalProperties === "object") {
    const valueKeys = Object.getOwnPropertyNames(value);
    return valueKeys.every((key) => knownKeys.includes(key) || Visit5(schema.additionalProperties, references, value[key]));
  } else {
    return true;
  }
}
function FromPromise4(schema, references, value) {
  return IsPromise(value);
}
function FromRecord4(schema, references, value) {
  if (!TypeSystemPolicy.IsRecordLike(value)) {
    return false;
  }
  if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {
    return false;
  }
  if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {
    return false;
  }
  const [patternKey, patternSchema] = Object.entries(schema.patternProperties)[0];
  const regex = new RegExp(patternKey);
  const check1 = Object.entries(value).every(([key, value2]) => {
    return regex.test(key) ? Visit5(patternSchema, references, value2) : true;
  });
  const check2 = typeof schema.additionalProperties === "object" ? Object.entries(value).every(([key, value2]) => {
    return !regex.test(key) ? Visit5(schema.additionalProperties, references, value2) : true;
  }) : true;
  const check3 = schema.additionalProperties === false ? Object.getOwnPropertyNames(value).every((key) => {
    return regex.test(key);
  }) : true;
  return check1 && check2 && check3;
}
function FromRef5(schema, references, value) {
  return Visit5(Deref(schema, references), references, value);
}
function FromRegExp2(schema, references, value) {
  const regex = new RegExp(schema.source, schema.flags);
  if (IsDefined(schema.minLength)) {
    if (!(value.length >= schema.minLength))
      return false;
  }
  if (IsDefined(schema.maxLength)) {
    if (!(value.length <= schema.maxLength))
      return false;
  }
  return regex.test(value);
}
function FromString2(schema, references, value) {
  if (!IsString2(value)) {
    return false;
  }
  if (IsDefined(schema.minLength)) {
    if (!(value.length >= schema.minLength))
      return false;
  }
  if (IsDefined(schema.maxLength)) {
    if (!(value.length <= schema.maxLength))
      return false;
  }
  if (IsDefined(schema.pattern)) {
    const regex = new RegExp(schema.pattern);
    if (!regex.test(value))
      return false;
  }
  if (IsDefined(schema.format)) {
    if (!exports_format.Has(schema.format))
      return false;
    const func = exports_format.Get(schema.format);
    return func(value);
  }
  return true;
}
function FromSymbol2(schema, references, value) {
  return IsSymbol2(value);
}
function FromTemplateLiteral4(schema, references, value) {
  return IsString2(value) && new RegExp(schema.pattern).test(value);
}
function FromThis(schema, references, value) {
  return Visit5(Deref(schema, references), references, value);
}
function FromTuple6(schema, references, value) {
  if (!IsArray2(value)) {
    return false;
  }
  if (schema.items === undefined && !(value.length === 0)) {
    return false;
  }
  if (!(value.length === schema.maxItems)) {
    return false;
  }
  if (!schema.items) {
    return true;
  }
  for (let i = 0;i < schema.items.length; i++) {
    if (!Visit5(schema.items[i], references, value[i]))
      return false;
  }
  return true;
}
function FromUndefined2(schema, references, value) {
  return IsUndefined2(value);
}
function FromUnion11(schema, references, value) {
  return schema.anyOf.some((inner) => Visit5(inner, references, value));
}
function FromUint8Array2(schema, references, value) {
  if (!IsUint8Array2(value)) {
    return false;
  }
  if (IsDefined(schema.maxByteLength) && !(value.length <= schema.maxByteLength)) {
    return false;
  }
  if (IsDefined(schema.minByteLength) && !(value.length >= schema.minByteLength)) {
    return false;
  }
  return true;
}
function FromUnknown2(schema, references, value) {
  return true;
}
function FromVoid2(schema, references, value) {
  return TypeSystemPolicy.IsVoidLike(value);
}
function FromKind(schema, references, value) {
  if (!exports_type2.Has(schema[Kind]))
    return false;
  const func = exports_type2.Get(schema[Kind]);
  return func(schema, value);
}
function Visit5(schema, references, value) {
  const references_ = IsDefined(schema.$id) ? Pushref(schema, references) : references;
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Any":
      return FromAny2(schema_, references_, value);
    case "Argument":
      return FromArgument2(schema_, references_, value);
    case "Array":
      return FromArray7(schema_, references_, value);
    case "AsyncIterator":
      return FromAsyncIterator4(schema_, references_, value);
    case "BigInt":
      return FromBigInt2(schema_, references_, value);
    case "Boolean":
      return FromBoolean2(schema_, references_, value);
    case "Constructor":
      return FromConstructor4(schema_, references_, value);
    case "Date":
      return FromDate2(schema_, references_, value);
    case "Function":
      return FromFunction4(schema_, references_, value);
    case "Import":
      return FromImport(schema_, references_, value);
    case "Integer":
      return FromInteger2(schema_, references_, value);
    case "Intersect":
      return FromIntersect9(schema_, references_, value);
    case "Iterator":
      return FromIterator4(schema_, references_, value);
    case "Literal":
      return FromLiteral3(schema_, references_, value);
    case "Never":
      return FromNever2(schema_, references_, value);
    case "Not":
      return FromNot2(schema_, references_, value);
    case "Null":
      return FromNull2(schema_, references_, value);
    case "Number":
      return FromNumber2(schema_, references_, value);
    case "Object":
      return FromObject8(schema_, references_, value);
    case "Promise":
      return FromPromise4(schema_, references_, value);
    case "Record":
      return FromRecord4(schema_, references_, value);
    case "Ref":
      return FromRef5(schema_, references_, value);
    case "RegExp":
      return FromRegExp2(schema_, references_, value);
    case "String":
      return FromString2(schema_, references_, value);
    case "Symbol":
      return FromSymbol2(schema_, references_, value);
    case "TemplateLiteral":
      return FromTemplateLiteral4(schema_, references_, value);
    case "This":
      return FromThis(schema_, references_, value);
    case "Tuple":
      return FromTuple6(schema_, references_, value);
    case "Undefined":
      return FromUndefined2(schema_, references_, value);
    case "Union":
      return FromUnion11(schema_, references_, value);
    case "Uint8Array":
      return FromUint8Array2(schema_, references_, value);
    case "Unknown":
      return FromUnknown2(schema_, references_, value);
    case "Void":
      return FromVoid2(schema_, references_, value);
    default:
      if (!exports_type2.Has(schema_[Kind]))
        throw new ValueCheckUnknownTypeError(schema_);
      return FromKind(schema_, references_, value);
  }
}
function Check(...args) {
  return args.length === 3 ? Visit5(args[0], args[1], args[2]) : Visit5(args[0], [], args[1]);
}

// node_modules/@sinclair/typebox/build/esm/errors/errors.mjs
var ValueErrorType;
(function(ValueErrorType2) {
  ValueErrorType2[ValueErrorType2["ArrayContains"] = 0] = "ArrayContains";
  ValueErrorType2[ValueErrorType2["ArrayMaxContains"] = 1] = "ArrayMaxContains";
  ValueErrorType2[ValueErrorType2["ArrayMaxItems"] = 2] = "ArrayMaxItems";
  ValueErrorType2[ValueErrorType2["ArrayMinContains"] = 3] = "ArrayMinContains";
  ValueErrorType2[ValueErrorType2["ArrayMinItems"] = 4] = "ArrayMinItems";
  ValueErrorType2[ValueErrorType2["ArrayUniqueItems"] = 5] = "ArrayUniqueItems";
  ValueErrorType2[ValueErrorType2["Array"] = 6] = "Array";
  ValueErrorType2[ValueErrorType2["AsyncIterator"] = 7] = "AsyncIterator";
  ValueErrorType2[ValueErrorType2["BigIntExclusiveMaximum"] = 8] = "BigIntExclusiveMaximum";
  ValueErrorType2[ValueErrorType2["BigIntExclusiveMinimum"] = 9] = "BigIntExclusiveMinimum";
  ValueErrorType2[ValueErrorType2["BigIntMaximum"] = 10] = "BigIntMaximum";
  ValueErrorType2[ValueErrorType2["BigIntMinimum"] = 11] = "BigIntMinimum";
  ValueErrorType2[ValueErrorType2["BigIntMultipleOf"] = 12] = "BigIntMultipleOf";
  ValueErrorType2[ValueErrorType2["BigInt"] = 13] = "BigInt";
  ValueErrorType2[ValueErrorType2["Boolean"] = 14] = "Boolean";
  ValueErrorType2[ValueErrorType2["DateExclusiveMaximumTimestamp"] = 15] = "DateExclusiveMaximumTimestamp";
  ValueErrorType2[ValueErrorType2["DateExclusiveMinimumTimestamp"] = 16] = "DateExclusiveMinimumTimestamp";
  ValueErrorType2[ValueErrorType2["DateMaximumTimestamp"] = 17] = "DateMaximumTimestamp";
  ValueErrorType2[ValueErrorType2["DateMinimumTimestamp"] = 18] = "DateMinimumTimestamp";
  ValueErrorType2[ValueErrorType2["DateMultipleOfTimestamp"] = 19] = "DateMultipleOfTimestamp";
  ValueErrorType2[ValueErrorType2["Date"] = 20] = "Date";
  ValueErrorType2[ValueErrorType2["Function"] = 21] = "Function";
  ValueErrorType2[ValueErrorType2["IntegerExclusiveMaximum"] = 22] = "IntegerExclusiveMaximum";
  ValueErrorType2[ValueErrorType2["IntegerExclusiveMinimum"] = 23] = "IntegerExclusiveMinimum";
  ValueErrorType2[ValueErrorType2["IntegerMaximum"] = 24] = "IntegerMaximum";
  ValueErrorType2[ValueErrorType2["IntegerMinimum"] = 25] = "IntegerMinimum";
  ValueErrorType2[ValueErrorType2["IntegerMultipleOf"] = 26] = "IntegerMultipleOf";
  ValueErrorType2[ValueErrorType2["Integer"] = 27] = "Integer";
  ValueErrorType2[ValueErrorType2["IntersectUnevaluatedProperties"] = 28] = "IntersectUnevaluatedProperties";
  ValueErrorType2[ValueErrorType2["Intersect"] = 29] = "Intersect";
  ValueErrorType2[ValueErrorType2["Iterator"] = 30] = "Iterator";
  ValueErrorType2[ValueErrorType2["Kind"] = 31] = "Kind";
  ValueErrorType2[ValueErrorType2["Literal"] = 32] = "Literal";
  ValueErrorType2[ValueErrorType2["Never"] = 33] = "Never";
  ValueErrorType2[ValueErrorType2["Not"] = 34] = "Not";
  ValueErrorType2[ValueErrorType2["Null"] = 35] = "Null";
  ValueErrorType2[ValueErrorType2["NumberExclusiveMaximum"] = 36] = "NumberExclusiveMaximum";
  ValueErrorType2[ValueErrorType2["NumberExclusiveMinimum"] = 37] = "NumberExclusiveMinimum";
  ValueErrorType2[ValueErrorType2["NumberMaximum"] = 38] = "NumberMaximum";
  ValueErrorType2[ValueErrorType2["NumberMinimum"] = 39] = "NumberMinimum";
  ValueErrorType2[ValueErrorType2["NumberMultipleOf"] = 40] = "NumberMultipleOf";
  ValueErrorType2[ValueErrorType2["Number"] = 41] = "Number";
  ValueErrorType2[ValueErrorType2["ObjectAdditionalProperties"] = 42] = "ObjectAdditionalProperties";
  ValueErrorType2[ValueErrorType2["ObjectMaxProperties"] = 43] = "ObjectMaxProperties";
  ValueErrorType2[ValueErrorType2["ObjectMinProperties"] = 44] = "ObjectMinProperties";
  ValueErrorType2[ValueErrorType2["ObjectRequiredProperty"] = 45] = "ObjectRequiredProperty";
  ValueErrorType2[ValueErrorType2["Object"] = 46] = "Object";
  ValueErrorType2[ValueErrorType2["Promise"] = 47] = "Promise";
  ValueErrorType2[ValueErrorType2["RegExp"] = 48] = "RegExp";
  ValueErrorType2[ValueErrorType2["StringFormatUnknown"] = 49] = "StringFormatUnknown";
  ValueErrorType2[ValueErrorType2["StringFormat"] = 50] = "StringFormat";
  ValueErrorType2[ValueErrorType2["StringMaxLength"] = 51] = "StringMaxLength";
  ValueErrorType2[ValueErrorType2["StringMinLength"] = 52] = "StringMinLength";
  ValueErrorType2[ValueErrorType2["StringPattern"] = 53] = "StringPattern";
  ValueErrorType2[ValueErrorType2["String"] = 54] = "String";
  ValueErrorType2[ValueErrorType2["Symbol"] = 55] = "Symbol";
  ValueErrorType2[ValueErrorType2["TupleLength"] = 56] = "TupleLength";
  ValueErrorType2[ValueErrorType2["Tuple"] = 57] = "Tuple";
  ValueErrorType2[ValueErrorType2["Uint8ArrayMaxByteLength"] = 58] = "Uint8ArrayMaxByteLength";
  ValueErrorType2[ValueErrorType2["Uint8ArrayMinByteLength"] = 59] = "Uint8ArrayMinByteLength";
  ValueErrorType2[ValueErrorType2["Uint8Array"] = 60] = "Uint8Array";
  ValueErrorType2[ValueErrorType2["Undefined"] = 61] = "Undefined";
  ValueErrorType2[ValueErrorType2["Union"] = 62] = "Union";
  ValueErrorType2[ValueErrorType2["Void"] = 63] = "Void";
})(ValueErrorType || (ValueErrorType = {}));

class ValueErrorsUnknownTypeError extends TypeBoxError {
  constructor(schema) {
    super("Unknown type");
    this.schema = schema;
  }
}
function EscapeKey(key) {
  return key.replace(/~/g, "~0").replace(/\//g, "~1");
}
function IsDefined2(value) {
  return value !== undefined;
}

class ValueErrorIterator {
  constructor(iterator) {
    this.iterator = iterator;
  }
  [Symbol.iterator]() {
    return this.iterator;
  }
  First() {
    const next = this.iterator.next();
    return next.done ? undefined : next.value;
  }
}
function Create(errorType, schema, path, value, errors = []) {
  return {
    type: errorType,
    schema,
    path,
    value,
    message: GetErrorFunction()({ errorType, path, schema, value, errors }),
    errors
  };
}
function* FromAny3(schema, references, path, value) {
}
function* FromArgument3(schema, references, path, value) {
}
function* FromArray8(schema, references, path, value) {
  if (!IsArray2(value)) {
    return yield Create(ValueErrorType.Array, schema, path, value);
  }
  if (IsDefined2(schema.minItems) && !(value.length >= schema.minItems)) {
    yield Create(ValueErrorType.ArrayMinItems, schema, path, value);
  }
  if (IsDefined2(schema.maxItems) && !(value.length <= schema.maxItems)) {
    yield Create(ValueErrorType.ArrayMaxItems, schema, path, value);
  }
  for (let i = 0;i < value.length; i++) {
    yield* Visit6(schema.items, references, `${path}/${i}`, value[i]);
  }
  if (schema.uniqueItems === true && !function() {
    const set = new Set;
    for (const element of value) {
      const hashed = Hash(element);
      if (set.has(hashed)) {
        return false;
      } else {
        set.add(hashed);
      }
    }
    return true;
  }()) {
    yield Create(ValueErrorType.ArrayUniqueItems, schema, path, value);
  }
  if (!(IsDefined2(schema.contains) || IsDefined2(schema.minContains) || IsDefined2(schema.maxContains))) {
    return;
  }
  const containsSchema = IsDefined2(schema.contains) ? schema.contains : Never();
  const containsCount = value.reduce((acc, value2, index) => Visit6(containsSchema, references, `${path}${index}`, value2).next().done === true ? acc + 1 : acc, 0);
  if (containsCount === 0) {
    yield Create(ValueErrorType.ArrayContains, schema, path, value);
  }
  if (IsNumber2(schema.minContains) && containsCount < schema.minContains) {
    yield Create(ValueErrorType.ArrayMinContains, schema, path, value);
  }
  if (IsNumber2(schema.maxContains) && containsCount > schema.maxContains) {
    yield Create(ValueErrorType.ArrayMaxContains, schema, path, value);
  }
}
function* FromAsyncIterator5(schema, references, path, value) {
  if (!IsAsyncIterator2(value))
    yield Create(ValueErrorType.AsyncIterator, schema, path, value);
}
function* FromBigInt3(schema, references, path, value) {
  if (!IsBigInt2(value))
    return yield Create(ValueErrorType.BigInt, schema, path, value);
  if (IsDefined2(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
    yield Create(ValueErrorType.BigIntExclusiveMaximum, schema, path, value);
  }
  if (IsDefined2(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
    yield Create(ValueErrorType.BigIntExclusiveMinimum, schema, path, value);
  }
  if (IsDefined2(schema.maximum) && !(value <= schema.maximum)) {
    yield Create(ValueErrorType.BigIntMaximum, schema, path, value);
  }
  if (IsDefined2(schema.minimum) && !(value >= schema.minimum)) {
    yield Create(ValueErrorType.BigIntMinimum, schema, path, value);
  }
  if (IsDefined2(schema.multipleOf) && !(value % schema.multipleOf === BigInt(0))) {
    yield Create(ValueErrorType.BigIntMultipleOf, schema, path, value);
  }
}
function* FromBoolean3(schema, references, path, value) {
  if (!IsBoolean2(value))
    yield Create(ValueErrorType.Boolean, schema, path, value);
}
function* FromConstructor5(schema, references, path, value) {
  yield* Visit6(schema.returns, references, path, value.prototype);
}
function* FromDate3(schema, references, path, value) {
  if (!IsDate2(value))
    return yield Create(ValueErrorType.Date, schema, path, value);
  if (IsDefined2(schema.exclusiveMaximumTimestamp) && !(value.getTime() < schema.exclusiveMaximumTimestamp)) {
    yield Create(ValueErrorType.DateExclusiveMaximumTimestamp, schema, path, value);
  }
  if (IsDefined2(schema.exclusiveMinimumTimestamp) && !(value.getTime() > schema.exclusiveMinimumTimestamp)) {
    yield Create(ValueErrorType.DateExclusiveMinimumTimestamp, schema, path, value);
  }
  if (IsDefined2(schema.maximumTimestamp) && !(value.getTime() <= schema.maximumTimestamp)) {
    yield Create(ValueErrorType.DateMaximumTimestamp, schema, path, value);
  }
  if (IsDefined2(schema.minimumTimestamp) && !(value.getTime() >= schema.minimumTimestamp)) {
    yield Create(ValueErrorType.DateMinimumTimestamp, schema, path, value);
  }
  if (IsDefined2(schema.multipleOfTimestamp) && !(value.getTime() % schema.multipleOfTimestamp === 0)) {
    yield Create(ValueErrorType.DateMultipleOfTimestamp, schema, path, value);
  }
}
function* FromFunction5(schema, references, path, value) {
  if (!IsFunction2(value))
    yield Create(ValueErrorType.Function, schema, path, value);
}
function* FromImport2(schema, references, path, value) {
  const definitions = globalThis.Object.values(schema.$defs);
  const target = schema.$defs[schema.$ref];
  yield* Visit6(target, [...references, ...definitions], path, value);
}
function* FromInteger3(schema, references, path, value) {
  if (!IsInteger(value))
    return yield Create(ValueErrorType.Integer, schema, path, value);
  if (IsDefined2(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
    yield Create(ValueErrorType.IntegerExclusiveMaximum, schema, path, value);
  }
  if (IsDefined2(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
    yield Create(ValueErrorType.IntegerExclusiveMinimum, schema, path, value);
  }
  if (IsDefined2(schema.maximum) && !(value <= schema.maximum)) {
    yield Create(ValueErrorType.IntegerMaximum, schema, path, value);
  }
  if (IsDefined2(schema.minimum) && !(value >= schema.minimum)) {
    yield Create(ValueErrorType.IntegerMinimum, schema, path, value);
  }
  if (IsDefined2(schema.multipleOf) && !(value % schema.multipleOf === 0)) {
    yield Create(ValueErrorType.IntegerMultipleOf, schema, path, value);
  }
}
function* FromIntersect10(schema, references, path, value) {
  let hasError = false;
  for (const inner of schema.allOf) {
    for (const error of Visit6(inner, references, path, value)) {
      hasError = true;
      yield error;
    }
  }
  if (hasError) {
    return yield Create(ValueErrorType.Intersect, schema, path, value);
  }
  if (schema.unevaluatedProperties === false) {
    const keyCheck = new RegExp(KeyOfPattern(schema));
    for (const valueKey of Object.getOwnPropertyNames(value)) {
      if (!keyCheck.test(valueKey)) {
        yield Create(ValueErrorType.IntersectUnevaluatedProperties, schema, `${path}/${valueKey}`, value);
      }
    }
  }
  if (typeof schema.unevaluatedProperties === "object") {
    const keyCheck = new RegExp(KeyOfPattern(schema));
    for (const valueKey of Object.getOwnPropertyNames(value)) {
      if (!keyCheck.test(valueKey)) {
        const next = Visit6(schema.unevaluatedProperties, references, `${path}/${valueKey}`, value[valueKey]).next();
        if (!next.done)
          yield next.value;
      }
    }
  }
}
function* FromIterator5(schema, references, path, value) {
  if (!IsIterator2(value))
    yield Create(ValueErrorType.Iterator, schema, path, value);
}
function* FromLiteral4(schema, references, path, value) {
  if (!(value === schema.const))
    yield Create(ValueErrorType.Literal, schema, path, value);
}
function* FromNever3(schema, references, path, value) {
  yield Create(ValueErrorType.Never, schema, path, value);
}
function* FromNot3(schema, references, path, value) {
  if (Visit6(schema.not, references, path, value).next().done === true)
    yield Create(ValueErrorType.Not, schema, path, value);
}
function* FromNull3(schema, references, path, value) {
  if (!IsNull2(value))
    yield Create(ValueErrorType.Null, schema, path, value);
}
function* FromNumber3(schema, references, path, value) {
  if (!TypeSystemPolicy.IsNumberLike(value))
    return yield Create(ValueErrorType.Number, schema, path, value);
  if (IsDefined2(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
    yield Create(ValueErrorType.NumberExclusiveMaximum, schema, path, value);
  }
  if (IsDefined2(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
    yield Create(ValueErrorType.NumberExclusiveMinimum, schema, path, value);
  }
  if (IsDefined2(schema.maximum) && !(value <= schema.maximum)) {
    yield Create(ValueErrorType.NumberMaximum, schema, path, value);
  }
  if (IsDefined2(schema.minimum) && !(value >= schema.minimum)) {
    yield Create(ValueErrorType.NumberMinimum, schema, path, value);
  }
  if (IsDefined2(schema.multipleOf) && !(value % schema.multipleOf === 0)) {
    yield Create(ValueErrorType.NumberMultipleOf, schema, path, value);
  }
}
function* FromObject9(schema, references, path, value) {
  if (!TypeSystemPolicy.IsObjectLike(value))
    return yield Create(ValueErrorType.Object, schema, path, value);
  if (IsDefined2(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {
    yield Create(ValueErrorType.ObjectMinProperties, schema, path, value);
  }
  if (IsDefined2(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {
    yield Create(ValueErrorType.ObjectMaxProperties, schema, path, value);
  }
  const requiredKeys = Array.isArray(schema.required) ? schema.required : [];
  const knownKeys = Object.getOwnPropertyNames(schema.properties);
  const unknownKeys = Object.getOwnPropertyNames(value);
  for (const requiredKey of requiredKeys) {
    if (unknownKeys.includes(requiredKey))
      continue;
    yield Create(ValueErrorType.ObjectRequiredProperty, schema.properties[requiredKey], `${path}/${EscapeKey(requiredKey)}`, undefined);
  }
  if (schema.additionalProperties === false) {
    for (const valueKey of unknownKeys) {
      if (!knownKeys.includes(valueKey)) {
        yield Create(ValueErrorType.ObjectAdditionalProperties, schema, `${path}/${EscapeKey(valueKey)}`, value[valueKey]);
      }
    }
  }
  if (typeof schema.additionalProperties === "object") {
    for (const valueKey of unknownKeys) {
      if (knownKeys.includes(valueKey))
        continue;
      yield* Visit6(schema.additionalProperties, references, `${path}/${EscapeKey(valueKey)}`, value[valueKey]);
    }
  }
  for (const knownKey of knownKeys) {
    const property = schema.properties[knownKey];
    if (schema.required && schema.required.includes(knownKey)) {
      yield* Visit6(property, references, `${path}/${EscapeKey(knownKey)}`, value[knownKey]);
      if (ExtendsUndefinedCheck(schema) && !(knownKey in value)) {
        yield Create(ValueErrorType.ObjectRequiredProperty, property, `${path}/${EscapeKey(knownKey)}`, undefined);
      }
    } else {
      if (TypeSystemPolicy.IsExactOptionalProperty(value, knownKey)) {
        yield* Visit6(property, references, `${path}/${EscapeKey(knownKey)}`, value[knownKey]);
      }
    }
  }
}
function* FromPromise5(schema, references, path, value) {
  if (!IsPromise(value))
    yield Create(ValueErrorType.Promise, schema, path, value);
}
function* FromRecord5(schema, references, path, value) {
  if (!TypeSystemPolicy.IsRecordLike(value))
    return yield Create(ValueErrorType.Object, schema, path, value);
  if (IsDefined2(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {
    yield Create(ValueErrorType.ObjectMinProperties, schema, path, value);
  }
  if (IsDefined2(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {
    yield Create(ValueErrorType.ObjectMaxProperties, schema, path, value);
  }
  const [patternKey, patternSchema] = Object.entries(schema.patternProperties)[0];
  const regex = new RegExp(patternKey);
  for (const [propertyKey, propertyValue] of Object.entries(value)) {
    if (regex.test(propertyKey))
      yield* Visit6(patternSchema, references, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
  }
  if (typeof schema.additionalProperties === "object") {
    for (const [propertyKey, propertyValue] of Object.entries(value)) {
      if (!regex.test(propertyKey))
        yield* Visit6(schema.additionalProperties, references, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
    }
  }
  if (schema.additionalProperties === false) {
    for (const [propertyKey, propertyValue] of Object.entries(value)) {
      if (regex.test(propertyKey))
        continue;
      return yield Create(ValueErrorType.ObjectAdditionalProperties, schema, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
    }
  }
}
function* FromRef6(schema, references, path, value) {
  yield* Visit6(Deref(schema, references), references, path, value);
}
function* FromRegExp3(schema, references, path, value) {
  if (!IsString2(value))
    return yield Create(ValueErrorType.String, schema, path, value);
  if (IsDefined2(schema.minLength) && !(value.length >= schema.minLength)) {
    yield Create(ValueErrorType.StringMinLength, schema, path, value);
  }
  if (IsDefined2(schema.maxLength) && !(value.length <= schema.maxLength)) {
    yield Create(ValueErrorType.StringMaxLength, schema, path, value);
  }
  const regex = new RegExp(schema.source, schema.flags);
  if (!regex.test(value)) {
    return yield Create(ValueErrorType.RegExp, schema, path, value);
  }
}
function* FromString3(schema, references, path, value) {
  if (!IsString2(value))
    return yield Create(ValueErrorType.String, schema, path, value);
  if (IsDefined2(schema.minLength) && !(value.length >= schema.minLength)) {
    yield Create(ValueErrorType.StringMinLength, schema, path, value);
  }
  if (IsDefined2(schema.maxLength) && !(value.length <= schema.maxLength)) {
    yield Create(ValueErrorType.StringMaxLength, schema, path, value);
  }
  if (IsString2(schema.pattern)) {
    const regex = new RegExp(schema.pattern);
    if (!regex.test(value)) {
      yield Create(ValueErrorType.StringPattern, schema, path, value);
    }
  }
  if (IsString2(schema.format)) {
    if (!exports_format.Has(schema.format)) {
      yield Create(ValueErrorType.StringFormatUnknown, schema, path, value);
    } else {
      const format = exports_format.Get(schema.format);
      if (!format(value)) {
        yield Create(ValueErrorType.StringFormat, schema, path, value);
      }
    }
  }
}
function* FromSymbol3(schema, references, path, value) {
  if (!IsSymbol2(value))
    yield Create(ValueErrorType.Symbol, schema, path, value);
}
function* FromTemplateLiteral5(schema, references, path, value) {
  if (!IsString2(value))
    return yield Create(ValueErrorType.String, schema, path, value);
  const regex = new RegExp(schema.pattern);
  if (!regex.test(value)) {
    yield Create(ValueErrorType.StringPattern, schema, path, value);
  }
}
function* FromThis2(schema, references, path, value) {
  yield* Visit6(Deref(schema, references), references, path, value);
}
function* FromTuple7(schema, references, path, value) {
  if (!IsArray2(value))
    return yield Create(ValueErrorType.Tuple, schema, path, value);
  if (schema.items === undefined && !(value.length === 0)) {
    return yield Create(ValueErrorType.TupleLength, schema, path, value);
  }
  if (!(value.length === schema.maxItems)) {
    return yield Create(ValueErrorType.TupleLength, schema, path, value);
  }
  if (!schema.items) {
    return;
  }
  for (let i = 0;i < schema.items.length; i++) {
    yield* Visit6(schema.items[i], references, `${path}/${i}`, value[i]);
  }
}
function* FromUndefined3(schema, references, path, value) {
  if (!IsUndefined2(value))
    yield Create(ValueErrorType.Undefined, schema, path, value);
}
function* FromUnion12(schema, references, path, value) {
  if (Check(schema, references, value))
    return;
  const errors = schema.anyOf.map((variant) => new ValueErrorIterator(Visit6(variant, references, path, value)));
  yield Create(ValueErrorType.Union, schema, path, value, errors);
}
function* FromUint8Array3(schema, references, path, value) {
  if (!IsUint8Array2(value))
    return yield Create(ValueErrorType.Uint8Array, schema, path, value);
  if (IsDefined2(schema.maxByteLength) && !(value.length <= schema.maxByteLength)) {
    yield Create(ValueErrorType.Uint8ArrayMaxByteLength, schema, path, value);
  }
  if (IsDefined2(schema.minByteLength) && !(value.length >= schema.minByteLength)) {
    yield Create(ValueErrorType.Uint8ArrayMinByteLength, schema, path, value);
  }
}
function* FromUnknown3(schema, references, path, value) {
}
function* FromVoid3(schema, references, path, value) {
  if (!TypeSystemPolicy.IsVoidLike(value))
    yield Create(ValueErrorType.Void, schema, path, value);
}
function* FromKind2(schema, references, path, value) {
  const check = exports_type2.Get(schema[Kind]);
  if (!check(schema, value))
    yield Create(ValueErrorType.Kind, schema, path, value);
}
function* Visit6(schema, references, path, value) {
  const references_ = IsDefined2(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Any":
      return yield* FromAny3(schema_, references_, path, value);
    case "Argument":
      return yield* FromArgument3(schema_, references_, path, value);
    case "Array":
      return yield* FromArray8(schema_, references_, path, value);
    case "AsyncIterator":
      return yield* FromAsyncIterator5(schema_, references_, path, value);
    case "BigInt":
      return yield* FromBigInt3(schema_, references_, path, value);
    case "Boolean":
      return yield* FromBoolean3(schema_, references_, path, value);
    case "Constructor":
      return yield* FromConstructor5(schema_, references_, path, value);
    case "Date":
      return yield* FromDate3(schema_, references_, path, value);
    case "Function":
      return yield* FromFunction5(schema_, references_, path, value);
    case "Import":
      return yield* FromImport2(schema_, references_, path, value);
    case "Integer":
      return yield* FromInteger3(schema_, references_, path, value);
    case "Intersect":
      return yield* FromIntersect10(schema_, references_, path, value);
    case "Iterator":
      return yield* FromIterator5(schema_, references_, path, value);
    case "Literal":
      return yield* FromLiteral4(schema_, references_, path, value);
    case "Never":
      return yield* FromNever3(schema_, references_, path, value);
    case "Not":
      return yield* FromNot3(schema_, references_, path, value);
    case "Null":
      return yield* FromNull3(schema_, references_, path, value);
    case "Number":
      return yield* FromNumber3(schema_, references_, path, value);
    case "Object":
      return yield* FromObject9(schema_, references_, path, value);
    case "Promise":
      return yield* FromPromise5(schema_, references_, path, value);
    case "Record":
      return yield* FromRecord5(schema_, references_, path, value);
    case "Ref":
      return yield* FromRef6(schema_, references_, path, value);
    case "RegExp":
      return yield* FromRegExp3(schema_, references_, path, value);
    case "String":
      return yield* FromString3(schema_, references_, path, value);
    case "Symbol":
      return yield* FromSymbol3(schema_, references_, path, value);
    case "TemplateLiteral":
      return yield* FromTemplateLiteral5(schema_, references_, path, value);
    case "This":
      return yield* FromThis2(schema_, references_, path, value);
    case "Tuple":
      return yield* FromTuple7(schema_, references_, path, value);
    case "Undefined":
      return yield* FromUndefined3(schema_, references_, path, value);
    case "Union":
      return yield* FromUnion12(schema_, references_, path, value);
    case "Uint8Array":
      return yield* FromUint8Array3(schema_, references_, path, value);
    case "Unknown":
      return yield* FromUnknown3(schema_, references_, path, value);
    case "Void":
      return yield* FromVoid3(schema_, references_, path, value);
    default:
      if (!exports_type2.Has(schema_[Kind]))
        throw new ValueErrorsUnknownTypeError(schema);
      return yield* FromKind2(schema_, references_, path, value);
  }
}
function Errors(...args) {
  const iterator = args.length === 3 ? Visit6(args[0], args[1], "", args[2]) : Visit6(args[0], [], "", args[1]);
  return new ValueErrorIterator(iterator);
}
// node_modules/@sinclair/typebox/build/esm/value/assert/assert.mjs
var __classPrivateFieldSet = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AssertError_instances;
var _AssertError_iterator;
var _AssertError_Iterator;

class AssertError extends TypeBoxError {
  constructor(iterator) {
    const error = iterator.First();
    super(error === undefined ? "Invalid Value" : error.message);
    _AssertError_instances.add(this);
    _AssertError_iterator.set(this, undefined);
    __classPrivateFieldSet(this, _AssertError_iterator, iterator, "f");
    this.error = error;
  }
  Errors() {
    return new ValueErrorIterator(__classPrivateFieldGet(this, _AssertError_instances, "m", _AssertError_Iterator).call(this));
  }
}
_AssertError_iterator = new WeakMap, _AssertError_instances = new WeakSet, _AssertError_Iterator = function* _AssertError_Iterator2() {
  if (this.error)
    yield this.error;
  yield* __classPrivateFieldGet(this, _AssertError_iterator, "f");
};
function AssertValue(schema, references, value) {
  if (Check(schema, references, value))
    return;
  throw new AssertError(Errors(schema, references, value));
}
function Assert(...args) {
  return args.length === 3 ? AssertValue(args[0], args[1], args[2]) : AssertValue(args[0], [], args[1]);
}
// node_modules/@sinclair/typebox/build/esm/value/clone/clone.mjs
function FromObject10(value) {
  const Acc = {};
  for (const key of Object.getOwnPropertyNames(value)) {
    Acc[key] = Clone2(value[key]);
  }
  for (const key of Object.getOwnPropertySymbols(value)) {
    Acc[key] = Clone2(value[key]);
  }
  return Acc;
}
function FromArray9(value) {
  return value.map((element) => Clone2(element));
}
function FromTypedArray(value) {
  return value.slice();
}
function FromMap(value) {
  return new Map(Clone2([...value.entries()]));
}
function FromSet(value) {
  return new Set(Clone2([...value.entries()]));
}
function FromDate4(value) {
  return new Date(value.toISOString());
}
function FromValue2(value) {
  return value;
}
function Clone2(value) {
  if (IsArray2(value))
    return FromArray9(value);
  if (IsDate2(value))
    return FromDate4(value);
  if (IsTypedArray(value))
    return FromTypedArray(value);
  if (IsMap(value))
    return FromMap(value);
  if (IsSet(value))
    return FromSet(value);
  if (IsObject2(value))
    return FromObject10(value);
  if (IsValueType(value))
    return FromValue2(value);
  throw new Error("ValueClone: Unable to clone value");
}

// node_modules/@sinclair/typebox/build/esm/value/create/create.mjs
class ValueCreateError extends TypeBoxError {
  constructor(schema, message) {
    super(message);
    this.schema = schema;
  }
}
function FromDefault(value) {
  return IsFunction2(value) ? value() : Clone2(value);
}
function FromAny4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return {};
  }
}
function FromArgument4(schema, references) {
  return {};
}
function FromArray10(schema, references) {
  if (schema.uniqueItems === true && !HasPropertyKey2(schema, "default")) {
    throw new ValueCreateError(schema, "Array with the uniqueItems constraint requires a default value");
  } else if ("contains" in schema && !HasPropertyKey2(schema, "default")) {
    throw new ValueCreateError(schema, "Array with the contains constraint requires a default value");
  } else if ("default" in schema) {
    return FromDefault(schema.default);
  } else if (schema.minItems !== undefined) {
    return Array.from({ length: schema.minItems }).map((item) => {
      return Visit7(schema.items, references);
    });
  } else {
    return [];
  }
}
function FromAsyncIterator6(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return async function* () {
    }();
  }
}
function FromBigInt4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return BigInt(0);
  }
}
function FromBoolean4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return false;
  }
}
function FromConstructor6(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    const value = Visit7(schema.returns, references);
    if (typeof value === "object" && !Array.isArray(value)) {
      return class {
        constructor() {
          for (const [key, val] of Object.entries(value)) {
            const self = this;
            self[key] = val;
          }
        }
      };
    } else {
      return class {
      };
    }
  }
}
function FromDate5(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.minimumTimestamp !== undefined) {
    return new Date(schema.minimumTimestamp);
  } else {
    return new Date;
  }
}
function FromFunction6(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return () => Visit7(schema.returns, references);
  }
}
function FromImport3(schema, references) {
  const definitions = globalThis.Object.values(schema.$defs);
  const target = schema.$defs[schema.$ref];
  return Visit7(target, [...references, ...definitions]);
}
function FromInteger4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.minimum !== undefined) {
    return schema.minimum;
  } else {
    return 0;
  }
}
function FromIntersect11(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    const value = schema.allOf.reduce((acc, schema2) => {
      const next = Visit7(schema2, references);
      return typeof next === "object" ? { ...acc, ...next } : next;
    }, {});
    if (!Check(schema, references, value))
      throw new ValueCreateError(schema, "Intersect produced invalid value. Consider using a default value.");
    return value;
  }
}
function FromIterator6(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return function* () {
    }();
  }
}
function FromLiteral5(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return schema.const;
  }
}
function FromNever4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    throw new ValueCreateError(schema, "Never types cannot be created. Consider using a default value.");
  }
}
function FromNot4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    throw new ValueCreateError(schema, "Not types must have a default value");
  }
}
function FromNull4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return null;
  }
}
function FromNumber4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.minimum !== undefined) {
    return schema.minimum;
  } else {
    return 0;
  }
}
function FromObject11(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    const required = new Set(schema.required);
    const Acc = {};
    for (const [key, subschema] of Object.entries(schema.properties)) {
      if (!required.has(key))
        continue;
      Acc[key] = Visit7(subschema, references);
    }
    return Acc;
  }
}
function FromPromise6(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return Promise.resolve(Visit7(schema.item, references));
  }
}
function FromRecord6(schema, references) {
  const [keyPattern, valueSchema] = Object.entries(schema.patternProperties)[0];
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else if (!(keyPattern === PatternStringExact || keyPattern === PatternNumberExact)) {
    const propertyKeys = keyPattern.slice(1, keyPattern.length - 1).split("|");
    const Acc = {};
    for (const key of propertyKeys)
      Acc[key] = Visit7(valueSchema, references);
    return Acc;
  } else {
    return {};
  }
}
function FromRef7(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return Visit7(Deref(schema, references), references);
  }
}
function FromRegExp4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    throw new ValueCreateError(schema, "RegExp types cannot be created. Consider using a default value.");
  }
}
function FromString4(schema, references) {
  if (schema.pattern !== undefined) {
    if (!HasPropertyKey2(schema, "default")) {
      throw new ValueCreateError(schema, "String types with patterns must specify a default value");
    } else {
      return FromDefault(schema.default);
    }
  } else if (schema.format !== undefined) {
    if (!HasPropertyKey2(schema, "default")) {
      throw new ValueCreateError(schema, "String types with formats must specify a default value");
    } else {
      return FromDefault(schema.default);
    }
  } else {
    if (HasPropertyKey2(schema, "default")) {
      return FromDefault(schema.default);
    } else if (schema.minLength !== undefined) {
      return Array.from({ length: schema.minLength }).map(() => " ").join("");
    } else {
      return "";
    }
  }
}
function FromSymbol4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else if ("value" in schema) {
    return Symbol.for(schema.value);
  } else {
    return Symbol();
  }
}
function FromTemplateLiteral6(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  }
  if (!IsTemplateLiteralFinite(schema))
    throw new ValueCreateError(schema, "Can only create template literals that produce a finite variants. Consider using a default value.");
  const generated = TemplateLiteralGenerate(schema);
  return generated[0];
}
function FromThis3(schema, references) {
  if (recursiveDepth++ > recursiveMaxDepth)
    throw new ValueCreateError(schema, "Cannot create recursive type as it appears possibly infinite. Consider using a default.");
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return Visit7(Deref(schema, references), references);
  }
}
function FromTuple8(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  }
  if (schema.items === undefined) {
    return [];
  } else {
    return Array.from({ length: schema.minItems }).map((_, index) => Visit7(schema.items[index], references));
  }
}
function FromUndefined4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return;
  }
}
function FromUnion13(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.anyOf.length === 0) {
    throw new Error("ValueCreate.Union: Cannot create Union with zero variants");
  } else {
    return Visit7(schema.anyOf[0], references);
  }
}
function FromUint8Array4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.minByteLength !== undefined) {
    return new Uint8Array(schema.minByteLength);
  } else {
    return new Uint8Array(0);
  }
}
function FromUnknown4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return {};
  }
}
function FromVoid4(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return;
  }
}
function FromKind3(schema, references) {
  if (HasPropertyKey2(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    throw new Error("User defined types must specify a default value");
  }
}
function Visit7(schema, references) {
  const references_ = Pushref(schema, references);
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Any":
      return FromAny4(schema_, references_);
    case "Argument":
      return FromArgument4(schema_, references_);
    case "Array":
      return FromArray10(schema_, references_);
    case "AsyncIterator":
      return FromAsyncIterator6(schema_, references_);
    case "BigInt":
      return FromBigInt4(schema_, references_);
    case "Boolean":
      return FromBoolean4(schema_, references_);
    case "Constructor":
      return FromConstructor6(schema_, references_);
    case "Date":
      return FromDate5(schema_, references_);
    case "Function":
      return FromFunction6(schema_, references_);
    case "Import":
      return FromImport3(schema_, references_);
    case "Integer":
      return FromInteger4(schema_, references_);
    case "Intersect":
      return FromIntersect11(schema_, references_);
    case "Iterator":
      return FromIterator6(schema_, references_);
    case "Literal":
      return FromLiteral5(schema_, references_);
    case "Never":
      return FromNever4(schema_, references_);
    case "Not":
      return FromNot4(schema_, references_);
    case "Null":
      return FromNull4(schema_, references_);
    case "Number":
      return FromNumber4(schema_, references_);
    case "Object":
      return FromObject11(schema_, references_);
    case "Promise":
      return FromPromise6(schema_, references_);
    case "Record":
      return FromRecord6(schema_, references_);
    case "Ref":
      return FromRef7(schema_, references_);
    case "RegExp":
      return FromRegExp4(schema_, references_);
    case "String":
      return FromString4(schema_, references_);
    case "Symbol":
      return FromSymbol4(schema_, references_);
    case "TemplateLiteral":
      return FromTemplateLiteral6(schema_, references_);
    case "This":
      return FromThis3(schema_, references_);
    case "Tuple":
      return FromTuple8(schema_, references_);
    case "Undefined":
      return FromUndefined4(schema_, references_);
    case "Union":
      return FromUnion13(schema_, references_);
    case "Uint8Array":
      return FromUint8Array4(schema_, references_);
    case "Unknown":
      return FromUnknown4(schema_, references_);
    case "Void":
      return FromVoid4(schema_, references_);
    default:
      if (!exports_type2.Has(schema_[Kind]))
        throw new ValueCreateError(schema_, "Unknown type");
      return FromKind3(schema_, references_);
  }
}
var recursiveMaxDepth = 512;
var recursiveDepth = 0;
function Create2(...args) {
  recursiveDepth = 0;
  return args.length === 2 ? Visit7(args[0], args[1]) : Visit7(args[0], []);
}

// node_modules/@sinclair/typebox/build/esm/value/cast/cast.mjs
class ValueCastError extends TypeBoxError {
  constructor(schema, message) {
    super(message);
    this.schema = schema;
  }
}
function ScoreUnion(schema, references, value) {
  if (schema[Kind] === "Object" && typeof value === "object" && !IsNull2(value)) {
    const object = schema;
    const keys = Object.getOwnPropertyNames(value);
    const entries = Object.entries(object.properties);
    const [point, max] = [1 / entries.length, entries.length];
    return entries.reduce((acc, [key, schema2]) => {
      const literal = schema2[Kind] === "Literal" && schema2.const === value[key] ? max : 0;
      const checks = Check(schema2, references, value[key]) ? point : 0;
      const exists = keys.includes(key) ? point : 0;
      return acc + (literal + checks + exists);
    }, 0);
  } else {
    return Check(schema, references, value) ? 1 : 0;
  }
}
function SelectUnion(union, references, value) {
  const schemas = union.anyOf.map((schema) => Deref(schema, references));
  let [select, best] = [schemas[0], 0];
  for (const schema of schemas) {
    const score = ScoreUnion(schema, references, value);
    if (score > best) {
      select = schema;
      best = score;
    }
  }
  return select;
}
function CastUnion(union, references, value) {
  if ("default" in union) {
    return typeof value === "function" ? union.default : Clone2(union.default);
  } else {
    const schema = SelectUnion(union, references, value);
    return Cast(schema, references, value);
  }
}
function DefaultClone(schema, references, value) {
  return Check(schema, references, value) ? Clone2(value) : Create2(schema, references);
}
function Default(schema, references, value) {
  return Check(schema, references, value) ? value : Create2(schema, references);
}
function FromArray11(schema, references, value) {
  if (Check(schema, references, value))
    return Clone2(value);
  const created = IsArray2(value) ? Clone2(value) : Create2(schema, references);
  const minimum = IsNumber2(schema.minItems) && created.length < schema.minItems ? [...created, ...Array.from({ length: schema.minItems - created.length }, () => null)] : created;
  const maximum = IsNumber2(schema.maxItems) && minimum.length > schema.maxItems ? minimum.slice(0, schema.maxItems) : minimum;
  const casted = maximum.map((value2) => Visit8(schema.items, references, value2));
  if (schema.uniqueItems !== true)
    return casted;
  const unique = [...new Set(casted)];
  if (!Check(schema, references, unique))
    throw new ValueCastError(schema, "Array cast produced invalid data due to uniqueItems constraint");
  return unique;
}
function FromConstructor7(schema, references, value) {
  if (Check(schema, references, value))
    return Create2(schema, references);
  const required = new Set(schema.returns.required || []);
  const result = function() {
  };
  for (const [key, property] of Object.entries(schema.returns.properties)) {
    if (!required.has(key) && value.prototype[key] === undefined)
      continue;
    result.prototype[key] = Visit8(property, references, value.prototype[key]);
  }
  return result;
}
function FromImport4(schema, references, value) {
  const definitions = globalThis.Object.values(schema.$defs);
  const target = schema.$defs[schema.$ref];
  return Visit8(target, [...references, ...definitions], value);
}
function FromIntersect12(schema, references, value) {
  const created = Create2(schema, references);
  const mapped = IsObject2(created) && IsObject2(value) ? { ...created, ...value } : value;
  return Check(schema, references, mapped) ? mapped : Create2(schema, references);
}
function FromNever5(schema, references, value) {
  throw new ValueCastError(schema, "Never types cannot be cast");
}
function FromObject12(schema, references, value) {
  if (Check(schema, references, value))
    return value;
  if (value === null || typeof value !== "object")
    return Create2(schema, references);
  const required = new Set(schema.required || []);
  const result = {};
  for (const [key, property] of Object.entries(schema.properties)) {
    if (!required.has(key) && value[key] === undefined)
      continue;
    result[key] = Visit8(property, references, value[key]);
  }
  if (typeof schema.additionalProperties === "object") {
    const propertyNames = Object.getOwnPropertyNames(schema.properties);
    for (const propertyName of Object.getOwnPropertyNames(value)) {
      if (propertyNames.includes(propertyName))
        continue;
      result[propertyName] = Visit8(schema.additionalProperties, references, value[propertyName]);
    }
  }
  return result;
}
function FromRecord7(schema, references, value) {
  if (Check(schema, references, value))
    return Clone2(value);
  if (value === null || typeof value !== "object" || Array.isArray(value) || value instanceof Date)
    return Create2(schema, references);
  const subschemaPropertyName = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const subschema = schema.patternProperties[subschemaPropertyName];
  const result = {};
  for (const [propKey, propValue] of Object.entries(value)) {
    result[propKey] = Visit8(subschema, references, propValue);
  }
  return result;
}
function FromRef8(schema, references, value) {
  return Visit8(Deref(schema, references), references, value);
}
function FromThis4(schema, references, value) {
  return Visit8(Deref(schema, references), references, value);
}
function FromTuple9(schema, references, value) {
  if (Check(schema, references, value))
    return Clone2(value);
  if (!IsArray2(value))
    return Create2(schema, references);
  if (schema.items === undefined)
    return [];
  return schema.items.map((schema2, index) => Visit8(schema2, references, value[index]));
}
function FromUnion14(schema, references, value) {
  return Check(schema, references, value) ? Clone2(value) : CastUnion(schema, references, value);
}
function Visit8(schema, references, value) {
  const references_ = IsString2(schema.$id) ? Pushref(schema, references) : references;
  const schema_ = schema;
  switch (schema[Kind]) {
    case "Array":
      return FromArray11(schema_, references_, value);
    case "Constructor":
      return FromConstructor7(schema_, references_, value);
    case "Import":
      return FromImport4(schema_, references_, value);
    case "Intersect":
      return FromIntersect12(schema_, references_, value);
    case "Never":
      return FromNever5(schema_, references_, value);
    case "Object":
      return FromObject12(schema_, references_, value);
    case "Record":
      return FromRecord7(schema_, references_, value);
    case "Ref":
      return FromRef8(schema_, references_, value);
    case "This":
      return FromThis4(schema_, references_, value);
    case "Tuple":
      return FromTuple9(schema_, references_, value);
    case "Union":
      return FromUnion14(schema_, references_, value);
    case "Date":
    case "Symbol":
    case "Uint8Array":
      return DefaultClone(schema, references, value);
    default:
      return Default(schema_, references_, value);
  }
}
function Cast(...args) {
  return args.length === 3 ? Visit8(args[0], args[1], args[2]) : Visit8(args[0], [], args[1]);
}
// node_modules/@sinclair/typebox/build/esm/value/clean/clean.mjs
function IsCheckable(schema) {
  return IsKind(schema) && schema[Kind] !== "Unsafe";
}
function FromArray12(schema, references, value) {
  if (!IsArray2(value))
    return value;
  return value.map((value2) => Visit9(schema.items, references, value2));
}
function FromImport5(schema, references, value) {
  const definitions = globalThis.Object.values(schema.$defs);
  const target = schema.$defs[schema.$ref];
  return Visit9(target, [...references, ...definitions], value);
}
function FromIntersect13(schema, references, value) {
  const unevaluatedProperties = schema.unevaluatedProperties;
  const intersections = schema.allOf.map((schema2) => Visit9(schema2, references, Clone2(value)));
  const composite = intersections.reduce((acc, value2) => IsObject2(value2) ? { ...acc, ...value2 } : value2, {});
  if (!IsObject2(value) || !IsObject2(composite) || !IsKind(unevaluatedProperties))
    return composite;
  const knownkeys = KeyOfPropertyKeys(schema);
  for (const key of Object.getOwnPropertyNames(value)) {
    if (knownkeys.includes(key))
      continue;
    if (Check(unevaluatedProperties, references, value[key])) {
      composite[key] = Visit9(unevaluatedProperties, references, value[key]);
    }
  }
  return composite;
}
function FromObject13(schema, references, value) {
  if (!IsObject2(value) || IsArray2(value))
    return value;
  const additionalProperties = schema.additionalProperties;
  for (const key of Object.getOwnPropertyNames(value)) {
    if (HasPropertyKey2(schema.properties, key)) {
      value[key] = Visit9(schema.properties[key], references, value[key]);
      continue;
    }
    if (IsKind(additionalProperties) && Check(additionalProperties, references, value[key])) {
      value[key] = Visit9(additionalProperties, references, value[key]);
      continue;
    }
    delete value[key];
  }
  return value;
}
function FromRecord8(schema, references, value) {
  if (!IsObject2(value))
    return value;
  const additionalProperties = schema.additionalProperties;
  const propertyKeys = Object.getOwnPropertyNames(value);
  const [propertyKey, propertySchema] = Object.entries(schema.patternProperties)[0];
  const propertyKeyTest = new RegExp(propertyKey);
  for (const key of propertyKeys) {
    if (propertyKeyTest.test(key)) {
      value[key] = Visit9(propertySchema, references, value[key]);
      continue;
    }
    if (IsKind(additionalProperties) && Check(additionalProperties, references, value[key])) {
      value[key] = Visit9(additionalProperties, references, value[key]);
      continue;
    }
    delete value[key];
  }
  return value;
}
function FromRef9(schema, references, value) {
  return Visit9(Deref(schema, references), references, value);
}
function FromThis5(schema, references, value) {
  return Visit9(Deref(schema, references), references, value);
}
function FromTuple10(schema, references, value) {
  if (!IsArray2(value))
    return value;
  if (IsUndefined2(schema.items))
    return [];
  const length = Math.min(value.length, schema.items.length);
  for (let i = 0;i < length; i++) {
    value[i] = Visit9(schema.items[i], references, value[i]);
  }
  return value.length > length ? value.slice(0, length) : value;
}
function FromUnion15(schema, references, value) {
  for (const inner of schema.anyOf) {
    if (IsCheckable(inner) && Check(inner, references, value)) {
      return Visit9(inner, references, value);
    }
  }
  return value;
}
function Visit9(schema, references, value) {
  const references_ = IsString2(schema.$id) ? Pushref(schema, references) : references;
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Array":
      return FromArray12(schema_, references_, value);
    case "Import":
      return FromImport5(schema_, references_, value);
    case "Intersect":
      return FromIntersect13(schema_, references_, value);
    case "Object":
      return FromObject13(schema_, references_, value);
    case "Record":
      return FromRecord8(schema_, references_, value);
    case "Ref":
      return FromRef9(schema_, references_, value);
    case "This":
      return FromThis5(schema_, references_, value);
    case "Tuple":
      return FromTuple10(schema_, references_, value);
    case "Union":
      return FromUnion15(schema_, references_, value);
    default:
      return value;
  }
}
function Clean(...args) {
  return args.length === 3 ? Visit9(args[0], args[1], args[2]) : Visit9(args[0], [], args[1]);
}
// node_modules/@sinclair/typebox/build/esm/value/convert/convert.mjs
function IsStringNumeric(value) {
  return IsString2(value) && !isNaN(value) && !isNaN(parseFloat(value));
}
function IsValueToString(value) {
  return IsBigInt2(value) || IsBoolean2(value) || IsNumber2(value);
}
function IsValueTrue(value) {
  return value === true || IsNumber2(value) && value === 1 || IsBigInt2(value) && value === BigInt("1") || IsString2(value) && (value.toLowerCase() === "true" || value === "1");
}
function IsValueFalse(value) {
  return value === false || IsNumber2(value) && (value === 0 || Object.is(value, -0)) || IsBigInt2(value) && value === BigInt("0") || IsString2(value) && (value.toLowerCase() === "false" || value === "0" || value === "-0");
}
function IsTimeStringWithTimeZone(value) {
  return IsString2(value) && /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i.test(value);
}
function IsTimeStringWithoutTimeZone(value) {
  return IsString2(value) && /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)?$/i.test(value);
}
function IsDateTimeStringWithTimeZone(value) {
  return IsString2(value) && /^\d\d\d\d-[0-1]\d-[0-3]\dt(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i.test(value);
}
function IsDateTimeStringWithoutTimeZone(value) {
  return IsString2(value) && /^\d\d\d\d-[0-1]\d-[0-3]\dt(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)?$/i.test(value);
}
function IsDateString(value) {
  return IsString2(value) && /^\d\d\d\d-[0-1]\d-[0-3]\d$/i.test(value);
}
function TryConvertLiteralString(value, target) {
  const conversion = TryConvertString(value);
  return conversion === target ? conversion : value;
}
function TryConvertLiteralNumber(value, target) {
  const conversion = TryConvertNumber(value);
  return conversion === target ? conversion : value;
}
function TryConvertLiteralBoolean(value, target) {
  const conversion = TryConvertBoolean(value);
  return conversion === target ? conversion : value;
}
function TryConvertLiteral(schema, value) {
  return IsString2(schema.const) ? TryConvertLiteralString(value, schema.const) : IsNumber2(schema.const) ? TryConvertLiteralNumber(value, schema.const) : IsBoolean2(schema.const) ? TryConvertLiteralBoolean(value, schema.const) : value;
}
function TryConvertBoolean(value) {
  return IsValueTrue(value) ? true : IsValueFalse(value) ? false : value;
}
function TryConvertBigInt(value) {
  const truncateInteger = (value2) => value2.split(".")[0];
  return IsStringNumeric(value) ? BigInt(truncateInteger(value)) : IsNumber2(value) ? BigInt(Math.trunc(value)) : IsValueFalse(value) ? BigInt(0) : IsValueTrue(value) ? BigInt(1) : value;
}
function TryConvertString(value) {
  return IsSymbol2(value) && value.description !== undefined ? value.description.toString() : IsValueToString(value) ? value.toString() : value;
}
function TryConvertNumber(value) {
  return IsStringNumeric(value) ? parseFloat(value) : IsValueTrue(value) ? 1 : IsValueFalse(value) ? 0 : value;
}
function TryConvertInteger(value) {
  return IsStringNumeric(value) ? parseInt(value) : IsNumber2(value) ? Math.trunc(value) : IsValueTrue(value) ? 1 : IsValueFalse(value) ? 0 : value;
}
function TryConvertNull(value) {
  return IsString2(value) && value.toLowerCase() === "null" ? null : value;
}
function TryConvertUndefined(value) {
  return IsString2(value) && value === "undefined" ? undefined : value;
}
function TryConvertDate(value) {
  return IsDate2(value) ? value : IsNumber2(value) ? new Date(value) : IsValueTrue(value) ? new Date(1) : IsValueFalse(value) ? new Date(0) : IsStringNumeric(value) ? new Date(parseInt(value)) : IsTimeStringWithoutTimeZone(value) ? new Date(`1970-01-01T${value}.000Z`) : IsTimeStringWithTimeZone(value) ? new Date(`1970-01-01T${value}`) : IsDateTimeStringWithoutTimeZone(value) ? new Date(`${value}.000Z`) : IsDateTimeStringWithTimeZone(value) ? new Date(value) : IsDateString(value) ? new Date(`${value}T00:00:00.000Z`) : value;
}
function Default2(value) {
  return value;
}
function FromArray13(schema, references, value) {
  const elements = IsArray2(value) ? value : [value];
  return elements.map((element) => Visit10(schema.items, references, element));
}
function FromBigInt5(schema, references, value) {
  return TryConvertBigInt(value);
}
function FromBoolean5(schema, references, value) {
  return TryConvertBoolean(value);
}
function FromDate6(schema, references, value) {
  return TryConvertDate(value);
}
function FromImport6(schema, references, value) {
  const definitions = globalThis.Object.values(schema.$defs);
  const target = schema.$defs[schema.$ref];
  return Visit10(target, [...references, ...definitions], value);
}
function FromInteger5(schema, references, value) {
  return TryConvertInteger(value);
}
function FromIntersect14(schema, references, value) {
  return schema.allOf.reduce((value2, schema2) => Visit10(schema2, references, value2), value);
}
function FromLiteral6(schema, references, value) {
  return TryConvertLiteral(schema, value);
}
function FromNull5(schema, references, value) {
  return TryConvertNull(value);
}
function FromNumber5(schema, references, value) {
  return TryConvertNumber(value);
}
function FromObject14(schema, references, value) {
  if (!IsObject2(value))
    return value;
  for (const propertyKey of Object.getOwnPropertyNames(schema.properties)) {
    if (!HasPropertyKey2(value, propertyKey))
      continue;
    value[propertyKey] = Visit10(schema.properties[propertyKey], references, value[propertyKey]);
  }
  return value;
}
function FromRecord9(schema, references, value) {
  const isConvertable = IsObject2(value);
  if (!isConvertable)
    return value;
  const propertyKey = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const property = schema.patternProperties[propertyKey];
  for (const [propKey, propValue] of Object.entries(value)) {
    value[propKey] = Visit10(property, references, propValue);
  }
  return value;
}
function FromRef10(schema, references, value) {
  return Visit10(Deref(schema, references), references, value);
}
function FromString5(schema, references, value) {
  return TryConvertString(value);
}
function FromSymbol5(schema, references, value) {
  return IsString2(value) || IsNumber2(value) ? Symbol(value) : value;
}
function FromThis6(schema, references, value) {
  return Visit10(Deref(schema, references), references, value);
}
function FromTuple11(schema, references, value) {
  const isConvertable = IsArray2(value) && !IsUndefined2(schema.items);
  if (!isConvertable)
    return value;
  return value.map((value2, index) => {
    return index < schema.items.length ? Visit10(schema.items[index], references, value2) : value2;
  });
}
function FromUndefined5(schema, references, value) {
  return TryConvertUndefined(value);
}
function FromUnion16(schema, references, value) {
  for (const subschema of schema.anyOf) {
    const converted = Visit10(subschema, references, Clone2(value));
    if (!Check(subschema, references, converted))
      continue;
    return converted;
  }
  return value;
}
function Visit10(schema, references, value) {
  const references_ = Pushref(schema, references);
  const schema_ = schema;
  switch (schema[Kind]) {
    case "Array":
      return FromArray13(schema_, references_, value);
    case "BigInt":
      return FromBigInt5(schema_, references_, value);
    case "Boolean":
      return FromBoolean5(schema_, references_, value);
    case "Date":
      return FromDate6(schema_, references_, value);
    case "Import":
      return FromImport6(schema_, references_, value);
    case "Integer":
      return FromInteger5(schema_, references_, value);
    case "Intersect":
      return FromIntersect14(schema_, references_, value);
    case "Literal":
      return FromLiteral6(schema_, references_, value);
    case "Null":
      return FromNull5(schema_, references_, value);
    case "Number":
      return FromNumber5(schema_, references_, value);
    case "Object":
      return FromObject14(schema_, references_, value);
    case "Record":
      return FromRecord9(schema_, references_, value);
    case "Ref":
      return FromRef10(schema_, references_, value);
    case "String":
      return FromString5(schema_, references_, value);
    case "Symbol":
      return FromSymbol5(schema_, references_, value);
    case "This":
      return FromThis6(schema_, references_, value);
    case "Tuple":
      return FromTuple11(schema_, references_, value);
    case "Undefined":
      return FromUndefined5(schema_, references_, value);
    case "Union":
      return FromUnion16(schema_, references_, value);
    default:
      return Default2(value);
  }
}
function Convert(...args) {
  return args.length === 3 ? Visit10(args[0], args[1], args[2]) : Visit10(args[0], [], args[1]);
}
// node_modules/@sinclair/typebox/build/esm/value/transform/decode.mjs
class TransformDecodeCheckError extends TypeBoxError {
  constructor(schema, value, error) {
    super(`Unable to decode value as it does not match the expected schema`);
    this.schema = schema;
    this.value = value;
    this.error = error;
  }
}

class TransformDecodeError extends TypeBoxError {
  constructor(schema, path, value, error) {
    super(error instanceof Error ? error.message : "Unknown error");
    this.schema = schema;
    this.path = path;
    this.value = value;
    this.error = error;
  }
}
function Default3(schema, path, value) {
  try {
    return IsTransform(schema) ? schema[TransformKind].Decode(value) : value;
  } catch (error) {
    throw new TransformDecodeError(schema, path, value, error);
  }
}
function FromArray14(schema, references, path, value) {
  return IsArray2(value) ? Default3(schema, path, value.map((value2, index) => Visit11(schema.items, references, `${path}/${index}`, value2))) : Default3(schema, path, value);
}
function FromIntersect15(schema, references, path, value) {
  if (!IsObject2(value) || IsValueType(value))
    return Default3(schema, path, value);
  const knownEntries = KeyOfPropertyEntries(schema);
  const knownKeys = knownEntries.map((entry) => entry[0]);
  const knownProperties = { ...value };
  for (const [knownKey, knownSchema] of knownEntries)
    if (knownKey in knownProperties) {
      knownProperties[knownKey] = Visit11(knownSchema, references, `${path}/${knownKey}`, knownProperties[knownKey]);
    }
  if (!IsTransform(schema.unevaluatedProperties)) {
    return Default3(schema, path, knownProperties);
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const unevaluatedProperties = schema.unevaluatedProperties;
  const unknownProperties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.includes(key)) {
      unknownProperties[key] = Default3(unevaluatedProperties, `${path}/${key}`, unknownProperties[key]);
    }
  return Default3(schema, path, unknownProperties);
}
function FromImport7(schema, references, path, value) {
  const additional = globalThis.Object.values(schema.$defs);
  const target = schema.$defs[schema.$ref];
  const result = Visit11(target, [...references, ...additional], path, value);
  return Default3(schema, path, result);
}
function FromNot5(schema, references, path, value) {
  return Default3(schema, path, Visit11(schema.not, references, path, value));
}
function FromObject15(schema, references, path, value) {
  if (!IsObject2(value))
    return Default3(schema, path, value);
  const knownKeys = KeyOfPropertyKeys(schema);
  const knownProperties = { ...value };
  for (const key of knownKeys) {
    if (!HasPropertyKey2(knownProperties, key))
      continue;
    if (IsUndefined2(knownProperties[key]) && (!IsUndefined3(schema.properties[key]) || TypeSystemPolicy.IsExactOptionalProperty(knownProperties, key)))
      continue;
    knownProperties[key] = Visit11(schema.properties[key], references, `${path}/${key}`, knownProperties[key]);
  }
  if (!IsSchema(schema.additionalProperties)) {
    return Default3(schema, path, knownProperties);
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const additionalProperties = schema.additionalProperties;
  const unknownProperties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.includes(key)) {
      unknownProperties[key] = Default3(additionalProperties, `${path}/${key}`, unknownProperties[key]);
    }
  return Default3(schema, path, unknownProperties);
}
function FromRecord10(schema, references, path, value) {
  if (!IsObject2(value))
    return Default3(schema, path, value);
  const pattern = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const knownKeys = new RegExp(pattern);
  const knownProperties = { ...value };
  for (const key of Object.getOwnPropertyNames(value))
    if (knownKeys.test(key)) {
      knownProperties[key] = Visit11(schema.patternProperties[pattern], references, `${path}/${key}`, knownProperties[key]);
    }
  if (!IsSchema(schema.additionalProperties)) {
    return Default3(schema, path, knownProperties);
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const additionalProperties = schema.additionalProperties;
  const unknownProperties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.test(key)) {
      unknownProperties[key] = Default3(additionalProperties, `${path}/${key}`, unknownProperties[key]);
    }
  return Default3(schema, path, unknownProperties);
}
function FromRef11(schema, references, path, value) {
  const target = Deref(schema, references);
  return Default3(schema, path, Visit11(target, references, path, value));
}
function FromThis7(schema, references, path, value) {
  const target = Deref(schema, references);
  return Default3(schema, path, Visit11(target, references, path, value));
}
function FromTuple12(schema, references, path, value) {
  return IsArray2(value) && IsArray2(schema.items) ? Default3(schema, path, schema.items.map((schema2, index) => Visit11(schema2, references, `${path}/${index}`, value[index]))) : Default3(schema, path, value);
}
function FromUnion17(schema, references, path, value) {
  for (const subschema of schema.anyOf) {
    if (!Check(subschema, references, value))
      continue;
    const decoded = Visit11(subschema, references, path, value);
    return Default3(schema, path, decoded);
  }
  return Default3(schema, path, value);
}
function Visit11(schema, references, path, value) {
  const references_ = Pushref(schema, references);
  const schema_ = schema;
  switch (schema[Kind]) {
    case "Array":
      return FromArray14(schema_, references_, path, value);
    case "Import":
      return FromImport7(schema_, references_, path, value);
    case "Intersect":
      return FromIntersect15(schema_, references_, path, value);
    case "Not":
      return FromNot5(schema_, references_, path, value);
    case "Object":
      return FromObject15(schema_, references_, path, value);
    case "Record":
      return FromRecord10(schema_, references_, path, value);
    case "Ref":
      return FromRef11(schema_, references_, path, value);
    case "Symbol":
      return Default3(schema_, path, value);
    case "This":
      return FromThis7(schema_, references_, path, value);
    case "Tuple":
      return FromTuple12(schema_, references_, path, value);
    case "Union":
      return FromUnion17(schema_, references_, path, value);
    default:
      return Default3(schema_, path, value);
  }
}
function TransformDecode(schema, references, value) {
  return Visit11(schema, references, "", value);
}

// node_modules/@sinclair/typebox/build/esm/value/transform/encode.mjs
class TransformEncodeCheckError extends TypeBoxError {
  constructor(schema, value, error) {
    super(`The encoded value does not match the expected schema`);
    this.schema = schema;
    this.value = value;
    this.error = error;
  }
}

class TransformEncodeError extends TypeBoxError {
  constructor(schema, path, value, error) {
    super(`${error instanceof Error ? error.message : "Unknown error"}`);
    this.schema = schema;
    this.path = path;
    this.value = value;
    this.error = error;
  }
}
function Default4(schema, path, value) {
  try {
    return IsTransform(schema) ? schema[TransformKind].Encode(value) : value;
  } catch (error) {
    throw new TransformEncodeError(schema, path, value, error);
  }
}
function FromArray15(schema, references, path, value) {
  const defaulted = Default4(schema, path, value);
  return IsArray2(defaulted) ? defaulted.map((value2, index) => Visit12(schema.items, references, `${path}/${index}`, value2)) : defaulted;
}
function FromImport8(schema, references, path, value) {
  const additional = globalThis.Object.values(schema.$defs);
  const target = schema.$defs[schema.$ref];
  const result = Default4(schema, path, value);
  return Visit12(target, [...references, ...additional], path, result);
}
function FromIntersect16(schema, references, path, value) {
  const defaulted = Default4(schema, path, value);
  if (!IsObject2(value) || IsValueType(value))
    return defaulted;
  const knownEntries = KeyOfPropertyEntries(schema);
  const knownKeys = knownEntries.map((entry) => entry[0]);
  const knownProperties = { ...defaulted };
  for (const [knownKey, knownSchema] of knownEntries)
    if (knownKey in knownProperties) {
      knownProperties[knownKey] = Visit12(knownSchema, references, `${path}/${knownKey}`, knownProperties[knownKey]);
    }
  if (!IsTransform(schema.unevaluatedProperties)) {
    return knownProperties;
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const unevaluatedProperties = schema.unevaluatedProperties;
  const properties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.includes(key)) {
      properties[key] = Default4(unevaluatedProperties, `${path}/${key}`, properties[key]);
    }
  return properties;
}
function FromNot6(schema, references, path, value) {
  return Default4(schema.not, path, Default4(schema, path, value));
}
function FromObject16(schema, references, path, value) {
  const defaulted = Default4(schema, path, value);
  if (!IsObject2(defaulted))
    return defaulted;
  const knownKeys = KeyOfPropertyKeys(schema);
  const knownProperties = { ...defaulted };
  for (const key of knownKeys) {
    if (!HasPropertyKey2(knownProperties, key))
      continue;
    if (IsUndefined2(knownProperties[key]) && (!IsUndefined3(schema.properties[key]) || TypeSystemPolicy.IsExactOptionalProperty(knownProperties, key)))
      continue;
    knownProperties[key] = Visit12(schema.properties[key], references, `${path}/${key}`, knownProperties[key]);
  }
  if (!IsSchema(schema.additionalProperties)) {
    return knownProperties;
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const additionalProperties = schema.additionalProperties;
  const properties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.includes(key)) {
      properties[key] = Default4(additionalProperties, `${path}/${key}`, properties[key]);
    }
  return properties;
}
function FromRecord11(schema, references, path, value) {
  const defaulted = Default4(schema, path, value);
  if (!IsObject2(value))
    return defaulted;
  const pattern = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const knownKeys = new RegExp(pattern);
  const knownProperties = { ...defaulted };
  for (const key of Object.getOwnPropertyNames(value))
    if (knownKeys.test(key)) {
      knownProperties[key] = Visit12(schema.patternProperties[pattern], references, `${path}/${key}`, knownProperties[key]);
    }
  if (!IsSchema(schema.additionalProperties)) {
    return knownProperties;
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const additionalProperties = schema.additionalProperties;
  const properties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.test(key)) {
      properties[key] = Default4(additionalProperties, `${path}/${key}`, properties[key]);
    }
  return properties;
}
function FromRef12(schema, references, path, value) {
  const target = Deref(schema, references);
  const resolved = Visit12(target, references, path, value);
  return Default4(schema, path, resolved);
}
function FromThis8(schema, references, path, value) {
  const target = Deref(schema, references);
  const resolved = Visit12(target, references, path, value);
  return Default4(schema, path, resolved);
}
function FromTuple13(schema, references, path, value) {
  const value1 = Default4(schema, path, value);
  return IsArray2(schema.items) ? schema.items.map((schema2, index) => Visit12(schema2, references, `${path}/${index}`, value1[index])) : [];
}
function FromUnion18(schema, references, path, value) {
  for (const subschema of schema.anyOf) {
    if (!Check(subschema, references, value))
      continue;
    const value1 = Visit12(subschema, references, path, value);
    return Default4(schema, path, value1);
  }
  for (const subschema of schema.anyOf) {
    const value1 = Visit12(subschema, references, path, value);
    if (!Check(schema, references, value1))
      continue;
    return Default4(schema, path, value1);
  }
  return Default4(schema, path, value);
}
function Visit12(schema, references, path, value) {
  const references_ = Pushref(schema, references);
  const schema_ = schema;
  switch (schema[Kind]) {
    case "Array":
      return FromArray15(schema_, references_, path, value);
    case "Import":
      return FromImport8(schema_, references_, path, value);
    case "Intersect":
      return FromIntersect16(schema_, references_, path, value);
    case "Not":
      return FromNot6(schema_, references_, path, value);
    case "Object":
      return FromObject16(schema_, references_, path, value);
    case "Record":
      return FromRecord11(schema_, references_, path, value);
    case "Ref":
      return FromRef12(schema_, references_, path, value);
    case "This":
      return FromThis8(schema_, references_, path, value);
    case "Tuple":
      return FromTuple13(schema_, references_, path, value);
    case "Union":
      return FromUnion18(schema_, references_, path, value);
    default:
      return Default4(schema_, path, value);
  }
}
function TransformEncode(schema, references, value) {
  return Visit12(schema, references, "", value);
}

// node_modules/@sinclair/typebox/build/esm/value/transform/has.mjs
function FromArray16(schema, references) {
  return IsTransform(schema) || Visit13(schema.items, references);
}
function FromAsyncIterator7(schema, references) {
  return IsTransform(schema) || Visit13(schema.items, references);
}
function FromConstructor8(schema, references) {
  return IsTransform(schema) || Visit13(schema.returns, references) || schema.parameters.some((schema2) => Visit13(schema2, references));
}
function FromFunction7(schema, references) {
  return IsTransform(schema) || Visit13(schema.returns, references) || schema.parameters.some((schema2) => Visit13(schema2, references));
}
function FromIntersect17(schema, references) {
  return IsTransform(schema) || IsTransform(schema.unevaluatedProperties) || schema.allOf.some((schema2) => Visit13(schema2, references));
}
function FromImport9(schema, references) {
  const additional = globalThis.Object.getOwnPropertyNames(schema.$defs).reduce((result, key) => [...result, schema.$defs[key]], []);
  const target = schema.$defs[schema.$ref];
  return IsTransform(schema) || Visit13(target, [...additional, ...references]);
}
function FromIterator7(schema, references) {
  return IsTransform(schema) || Visit13(schema.items, references);
}
function FromNot7(schema, references) {
  return IsTransform(schema) || Visit13(schema.not, references);
}
function FromObject17(schema, references) {
  return IsTransform(schema) || Object.values(schema.properties).some((schema2) => Visit13(schema2, references)) || IsSchema(schema.additionalProperties) && Visit13(schema.additionalProperties, references);
}
function FromPromise7(schema, references) {
  return IsTransform(schema) || Visit13(schema.item, references);
}
function FromRecord12(schema, references) {
  const pattern = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const property = schema.patternProperties[pattern];
  return IsTransform(schema) || Visit13(property, references) || IsSchema(schema.additionalProperties) && IsTransform(schema.additionalProperties);
}
function FromRef13(schema, references) {
  if (IsTransform(schema))
    return true;
  return Visit13(Deref(schema, references), references);
}
function FromThis9(schema, references) {
  if (IsTransform(schema))
    return true;
  return Visit13(Deref(schema, references), references);
}
function FromTuple14(schema, references) {
  return IsTransform(schema) || !IsUndefined2(schema.items) && schema.items.some((schema2) => Visit13(schema2, references));
}
function FromUnion19(schema, references) {
  return IsTransform(schema) || schema.anyOf.some((schema2) => Visit13(schema2, references));
}
function Visit13(schema, references) {
  const references_ = Pushref(schema, references);
  const schema_ = schema;
  if (schema.$id && visited.has(schema.$id))
    return false;
  if (schema.$id)
    visited.add(schema.$id);
  switch (schema[Kind]) {
    case "Array":
      return FromArray16(schema_, references_);
    case "AsyncIterator":
      return FromAsyncIterator7(schema_, references_);
    case "Constructor":
      return FromConstructor8(schema_, references_);
    case "Function":
      return FromFunction7(schema_, references_);
    case "Import":
      return FromImport9(schema_, references_);
    case "Intersect":
      return FromIntersect17(schema_, references_);
    case "Iterator":
      return FromIterator7(schema_, references_);
    case "Not":
      return FromNot7(schema_, references_);
    case "Object":
      return FromObject17(schema_, references_);
    case "Promise":
      return FromPromise7(schema_, references_);
    case "Record":
      return FromRecord12(schema_, references_);
    case "Ref":
      return FromRef13(schema_, references_);
    case "This":
      return FromThis9(schema_, references_);
    case "Tuple":
      return FromTuple14(schema_, references_);
    case "Union":
      return FromUnion19(schema_, references_);
    default:
      return IsTransform(schema);
  }
}
var visited = new Set;
function HasTransform(schema, references) {
  visited.clear();
  return Visit13(schema, references);
}

// node_modules/@sinclair/typebox/build/esm/value/decode/decode.mjs
function Decode(...args) {
  const [schema, references, value] = args.length === 3 ? [args[0], args[1], args[2]] : [args[0], [], args[1]];
  if (!Check(schema, references, value))
    throw new TransformDecodeCheckError(schema, value, Errors(schema, references, value).First());
  return HasTransform(schema, references) ? TransformDecode(schema, references, value) : value;
}
// node_modules/@sinclair/typebox/build/esm/value/default/default.mjs
function ValueOrDefault(schema, value) {
  const defaultValue = HasPropertyKey2(schema, "default") ? schema.default : undefined;
  const clone = IsFunction2(defaultValue) ? defaultValue() : Clone2(defaultValue);
  return IsUndefined2(value) ? clone : IsObject2(value) && IsObject2(clone) ? Object.assign(clone, value) : value;
}
function HasDefaultProperty(schema) {
  return IsKind(schema) && "default" in schema;
}
function FromArray17(schema, references, value) {
  if (IsArray2(value)) {
    for (let i = 0;i < value.length; i++) {
      value[i] = Visit14(schema.items, references, value[i]);
    }
    return value;
  }
  const defaulted = ValueOrDefault(schema, value);
  if (!IsArray2(defaulted))
    return defaulted;
  for (let i = 0;i < defaulted.length; i++) {
    defaulted[i] = Visit14(schema.items, references, defaulted[i]);
  }
  return defaulted;
}
function FromDate7(schema, references, value) {
  return IsDate2(value) ? value : ValueOrDefault(schema, value);
}
function FromImport10(schema, references, value) {
  const definitions = globalThis.Object.values(schema.$defs);
  const target = schema.$defs[schema.$ref];
  return Visit14(target, [...references, ...definitions], value);
}
function FromIntersect18(schema, references, value) {
  const defaulted = ValueOrDefault(schema, value);
  return schema.allOf.reduce((acc, schema2) => {
    const next = Visit14(schema2, references, defaulted);
    return IsObject2(next) ? { ...acc, ...next } : next;
  }, {});
}
function FromObject18(schema, references, value) {
  const defaulted = ValueOrDefault(schema, value);
  if (!IsObject2(defaulted))
    return defaulted;
  const knownPropertyKeys = Object.getOwnPropertyNames(schema.properties);
  for (const key of knownPropertyKeys) {
    const propertyValue = Visit14(schema.properties[key], references, defaulted[key]);
    if (IsUndefined2(propertyValue))
      continue;
    defaulted[key] = Visit14(schema.properties[key], references, defaulted[key]);
  }
  if (!HasDefaultProperty(schema.additionalProperties))
    return defaulted;
  for (const key of Object.getOwnPropertyNames(defaulted)) {
    if (knownPropertyKeys.includes(key))
      continue;
    defaulted[key] = Visit14(schema.additionalProperties, references, defaulted[key]);
  }
  return defaulted;
}
function FromRecord13(schema, references, value) {
  const defaulted = ValueOrDefault(schema, value);
  if (!IsObject2(defaulted))
    return defaulted;
  const additionalPropertiesSchema = schema.additionalProperties;
  const [propertyKeyPattern, propertySchema] = Object.entries(schema.patternProperties)[0];
  const knownPropertyKey = new RegExp(propertyKeyPattern);
  for (const key of Object.getOwnPropertyNames(defaulted)) {
    if (!(knownPropertyKey.test(key) && HasDefaultProperty(propertySchema)))
      continue;
    defaulted[key] = Visit14(propertySchema, references, defaulted[key]);
  }
  if (!HasDefaultProperty(additionalPropertiesSchema))
    return defaulted;
  for (const key of Object.getOwnPropertyNames(defaulted)) {
    if (knownPropertyKey.test(key))
      continue;
    defaulted[key] = Visit14(additionalPropertiesSchema, references, defaulted[key]);
  }
  return defaulted;
}
function FromRef14(schema, references, value) {
  return Visit14(Deref(schema, references), references, ValueOrDefault(schema, value));
}
function FromThis10(schema, references, value) {
  return Visit14(Deref(schema, references), references, value);
}
function FromTuple15(schema, references, value) {
  const defaulted = ValueOrDefault(schema, value);
  if (!IsArray2(defaulted) || IsUndefined2(schema.items))
    return defaulted;
  const [items, max] = [schema.items, Math.max(schema.items.length, defaulted.length)];
  for (let i = 0;i < max; i++) {
    if (i < items.length)
      defaulted[i] = Visit14(items[i], references, defaulted[i]);
  }
  return defaulted;
}
function FromUnion20(schema, references, value) {
  const defaulted = ValueOrDefault(schema, value);
  for (const inner of schema.anyOf) {
    const result = Visit14(inner, references, Clone2(defaulted));
    if (Check(inner, references, result)) {
      return result;
    }
  }
  return defaulted;
}
function Visit14(schema, references, value) {
  const references_ = Pushref(schema, references);
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Array":
      return FromArray17(schema_, references_, value);
    case "Date":
      return FromDate7(schema_, references_, value);
    case "Import":
      return FromImport10(schema_, references_, value);
    case "Intersect":
      return FromIntersect18(schema_, references_, value);
    case "Object":
      return FromObject18(schema_, references_, value);
    case "Record":
      return FromRecord13(schema_, references_, value);
    case "Ref":
      return FromRef14(schema_, references_, value);
    case "This":
      return FromThis10(schema_, references_, value);
    case "Tuple":
      return FromTuple15(schema_, references_, value);
    case "Union":
      return FromUnion20(schema_, references_, value);
    default:
      return ValueOrDefault(schema_, value);
  }
}
function Default5(...args) {
  return args.length === 3 ? Visit14(args[0], args[1], args[2]) : Visit14(args[0], [], args[1]);
}
// node_modules/@sinclair/typebox/build/esm/value/pointer/pointer.mjs
var exports_pointer = {};
__export(exports_pointer, {
  ValuePointerRootSetError: () => ValuePointerRootSetError,
  ValuePointerRootDeleteError: () => ValuePointerRootDeleteError,
  Set: () => Set4,
  Has: () => Has3,
  Get: () => Get3,
  Format: () => Format,
  Delete: () => Delete3
});
class ValuePointerRootSetError extends TypeBoxError {
  constructor(value, path, update) {
    super("Cannot set root value");
    this.value = value;
    this.path = path;
    this.update = update;
  }
}

class ValuePointerRootDeleteError extends TypeBoxError {
  constructor(value, path) {
    super("Cannot delete root value");
    this.value = value;
    this.path = path;
  }
}
function Escape2(component) {
  return component.indexOf("~") === -1 ? component : component.replace(/~1/g, "/").replace(/~0/g, "~");
}
function* Format(pointer) {
  if (pointer === "")
    return;
  let [start, end] = [0, 0];
  for (let i = 0;i < pointer.length; i++) {
    const char = pointer.charAt(i);
    if (char === "/") {
      if (i === 0) {
        start = i + 1;
      } else {
        end = i;
        yield Escape2(pointer.slice(start, end));
        start = i + 1;
      }
    } else {
      end = i;
    }
  }
  yield Escape2(pointer.slice(start));
}
function Set4(value, pointer, update) {
  if (pointer === "")
    throw new ValuePointerRootSetError(value, pointer, update);
  let [owner, next, key] = [null, value, ""];
  for (const component of Format(pointer)) {
    if (next[component] === undefined)
      next[component] = {};
    owner = next;
    next = next[component];
    key = component;
  }
  owner[key] = update;
}
function Delete3(value, pointer) {
  if (pointer === "")
    throw new ValuePointerRootDeleteError(value, pointer);
  let [owner, next, key] = [null, value, ""];
  for (const component of Format(pointer)) {
    if (next[component] === undefined || next[component] === null)
      return;
    owner = next;
    next = next[component];
    key = component;
  }
  if (Array.isArray(owner)) {
    const index = parseInt(key);
    owner.splice(index, 1);
  } else {
    delete owner[key];
  }
}
function Has3(value, pointer) {
  if (pointer === "")
    return true;
  let [owner, next, key] = [null, value, ""];
  for (const component of Format(pointer)) {
    if (next[component] === undefined)
      return false;
    owner = next;
    next = next[component];
    key = component;
  }
  return Object.getOwnPropertyNames(owner).includes(key);
}
function Get3(value, pointer) {
  if (pointer === "")
    return value;
  let current = value;
  for (const component of Format(pointer)) {
    if (current[component] === undefined)
      return;
    current = current[component];
  }
  return current;
}
// node_modules/@sinclair/typebox/build/esm/value/equal/equal.mjs
function ObjectType3(left, right) {
  if (!IsObject2(right))
    return false;
  const leftKeys = [...Object.keys(left), ...Object.getOwnPropertySymbols(left)];
  const rightKeys = [...Object.keys(right), ...Object.getOwnPropertySymbols(right)];
  if (leftKeys.length !== rightKeys.length)
    return false;
  return leftKeys.every((key) => Equal(left[key], right[key]));
}
function DateType3(left, right) {
  return IsDate2(right) && left.getTime() === right.getTime();
}
function ArrayType3(left, right) {
  if (!IsArray2(right) || left.length !== right.length)
    return false;
  return left.every((value, index) => Equal(value, right[index]));
}
function TypedArrayType(left, right) {
  if (!IsTypedArray(right) || left.length !== right.length || Object.getPrototypeOf(left).constructor.name !== Object.getPrototypeOf(right).constructor.name)
    return false;
  return left.every((value, index) => Equal(value, right[index]));
}
function ValueType(left, right) {
  return left === right;
}
function Equal(left, right) {
  if (IsDate2(left))
    return DateType3(left, right);
  if (IsTypedArray(left))
    return TypedArrayType(left, right);
  if (IsArray2(left))
    return ArrayType3(left, right);
  if (IsObject2(left))
    return ObjectType3(left, right);
  if (IsValueType(left))
    return ValueType(left, right);
  throw new Error("ValueEquals: Unable to compare value");
}

// node_modules/@sinclair/typebox/build/esm/value/delta/delta.mjs
var Insert = Object2({
  type: Literal("insert"),
  path: String2(),
  value: Unknown()
});
var Update = Object2({
  type: Literal("update"),
  path: String2(),
  value: Unknown()
});
var Delete4 = Object2({
  type: Literal("delete"),
  path: String2()
});
var Edit = Union([Insert, Update, Delete4]);

class ValueDiffError extends TypeBoxError {
  constructor(value, message) {
    super(message);
    this.value = value;
  }
}
function CreateUpdate(path, value) {
  return { type: "update", path, value };
}
function CreateInsert(path, value) {
  return { type: "insert", path, value };
}
function CreateDelete(path) {
  return { type: "delete", path };
}
function AssertDiffable(value) {
  if (globalThis.Object.getOwnPropertySymbols(value).length > 0)
    throw new ValueDiffError(value, "Cannot diff objects with symbols");
}
function* ObjectType4(path, current, next) {
  AssertDiffable(current);
  AssertDiffable(next);
  if (!IsStandardObject(next))
    return yield CreateUpdate(path, next);
  const currentKeys = globalThis.Object.getOwnPropertyNames(current);
  const nextKeys = globalThis.Object.getOwnPropertyNames(next);
  for (const key of nextKeys) {
    if (HasPropertyKey2(current, key))
      continue;
    yield CreateInsert(`${path}/${key}`, next[key]);
  }
  for (const key of currentKeys) {
    if (!HasPropertyKey2(next, key))
      continue;
    if (Equal(current, next))
      continue;
    yield* Visit15(`${path}/${key}`, current[key], next[key]);
  }
  for (const key of currentKeys) {
    if (HasPropertyKey2(next, key))
      continue;
    yield CreateDelete(`${path}/${key}`);
  }
}
function* ArrayType4(path, current, next) {
  if (!IsArray2(next))
    return yield CreateUpdate(path, next);
  for (let i = 0;i < Math.min(current.length, next.length); i++) {
    yield* Visit15(`${path}/${i}`, current[i], next[i]);
  }
  for (let i = 0;i < next.length; i++) {
    if (i < current.length)
      continue;
    yield CreateInsert(`${path}/${i}`, next[i]);
  }
  for (let i = current.length - 1;i >= 0; i--) {
    if (i < next.length)
      continue;
    yield CreateDelete(`${path}/${i}`);
  }
}
function* TypedArrayType2(path, current, next) {
  if (!IsTypedArray(next) || current.length !== next.length || globalThis.Object.getPrototypeOf(current).constructor.name !== globalThis.Object.getPrototypeOf(next).constructor.name)
    return yield CreateUpdate(path, next);
  for (let i = 0;i < Math.min(current.length, next.length); i++) {
    yield* Visit15(`${path}/${i}`, current[i], next[i]);
  }
}
function* ValueType2(path, current, next) {
  if (current === next)
    return;
  yield CreateUpdate(path, next);
}
function* Visit15(path, current, next) {
  if (IsStandardObject(current))
    return yield* ObjectType4(path, current, next);
  if (IsArray2(current))
    return yield* ArrayType4(path, current, next);
  if (IsTypedArray(current))
    return yield* TypedArrayType2(path, current, next);
  if (IsValueType(current))
    return yield* ValueType2(path, current, next);
  throw new ValueDiffError(current, "Unable to diff value");
}
function Diff(current, next) {
  return [...Visit15("", current, next)];
}
function IsRootUpdate(edits) {
  return edits.length > 0 && edits[0].path === "" && edits[0].type === "update";
}
function IsIdentity(edits) {
  return edits.length === 0;
}
function Patch(current, edits) {
  if (IsRootUpdate(edits)) {
    return Clone2(edits[0].value);
  }
  if (IsIdentity(edits)) {
    return Clone2(current);
  }
  const clone = Clone2(current);
  for (const edit of edits) {
    switch (edit.type) {
      case "insert": {
        exports_pointer.Set(clone, edit.path, edit.value);
        break;
      }
      case "update": {
        exports_pointer.Set(clone, edit.path, edit.value);
        break;
      }
      case "delete": {
        exports_pointer.Delete(clone, edit.path);
        break;
      }
    }
  }
  return clone;
}
// node_modules/@sinclair/typebox/build/esm/value/encode/encode.mjs
function Encode(...args) {
  const [schema, references, value] = args.length === 3 ? [args[0], args[1], args[2]] : [args[0], [], args[1]];
  const encoded = HasTransform(schema, references) ? TransformEncode(schema, references, value) : value;
  if (!Check(schema, references, encoded))
    throw new TransformEncodeCheckError(schema, encoded, Errors(schema, references, encoded).First());
  return encoded;
}
// node_modules/@sinclair/typebox/build/esm/value/mutate/mutate.mjs
function IsStandardObject2(value) {
  return IsObject2(value) && !IsArray2(value);
}

class ValueMutateError extends TypeBoxError {
  constructor(message) {
    super(message);
  }
}
function ObjectType5(root, path, current, next) {
  if (!IsStandardObject2(current)) {
    exports_pointer.Set(root, path, Clone2(next));
  } else {
    const currentKeys = Object.getOwnPropertyNames(current);
    const nextKeys = Object.getOwnPropertyNames(next);
    for (const currentKey of currentKeys) {
      if (!nextKeys.includes(currentKey)) {
        delete current[currentKey];
      }
    }
    for (const nextKey of nextKeys) {
      if (!currentKeys.includes(nextKey)) {
        current[nextKey] = null;
      }
    }
    for (const nextKey of nextKeys) {
      Visit16(root, `${path}/${nextKey}`, current[nextKey], next[nextKey]);
    }
  }
}
function ArrayType5(root, path, current, next) {
  if (!IsArray2(current)) {
    exports_pointer.Set(root, path, Clone2(next));
  } else {
    for (let index = 0;index < next.length; index++) {
      Visit16(root, `${path}/${index}`, current[index], next[index]);
    }
    current.splice(next.length);
  }
}
function TypedArrayType3(root, path, current, next) {
  if (IsTypedArray(current) && current.length === next.length) {
    for (let i = 0;i < current.length; i++) {
      current[i] = next[i];
    }
  } else {
    exports_pointer.Set(root, path, Clone2(next));
  }
}
function ValueType3(root, path, current, next) {
  if (current === next)
    return;
  exports_pointer.Set(root, path, next);
}
function Visit16(root, path, current, next) {
  if (IsArray2(next))
    return ArrayType5(root, path, current, next);
  if (IsTypedArray(next))
    return TypedArrayType3(root, path, current, next);
  if (IsStandardObject2(next))
    return ObjectType5(root, path, current, next);
  if (IsValueType(next))
    return ValueType3(root, path, current, next);
}
function IsNonMutableValue(value) {
  return IsTypedArray(value) || IsValueType(value);
}
function IsMismatchedValue(current, next) {
  return IsStandardObject2(current) && IsArray2(next) || IsArray2(current) && IsStandardObject2(next);
}
function Mutate(current, next) {
  if (IsNonMutableValue(current) || IsNonMutableValue(next))
    throw new ValueMutateError("Only object and array types can be mutated at the root level");
  if (IsMismatchedValue(current, next))
    throw new ValueMutateError("Cannot assign due type mismatch of assignable values");
  Visit16(current, "", current, next);
}
// node_modules/@sinclair/typebox/build/esm/value/parse/parse.mjs
class ParseError extends TypeBoxError {
  constructor(message) {
    super(message);
  }
}
var ParseRegistry;
(function(ParseRegistry2) {
  const registry = new Map([
    ["Assert", (type, references, value) => {
      Assert(type, references, value);
      return value;
    }],
    ["Cast", (type, references, value) => Cast(type, references, value)],
    ["Clean", (type, references, value) => Clean(type, references, value)],
    ["Clone", (_type, _references, value) => Clone2(value)],
    ["Convert", (type, references, value) => Convert(type, references, value)],
    ["Decode", (type, references, value) => HasTransform(type, references) ? TransformDecode(type, references, value) : value],
    ["Default", (type, references, value) => Default5(type, references, value)],
    ["Encode", (type, references, value) => HasTransform(type, references) ? TransformEncode(type, references, value) : value]
  ]);
  function Delete5(key) {
    registry.delete(key);
  }
  ParseRegistry2.Delete = Delete5;
  function Set5(key, callback) {
    registry.set(key, callback);
  }
  ParseRegistry2.Set = Set5;
  function Get4(key) {
    return registry.get(key);
  }
  ParseRegistry2.Get = Get4;
})(ParseRegistry || (ParseRegistry = {}));
var ParseDefault = [
  "Clone",
  "Clean",
  "Default",
  "Convert",
  "Assert",
  "Decode"
];
function ParseValue(operations, type, references, value) {
  return operations.reduce((value2, operationKey) => {
    const operation = ParseRegistry.Get(operationKey);
    if (IsUndefined2(operation))
      throw new ParseError(`Unable to find Parse operation '${operationKey}'`);
    return operation(type, references, value2);
  }, value);
}
function Parse(...args) {
  const [operations, schema, references, value] = args.length === 4 ? [args[0], args[1], args[2], args[3]] : args.length === 3 ? IsArray2(args[0]) ? [args[0], args[1], [], args[2]] : [ParseDefault, args[0], args[1], args[2]] : args.length === 2 ? [ParseDefault, args[0], [], args[1]] : (() => {
    throw new ParseError("Invalid Arguments");
  })();
  return ParseValue(operations, schema, references, value);
}
// node_modules/@sinclair/typebox/build/esm/value/value/value.mjs
var exports_value2 = {};
__export(exports_value2, {
  ValueErrorIterator: () => ValueErrorIterator,
  Patch: () => Patch,
  Parse: () => Parse,
  Mutate: () => Mutate,
  Hash: () => Hash,
  Errors: () => Errors,
  Equal: () => Equal,
  Encode: () => Encode,
  Edit: () => Edit,
  Diff: () => Diff,
  Default: () => Default5,
  Decode: () => Decode,
  Create: () => Create2,
  Convert: () => Convert,
  Clone: () => Clone2,
  Clean: () => Clean,
  Check: () => Check,
  Cast: () => Cast,
  Assert: () => Assert
});
// tau-bench/retail/data/db.ts
var UserSchema = Type.Object({
  name: Type.Object({
    first_name: Type.String(),
    last_name: Type.String()
  }),
  address: Type.Object({
    address1: Type.String(),
    address2: Type.String(),
    city: Type.String(),
    country: Type.String(),
    state: Type.String(),
    zip: Type.String()
  }),
  email: Type.String(),
  payment_methods: Type.Record(Type.String(), Type.Union([
    Type.Object({
      source: Type.Literal("paypal"),
      id: Type.String()
    }),
    Type.Object({
      source: Type.Literal("credit_card"),
      brand: Type.String(),
      last_four: Type.String(),
      id: Type.String()
    }),
    Type.Object({
      source: Type.Literal("gift_card"),
      balance: Type.Number(),
      id: Type.String()
    })
  ])),
  orders: Type.Array(Type.String())
});
var ProductSchema = Type.Object({
  name: Type.String(),
  product_id: Type.String(),
  variants: Type.Record(Type.String(), Type.Object({
    item_id: Type.String(),
    options: Type.Record(Type.String(), Type.String()),
    available: Type.Boolean(),
    price: Type.Number()
  }))
});
var OrdersSchema = Type.Object({
  order_id: Type.String(),
  user_id: Type.String(),
  address: Type.Object({
    address1: Type.String(),
    address2: Type.String(),
    city: Type.String(),
    country: Type.String(),
    state: Type.String(),
    zip: Type.String()
  }),
  items: Type.Array(Type.Object({
    name: Type.String(),
    product_id: Type.String(),
    item_id: Type.String(),
    price: Type.Number(),
    options: Type.Record(Type.String(), Type.String())
  })),
  fulfillments: Type.Array(Type.Object({
    tracking_id: Type.Array(Type.String()),
    item_ids: Type.Array(Type.String())
  })),
  status: Type.String(),
  payment_history: Type.Array(Type.Object({
    transaction_type: Type.String(),
    amount: Type.Number(),
    payment_method_id: Type.String()
  }))
});
var DBSchema = Type.Object({
  users: Type.Record(Type.String(), UserSchema),
  orders: Type.Record(Type.String(), OrdersSchema),
  products: Type.Record(Type.String(), ProductSchema)
});
async function buildRetailDB() {
  const [{ default: users }, { default: orders }, { default: products }] = await Promise.all([
    Promise.resolve().then(() => __toESM(require_users(), 1)),
    Promise.resolve().then(() => __toESM(require_orders(), 1)),
    Promise.resolve().then(() => __toESM(require_products(), 1))
  ]);
  return exports_value2.Decode(DBSchema, { users, orders, products });
}

// tau-bench/retail/tau-bench-retail.ts
var __dirname = "/Users/tabaza/Desktop/opencx/eval-mock-servers/tau-bench/retail";
var rootFastify = import_fastify.default().withTypeProvider();
async function policy() {
  return fs.readFile(`${__dirname}/data/policy.md`, "utf-8");
}
async function serve({ port = 5552 }) {
  await rootFastify.register(import_swagger.default, {
    exposeHeadRoutes: false,
    openapi: {
      openapi: "3.1.0",
      info: {
        title: "Tau-Bench Retail API",
        description: "API for Tau-Bench Retail, providing access to products, categories, brands, orders, and customers",
        version: "0.1.0"
      },
      components: {
        securitySchemes: {
          Bearer: {
            type: "http",
            scheme: "bearer"
          }
        }
      },
      security: [{ Bearer: [] }],
      servers: [
        {
          url: `http://localhost:${port}`,
          description: "Local development server"
        }
      ]
    }
  });
  await rootFastify.register(import_swagger_ui.default, {
    routePrefix: "/docs"
  });
  rootFastify.register(async (fastify) => {
    fastify.register(import_bearer_auth.default, {
      keys: new Set(["authorizatiion"]),
      auth(token) {
        return token === "xx";
      }
    });
    privateRoutes(fastify);
  });
  rootFastify.listen({ port }, (err) => {
    if (err) {
      console.error(err);
      process.exit(1);
    }
    console.log(`Tau-Bench Retail Server docs at http://localhost:${port}/docs`);
  });
  await rootFastify.ready();
  return rootFastify;
}
var dbsByTenantId = new Map;
async function getDB(tenantId) {
  if (!dbsByTenantId.has(tenantId)) {
    dbsByTenantId.set(tenantId, await buildRetailDB());
  }
  return dbsByTenantId.get(tenantId);
}
function getTenantId(request) {
  const tenantId = request.headers["x-tenant-id"];
  if (!tenantId) {
    throw new Error("Missing x-tenant-id header");
  }
  return tenantId;
}
function privateRoutes(fastify) {
  fastify.post("/cancel-pending-order", {
    schema: {
      description: "Cancel a pending order. If the order is already processed or delivered, it cannot be cancelled. The agent needs to explain the cancellation detail and ask for explicit user confirmation (yes/no) to proceed. If the user confirms, the order status will be changed to 'cancelled' and the payment will be refunded. The refund will be added to the user's gift card balance immediately if the payment was made using a gift card, otherwise the refund would take 5-7 business days to process. The function returns the order details after the cancellation.",
      body: Type.Object({
        order_id: Type.String({
          description: "The order id, such as '#W0000000'. Be careful there is a '#' symbol at the beginning of the order id."
        }),
        reason: Type.Union([
          Type.Literal("no longer needed"),
          Type.Literal("ordered by mistake")
        ], {
          description: "The reason for cancellation, which should be either 'no longer needed' or 'ordered by mistake'."
        })
      }),
      response: {
        200: OrdersSchema,
        400: Type.Object({
          error: Type.String()
        }),
        404: Type.Object({
          error: Type.String()
        })
      }
    }
  }, async (request, reply) => {
    const tenantId = getTenantId(request);
    const db = await getDB(tenantId);
    const { order_id, reason } = request.body;
    const order = db.orders[order_id];
    if (!order) {
      return reply.status(404).send({ error: "Order not found" });
    }
    if (order.status !== "pending") {
      return reply.status(400).send({ error: "Non-pending order cannot be cancelled" });
    }
    const refunds = order.payment_history.map((payment) => ({
      transaction_type: "refund",
      amount: payment.amount,
      payment_method_id: payment.payment_method_id
    }));
    for (const payment of order.payment_history) {
      if (payment.payment_method_id.includes("gift_card")) {
        const paymentMethod = db.users[order.user_id].payment_methods[payment.payment_method_id];
        if (paymentMethod.source === "gift_card") {
          paymentMethod.balance = Number((paymentMethod.balance + payment.amount).toFixed(2));
        }
      }
    }
    order.status = "cancelled";
    order.payment_history.push(...refunds);
    return reply.send(order);
  });
  fastify.post("/exchange-delivered-order-items", {
    schema: {
      description: "Exchange items in a delivered order to new items of the same product type. For a delivered order, return or exchange can be only done once by the agent. The agent needs to explain the exchange detail and ask for explicit user confirmation (yes/no) to proceed.",
      body: Type.Object({
        order_id: Type.String({
          description: "The order id, such as '#W0000000'. Be careful there is a '#' symbol at the beginning of the order id."
        }),
        item_ids: Type.Array(Type.String(), {
          description: "The item ids to be exchanged, each such as '1008292230'. There could be duplicate items in the list."
        }),
        new_item_ids: Type.Array(Type.String(), {
          description: "The item ids to be exchanged for, each such as '1008292230'. There could be duplicate items in the list. Each new item id should match the item id in the same position and be of the same product."
        }),
        payment_method_id: Type.String({
          description: "The payment method id to pay or receive refund for the item price difference, such as 'gift_card_0000000' or 'credit_card_0000000'. These can be looked up from the user or order details."
        })
      }),
      response: {
        200: OrdersSchema,
        400: Type.Object({
          error: Type.String()
        }),
        404: Type.Object({
          error: Type.String()
        })
      }
    }
  }, async (request, reply) => {
    const tenantId = getTenantId(request);
    const db = await getDB(tenantId);
    const { order_id, item_ids, new_item_ids, payment_method_id } = request.body;
    const order = db.orders[order_id];
    if (!order) {
      return reply.status(404).send({ error: "Order not found" });
    }
    if (order.status !== "delivered") {
      return reply.status(400).send({ error: "Non-delivered order cannot be exchanged" });
    }
    const allItemIds = order.items.map((item) => item.item_id);
    for (const itemId of item_ids) {
      if (item_ids.filter((id) => id === itemId).length > allItemIds.filter((id) => id === itemId).length) {
        return reply.status(400).send({ error: `Item ${itemId} not found` });
      }
    }
    if (item_ids.length !== new_item_ids.length) {
      return reply.status(400).send({ error: "The number of items to be exchanged should match" });
    }
    let diffPrice = 0;
    for (const [itemId, newItemId] of item_ids.map((id, i) => [
      id,
      new_item_ids[i]
    ])) {
      const item = order.items.find((item2) => item2.item_id === itemId);
      const productId = item.product_id;
      const variant = db.products[productId].variants[newItemId];
      if (!variant || !variant.available) {
        return reply.status(400).send({ error: `New item ${newItemId} not found or available` });
      }
      const oldPrice = item.price;
      const newPrice = variant.price;
      diffPrice += newPrice - oldPrice;
    }
    diffPrice = Number(diffPrice.toFixed(2));
    const paymentMethod = db.users[order.user_id].payment_methods[payment_method_id];
    if (!paymentMethod) {
      return reply.status(400).send({ error: "Payment method not found" });
    }
    if (paymentMethod.source === "gift_card" && paymentMethod.balance < diffPrice) {
      return reply.status(400).send({
        error: "Insufficient gift card balance to pay for the price difference"
      });
    }
    order.status = "exchange requested";
    return reply.send(order);
  });
  fastify.get("/find-user-id-by-email", {
    schema: {
      description: "Find user id by email. If the user is not found, the function will return an error message.",
      querystring: Type.Object({
        email: Type.String({
          description: "The email of the user, such as 'something@example.com'."
        })
      }),
      response: {
        200: Type.Object({
          user_id: Type.String()
        }),
        404: Type.Object({
          error: Type.String()
        })
      }
    }
  }, async (request, reply) => {
    const tenantId = getTenantId(request);
    const db = await getDB(tenantId);
    const { email } = request.query;
    const user = Object.entries(db.users).find(([_, profile]) => profile.email.toLowerCase() === email.toLowerCase());
    if (!user) {
      return reply.status(404).send({ error: "User not found" });
    }
    return reply.send({ user_id: user[0] });
  });
  fastify.get("/find-user-id-by-name-zip", {
    schema: {
      description: "Find user id by first name, last name, and zip code. If the user is not found, the function will return an error message. By default, find user id by email, and only call this function if the user is not found by email or cannot remember email.",
      querystring: Type.Object({
        first_name: Type.String({
          description: "The first name of the customer, such as 'John'."
        }),
        last_name: Type.String({
          description: "The last name of the customer, such as 'Doe'."
        }),
        zip: Type.String({
          description: "The zip code of the customer, such as '12345'."
        })
      }),
      response: {
        200: Type.Object({
          user_id: Type.String()
        }),
        404: Type.Object({
          error: Type.String()
        })
      }
    }
  }, async (request, reply) => {
    const tenantId = getTenantId(request);
    const db = await getDB(tenantId);
    const { first_name, last_name, zip } = request.query;
    const user = Object.entries(db.users).find(([_, profile]) => profile.name.first_name.toLowerCase() === first_name.toLowerCase() && profile.name.last_name.toLowerCase() === last_name.toLowerCase() && profile.address.zip === zip);
    if (!user) {
      return reply.status(404).send({ error: "User not found" });
    }
    return reply.send({ user_id: user[0] });
  });
  fastify.get("/get-order-details", {
    schema: {
      description: "Get the status and details of an order.",
      querystring: Type.Object({
        order_id: Type.String({
          description: "The order id, such as '#W0000000'. Be careful there is a '#' symbol at the beginning of the order id."
        })
      }),
      response: {
        200: OrdersSchema,
        404: Type.Object({
          error: Type.String()
        })
      }
    }
  }, async (request, reply) => {
    const tenantId = getTenantId(request);
    const db = await getDB(tenantId);
    const { order_id } = request.query;
    const order = db.orders[order_id];
    if (!order) {
      return reply.status(404).send({ error: "Order not found" });
    }
    return reply.send(order);
  });
  fastify.get("/get-product-details", {
    schema: {
      description: "Get the inventory details of a product.",
      querystring: Type.Object({
        product_id: Type.String({
          description: "The product id, such as '6086499569'. Be careful the product id is different from the item id."
        })
      }),
      response: {
        200: Type.Object({
          name: Type.String(),
          product_id: Type.String(),
          variants: Type.Record(Type.String(), Type.Object({
            item_id: Type.String(),
            options: Type.Record(Type.String(), Type.String()),
            available: Type.Boolean(),
            price: Type.Number()
          }))
        }),
        404: Type.Object({
          error: Type.String()
        })
      }
    }
  }, async (request, reply) => {
    const tenantId = getTenantId(request);
    const db = await getDB(tenantId);
    const { product_id } = request.query;
    const product = db.products[product_id];
    if (!product) {
      return reply.status(404).send({ error: "Product not found" });
    }
    return reply.send(product);
  });
  fastify.get("/get-user-details", {
    schema: {
      description: "Get the details of a user, including their orders.",
      querystring: Type.Object({
        user_id: Type.String({
          description: "The user id, such as 'sara_doe_496'."
        })
      }),
      response: {
        200: Type.Object({
          name: Type.Object({
            first_name: Type.String(),
            last_name: Type.String()
          }),
          address: Type.Object({
            address1: Type.String(),
            address2: Type.String(),
            city: Type.String(),
            country: Type.String(),
            state: Type.String(),
            zip: Type.String()
          }),
          email: Type.String(),
          payment_methods: Type.Record(Type.String(), Type.Union([
            Type.Object({
              source: Type.Literal("paypal"),
              id: Type.String()
            }),
            Type.Object({
              source: Type.Literal("credit_card"),
              brand: Type.String(),
              last_four: Type.String(),
              id: Type.String()
            }),
            Type.Object({
              source: Type.Literal("gift_card"),
              balance: Type.Number(),
              id: Type.String()
            })
          ])),
          orders: Type.Array(Type.String())
        }),
        404: Type.Object({
          error: Type.String()
        })
      }
    }
  }, async (request, reply) => {
    const tenantId = getTenantId(request);
    const db = await getDB(tenantId);
    const { user_id } = request.query;
    const user = db.users[user_id];
    if (!user) {
      return reply.status(404).send({ error: "User not found" });
    }
    return reply.send(user);
  });
  fastify.get("/list-all-product-types", {
    schema: {
      description: "List the name and product id of all product types. Each product type has a variety of different items with unique item ids and options. There are only 50 product types in the store.",
      response: {
        200: Type.Record(Type.String(), Type.String())
      }
    }
  }, async (request, reply) => {
    const tenantId = getTenantId(request);
    const db = await getDB(tenantId);
    const productDict = {};
    for (const [productId, product] of Object.entries(db.products)) {
      productDict[product.name] = productId;
    }
    const sortedDict = Object.fromEntries(Object.entries(productDict).sort(([a], [b]) => a.localeCompare(b)));
    return reply.send(sortedDict);
  });
  fastify.post("/modify-pending-order-address", {
    schema: {
      description: "Modify the shipping address of a pending order. The agent needs to explain the modification detail and ask for explicit user confirmation (yes/no) to proceed.",
      body: Type.Object({
        order_id: Type.String({
          description: "The order id, such as '#W0000000'. Be careful there is a '#' symbol at the beginning of the order id."
        }),
        address1: Type.String({
          description: "The first line of the address, such as '123 Main St'."
        }),
        address2: Type.String({
          description: "The second line of the address, such as 'Apt 1' or ''."
        }),
        city: Type.String({
          description: "The city, such as 'San Francisco'."
        }),
        state: Type.String({
          description: "The state, such as 'CA'."
        }),
        country: Type.String({
          description: "The country, such as 'USA'."
        }),
        zip: Type.String({
          description: "The zip code, such as '12345'."
        })
      }),
      response: {
        200: OrdersSchema,
        400: Type.Object({
          error: Type.String()
        }),
        404: Type.Object({
          error: Type.String()
        })
      }
    }
  }, async (request, reply) => {
    const tenantId = getTenantId(request);
    const db = await getDB(tenantId);
    const { order_id, address1, address2, city, state, country, zip } = request.body;
    const order = db.orders[order_id];
    if (!order) {
      return reply.status(404).send({ error: "Order not found" });
    }
    if (order.status !== "pending") {
      return reply.status(400).send({ error: "Non-pending order cannot be modified" });
    }
    order.address = {
      address1,
      address2,
      city,
      state,
      country,
      zip
    };
    return reply.send(order);
  });
  fastify.post("/modify-pending-order-items", {
    schema: {
      description: "Modify items in a pending order to new items of the same product type. For a pending order, this function can only be called once. The agent needs to explain the exchange detail and ask for explicit user confirmation (yes/no) to proceed.",
      body: Type.Object({
        order_id: Type.String({
          description: "The order id, such as '#W0000000'. Be careful there is a '#' symbol at the beginning of the order id."
        }),
        item_ids: Type.Array(Type.String(), {
          description: "The item ids to be modified, each such as '1008292230'. There could be duplicate items in the list."
        }),
        new_item_ids: Type.Array(Type.String(), {
          description: "The item ids to be modified for, each such as '1008292230'. There could be duplicate items in the list. Each new item id should match the item id in the same position and be of the same product."
        }),
        payment_method_id: Type.String({
          description: "The payment method id to pay or receive refund for the item price difference, such as 'gift_card_0000000' or 'credit_card_0000000'. These can be looked up from the user or order details."
        })
      }),
      response: {
        200: OrdersSchema,
        400: Type.Object({
          error: Type.String()
        }),
        404: Type.Object({
          error: Type.String()
        })
      }
    }
  }, async (request, reply) => {
    const tenantId = getTenantId(request);
    const db = await getDB(tenantId);
    const { order_id, item_ids, new_item_ids, payment_method_id } = request.body;
    const order = db.orders[order_id];
    if (!order) {
      return reply.status(404).send({ error: "Order not found" });
    }
    if (order.status !== "pending") {
      return reply.status(400).send({ error: "Non-pending order cannot be modified" });
    }
    const allItemIds = order.items.map((item) => item.item_id);
    for (const itemId of item_ids) {
      if (item_ids.filter((id) => id === itemId).length > allItemIds.filter((id) => id === itemId).length) {
        return reply.status(400).send({ error: `Item ${itemId} not found` });
      }
    }
    if (item_ids.length !== new_item_ids.length) {
      return reply.status(400).send({ error: "The number of items to be exchanged should match" });
    }
    let diffPrice = 0;
    for (const [itemId, newItemId] of item_ids.map((id, i) => [
      id,
      new_item_ids[i]
    ])) {
      const item = order.items.find((item2) => item2.item_id === itemId);
      const productId = item.product_id;
      const variant = db.products[productId].variants[newItemId];
      if (!variant || !variant.available) {
        return reply.status(400).send({ error: `New item ${newItemId} not found or available` });
      }
      const oldPrice = item.price;
      const newPrice = variant.price;
      diffPrice += newPrice - oldPrice;
    }
    const paymentMethod = db.users[order.user_id].payment_methods[payment_method_id];
    if (!paymentMethod) {
      return reply.status(400).send({ error: "Payment method not found" });
    }
    if (paymentMethod.source === "gift_card" && paymentMethod.balance < diffPrice) {
      return reply.status(400).send({
        error: "Insufficient gift card balance to pay for the new item"
      });
    }
    order.payment_history.push({
      transaction_type: diffPrice > 0 ? "payment" : "refund",
      amount: Math.abs(diffPrice),
      payment_method_id
    });
    if (paymentMethod.source === "gift_card") {
      paymentMethod.balance = Number((paymentMethod.balance - diffPrice).toFixed(2));
    }
    for (const [itemId, newItemId] of item_ids.map((id, i) => [
      id,
      new_item_ids[i]
    ])) {
      const item = order.items.find((item2) => item2.item_id === itemId);
      const productId = item.product_id;
      const variant = db.products[productId].variants[newItemId];
      item.item_id = newItemId;
      item.price = variant.price;
      item.options = variant.options;
    }
    order.status = "pending (item modified)";
    return reply.send(order);
  });
  fastify.post("/modify-pending-order-payment", {
    schema: {
      description: "Modify the payment method of a pending order. The agent needs to explain the modification detail and ask for explicit user confirmation (yes/no) to proceed.",
      body: Type.Object({
        order_id: Type.String({
          description: "The order id, such as '#W0000000'. Be careful there is a '#' symbol at the beginning of the order id."
        }),
        payment_method_id: Type.String({
          description: "The payment method id to pay or receive refund for the item price difference, such as 'gift_card_0000000' or 'credit_card_0000000'. These can be looked up from the user or order details."
        })
      }),
      response: {
        200: OrdersSchema,
        400: Type.Object({
          error: Type.String()
        }),
        404: Type.Object({
          error: Type.String()
        })
      }
    }
  }, async (request, reply) => {
    const tenantId = getTenantId(request);
    const db = await getDB(tenantId);
    const { order_id, payment_method_id } = request.body;
    const order = db.orders[order_id];
    if (!order) {
      return reply.status(404).send({ error: "Order not found" });
    }
    if (order.status !== "pending") {
      return reply.status(400).send({ error: "Non-pending order cannot be modified" });
    }
    const paymentMethod = db.users[order.user_id].payment_methods[payment_method_id];
    if (!paymentMethod) {
      return reply.status(400).send({ error: "Payment method not found" });
    }
    if (order.payment_history.length > 1 || order.payment_history[0].transaction_type !== "payment") {
      return reply.status(400).send({
        error: "There should be exactly one payment for a pending order"
      });
    }
    if (order.payment_history[0].payment_method_id === payment_method_id) {
      return reply.status(400).send({
        error: "The new payment method should be different from the current one"
      });
    }
    const amount = order.payment_history[0].amount;
    if (paymentMethod.source === "gift_card" && paymentMethod.balance < amount) {
      return reply.status(400).send({
        error: "Insufficient gift card balance to pay for the order"
      });
    }
    order.payment_history.push({
      transaction_type: "payment",
      amount,
      payment_method_id
    }, {
      transaction_type: "refund",
      amount,
      payment_method_id: order.payment_history[0].payment_method_id
    });
    if (paymentMethod.source === "gift_card") {
      paymentMethod.balance = Number((paymentMethod.balance - amount).toFixed(2));
    }
    const oldPaymentMethodId = order.payment_history[0].payment_method_id;
    if (oldPaymentMethodId.includes("gift_card")) {
      const oldPaymentMethod = db.users[order.user_id].payment_methods[oldPaymentMethodId];
      if (oldPaymentMethod.source === "gift_card") {
        oldPaymentMethod.balance = Number((oldPaymentMethod.balance + amount).toFixed(2));
      }
    }
    return reply.send(order);
  });
  fastify.post("/modify-user-address", {
    schema: {
      description: "Modify the default address of a user. The agent needs to explain the modification detail and ask for explicit user confirmation (yes/no) to proceed.",
      body: Type.Object({
        user_id: Type.String({
          description: "The user id, such as 'sara_doe_496'."
        }),
        address1: Type.String({
          description: "The first line of the address, such as '123 Main St'."
        }),
        address2: Type.String({
          description: "The second line of the address, such as 'Apt 1' or ''."
        }),
        city: Type.String({
          description: "The city, such as 'San Francisco'."
        }),
        state: Type.String({
          description: "The state, such as 'CA'."
        }),
        country: Type.String({
          description: "The country, such as 'USA'."
        }),
        zip: Type.String({
          description: "The zip code, such as '12345'."
        })
      }),
      response: {
        200: Type.Object({
          name: Type.Object({
            first_name: Type.String(),
            last_name: Type.String()
          }),
          address: Type.Object({
            address1: Type.String(),
            address2: Type.String(),
            city: Type.String(),
            country: Type.String(),
            state: Type.String(),
            zip: Type.String()
          }),
          email: Type.String(),
          payment_methods: Type.Record(Type.String(), Type.Union([
            Type.Object({
              source: Type.Literal("paypal"),
              id: Type.String()
            }),
            Type.Object({
              source: Type.Literal("credit_card"),
              brand: Type.String(),
              last_four: Type.String(),
              id: Type.String()
            }),
            Type.Object({
              source: Type.Literal("gift_card"),
              balance: Type.Number(),
              id: Type.String()
            })
          ])),
          orders: Type.Array(Type.String())
        }),
        404: Type.Object({
          error: Type.String()
        })
      }
    }
  }, async (request, reply) => {
    const tenantId = getTenantId(request);
    const db = await getDB(tenantId);
    const { user_id, address1, address2, city, state, country, zip } = request.body;
    const user = db.users[user_id];
    if (!user) {
      return reply.status(404).send({ error: "User not found" });
    }
    user.address = {
      address1,
      address2,
      city,
      state,
      country,
      zip
    };
    return reply.send(user);
  });
  fastify.post("/return-delivered-order-items", {
    schema: {
      description: "Return some items of a delivered order. The order status will be changed to 'return requested'. The agent needs to explain the return detail and ask for explicit user confirmation (yes/no) to proceed. The user will receive follow-up email for how and where to return the item.",
      body: Type.Object({
        order_id: Type.String({
          description: "The order id, such as '#W0000000'. Be careful there is a '#' symbol at the beginning of the order id."
        }),
        item_ids: Type.Array(Type.String(), {
          description: "The item ids to be returned, each such as '1008292230'. There could be duplicate items in the list."
        }),
        payment_method_id: Type.String({
          description: "The payment method id to pay or receive refund for the item price difference, such as 'gift_card_0000000' or 'credit_card_0000000'. These can be looked up from the user or order details."
        })
      }),
      response: {
        200: OrdersSchema,
        400: Type.Object({
          error: Type.String()
        }),
        404: Type.Object({
          error: Type.String()
        })
      }
    }
  }, async (request, reply) => {
    const tenantId = getTenantId(request);
    const db = await getDB(tenantId);
    const { order_id, item_ids, payment_method_id } = request.body;
    const order = db.orders[order_id];
    if (!order) {
      return reply.status(404).send({ error: "Order not found" });
    }
    if (order.status !== "delivered") {
      return reply.status(400).send({ error: "Non-delivered order cannot be returned" });
    }
    const paymentMethod = db.users[order.user_id].payment_methods[payment_method_id];
    if (!paymentMethod) {
      return reply.status(400).send({ error: "Payment method not found" });
    }
    if (!payment_method_id.includes("gift_card") && payment_method_id !== order.payment_history[0].payment_method_id) {
      return reply.status(400).send({
        error: "Payment method should be either the original payment method or a gift card"
      });
    }
    const allItemIds = order.items.map((item) => item.item_id);
    for (const itemId of item_ids) {
      if (item_ids.filter((id) => id === itemId).length > allItemIds.filter((id) => id === itemId).length) {
        return reply.status(400).send({ error: `Item ${itemId} not found` });
      }
    }
    order.status = "return requested";
    return reply.send(order);
  });
}
export {
  exports_tau_bench_retail as tauBenchRetail
};
